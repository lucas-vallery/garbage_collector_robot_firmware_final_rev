
garbage_collector_robot_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a7e4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017fc  0801a8a8  0801a8a8  0002a8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c0a4  0801c0a4  000304ac  2**0
                  CONTENTS
  4 .ARM          00000000  0801c0a4  0801c0a4  000304ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801c0a4  0801c0a4  000304ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c0a4  0801c0a4  0002c0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c0a8  0801c0a8  0002c0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004ac  20000000  0801c0ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f8c  200004ac  0801c558  000304ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20005438  0801c558  00035438  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000304ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e354  00000000  00000000  000304d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060cd  00000000  00000000  0005e828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f8  00000000  00000000  000648f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f50  00000000  00000000  00066af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1db  00000000  00000000  00068a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b7d9  00000000  00000000  00086c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3f6f  00000000  00000000  000b23f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009414  00000000  00000000  001563b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004ac 	.word	0x200004ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801a88c 	.word	0x0801a88c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004b0 	.word	0x200004b0
 8000104:	0801a88c 	.word	0x0801a88c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fd47 	bl	8001ee4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fc97 	bl	8001d94 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd39 	bl	8001ee4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd2f 	bl	8001ee4 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fcbf 	bl	8001e18 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fcb5 	bl	8001e18 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 faad 	bl	8000a24 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fa39 	bl	800094c <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fa9f 	bl	8000a24 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fa95 	bl	8000a24 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fa45 	bl	8000998 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fa3b 	bl	8000998 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_d2uiz>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2200      	movs	r2, #0
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <__aeabi_d2uiz+0x38>)
 8000536:	0004      	movs	r4, r0
 8000538:	000d      	movs	r5, r1
 800053a:	f7ff ffb5 	bl	80004a8 <__aeabi_dcmpge>
 800053e:	2800      	cmp	r0, #0
 8000540:	d104      	bne.n	800054c <__aeabi_d2uiz+0x1c>
 8000542:	0020      	movs	r0, r4
 8000544:	0029      	movs	r1, r5
 8000546:	f002 fb4d 	bl	8002be4 <__aeabi_d2iz>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <__aeabi_d2uiz+0x38>)
 800054e:	2200      	movs	r2, #0
 8000550:	0020      	movs	r0, r4
 8000552:	0029      	movs	r1, r5
 8000554:	f001 ff96 	bl	8002484 <__aeabi_dsub>
 8000558:	f002 fb44 	bl	8002be4 <__aeabi_d2iz>
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	061b      	lsls	r3, r3, #24
 8000560:	469c      	mov	ip, r3
 8000562:	4460      	add	r0, ip
 8000564:	e7f1      	b.n	800054a <__aeabi_d2uiz+0x1a>
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	41e00000 	.word	0x41e00000

0800056c <__aeabi_d2lz>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	0005      	movs	r5, r0
 8000570:	000c      	movs	r4, r1
 8000572:	2200      	movs	r2, #0
 8000574:	2300      	movs	r3, #0
 8000576:	0028      	movs	r0, r5
 8000578:	0021      	movs	r1, r4
 800057a:	f7ff ff77 	bl	800046c <__aeabi_dcmplt>
 800057e:	2800      	cmp	r0, #0
 8000580:	d108      	bne.n	8000594 <__aeabi_d2lz+0x28>
 8000582:	0028      	movs	r0, r5
 8000584:	0021      	movs	r1, r4
 8000586:	f000 f80f 	bl	80005a8 <__aeabi_d2ulz>
 800058a:	0002      	movs	r2, r0
 800058c:	000b      	movs	r3, r1
 800058e:	0010      	movs	r0, r2
 8000590:	0019      	movs	r1, r3
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	061b      	lsls	r3, r3, #24
 8000598:	18e1      	adds	r1, r4, r3
 800059a:	0028      	movs	r0, r5
 800059c:	f000 f804 	bl	80005a8 <__aeabi_d2ulz>
 80005a0:	2300      	movs	r3, #0
 80005a2:	4242      	negs	r2, r0
 80005a4:	418b      	sbcs	r3, r1
 80005a6:	e7f2      	b.n	800058e <__aeabi_d2lz+0x22>

080005a8 <__aeabi_d2ulz>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	2200      	movs	r2, #0
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <__aeabi_d2ulz+0x34>)
 80005ae:	000d      	movs	r5, r1
 80005b0:	0004      	movs	r4, r0
 80005b2:	f001 fcfb 	bl	8001fac <__aeabi_dmul>
 80005b6:	f7ff ffbb 	bl	8000530 <__aeabi_d2uiz>
 80005ba:	0006      	movs	r6, r0
 80005bc:	f002 fb78 	bl	8002cb0 <__aeabi_ui2d>
 80005c0:	2200      	movs	r2, #0
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <__aeabi_d2ulz+0x38>)
 80005c4:	f001 fcf2 	bl	8001fac <__aeabi_dmul>
 80005c8:	0002      	movs	r2, r0
 80005ca:	000b      	movs	r3, r1
 80005cc:	0020      	movs	r0, r4
 80005ce:	0029      	movs	r1, r5
 80005d0:	f001 ff58 	bl	8002484 <__aeabi_dsub>
 80005d4:	f7ff ffac 	bl	8000530 <__aeabi_d2uiz>
 80005d8:	0031      	movs	r1, r6
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	3df00000 	.word	0x3df00000
 80005e0:	41f00000 	.word	0x41f00000

080005e4 <__aeabi_l2d>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	0006      	movs	r6, r0
 80005e8:	0008      	movs	r0, r1
 80005ea:	f002 fb31 	bl	8002c50 <__aeabi_i2d>
 80005ee:	2200      	movs	r2, #0
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <__aeabi_l2d+0x28>)
 80005f2:	f001 fcdb 	bl	8001fac <__aeabi_dmul>
 80005f6:	000d      	movs	r5, r1
 80005f8:	0004      	movs	r4, r0
 80005fa:	0030      	movs	r0, r6
 80005fc:	f002 fb58 	bl	8002cb0 <__aeabi_ui2d>
 8000600:	002b      	movs	r3, r5
 8000602:	0022      	movs	r2, r4
 8000604:	f000 fd94 	bl	8001130 <__aeabi_dadd>
 8000608:	bd70      	pop	{r4, r5, r6, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	41f00000 	.word	0x41f00000

08000610 <__aeabi_fadd>:
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	46c6      	mov	lr, r8
 8000614:	0243      	lsls	r3, r0, #9
 8000616:	0a5b      	lsrs	r3, r3, #9
 8000618:	024e      	lsls	r6, r1, #9
 800061a:	0045      	lsls	r5, r0, #1
 800061c:	004f      	lsls	r7, r1, #1
 800061e:	00da      	lsls	r2, r3, #3
 8000620:	0fc4      	lsrs	r4, r0, #31
 8000622:	469c      	mov	ip, r3
 8000624:	0a70      	lsrs	r0, r6, #9
 8000626:	4690      	mov	r8, r2
 8000628:	b500      	push	{lr}
 800062a:	0e2d      	lsrs	r5, r5, #24
 800062c:	0e3f      	lsrs	r7, r7, #24
 800062e:	0fc9      	lsrs	r1, r1, #31
 8000630:	09b6      	lsrs	r6, r6, #6
 8000632:	428c      	cmp	r4, r1
 8000634:	d04b      	beq.n	80006ce <__aeabi_fadd+0xbe>
 8000636:	1bea      	subs	r2, r5, r7
 8000638:	2a00      	cmp	r2, #0
 800063a:	dd36      	ble.n	80006aa <__aeabi_fadd+0x9a>
 800063c:	2f00      	cmp	r7, #0
 800063e:	d061      	beq.n	8000704 <__aeabi_fadd+0xf4>
 8000640:	2dff      	cmp	r5, #255	; 0xff
 8000642:	d100      	bne.n	8000646 <__aeabi_fadd+0x36>
 8000644:	e0ad      	b.n	80007a2 <__aeabi_fadd+0x192>
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	04db      	lsls	r3, r3, #19
 800064a:	431e      	orrs	r6, r3
 800064c:	2a1b      	cmp	r2, #27
 800064e:	dc00      	bgt.n	8000652 <__aeabi_fadd+0x42>
 8000650:	e0d3      	b.n	80007fa <__aeabi_fadd+0x1ea>
 8000652:	2001      	movs	r0, #1
 8000654:	4643      	mov	r3, r8
 8000656:	1a18      	subs	r0, r3, r0
 8000658:	0143      	lsls	r3, r0, #5
 800065a:	d400      	bmi.n	800065e <__aeabi_fadd+0x4e>
 800065c:	e08c      	b.n	8000778 <__aeabi_fadd+0x168>
 800065e:	0180      	lsls	r0, r0, #6
 8000660:	0987      	lsrs	r7, r0, #6
 8000662:	0038      	movs	r0, r7
 8000664:	f002 fc1a 	bl	8002e9c <__clzsi2>
 8000668:	3805      	subs	r0, #5
 800066a:	4087      	lsls	r7, r0
 800066c:	4285      	cmp	r5, r0
 800066e:	dc00      	bgt.n	8000672 <__aeabi_fadd+0x62>
 8000670:	e0b6      	b.n	80007e0 <__aeabi_fadd+0x1d0>
 8000672:	1a2d      	subs	r5, r5, r0
 8000674:	48b3      	ldr	r0, [pc, #716]	; (8000944 <__aeabi_fadd+0x334>)
 8000676:	4038      	ands	r0, r7
 8000678:	0743      	lsls	r3, r0, #29
 800067a:	d004      	beq.n	8000686 <__aeabi_fadd+0x76>
 800067c:	230f      	movs	r3, #15
 800067e:	4003      	ands	r3, r0
 8000680:	2b04      	cmp	r3, #4
 8000682:	d000      	beq.n	8000686 <__aeabi_fadd+0x76>
 8000684:	3004      	adds	r0, #4
 8000686:	0143      	lsls	r3, r0, #5
 8000688:	d400      	bmi.n	800068c <__aeabi_fadd+0x7c>
 800068a:	e078      	b.n	800077e <__aeabi_fadd+0x16e>
 800068c:	1c6a      	adds	r2, r5, #1
 800068e:	2dfe      	cmp	r5, #254	; 0xfe
 8000690:	d065      	beq.n	800075e <__aeabi_fadd+0x14e>
 8000692:	0180      	lsls	r0, r0, #6
 8000694:	0a43      	lsrs	r3, r0, #9
 8000696:	469c      	mov	ip, r3
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	4663      	mov	r3, ip
 800069c:	05d0      	lsls	r0, r2, #23
 800069e:	4318      	orrs	r0, r3
 80006a0:	07e4      	lsls	r4, r4, #31
 80006a2:	4320      	orrs	r0, r4
 80006a4:	bc80      	pop	{r7}
 80006a6:	46b8      	mov	r8, r7
 80006a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006aa:	2a00      	cmp	r2, #0
 80006ac:	d035      	beq.n	800071a <__aeabi_fadd+0x10a>
 80006ae:	1b7a      	subs	r2, r7, r5
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d000      	beq.n	80006b6 <__aeabi_fadd+0xa6>
 80006b4:	e0af      	b.n	8000816 <__aeabi_fadd+0x206>
 80006b6:	4643      	mov	r3, r8
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0xae>
 80006bc:	e0a7      	b.n	800080e <__aeabi_fadd+0x1fe>
 80006be:	1e53      	subs	r3, r2, #1
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0xb6>
 80006c4:	e12f      	b.n	8000926 <__aeabi_fadd+0x316>
 80006c6:	2aff      	cmp	r2, #255	; 0xff
 80006c8:	d069      	beq.n	800079e <__aeabi_fadd+0x18e>
 80006ca:	001a      	movs	r2, r3
 80006cc:	e0aa      	b.n	8000824 <__aeabi_fadd+0x214>
 80006ce:	1be9      	subs	r1, r5, r7
 80006d0:	2900      	cmp	r1, #0
 80006d2:	dd70      	ble.n	80007b6 <__aeabi_fadd+0x1a6>
 80006d4:	2f00      	cmp	r7, #0
 80006d6:	d037      	beq.n	8000748 <__aeabi_fadd+0x138>
 80006d8:	2dff      	cmp	r5, #255	; 0xff
 80006da:	d062      	beq.n	80007a2 <__aeabi_fadd+0x192>
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	04db      	lsls	r3, r3, #19
 80006e0:	431e      	orrs	r6, r3
 80006e2:	291b      	cmp	r1, #27
 80006e4:	dc00      	bgt.n	80006e8 <__aeabi_fadd+0xd8>
 80006e6:	e0b0      	b.n	800084a <__aeabi_fadd+0x23a>
 80006e8:	2001      	movs	r0, #1
 80006ea:	4440      	add	r0, r8
 80006ec:	0143      	lsls	r3, r0, #5
 80006ee:	d543      	bpl.n	8000778 <__aeabi_fadd+0x168>
 80006f0:	3501      	adds	r5, #1
 80006f2:	2dff      	cmp	r5, #255	; 0xff
 80006f4:	d033      	beq.n	800075e <__aeabi_fadd+0x14e>
 80006f6:	2301      	movs	r3, #1
 80006f8:	4a93      	ldr	r2, [pc, #588]	; (8000948 <__aeabi_fadd+0x338>)
 80006fa:	4003      	ands	r3, r0
 80006fc:	0840      	lsrs	r0, r0, #1
 80006fe:	4010      	ands	r0, r2
 8000700:	4318      	orrs	r0, r3
 8000702:	e7b9      	b.n	8000678 <__aeabi_fadd+0x68>
 8000704:	2e00      	cmp	r6, #0
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0xfa>
 8000708:	e083      	b.n	8000812 <__aeabi_fadd+0x202>
 800070a:	1e51      	subs	r1, r2, #1
 800070c:	2a01      	cmp	r2, #1
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x102>
 8000710:	e0d8      	b.n	80008c4 <__aeabi_fadd+0x2b4>
 8000712:	2aff      	cmp	r2, #255	; 0xff
 8000714:	d045      	beq.n	80007a2 <__aeabi_fadd+0x192>
 8000716:	000a      	movs	r2, r1
 8000718:	e798      	b.n	800064c <__aeabi_fadd+0x3c>
 800071a:	27fe      	movs	r7, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4217      	tst	r7, r2
 8000720:	d000      	beq.n	8000724 <__aeabi_fadd+0x114>
 8000722:	e086      	b.n	8000832 <__aeabi_fadd+0x222>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x11a>
 8000728:	e0b7      	b.n	800089a <__aeabi_fadd+0x28a>
 800072a:	4643      	mov	r3, r8
 800072c:	2b00      	cmp	r3, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0x122>
 8000730:	e0f3      	b.n	800091a <__aeabi_fadd+0x30a>
 8000732:	2200      	movs	r2, #0
 8000734:	2e00      	cmp	r6, #0
 8000736:	d0b0      	beq.n	800069a <__aeabi_fadd+0x8a>
 8000738:	1b98      	subs	r0, r3, r6
 800073a:	0143      	lsls	r3, r0, #5
 800073c:	d400      	bmi.n	8000740 <__aeabi_fadd+0x130>
 800073e:	e0fa      	b.n	8000936 <__aeabi_fadd+0x326>
 8000740:	4643      	mov	r3, r8
 8000742:	000c      	movs	r4, r1
 8000744:	1af0      	subs	r0, r6, r3
 8000746:	e797      	b.n	8000678 <__aeabi_fadd+0x68>
 8000748:	2e00      	cmp	r6, #0
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x13e>
 800074c:	e0c8      	b.n	80008e0 <__aeabi_fadd+0x2d0>
 800074e:	1e4a      	subs	r2, r1, #1
 8000750:	2901      	cmp	r1, #1
 8000752:	d100      	bne.n	8000756 <__aeabi_fadd+0x146>
 8000754:	e0ae      	b.n	80008b4 <__aeabi_fadd+0x2a4>
 8000756:	29ff      	cmp	r1, #255	; 0xff
 8000758:	d023      	beq.n	80007a2 <__aeabi_fadd+0x192>
 800075a:	0011      	movs	r1, r2
 800075c:	e7c1      	b.n	80006e2 <__aeabi_fadd+0xd2>
 800075e:	2300      	movs	r3, #0
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	469c      	mov	ip, r3
 8000764:	e799      	b.n	800069a <__aeabi_fadd+0x8a>
 8000766:	21fe      	movs	r1, #254	; 0xfe
 8000768:	1c6a      	adds	r2, r5, #1
 800076a:	4211      	tst	r1, r2
 800076c:	d077      	beq.n	800085e <__aeabi_fadd+0x24e>
 800076e:	2aff      	cmp	r2, #255	; 0xff
 8000770:	d0f5      	beq.n	800075e <__aeabi_fadd+0x14e>
 8000772:	0015      	movs	r5, r2
 8000774:	4446      	add	r6, r8
 8000776:	0870      	lsrs	r0, r6, #1
 8000778:	0743      	lsls	r3, r0, #29
 800077a:	d000      	beq.n	800077e <__aeabi_fadd+0x16e>
 800077c:	e77e      	b.n	800067c <__aeabi_fadd+0x6c>
 800077e:	08c3      	lsrs	r3, r0, #3
 8000780:	2dff      	cmp	r5, #255	; 0xff
 8000782:	d00e      	beq.n	80007a2 <__aeabi_fadd+0x192>
 8000784:	025b      	lsls	r3, r3, #9
 8000786:	0a5b      	lsrs	r3, r3, #9
 8000788:	469c      	mov	ip, r3
 800078a:	b2ea      	uxtb	r2, r5
 800078c:	e785      	b.n	800069a <__aeabi_fadd+0x8a>
 800078e:	2e00      	cmp	r6, #0
 8000790:	d007      	beq.n	80007a2 <__aeabi_fadd+0x192>
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	03d2      	lsls	r2, r2, #15
 8000796:	4213      	tst	r3, r2
 8000798:	d003      	beq.n	80007a2 <__aeabi_fadd+0x192>
 800079a:	4210      	tst	r0, r2
 800079c:	d101      	bne.n	80007a2 <__aeabi_fadd+0x192>
 800079e:	000c      	movs	r4, r1
 80007a0:	0003      	movs	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0db      	beq.n	800075e <__aeabi_fadd+0x14e>
 80007a6:	2080      	movs	r0, #128	; 0x80
 80007a8:	03c0      	lsls	r0, r0, #15
 80007aa:	4318      	orrs	r0, r3
 80007ac:	0240      	lsls	r0, r0, #9
 80007ae:	0a43      	lsrs	r3, r0, #9
 80007b0:	469c      	mov	ip, r3
 80007b2:	22ff      	movs	r2, #255	; 0xff
 80007b4:	e771      	b.n	800069a <__aeabi_fadd+0x8a>
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d0d5      	beq.n	8000766 <__aeabi_fadd+0x156>
 80007ba:	1b7a      	subs	r2, r7, r5
 80007bc:	2d00      	cmp	r5, #0
 80007be:	d160      	bne.n	8000882 <__aeabi_fadd+0x272>
 80007c0:	4643      	mov	r3, r8
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d024      	beq.n	8000810 <__aeabi_fadd+0x200>
 80007c6:	1e53      	subs	r3, r2, #1
 80007c8:	2a01      	cmp	r2, #1
 80007ca:	d073      	beq.n	80008b4 <__aeabi_fadd+0x2a4>
 80007cc:	2aff      	cmp	r2, #255	; 0xff
 80007ce:	d0e7      	beq.n	80007a0 <__aeabi_fadd+0x190>
 80007d0:	001a      	movs	r2, r3
 80007d2:	2a1b      	cmp	r2, #27
 80007d4:	dc00      	bgt.n	80007d8 <__aeabi_fadd+0x1c8>
 80007d6:	e085      	b.n	80008e4 <__aeabi_fadd+0x2d4>
 80007d8:	2001      	movs	r0, #1
 80007da:	003d      	movs	r5, r7
 80007dc:	1980      	adds	r0, r0, r6
 80007de:	e785      	b.n	80006ec <__aeabi_fadd+0xdc>
 80007e0:	2320      	movs	r3, #32
 80007e2:	003a      	movs	r2, r7
 80007e4:	1b45      	subs	r5, r0, r5
 80007e6:	0038      	movs	r0, r7
 80007e8:	3501      	adds	r5, #1
 80007ea:	40ea      	lsrs	r2, r5
 80007ec:	1b5d      	subs	r5, r3, r5
 80007ee:	40a8      	lsls	r0, r5
 80007f0:	1e43      	subs	r3, r0, #1
 80007f2:	4198      	sbcs	r0, r3
 80007f4:	2500      	movs	r5, #0
 80007f6:	4310      	orrs	r0, r2
 80007f8:	e73e      	b.n	8000678 <__aeabi_fadd+0x68>
 80007fa:	2320      	movs	r3, #32
 80007fc:	0030      	movs	r0, r6
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	0031      	movs	r1, r6
 8000802:	4098      	lsls	r0, r3
 8000804:	40d1      	lsrs	r1, r2
 8000806:	1e43      	subs	r3, r0, #1
 8000808:	4198      	sbcs	r0, r3
 800080a:	4308      	orrs	r0, r1
 800080c:	e722      	b.n	8000654 <__aeabi_fadd+0x44>
 800080e:	000c      	movs	r4, r1
 8000810:	0003      	movs	r3, r0
 8000812:	0015      	movs	r5, r2
 8000814:	e7b4      	b.n	8000780 <__aeabi_fadd+0x170>
 8000816:	2fff      	cmp	r7, #255	; 0xff
 8000818:	d0c1      	beq.n	800079e <__aeabi_fadd+0x18e>
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	4640      	mov	r0, r8
 800081e:	04db      	lsls	r3, r3, #19
 8000820:	4318      	orrs	r0, r3
 8000822:	4680      	mov	r8, r0
 8000824:	2a1b      	cmp	r2, #27
 8000826:	dd51      	ble.n	80008cc <__aeabi_fadd+0x2bc>
 8000828:	2001      	movs	r0, #1
 800082a:	000c      	movs	r4, r1
 800082c:	003d      	movs	r5, r7
 800082e:	1a30      	subs	r0, r6, r0
 8000830:	e712      	b.n	8000658 <__aeabi_fadd+0x48>
 8000832:	4643      	mov	r3, r8
 8000834:	1b9f      	subs	r7, r3, r6
 8000836:	017b      	lsls	r3, r7, #5
 8000838:	d42b      	bmi.n	8000892 <__aeabi_fadd+0x282>
 800083a:	2f00      	cmp	r7, #0
 800083c:	d000      	beq.n	8000840 <__aeabi_fadd+0x230>
 800083e:	e710      	b.n	8000662 <__aeabi_fadd+0x52>
 8000840:	2300      	movs	r3, #0
 8000842:	2400      	movs	r4, #0
 8000844:	2200      	movs	r2, #0
 8000846:	469c      	mov	ip, r3
 8000848:	e727      	b.n	800069a <__aeabi_fadd+0x8a>
 800084a:	2320      	movs	r3, #32
 800084c:	0032      	movs	r2, r6
 800084e:	0030      	movs	r0, r6
 8000850:	40ca      	lsrs	r2, r1
 8000852:	1a59      	subs	r1, r3, r1
 8000854:	4088      	lsls	r0, r1
 8000856:	1e43      	subs	r3, r0, #1
 8000858:	4198      	sbcs	r0, r3
 800085a:	4310      	orrs	r0, r2
 800085c:	e745      	b.n	80006ea <__aeabi_fadd+0xda>
 800085e:	2d00      	cmp	r5, #0
 8000860:	d14a      	bne.n	80008f8 <__aeabi_fadd+0x2e8>
 8000862:	4643      	mov	r3, r8
 8000864:	2b00      	cmp	r3, #0
 8000866:	d063      	beq.n	8000930 <__aeabi_fadd+0x320>
 8000868:	2200      	movs	r2, #0
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x260>
 800086e:	e714      	b.n	800069a <__aeabi_fadd+0x8a>
 8000870:	0030      	movs	r0, r6
 8000872:	4440      	add	r0, r8
 8000874:	0143      	lsls	r3, r0, #5
 8000876:	d400      	bmi.n	800087a <__aeabi_fadd+0x26a>
 8000878:	e77e      	b.n	8000778 <__aeabi_fadd+0x168>
 800087a:	4b32      	ldr	r3, [pc, #200]	; (8000944 <__aeabi_fadd+0x334>)
 800087c:	3501      	adds	r5, #1
 800087e:	4018      	ands	r0, r3
 8000880:	e77a      	b.n	8000778 <__aeabi_fadd+0x168>
 8000882:	2fff      	cmp	r7, #255	; 0xff
 8000884:	d08c      	beq.n	80007a0 <__aeabi_fadd+0x190>
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	4641      	mov	r1, r8
 800088a:	04db      	lsls	r3, r3, #19
 800088c:	4319      	orrs	r1, r3
 800088e:	4688      	mov	r8, r1
 8000890:	e79f      	b.n	80007d2 <__aeabi_fadd+0x1c2>
 8000892:	4643      	mov	r3, r8
 8000894:	000c      	movs	r4, r1
 8000896:	1af7      	subs	r7, r6, r3
 8000898:	e6e3      	b.n	8000662 <__aeabi_fadd+0x52>
 800089a:	4642      	mov	r2, r8
 800089c:	2a00      	cmp	r2, #0
 800089e:	d000      	beq.n	80008a2 <__aeabi_fadd+0x292>
 80008a0:	e775      	b.n	800078e <__aeabi_fadd+0x17e>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	d000      	beq.n	80008a8 <__aeabi_fadd+0x298>
 80008a6:	e77a      	b.n	800079e <__aeabi_fadd+0x18e>
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	03db      	lsls	r3, r3, #15
 80008ac:	2400      	movs	r4, #0
 80008ae:	469c      	mov	ip, r3
 80008b0:	22ff      	movs	r2, #255	; 0xff
 80008b2:	e6f2      	b.n	800069a <__aeabi_fadd+0x8a>
 80008b4:	0030      	movs	r0, r6
 80008b6:	4440      	add	r0, r8
 80008b8:	2501      	movs	r5, #1
 80008ba:	0143      	lsls	r3, r0, #5
 80008bc:	d400      	bmi.n	80008c0 <__aeabi_fadd+0x2b0>
 80008be:	e75b      	b.n	8000778 <__aeabi_fadd+0x168>
 80008c0:	2502      	movs	r5, #2
 80008c2:	e718      	b.n	80006f6 <__aeabi_fadd+0xe6>
 80008c4:	4643      	mov	r3, r8
 80008c6:	2501      	movs	r5, #1
 80008c8:	1b98      	subs	r0, r3, r6
 80008ca:	e6c5      	b.n	8000658 <__aeabi_fadd+0x48>
 80008cc:	2320      	movs	r3, #32
 80008ce:	4644      	mov	r4, r8
 80008d0:	4640      	mov	r0, r8
 80008d2:	40d4      	lsrs	r4, r2
 80008d4:	1a9a      	subs	r2, r3, r2
 80008d6:	4090      	lsls	r0, r2
 80008d8:	1e43      	subs	r3, r0, #1
 80008da:	4198      	sbcs	r0, r3
 80008dc:	4320      	orrs	r0, r4
 80008de:	e7a4      	b.n	800082a <__aeabi_fadd+0x21a>
 80008e0:	000d      	movs	r5, r1
 80008e2:	e74d      	b.n	8000780 <__aeabi_fadd+0x170>
 80008e4:	2320      	movs	r3, #32
 80008e6:	4641      	mov	r1, r8
 80008e8:	4640      	mov	r0, r8
 80008ea:	40d1      	lsrs	r1, r2
 80008ec:	1a9a      	subs	r2, r3, r2
 80008ee:	4090      	lsls	r0, r2
 80008f0:	1e43      	subs	r3, r0, #1
 80008f2:	4198      	sbcs	r0, r3
 80008f4:	4308      	orrs	r0, r1
 80008f6:	e770      	b.n	80007da <__aeabi_fadd+0x1ca>
 80008f8:	4642      	mov	r2, r8
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x2f0>
 80008fe:	e74f      	b.n	80007a0 <__aeabi_fadd+0x190>
 8000900:	2e00      	cmp	r6, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x2f6>
 8000904:	e74d      	b.n	80007a2 <__aeabi_fadd+0x192>
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	03d2      	lsls	r2, r2, #15
 800090a:	4213      	tst	r3, r2
 800090c:	d100      	bne.n	8000910 <__aeabi_fadd+0x300>
 800090e:	e748      	b.n	80007a2 <__aeabi_fadd+0x192>
 8000910:	4210      	tst	r0, r2
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x306>
 8000914:	e745      	b.n	80007a2 <__aeabi_fadd+0x192>
 8000916:	0003      	movs	r3, r0
 8000918:	e743      	b.n	80007a2 <__aeabi_fadd+0x192>
 800091a:	2e00      	cmp	r6, #0
 800091c:	d090      	beq.n	8000840 <__aeabi_fadd+0x230>
 800091e:	000c      	movs	r4, r1
 8000920:	4684      	mov	ip, r0
 8000922:	2200      	movs	r2, #0
 8000924:	e6b9      	b.n	800069a <__aeabi_fadd+0x8a>
 8000926:	4643      	mov	r3, r8
 8000928:	000c      	movs	r4, r1
 800092a:	1af0      	subs	r0, r6, r3
 800092c:	3501      	adds	r5, #1
 800092e:	e693      	b.n	8000658 <__aeabi_fadd+0x48>
 8000930:	4684      	mov	ip, r0
 8000932:	2200      	movs	r2, #0
 8000934:	e6b1      	b.n	800069a <__aeabi_fadd+0x8a>
 8000936:	2800      	cmp	r0, #0
 8000938:	d000      	beq.n	800093c <__aeabi_fadd+0x32c>
 800093a:	e71d      	b.n	8000778 <__aeabi_fadd+0x168>
 800093c:	2300      	movs	r3, #0
 800093e:	2400      	movs	r4, #0
 8000940:	469c      	mov	ip, r3
 8000942:	e6aa      	b.n	800069a <__aeabi_fadd+0x8a>
 8000944:	fbffffff 	.word	0xfbffffff
 8000948:	7dffffff 	.word	0x7dffffff

0800094c <__eqsf2>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	0042      	lsls	r2, r0, #1
 8000950:	0245      	lsls	r5, r0, #9
 8000952:	024e      	lsls	r6, r1, #9
 8000954:	004c      	lsls	r4, r1, #1
 8000956:	0fc3      	lsrs	r3, r0, #31
 8000958:	0a6d      	lsrs	r5, r5, #9
 800095a:	2001      	movs	r0, #1
 800095c:	0e12      	lsrs	r2, r2, #24
 800095e:	0a76      	lsrs	r6, r6, #9
 8000960:	0e24      	lsrs	r4, r4, #24
 8000962:	0fc9      	lsrs	r1, r1, #31
 8000964:	2aff      	cmp	r2, #255	; 0xff
 8000966:	d006      	beq.n	8000976 <__eqsf2+0x2a>
 8000968:	2cff      	cmp	r4, #255	; 0xff
 800096a:	d003      	beq.n	8000974 <__eqsf2+0x28>
 800096c:	42a2      	cmp	r2, r4
 800096e:	d101      	bne.n	8000974 <__eqsf2+0x28>
 8000970:	42b5      	cmp	r5, r6
 8000972:	d006      	beq.n	8000982 <__eqsf2+0x36>
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	2d00      	cmp	r5, #0
 8000978:	d1fc      	bne.n	8000974 <__eqsf2+0x28>
 800097a:	2cff      	cmp	r4, #255	; 0xff
 800097c:	d1fa      	bne.n	8000974 <__eqsf2+0x28>
 800097e:	2e00      	cmp	r6, #0
 8000980:	d1f8      	bne.n	8000974 <__eqsf2+0x28>
 8000982:	428b      	cmp	r3, r1
 8000984:	d006      	beq.n	8000994 <__eqsf2+0x48>
 8000986:	2001      	movs	r0, #1
 8000988:	2a00      	cmp	r2, #0
 800098a:	d1f3      	bne.n	8000974 <__eqsf2+0x28>
 800098c:	0028      	movs	r0, r5
 800098e:	1e43      	subs	r3, r0, #1
 8000990:	4198      	sbcs	r0, r3
 8000992:	e7ef      	b.n	8000974 <__eqsf2+0x28>
 8000994:	2000      	movs	r0, #0
 8000996:	e7ed      	b.n	8000974 <__eqsf2+0x28>

08000998 <__gesf2>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	0042      	lsls	r2, r0, #1
 800099c:	0245      	lsls	r5, r0, #9
 800099e:	024e      	lsls	r6, r1, #9
 80009a0:	004c      	lsls	r4, r1, #1
 80009a2:	0fc3      	lsrs	r3, r0, #31
 80009a4:	0a6d      	lsrs	r5, r5, #9
 80009a6:	0e12      	lsrs	r2, r2, #24
 80009a8:	0a76      	lsrs	r6, r6, #9
 80009aa:	0e24      	lsrs	r4, r4, #24
 80009ac:	0fc8      	lsrs	r0, r1, #31
 80009ae:	2aff      	cmp	r2, #255	; 0xff
 80009b0:	d01b      	beq.n	80009ea <__gesf2+0x52>
 80009b2:	2cff      	cmp	r4, #255	; 0xff
 80009b4:	d00e      	beq.n	80009d4 <__gesf2+0x3c>
 80009b6:	2a00      	cmp	r2, #0
 80009b8:	d11b      	bne.n	80009f2 <__gesf2+0x5a>
 80009ba:	2c00      	cmp	r4, #0
 80009bc:	d101      	bne.n	80009c2 <__gesf2+0x2a>
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d01c      	beq.n	80009fc <__gesf2+0x64>
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d00c      	beq.n	80009e0 <__gesf2+0x48>
 80009c6:	4283      	cmp	r3, r0
 80009c8:	d01c      	beq.n	8000a04 <__gesf2+0x6c>
 80009ca:	2102      	movs	r1, #2
 80009cc:	1e58      	subs	r0, r3, #1
 80009ce:	4008      	ands	r0, r1
 80009d0:	3801      	subs	r0, #1
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d122      	bne.n	8000a1e <__gesf2+0x86>
 80009d8:	2a00      	cmp	r2, #0
 80009da:	d1f4      	bne.n	80009c6 <__gesf2+0x2e>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d1f2      	bne.n	80009c6 <__gesf2+0x2e>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d1f6      	bne.n	80009d2 <__gesf2+0x3a>
 80009e4:	2001      	movs	r0, #1
 80009e6:	4240      	negs	r0, r0
 80009e8:	e7f3      	b.n	80009d2 <__gesf2+0x3a>
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	d117      	bne.n	8000a1e <__gesf2+0x86>
 80009ee:	2cff      	cmp	r4, #255	; 0xff
 80009f0:	d0f0      	beq.n	80009d4 <__gesf2+0x3c>
 80009f2:	2c00      	cmp	r4, #0
 80009f4:	d1e7      	bne.n	80009c6 <__gesf2+0x2e>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d1e5      	bne.n	80009c6 <__gesf2+0x2e>
 80009fa:	e7e6      	b.n	80009ca <__gesf2+0x32>
 80009fc:	2000      	movs	r0, #0
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d0e7      	beq.n	80009d2 <__gesf2+0x3a>
 8000a02:	e7e2      	b.n	80009ca <__gesf2+0x32>
 8000a04:	42a2      	cmp	r2, r4
 8000a06:	dc05      	bgt.n	8000a14 <__gesf2+0x7c>
 8000a08:	dbea      	blt.n	80009e0 <__gesf2+0x48>
 8000a0a:	42b5      	cmp	r5, r6
 8000a0c:	d802      	bhi.n	8000a14 <__gesf2+0x7c>
 8000a0e:	d3e7      	bcc.n	80009e0 <__gesf2+0x48>
 8000a10:	2000      	movs	r0, #0
 8000a12:	e7de      	b.n	80009d2 <__gesf2+0x3a>
 8000a14:	4243      	negs	r3, r0
 8000a16:	4158      	adcs	r0, r3
 8000a18:	0040      	lsls	r0, r0, #1
 8000a1a:	3801      	subs	r0, #1
 8000a1c:	e7d9      	b.n	80009d2 <__gesf2+0x3a>
 8000a1e:	2002      	movs	r0, #2
 8000a20:	4240      	negs	r0, r0
 8000a22:	e7d6      	b.n	80009d2 <__gesf2+0x3a>

08000a24 <__lesf2>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	0042      	lsls	r2, r0, #1
 8000a28:	0245      	lsls	r5, r0, #9
 8000a2a:	024e      	lsls	r6, r1, #9
 8000a2c:	004c      	lsls	r4, r1, #1
 8000a2e:	0fc3      	lsrs	r3, r0, #31
 8000a30:	0a6d      	lsrs	r5, r5, #9
 8000a32:	0e12      	lsrs	r2, r2, #24
 8000a34:	0a76      	lsrs	r6, r6, #9
 8000a36:	0e24      	lsrs	r4, r4, #24
 8000a38:	0fc8      	lsrs	r0, r1, #31
 8000a3a:	2aff      	cmp	r2, #255	; 0xff
 8000a3c:	d00b      	beq.n	8000a56 <__lesf2+0x32>
 8000a3e:	2cff      	cmp	r4, #255	; 0xff
 8000a40:	d00d      	beq.n	8000a5e <__lesf2+0x3a>
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	d11f      	bne.n	8000a86 <__lesf2+0x62>
 8000a46:	2c00      	cmp	r4, #0
 8000a48:	d116      	bne.n	8000a78 <__lesf2+0x54>
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d114      	bne.n	8000a78 <__lesf2+0x54>
 8000a4e:	2000      	movs	r0, #0
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d010      	beq.n	8000a76 <__lesf2+0x52>
 8000a54:	e009      	b.n	8000a6a <__lesf2+0x46>
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d10c      	bne.n	8000a74 <__lesf2+0x50>
 8000a5a:	2cff      	cmp	r4, #255	; 0xff
 8000a5c:	d113      	bne.n	8000a86 <__lesf2+0x62>
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	d108      	bne.n	8000a74 <__lesf2+0x50>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d008      	beq.n	8000a78 <__lesf2+0x54>
 8000a66:	4283      	cmp	r3, r0
 8000a68:	d012      	beq.n	8000a90 <__lesf2+0x6c>
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	1e58      	subs	r0, r3, #1
 8000a6e:	4008      	ands	r0, r1
 8000a70:	3801      	subs	r0, #1
 8000a72:	e000      	b.n	8000a76 <__lesf2+0x52>
 8000a74:	2002      	movs	r0, #2
 8000a76:	bd70      	pop	{r4, r5, r6, pc}
 8000a78:	2d00      	cmp	r5, #0
 8000a7a:	d1f4      	bne.n	8000a66 <__lesf2+0x42>
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d1fa      	bne.n	8000a76 <__lesf2+0x52>
 8000a80:	2001      	movs	r0, #1
 8000a82:	4240      	negs	r0, r0
 8000a84:	e7f7      	b.n	8000a76 <__lesf2+0x52>
 8000a86:	2c00      	cmp	r4, #0
 8000a88:	d1ed      	bne.n	8000a66 <__lesf2+0x42>
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d1eb      	bne.n	8000a66 <__lesf2+0x42>
 8000a8e:	e7ec      	b.n	8000a6a <__lesf2+0x46>
 8000a90:	42a2      	cmp	r2, r4
 8000a92:	dc05      	bgt.n	8000aa0 <__lesf2+0x7c>
 8000a94:	dbf2      	blt.n	8000a7c <__lesf2+0x58>
 8000a96:	42b5      	cmp	r5, r6
 8000a98:	d802      	bhi.n	8000aa0 <__lesf2+0x7c>
 8000a9a:	d3ef      	bcc.n	8000a7c <__lesf2+0x58>
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	e7ea      	b.n	8000a76 <__lesf2+0x52>
 8000aa0:	4243      	negs	r3, r0
 8000aa2:	4158      	adcs	r0, r3
 8000aa4:	0040      	lsls	r0, r0, #1
 8000aa6:	3801      	subs	r0, #1
 8000aa8:	e7e5      	b.n	8000a76 <__lesf2+0x52>
 8000aaa:	46c0      	nop			; (mov r8, r8)

08000aac <__aeabi_fmul>:
 8000aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aae:	464f      	mov	r7, r9
 8000ab0:	4646      	mov	r6, r8
 8000ab2:	46d6      	mov	lr, sl
 8000ab4:	0244      	lsls	r4, r0, #9
 8000ab6:	0045      	lsls	r5, r0, #1
 8000ab8:	b5c0      	push	{r6, r7, lr}
 8000aba:	0a64      	lsrs	r4, r4, #9
 8000abc:	1c0f      	adds	r7, r1, #0
 8000abe:	0e2d      	lsrs	r5, r5, #24
 8000ac0:	0fc6      	lsrs	r6, r0, #31
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fmul+0x1c>
 8000ac6:	e08d      	b.n	8000be4 <__aeabi_fmul+0x138>
 8000ac8:	2dff      	cmp	r5, #255	; 0xff
 8000aca:	d100      	bne.n	8000ace <__aeabi_fmul+0x22>
 8000acc:	e092      	b.n	8000bf4 <__aeabi_fmul+0x148>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2080      	movs	r0, #128	; 0x80
 8000ad2:	4699      	mov	r9, r3
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	00e4      	lsls	r4, r4, #3
 8000ad8:	04c0      	lsls	r0, r0, #19
 8000ada:	4304      	orrs	r4, r0
 8000adc:	3d7f      	subs	r5, #127	; 0x7f
 8000ade:	0278      	lsls	r0, r7, #9
 8000ae0:	0a43      	lsrs	r3, r0, #9
 8000ae2:	4698      	mov	r8, r3
 8000ae4:	007b      	lsls	r3, r7, #1
 8000ae6:	0e1b      	lsrs	r3, r3, #24
 8000ae8:	0fff      	lsrs	r7, r7, #31
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d100      	bne.n	8000af0 <__aeabi_fmul+0x44>
 8000aee:	e070      	b.n	8000bd2 <__aeabi_fmul+0x126>
 8000af0:	2bff      	cmp	r3, #255	; 0xff
 8000af2:	d100      	bne.n	8000af6 <__aeabi_fmul+0x4a>
 8000af4:	e086      	b.n	8000c04 <__aeabi_fmul+0x158>
 8000af6:	4642      	mov	r2, r8
 8000af8:	00d0      	lsls	r0, r2, #3
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	3b7f      	subs	r3, #127	; 0x7f
 8000afe:	18ed      	adds	r5, r5, r3
 8000b00:	2300      	movs	r3, #0
 8000b02:	04d2      	lsls	r2, r2, #19
 8000b04:	4302      	orrs	r2, r0
 8000b06:	4690      	mov	r8, r2
 8000b08:	469c      	mov	ip, r3
 8000b0a:	0031      	movs	r1, r6
 8000b0c:	464b      	mov	r3, r9
 8000b0e:	4079      	eors	r1, r7
 8000b10:	1c68      	adds	r0, r5, #1
 8000b12:	2b0f      	cmp	r3, #15
 8000b14:	d81c      	bhi.n	8000b50 <__aeabi_fmul+0xa4>
 8000b16:	4a76      	ldr	r2, [pc, #472]	; (8000cf0 <__aeabi_fmul+0x244>)
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	58d3      	ldr	r3, [r2, r3]
 8000b1c:	469f      	mov	pc, r3
 8000b1e:	0039      	movs	r1, r7
 8000b20:	4644      	mov	r4, r8
 8000b22:	46e2      	mov	sl, ip
 8000b24:	4653      	mov	r3, sl
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d00f      	beq.n	8000b4a <__aeabi_fmul+0x9e>
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_fmul+0x84>
 8000b2e:	e0d7      	b.n	8000ce0 <__aeabi_fmul+0x234>
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d137      	bne.n	8000ba4 <__aeabi_fmul+0xf8>
 8000b34:	2000      	movs	r0, #0
 8000b36:	2400      	movs	r4, #0
 8000b38:	05c0      	lsls	r0, r0, #23
 8000b3a:	4320      	orrs	r0, r4
 8000b3c:	07c9      	lsls	r1, r1, #31
 8000b3e:	4308      	orrs	r0, r1
 8000b40:	bce0      	pop	{r5, r6, r7}
 8000b42:	46ba      	mov	sl, r7
 8000b44:	46b1      	mov	r9, r6
 8000b46:	46a8      	mov	r8, r5
 8000b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b4a:	20ff      	movs	r0, #255	; 0xff
 8000b4c:	2400      	movs	r4, #0
 8000b4e:	e7f3      	b.n	8000b38 <__aeabi_fmul+0x8c>
 8000b50:	0c26      	lsrs	r6, r4, #16
 8000b52:	0424      	lsls	r4, r4, #16
 8000b54:	0c22      	lsrs	r2, r4, #16
 8000b56:	4644      	mov	r4, r8
 8000b58:	0424      	lsls	r4, r4, #16
 8000b5a:	0c24      	lsrs	r4, r4, #16
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	0027      	movs	r7, r4
 8000b60:	0c1b      	lsrs	r3, r3, #16
 8000b62:	4357      	muls	r7, r2
 8000b64:	4374      	muls	r4, r6
 8000b66:	435a      	muls	r2, r3
 8000b68:	435e      	muls	r6, r3
 8000b6a:	1912      	adds	r2, r2, r4
 8000b6c:	0c3b      	lsrs	r3, r7, #16
 8000b6e:	189b      	adds	r3, r3, r2
 8000b70:	429c      	cmp	r4, r3
 8000b72:	d903      	bls.n	8000b7c <__aeabi_fmul+0xd0>
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	0252      	lsls	r2, r2, #9
 8000b78:	4694      	mov	ip, r2
 8000b7a:	4466      	add	r6, ip
 8000b7c:	043f      	lsls	r7, r7, #16
 8000b7e:	041a      	lsls	r2, r3, #16
 8000b80:	0c3f      	lsrs	r7, r7, #16
 8000b82:	19d2      	adds	r2, r2, r7
 8000b84:	0194      	lsls	r4, r2, #6
 8000b86:	1e67      	subs	r7, r4, #1
 8000b88:	41bc      	sbcs	r4, r7
 8000b8a:	0c1b      	lsrs	r3, r3, #16
 8000b8c:	0e92      	lsrs	r2, r2, #26
 8000b8e:	199b      	adds	r3, r3, r6
 8000b90:	4314      	orrs	r4, r2
 8000b92:	019b      	lsls	r3, r3, #6
 8000b94:	431c      	orrs	r4, r3
 8000b96:	011b      	lsls	r3, r3, #4
 8000b98:	d400      	bmi.n	8000b9c <__aeabi_fmul+0xf0>
 8000b9a:	e09b      	b.n	8000cd4 <__aeabi_fmul+0x228>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	0862      	lsrs	r2, r4, #1
 8000ba0:	401c      	ands	r4, r3
 8000ba2:	4314      	orrs	r4, r2
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	327f      	adds	r2, #127	; 0x7f
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	dd64      	ble.n	8000c76 <__aeabi_fmul+0x1ca>
 8000bac:	0763      	lsls	r3, r4, #29
 8000bae:	d004      	beq.n	8000bba <__aeabi_fmul+0x10e>
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	4023      	ands	r3, r4
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d000      	beq.n	8000bba <__aeabi_fmul+0x10e>
 8000bb8:	3404      	adds	r4, #4
 8000bba:	0123      	lsls	r3, r4, #4
 8000bbc:	d503      	bpl.n	8000bc6 <__aeabi_fmul+0x11a>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	4b4c      	ldr	r3, [pc, #304]	; (8000cf4 <__aeabi_fmul+0x248>)
 8000bc2:	3280      	adds	r2, #128	; 0x80
 8000bc4:	401c      	ands	r4, r3
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	dcbf      	bgt.n	8000b4a <__aeabi_fmul+0x9e>
 8000bca:	01a4      	lsls	r4, r4, #6
 8000bcc:	0a64      	lsrs	r4, r4, #9
 8000bce:	b2d0      	uxtb	r0, r2
 8000bd0:	e7b2      	b.n	8000b38 <__aeabi_fmul+0x8c>
 8000bd2:	4643      	mov	r3, r8
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d13d      	bne.n	8000c54 <__aeabi_fmul+0x1a8>
 8000bd8:	464a      	mov	r2, r9
 8000bda:	3301      	adds	r3, #1
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	4691      	mov	r9, r2
 8000be0:	469c      	mov	ip, r3
 8000be2:	e792      	b.n	8000b0a <__aeabi_fmul+0x5e>
 8000be4:	2c00      	cmp	r4, #0
 8000be6:	d129      	bne.n	8000c3c <__aeabi_fmul+0x190>
 8000be8:	2304      	movs	r3, #4
 8000bea:	4699      	mov	r9, r3
 8000bec:	3b03      	subs	r3, #3
 8000bee:	2500      	movs	r5, #0
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	e774      	b.n	8000ade <__aeabi_fmul+0x32>
 8000bf4:	2c00      	cmp	r4, #0
 8000bf6:	d11b      	bne.n	8000c30 <__aeabi_fmul+0x184>
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	4699      	mov	r9, r3
 8000bfc:	3b06      	subs	r3, #6
 8000bfe:	25ff      	movs	r5, #255	; 0xff
 8000c00:	469a      	mov	sl, r3
 8000c02:	e76c      	b.n	8000ade <__aeabi_fmul+0x32>
 8000c04:	4643      	mov	r3, r8
 8000c06:	35ff      	adds	r5, #255	; 0xff
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10b      	bne.n	8000c24 <__aeabi_fmul+0x178>
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	464a      	mov	r2, r9
 8000c10:	431a      	orrs	r2, r3
 8000c12:	4691      	mov	r9, r2
 8000c14:	469c      	mov	ip, r3
 8000c16:	e778      	b.n	8000b0a <__aeabi_fmul+0x5e>
 8000c18:	4653      	mov	r3, sl
 8000c1a:	0031      	movs	r1, r6
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_fmul+0x176>
 8000c20:	e783      	b.n	8000b2a <__aeabi_fmul+0x7e>
 8000c22:	e792      	b.n	8000b4a <__aeabi_fmul+0x9e>
 8000c24:	2303      	movs	r3, #3
 8000c26:	464a      	mov	r2, r9
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	4691      	mov	r9, r2
 8000c2c:	469c      	mov	ip, r3
 8000c2e:	e76c      	b.n	8000b0a <__aeabi_fmul+0x5e>
 8000c30:	230c      	movs	r3, #12
 8000c32:	4699      	mov	r9, r3
 8000c34:	3b09      	subs	r3, #9
 8000c36:	25ff      	movs	r5, #255	; 0xff
 8000c38:	469a      	mov	sl, r3
 8000c3a:	e750      	b.n	8000ade <__aeabi_fmul+0x32>
 8000c3c:	0020      	movs	r0, r4
 8000c3e:	f002 f92d 	bl	8002e9c <__clzsi2>
 8000c42:	2576      	movs	r5, #118	; 0x76
 8000c44:	1f43      	subs	r3, r0, #5
 8000c46:	409c      	lsls	r4, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	426d      	negs	r5, r5
 8000c4c:	4699      	mov	r9, r3
 8000c4e:	469a      	mov	sl, r3
 8000c50:	1a2d      	subs	r5, r5, r0
 8000c52:	e744      	b.n	8000ade <__aeabi_fmul+0x32>
 8000c54:	4640      	mov	r0, r8
 8000c56:	f002 f921 	bl	8002e9c <__clzsi2>
 8000c5a:	4642      	mov	r2, r8
 8000c5c:	1f43      	subs	r3, r0, #5
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	2300      	movs	r3, #0
 8000c62:	1a2d      	subs	r5, r5, r0
 8000c64:	4690      	mov	r8, r2
 8000c66:	469c      	mov	ip, r3
 8000c68:	3d76      	subs	r5, #118	; 0x76
 8000c6a:	e74e      	b.n	8000b0a <__aeabi_fmul+0x5e>
 8000c6c:	2480      	movs	r4, #128	; 0x80
 8000c6e:	2100      	movs	r1, #0
 8000c70:	20ff      	movs	r0, #255	; 0xff
 8000c72:	03e4      	lsls	r4, r4, #15
 8000c74:	e760      	b.n	8000b38 <__aeabi_fmul+0x8c>
 8000c76:	2301      	movs	r3, #1
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	2b1b      	cmp	r3, #27
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_fmul+0x1d4>
 8000c7e:	e759      	b.n	8000b34 <__aeabi_fmul+0x88>
 8000c80:	0022      	movs	r2, r4
 8000c82:	309e      	adds	r0, #158	; 0x9e
 8000c84:	40da      	lsrs	r2, r3
 8000c86:	4084      	lsls	r4, r0
 8000c88:	0013      	movs	r3, r2
 8000c8a:	1e62      	subs	r2, r4, #1
 8000c8c:	4194      	sbcs	r4, r2
 8000c8e:	431c      	orrs	r4, r3
 8000c90:	0763      	lsls	r3, r4, #29
 8000c92:	d004      	beq.n	8000c9e <__aeabi_fmul+0x1f2>
 8000c94:	230f      	movs	r3, #15
 8000c96:	4023      	ands	r3, r4
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fmul+0x1f2>
 8000c9c:	3404      	adds	r4, #4
 8000c9e:	0163      	lsls	r3, r4, #5
 8000ca0:	d51a      	bpl.n	8000cd8 <__aeabi_fmul+0x22c>
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	e747      	b.n	8000b38 <__aeabi_fmul+0x8c>
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	03c0      	lsls	r0, r0, #15
 8000cac:	4204      	tst	r4, r0
 8000cae:	d009      	beq.n	8000cc4 <__aeabi_fmul+0x218>
 8000cb0:	4643      	mov	r3, r8
 8000cb2:	4203      	tst	r3, r0
 8000cb4:	d106      	bne.n	8000cc4 <__aeabi_fmul+0x218>
 8000cb6:	4644      	mov	r4, r8
 8000cb8:	4304      	orrs	r4, r0
 8000cba:	0264      	lsls	r4, r4, #9
 8000cbc:	0039      	movs	r1, r7
 8000cbe:	20ff      	movs	r0, #255	; 0xff
 8000cc0:	0a64      	lsrs	r4, r4, #9
 8000cc2:	e739      	b.n	8000b38 <__aeabi_fmul+0x8c>
 8000cc4:	2080      	movs	r0, #128	; 0x80
 8000cc6:	03c0      	lsls	r0, r0, #15
 8000cc8:	4304      	orrs	r4, r0
 8000cca:	0264      	lsls	r4, r4, #9
 8000ccc:	0031      	movs	r1, r6
 8000cce:	20ff      	movs	r0, #255	; 0xff
 8000cd0:	0a64      	lsrs	r4, r4, #9
 8000cd2:	e731      	b.n	8000b38 <__aeabi_fmul+0x8c>
 8000cd4:	0028      	movs	r0, r5
 8000cd6:	e765      	b.n	8000ba4 <__aeabi_fmul+0xf8>
 8000cd8:	01a4      	lsls	r4, r4, #6
 8000cda:	2000      	movs	r0, #0
 8000cdc:	0a64      	lsrs	r4, r4, #9
 8000cde:	e72b      	b.n	8000b38 <__aeabi_fmul+0x8c>
 8000ce0:	2080      	movs	r0, #128	; 0x80
 8000ce2:	03c0      	lsls	r0, r0, #15
 8000ce4:	4304      	orrs	r4, r0
 8000ce6:	0264      	lsls	r4, r4, #9
 8000ce8:	20ff      	movs	r0, #255	; 0xff
 8000cea:	0a64      	lsrs	r4, r4, #9
 8000cec:	e724      	b.n	8000b38 <__aeabi_fmul+0x8c>
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	0801b5d8 	.word	0x0801b5d8
 8000cf4:	f7ffffff 	.word	0xf7ffffff

08000cf8 <__aeabi_fsub>:
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	46ce      	mov	lr, r9
 8000cfc:	4647      	mov	r7, r8
 8000cfe:	0243      	lsls	r3, r0, #9
 8000d00:	0a5b      	lsrs	r3, r3, #9
 8000d02:	024e      	lsls	r6, r1, #9
 8000d04:	00da      	lsls	r2, r3, #3
 8000d06:	4694      	mov	ip, r2
 8000d08:	0a72      	lsrs	r2, r6, #9
 8000d0a:	4691      	mov	r9, r2
 8000d0c:	0045      	lsls	r5, r0, #1
 8000d0e:	004a      	lsls	r2, r1, #1
 8000d10:	b580      	push	{r7, lr}
 8000d12:	0e2d      	lsrs	r5, r5, #24
 8000d14:	001f      	movs	r7, r3
 8000d16:	0fc4      	lsrs	r4, r0, #31
 8000d18:	0e12      	lsrs	r2, r2, #24
 8000d1a:	0fc9      	lsrs	r1, r1, #31
 8000d1c:	09b6      	lsrs	r6, r6, #6
 8000d1e:	2aff      	cmp	r2, #255	; 0xff
 8000d20:	d05b      	beq.n	8000dda <__aeabi_fsub+0xe2>
 8000d22:	2001      	movs	r0, #1
 8000d24:	4041      	eors	r1, r0
 8000d26:	428c      	cmp	r4, r1
 8000d28:	d039      	beq.n	8000d9e <__aeabi_fsub+0xa6>
 8000d2a:	1aa8      	subs	r0, r5, r2
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	dd5a      	ble.n	8000de6 <__aeabi_fsub+0xee>
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	d06a      	beq.n	8000e0a <__aeabi_fsub+0x112>
 8000d34:	2dff      	cmp	r5, #255	; 0xff
 8000d36:	d100      	bne.n	8000d3a <__aeabi_fsub+0x42>
 8000d38:	e0d9      	b.n	8000eee <__aeabi_fsub+0x1f6>
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	04d2      	lsls	r2, r2, #19
 8000d3e:	4316      	orrs	r6, r2
 8000d40:	281b      	cmp	r0, #27
 8000d42:	dc00      	bgt.n	8000d46 <__aeabi_fsub+0x4e>
 8000d44:	e0e9      	b.n	8000f1a <__aeabi_fsub+0x222>
 8000d46:	2001      	movs	r0, #1
 8000d48:	4663      	mov	r3, ip
 8000d4a:	1a18      	subs	r0, r3, r0
 8000d4c:	0143      	lsls	r3, r0, #5
 8000d4e:	d400      	bmi.n	8000d52 <__aeabi_fsub+0x5a>
 8000d50:	e0b4      	b.n	8000ebc <__aeabi_fsub+0x1c4>
 8000d52:	0180      	lsls	r0, r0, #6
 8000d54:	0987      	lsrs	r7, r0, #6
 8000d56:	0038      	movs	r0, r7
 8000d58:	f002 f8a0 	bl	8002e9c <__clzsi2>
 8000d5c:	3805      	subs	r0, #5
 8000d5e:	4087      	lsls	r7, r0
 8000d60:	4285      	cmp	r5, r0
 8000d62:	dc00      	bgt.n	8000d66 <__aeabi_fsub+0x6e>
 8000d64:	e0cc      	b.n	8000f00 <__aeabi_fsub+0x208>
 8000d66:	1a2d      	subs	r5, r5, r0
 8000d68:	48b5      	ldr	r0, [pc, #724]	; (8001040 <__aeabi_fsub+0x348>)
 8000d6a:	4038      	ands	r0, r7
 8000d6c:	0743      	lsls	r3, r0, #29
 8000d6e:	d004      	beq.n	8000d7a <__aeabi_fsub+0x82>
 8000d70:	230f      	movs	r3, #15
 8000d72:	4003      	ands	r3, r0
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d000      	beq.n	8000d7a <__aeabi_fsub+0x82>
 8000d78:	3004      	adds	r0, #4
 8000d7a:	0143      	lsls	r3, r0, #5
 8000d7c:	d400      	bmi.n	8000d80 <__aeabi_fsub+0x88>
 8000d7e:	e0a0      	b.n	8000ec2 <__aeabi_fsub+0x1ca>
 8000d80:	1c6a      	adds	r2, r5, #1
 8000d82:	2dfe      	cmp	r5, #254	; 0xfe
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0x90>
 8000d86:	e08d      	b.n	8000ea4 <__aeabi_fsub+0x1ac>
 8000d88:	0180      	lsls	r0, r0, #6
 8000d8a:	0a47      	lsrs	r7, r0, #9
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	05d0      	lsls	r0, r2, #23
 8000d90:	4338      	orrs	r0, r7
 8000d92:	07e4      	lsls	r4, r4, #31
 8000d94:	4320      	orrs	r0, r4
 8000d96:	bcc0      	pop	{r6, r7}
 8000d98:	46b9      	mov	r9, r7
 8000d9a:	46b0      	mov	r8, r6
 8000d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d9e:	1aa8      	subs	r0, r5, r2
 8000da0:	4680      	mov	r8, r0
 8000da2:	2800      	cmp	r0, #0
 8000da4:	dd45      	ble.n	8000e32 <__aeabi_fsub+0x13a>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d070      	beq.n	8000e8c <__aeabi_fsub+0x194>
 8000daa:	2dff      	cmp	r5, #255	; 0xff
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0xb8>
 8000dae:	e09e      	b.n	8000eee <__aeabi_fsub+0x1f6>
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	04db      	lsls	r3, r3, #19
 8000db4:	431e      	orrs	r6, r3
 8000db6:	4643      	mov	r3, r8
 8000db8:	2b1b      	cmp	r3, #27
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_fsub+0xc6>
 8000dbc:	e0d2      	b.n	8000f64 <__aeabi_fsub+0x26c>
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4460      	add	r0, ip
 8000dc2:	0143      	lsls	r3, r0, #5
 8000dc4:	d57a      	bpl.n	8000ebc <__aeabi_fsub+0x1c4>
 8000dc6:	3501      	adds	r5, #1
 8000dc8:	2dff      	cmp	r5, #255	; 0xff
 8000dca:	d06b      	beq.n	8000ea4 <__aeabi_fsub+0x1ac>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	4a9d      	ldr	r2, [pc, #628]	; (8001044 <__aeabi_fsub+0x34c>)
 8000dd0:	4003      	ands	r3, r0
 8000dd2:	0840      	lsrs	r0, r0, #1
 8000dd4:	4010      	ands	r0, r2
 8000dd6:	4318      	orrs	r0, r3
 8000dd8:	e7c8      	b.n	8000d6c <__aeabi_fsub+0x74>
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d020      	beq.n	8000e20 <__aeabi_fsub+0x128>
 8000dde:	428c      	cmp	r4, r1
 8000de0:	d023      	beq.n	8000e2a <__aeabi_fsub+0x132>
 8000de2:	0028      	movs	r0, r5
 8000de4:	38ff      	subs	r0, #255	; 0xff
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d039      	beq.n	8000e5e <__aeabi_fsub+0x166>
 8000dea:	1b57      	subs	r7, r2, r5
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d000      	beq.n	8000df2 <__aeabi_fsub+0xfa>
 8000df0:	e09d      	b.n	8000f2e <__aeabi_fsub+0x236>
 8000df2:	4663      	mov	r3, ip
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x102>
 8000df8:	e0db      	b.n	8000fb2 <__aeabi_fsub+0x2ba>
 8000dfa:	1e7b      	subs	r3, r7, #1
 8000dfc:	2f01      	cmp	r7, #1
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fsub+0x10a>
 8000e00:	e10d      	b.n	800101e <__aeabi_fsub+0x326>
 8000e02:	2fff      	cmp	r7, #255	; 0xff
 8000e04:	d071      	beq.n	8000eea <__aeabi_fsub+0x1f2>
 8000e06:	001f      	movs	r7, r3
 8000e08:	e098      	b.n	8000f3c <__aeabi_fsub+0x244>
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x118>
 8000e0e:	e0a7      	b.n	8000f60 <__aeabi_fsub+0x268>
 8000e10:	1e42      	subs	r2, r0, #1
 8000e12:	2801      	cmp	r0, #1
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fsub+0x120>
 8000e16:	e0e6      	b.n	8000fe6 <__aeabi_fsub+0x2ee>
 8000e18:	28ff      	cmp	r0, #255	; 0xff
 8000e1a:	d068      	beq.n	8000eee <__aeabi_fsub+0x1f6>
 8000e1c:	0010      	movs	r0, r2
 8000e1e:	e78f      	b.n	8000d40 <__aeabi_fsub+0x48>
 8000e20:	2001      	movs	r0, #1
 8000e22:	4041      	eors	r1, r0
 8000e24:	42a1      	cmp	r1, r4
 8000e26:	d000      	beq.n	8000e2a <__aeabi_fsub+0x132>
 8000e28:	e77f      	b.n	8000d2a <__aeabi_fsub+0x32>
 8000e2a:	20ff      	movs	r0, #255	; 0xff
 8000e2c:	4240      	negs	r0, r0
 8000e2e:	4680      	mov	r8, r0
 8000e30:	44a8      	add	r8, r5
 8000e32:	4640      	mov	r0, r8
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d038      	beq.n	8000eaa <__aeabi_fsub+0x1b2>
 8000e38:	1b51      	subs	r1, r2, r5
 8000e3a:	2d00      	cmp	r5, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x148>
 8000e3e:	e0ae      	b.n	8000f9e <__aeabi_fsub+0x2a6>
 8000e40:	2aff      	cmp	r2, #255	; 0xff
 8000e42:	d100      	bne.n	8000e46 <__aeabi_fsub+0x14e>
 8000e44:	e0df      	b.n	8001006 <__aeabi_fsub+0x30e>
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	4660      	mov	r0, ip
 8000e4a:	04db      	lsls	r3, r3, #19
 8000e4c:	4318      	orrs	r0, r3
 8000e4e:	4684      	mov	ip, r0
 8000e50:	291b      	cmp	r1, #27
 8000e52:	dc00      	bgt.n	8000e56 <__aeabi_fsub+0x15e>
 8000e54:	e0d9      	b.n	800100a <__aeabi_fsub+0x312>
 8000e56:	2001      	movs	r0, #1
 8000e58:	0015      	movs	r5, r2
 8000e5a:	1980      	adds	r0, r0, r6
 8000e5c:	e7b1      	b.n	8000dc2 <__aeabi_fsub+0xca>
 8000e5e:	20fe      	movs	r0, #254	; 0xfe
 8000e60:	1c6a      	adds	r2, r5, #1
 8000e62:	4210      	tst	r0, r2
 8000e64:	d171      	bne.n	8000f4a <__aeabi_fsub+0x252>
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d000      	beq.n	8000e6c <__aeabi_fsub+0x174>
 8000e6a:	e0a6      	b.n	8000fba <__aeabi_fsub+0x2c2>
 8000e6c:	4663      	mov	r3, ip
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_fsub+0x17c>
 8000e72:	e0d9      	b.n	8001028 <__aeabi_fsub+0x330>
 8000e74:	2200      	movs	r2, #0
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d100      	bne.n	8000e7c <__aeabi_fsub+0x184>
 8000e7a:	e788      	b.n	8000d8e <__aeabi_fsub+0x96>
 8000e7c:	1b98      	subs	r0, r3, r6
 8000e7e:	0143      	lsls	r3, r0, #5
 8000e80:	d400      	bmi.n	8000e84 <__aeabi_fsub+0x18c>
 8000e82:	e0e1      	b.n	8001048 <__aeabi_fsub+0x350>
 8000e84:	4663      	mov	r3, ip
 8000e86:	000c      	movs	r4, r1
 8000e88:	1af0      	subs	r0, r6, r3
 8000e8a:	e76f      	b.n	8000d6c <__aeabi_fsub+0x74>
 8000e8c:	2e00      	cmp	r6, #0
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_fsub+0x19a>
 8000e90:	e0b7      	b.n	8001002 <__aeabi_fsub+0x30a>
 8000e92:	0002      	movs	r2, r0
 8000e94:	3a01      	subs	r2, #1
 8000e96:	2801      	cmp	r0, #1
 8000e98:	d100      	bne.n	8000e9c <__aeabi_fsub+0x1a4>
 8000e9a:	e09c      	b.n	8000fd6 <__aeabi_fsub+0x2de>
 8000e9c:	28ff      	cmp	r0, #255	; 0xff
 8000e9e:	d026      	beq.n	8000eee <__aeabi_fsub+0x1f6>
 8000ea0:	4690      	mov	r8, r2
 8000ea2:	e788      	b.n	8000db6 <__aeabi_fsub+0xbe>
 8000ea4:	22ff      	movs	r2, #255	; 0xff
 8000ea6:	2700      	movs	r7, #0
 8000ea8:	e771      	b.n	8000d8e <__aeabi_fsub+0x96>
 8000eaa:	20fe      	movs	r0, #254	; 0xfe
 8000eac:	1c6a      	adds	r2, r5, #1
 8000eae:	4210      	tst	r0, r2
 8000eb0:	d064      	beq.n	8000f7c <__aeabi_fsub+0x284>
 8000eb2:	2aff      	cmp	r2, #255	; 0xff
 8000eb4:	d0f6      	beq.n	8000ea4 <__aeabi_fsub+0x1ac>
 8000eb6:	0015      	movs	r5, r2
 8000eb8:	4466      	add	r6, ip
 8000eba:	0870      	lsrs	r0, r6, #1
 8000ebc:	0743      	lsls	r3, r0, #29
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_fsub+0x1ca>
 8000ec0:	e756      	b.n	8000d70 <__aeabi_fsub+0x78>
 8000ec2:	08c3      	lsrs	r3, r0, #3
 8000ec4:	2dff      	cmp	r5, #255	; 0xff
 8000ec6:	d012      	beq.n	8000eee <__aeabi_fsub+0x1f6>
 8000ec8:	025b      	lsls	r3, r3, #9
 8000eca:	0a5f      	lsrs	r7, r3, #9
 8000ecc:	b2ea      	uxtb	r2, r5
 8000ece:	e75e      	b.n	8000d8e <__aeabi_fsub+0x96>
 8000ed0:	4662      	mov	r2, ip
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x1e0>
 8000ed6:	e096      	b.n	8001006 <__aeabi_fsub+0x30e>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d008      	beq.n	8000eee <__aeabi_fsub+0x1f6>
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	03d2      	lsls	r2, r2, #15
 8000ee0:	4213      	tst	r3, r2
 8000ee2:	d004      	beq.n	8000eee <__aeabi_fsub+0x1f6>
 8000ee4:	4648      	mov	r0, r9
 8000ee6:	4210      	tst	r0, r2
 8000ee8:	d101      	bne.n	8000eee <__aeabi_fsub+0x1f6>
 8000eea:	000c      	movs	r4, r1
 8000eec:	464b      	mov	r3, r9
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0d8      	beq.n	8000ea4 <__aeabi_fsub+0x1ac>
 8000ef2:	2780      	movs	r7, #128	; 0x80
 8000ef4:	03ff      	lsls	r7, r7, #15
 8000ef6:	431f      	orrs	r7, r3
 8000ef8:	027f      	lsls	r7, r7, #9
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	0a7f      	lsrs	r7, r7, #9
 8000efe:	e746      	b.n	8000d8e <__aeabi_fsub+0x96>
 8000f00:	2320      	movs	r3, #32
 8000f02:	003a      	movs	r2, r7
 8000f04:	1b45      	subs	r5, r0, r5
 8000f06:	0038      	movs	r0, r7
 8000f08:	3501      	adds	r5, #1
 8000f0a:	40ea      	lsrs	r2, r5
 8000f0c:	1b5d      	subs	r5, r3, r5
 8000f0e:	40a8      	lsls	r0, r5
 8000f10:	1e43      	subs	r3, r0, #1
 8000f12:	4198      	sbcs	r0, r3
 8000f14:	2500      	movs	r5, #0
 8000f16:	4310      	orrs	r0, r2
 8000f18:	e728      	b.n	8000d6c <__aeabi_fsub+0x74>
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	1a1b      	subs	r3, r3, r0
 8000f1e:	0032      	movs	r2, r6
 8000f20:	409e      	lsls	r6, r3
 8000f22:	40c2      	lsrs	r2, r0
 8000f24:	0030      	movs	r0, r6
 8000f26:	1e43      	subs	r3, r0, #1
 8000f28:	4198      	sbcs	r0, r3
 8000f2a:	4310      	orrs	r0, r2
 8000f2c:	e70c      	b.n	8000d48 <__aeabi_fsub+0x50>
 8000f2e:	2aff      	cmp	r2, #255	; 0xff
 8000f30:	d0db      	beq.n	8000eea <__aeabi_fsub+0x1f2>
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	4660      	mov	r0, ip
 8000f36:	04db      	lsls	r3, r3, #19
 8000f38:	4318      	orrs	r0, r3
 8000f3a:	4684      	mov	ip, r0
 8000f3c:	2f1b      	cmp	r7, #27
 8000f3e:	dd56      	ble.n	8000fee <__aeabi_fsub+0x2f6>
 8000f40:	2001      	movs	r0, #1
 8000f42:	000c      	movs	r4, r1
 8000f44:	0015      	movs	r5, r2
 8000f46:	1a30      	subs	r0, r6, r0
 8000f48:	e700      	b.n	8000d4c <__aeabi_fsub+0x54>
 8000f4a:	4663      	mov	r3, ip
 8000f4c:	1b9f      	subs	r7, r3, r6
 8000f4e:	017b      	lsls	r3, r7, #5
 8000f50:	d43d      	bmi.n	8000fce <__aeabi_fsub+0x2d6>
 8000f52:	2f00      	cmp	r7, #0
 8000f54:	d000      	beq.n	8000f58 <__aeabi_fsub+0x260>
 8000f56:	e6fe      	b.n	8000d56 <__aeabi_fsub+0x5e>
 8000f58:	2400      	movs	r4, #0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2700      	movs	r7, #0
 8000f5e:	e716      	b.n	8000d8e <__aeabi_fsub+0x96>
 8000f60:	0005      	movs	r5, r0
 8000f62:	e7af      	b.n	8000ec4 <__aeabi_fsub+0x1cc>
 8000f64:	0032      	movs	r2, r6
 8000f66:	4643      	mov	r3, r8
 8000f68:	4641      	mov	r1, r8
 8000f6a:	40da      	lsrs	r2, r3
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	1a5b      	subs	r3, r3, r1
 8000f70:	409e      	lsls	r6, r3
 8000f72:	0030      	movs	r0, r6
 8000f74:	1e43      	subs	r3, r0, #1
 8000f76:	4198      	sbcs	r0, r3
 8000f78:	4310      	orrs	r0, r2
 8000f7a:	e721      	b.n	8000dc0 <__aeabi_fsub+0xc8>
 8000f7c:	2d00      	cmp	r5, #0
 8000f7e:	d1a7      	bne.n	8000ed0 <__aeabi_fsub+0x1d8>
 8000f80:	4663      	mov	r3, ip
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d059      	beq.n	800103a <__aeabi_fsub+0x342>
 8000f86:	2200      	movs	r2, #0
 8000f88:	2e00      	cmp	r6, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x296>
 8000f8c:	e6ff      	b.n	8000d8e <__aeabi_fsub+0x96>
 8000f8e:	0030      	movs	r0, r6
 8000f90:	4460      	add	r0, ip
 8000f92:	0143      	lsls	r3, r0, #5
 8000f94:	d592      	bpl.n	8000ebc <__aeabi_fsub+0x1c4>
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <__aeabi_fsub+0x348>)
 8000f98:	3501      	adds	r5, #1
 8000f9a:	4018      	ands	r0, r3
 8000f9c:	e78e      	b.n	8000ebc <__aeabi_fsub+0x1c4>
 8000f9e:	4663      	mov	r3, ip
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d047      	beq.n	8001034 <__aeabi_fsub+0x33c>
 8000fa4:	1e4b      	subs	r3, r1, #1
 8000fa6:	2901      	cmp	r1, #1
 8000fa8:	d015      	beq.n	8000fd6 <__aeabi_fsub+0x2de>
 8000faa:	29ff      	cmp	r1, #255	; 0xff
 8000fac:	d02b      	beq.n	8001006 <__aeabi_fsub+0x30e>
 8000fae:	0019      	movs	r1, r3
 8000fb0:	e74e      	b.n	8000e50 <__aeabi_fsub+0x158>
 8000fb2:	000c      	movs	r4, r1
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	003d      	movs	r5, r7
 8000fb8:	e784      	b.n	8000ec4 <__aeabi_fsub+0x1cc>
 8000fba:	4662      	mov	r2, ip
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d18b      	bne.n	8000ed8 <__aeabi_fsub+0x1e0>
 8000fc0:	2e00      	cmp	r6, #0
 8000fc2:	d192      	bne.n	8000eea <__aeabi_fsub+0x1f2>
 8000fc4:	2780      	movs	r7, #128	; 0x80
 8000fc6:	2400      	movs	r4, #0
 8000fc8:	22ff      	movs	r2, #255	; 0xff
 8000fca:	03ff      	lsls	r7, r7, #15
 8000fcc:	e6df      	b.n	8000d8e <__aeabi_fsub+0x96>
 8000fce:	4663      	mov	r3, ip
 8000fd0:	000c      	movs	r4, r1
 8000fd2:	1af7      	subs	r7, r6, r3
 8000fd4:	e6bf      	b.n	8000d56 <__aeabi_fsub+0x5e>
 8000fd6:	0030      	movs	r0, r6
 8000fd8:	4460      	add	r0, ip
 8000fda:	2501      	movs	r5, #1
 8000fdc:	0143      	lsls	r3, r0, #5
 8000fde:	d400      	bmi.n	8000fe2 <__aeabi_fsub+0x2ea>
 8000fe0:	e76c      	b.n	8000ebc <__aeabi_fsub+0x1c4>
 8000fe2:	2502      	movs	r5, #2
 8000fe4:	e6f2      	b.n	8000dcc <__aeabi_fsub+0xd4>
 8000fe6:	4663      	mov	r3, ip
 8000fe8:	2501      	movs	r5, #1
 8000fea:	1b98      	subs	r0, r3, r6
 8000fec:	e6ae      	b.n	8000d4c <__aeabi_fsub+0x54>
 8000fee:	2320      	movs	r3, #32
 8000ff0:	4664      	mov	r4, ip
 8000ff2:	4660      	mov	r0, ip
 8000ff4:	40fc      	lsrs	r4, r7
 8000ff6:	1bdf      	subs	r7, r3, r7
 8000ff8:	40b8      	lsls	r0, r7
 8000ffa:	1e43      	subs	r3, r0, #1
 8000ffc:	4198      	sbcs	r0, r3
 8000ffe:	4320      	orrs	r0, r4
 8001000:	e79f      	b.n	8000f42 <__aeabi_fsub+0x24a>
 8001002:	0005      	movs	r5, r0
 8001004:	e75e      	b.n	8000ec4 <__aeabi_fsub+0x1cc>
 8001006:	464b      	mov	r3, r9
 8001008:	e771      	b.n	8000eee <__aeabi_fsub+0x1f6>
 800100a:	2320      	movs	r3, #32
 800100c:	4665      	mov	r5, ip
 800100e:	4660      	mov	r0, ip
 8001010:	40cd      	lsrs	r5, r1
 8001012:	1a59      	subs	r1, r3, r1
 8001014:	4088      	lsls	r0, r1
 8001016:	1e43      	subs	r3, r0, #1
 8001018:	4198      	sbcs	r0, r3
 800101a:	4328      	orrs	r0, r5
 800101c:	e71c      	b.n	8000e58 <__aeabi_fsub+0x160>
 800101e:	4663      	mov	r3, ip
 8001020:	000c      	movs	r4, r1
 8001022:	2501      	movs	r5, #1
 8001024:	1af0      	subs	r0, r6, r3
 8001026:	e691      	b.n	8000d4c <__aeabi_fsub+0x54>
 8001028:	2e00      	cmp	r6, #0
 800102a:	d095      	beq.n	8000f58 <__aeabi_fsub+0x260>
 800102c:	000c      	movs	r4, r1
 800102e:	464f      	mov	r7, r9
 8001030:	2200      	movs	r2, #0
 8001032:	e6ac      	b.n	8000d8e <__aeabi_fsub+0x96>
 8001034:	464b      	mov	r3, r9
 8001036:	000d      	movs	r5, r1
 8001038:	e744      	b.n	8000ec4 <__aeabi_fsub+0x1cc>
 800103a:	464f      	mov	r7, r9
 800103c:	2200      	movs	r2, #0
 800103e:	e6a6      	b.n	8000d8e <__aeabi_fsub+0x96>
 8001040:	fbffffff 	.word	0xfbffffff
 8001044:	7dffffff 	.word	0x7dffffff
 8001048:	2800      	cmp	r0, #0
 800104a:	d000      	beq.n	800104e <__aeabi_fsub+0x356>
 800104c:	e736      	b.n	8000ebc <__aeabi_fsub+0x1c4>
 800104e:	2400      	movs	r4, #0
 8001050:	2700      	movs	r7, #0
 8001052:	e69c      	b.n	8000d8e <__aeabi_fsub+0x96>

08001054 <__aeabi_f2iz>:
 8001054:	0241      	lsls	r1, r0, #9
 8001056:	0042      	lsls	r2, r0, #1
 8001058:	0fc3      	lsrs	r3, r0, #31
 800105a:	0a49      	lsrs	r1, r1, #9
 800105c:	2000      	movs	r0, #0
 800105e:	0e12      	lsrs	r2, r2, #24
 8001060:	2a7e      	cmp	r2, #126	; 0x7e
 8001062:	dd03      	ble.n	800106c <__aeabi_f2iz+0x18>
 8001064:	2a9d      	cmp	r2, #157	; 0x9d
 8001066:	dd02      	ble.n	800106e <__aeabi_f2iz+0x1a>
 8001068:	4a09      	ldr	r2, [pc, #36]	; (8001090 <__aeabi_f2iz+0x3c>)
 800106a:	1898      	adds	r0, r3, r2
 800106c:	4770      	bx	lr
 800106e:	2080      	movs	r0, #128	; 0x80
 8001070:	0400      	lsls	r0, r0, #16
 8001072:	4301      	orrs	r1, r0
 8001074:	2a95      	cmp	r2, #149	; 0x95
 8001076:	dc07      	bgt.n	8001088 <__aeabi_f2iz+0x34>
 8001078:	2096      	movs	r0, #150	; 0x96
 800107a:	1a82      	subs	r2, r0, r2
 800107c:	40d1      	lsrs	r1, r2
 800107e:	4248      	negs	r0, r1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f3      	bne.n	800106c <__aeabi_f2iz+0x18>
 8001084:	0008      	movs	r0, r1
 8001086:	e7f1      	b.n	800106c <__aeabi_f2iz+0x18>
 8001088:	3a96      	subs	r2, #150	; 0x96
 800108a:	4091      	lsls	r1, r2
 800108c:	e7f7      	b.n	800107e <__aeabi_f2iz+0x2a>
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	7fffffff 	.word	0x7fffffff

08001094 <__aeabi_i2f>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	2800      	cmp	r0, #0
 8001098:	d013      	beq.n	80010c2 <__aeabi_i2f+0x2e>
 800109a:	17c3      	asrs	r3, r0, #31
 800109c:	18c6      	adds	r6, r0, r3
 800109e:	405e      	eors	r6, r3
 80010a0:	0fc4      	lsrs	r4, r0, #31
 80010a2:	0030      	movs	r0, r6
 80010a4:	f001 fefa 	bl	8002e9c <__clzsi2>
 80010a8:	239e      	movs	r3, #158	; 0x9e
 80010aa:	0005      	movs	r5, r0
 80010ac:	1a1b      	subs	r3, r3, r0
 80010ae:	2b96      	cmp	r3, #150	; 0x96
 80010b0:	dc0f      	bgt.n	80010d2 <__aeabi_i2f+0x3e>
 80010b2:	2808      	cmp	r0, #8
 80010b4:	dd01      	ble.n	80010ba <__aeabi_i2f+0x26>
 80010b6:	3d08      	subs	r5, #8
 80010b8:	40ae      	lsls	r6, r5
 80010ba:	0276      	lsls	r6, r6, #9
 80010bc:	0a76      	lsrs	r6, r6, #9
 80010be:	b2d8      	uxtb	r0, r3
 80010c0:	e002      	b.n	80010c8 <__aeabi_i2f+0x34>
 80010c2:	2400      	movs	r4, #0
 80010c4:	2000      	movs	r0, #0
 80010c6:	2600      	movs	r6, #0
 80010c8:	05c0      	lsls	r0, r0, #23
 80010ca:	4330      	orrs	r0, r6
 80010cc:	07e4      	lsls	r4, r4, #31
 80010ce:	4320      	orrs	r0, r4
 80010d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010d2:	2b99      	cmp	r3, #153	; 0x99
 80010d4:	dd0c      	ble.n	80010f0 <__aeabi_i2f+0x5c>
 80010d6:	2205      	movs	r2, #5
 80010d8:	0031      	movs	r1, r6
 80010da:	1a12      	subs	r2, r2, r0
 80010dc:	40d1      	lsrs	r1, r2
 80010de:	000a      	movs	r2, r1
 80010e0:	0001      	movs	r1, r0
 80010e2:	0030      	movs	r0, r6
 80010e4:	311b      	adds	r1, #27
 80010e6:	4088      	lsls	r0, r1
 80010e8:	1e41      	subs	r1, r0, #1
 80010ea:	4188      	sbcs	r0, r1
 80010ec:	4302      	orrs	r2, r0
 80010ee:	0016      	movs	r6, r2
 80010f0:	2d05      	cmp	r5, #5
 80010f2:	dc12      	bgt.n	800111a <__aeabi_i2f+0x86>
 80010f4:	0031      	movs	r1, r6
 80010f6:	4f0d      	ldr	r7, [pc, #52]	; (800112c <__aeabi_i2f+0x98>)
 80010f8:	4039      	ands	r1, r7
 80010fa:	0772      	lsls	r2, r6, #29
 80010fc:	d009      	beq.n	8001112 <__aeabi_i2f+0x7e>
 80010fe:	200f      	movs	r0, #15
 8001100:	4030      	ands	r0, r6
 8001102:	2804      	cmp	r0, #4
 8001104:	d005      	beq.n	8001112 <__aeabi_i2f+0x7e>
 8001106:	3104      	adds	r1, #4
 8001108:	014a      	lsls	r2, r1, #5
 800110a:	d502      	bpl.n	8001112 <__aeabi_i2f+0x7e>
 800110c:	239f      	movs	r3, #159	; 0x9f
 800110e:	4039      	ands	r1, r7
 8001110:	1b5b      	subs	r3, r3, r5
 8001112:	0189      	lsls	r1, r1, #6
 8001114:	0a4e      	lsrs	r6, r1, #9
 8001116:	b2d8      	uxtb	r0, r3
 8001118:	e7d6      	b.n	80010c8 <__aeabi_i2f+0x34>
 800111a:	1f6a      	subs	r2, r5, #5
 800111c:	4096      	lsls	r6, r2
 800111e:	0031      	movs	r1, r6
 8001120:	4f02      	ldr	r7, [pc, #8]	; (800112c <__aeabi_i2f+0x98>)
 8001122:	4039      	ands	r1, r7
 8001124:	0772      	lsls	r2, r6, #29
 8001126:	d0f4      	beq.n	8001112 <__aeabi_i2f+0x7e>
 8001128:	e7e9      	b.n	80010fe <__aeabi_i2f+0x6a>
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	fbffffff 	.word	0xfbffffff

08001130 <__aeabi_dadd>:
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	464f      	mov	r7, r9
 8001134:	4646      	mov	r6, r8
 8001136:	46d6      	mov	lr, sl
 8001138:	000d      	movs	r5, r1
 800113a:	0004      	movs	r4, r0
 800113c:	b5c0      	push	{r6, r7, lr}
 800113e:	001f      	movs	r7, r3
 8001140:	0011      	movs	r1, r2
 8001142:	0328      	lsls	r0, r5, #12
 8001144:	0f62      	lsrs	r2, r4, #29
 8001146:	0a40      	lsrs	r0, r0, #9
 8001148:	4310      	orrs	r0, r2
 800114a:	007a      	lsls	r2, r7, #1
 800114c:	0d52      	lsrs	r2, r2, #21
 800114e:	00e3      	lsls	r3, r4, #3
 8001150:	033c      	lsls	r4, r7, #12
 8001152:	4691      	mov	r9, r2
 8001154:	0a64      	lsrs	r4, r4, #9
 8001156:	0ffa      	lsrs	r2, r7, #31
 8001158:	0f4f      	lsrs	r7, r1, #29
 800115a:	006e      	lsls	r6, r5, #1
 800115c:	4327      	orrs	r7, r4
 800115e:	4692      	mov	sl, r2
 8001160:	46b8      	mov	r8, r7
 8001162:	0d76      	lsrs	r6, r6, #21
 8001164:	0fed      	lsrs	r5, r5, #31
 8001166:	00c9      	lsls	r1, r1, #3
 8001168:	4295      	cmp	r5, r2
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x3e>
 800116c:	e099      	b.n	80012a2 <__aeabi_dadd+0x172>
 800116e:	464c      	mov	r4, r9
 8001170:	1b34      	subs	r4, r6, r4
 8001172:	46a4      	mov	ip, r4
 8001174:	2c00      	cmp	r4, #0
 8001176:	dc00      	bgt.n	800117a <__aeabi_dadd+0x4a>
 8001178:	e07c      	b.n	8001274 <__aeabi_dadd+0x144>
 800117a:	464a      	mov	r2, r9
 800117c:	2a00      	cmp	r2, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_dadd+0x52>
 8001180:	e0b8      	b.n	80012f4 <__aeabi_dadd+0x1c4>
 8001182:	4ac5      	ldr	r2, [pc, #788]	; (8001498 <__aeabi_dadd+0x368>)
 8001184:	4296      	cmp	r6, r2
 8001186:	d100      	bne.n	800118a <__aeabi_dadd+0x5a>
 8001188:	e11c      	b.n	80013c4 <__aeabi_dadd+0x294>
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	003c      	movs	r4, r7
 800118e:	0412      	lsls	r2, r2, #16
 8001190:	4314      	orrs	r4, r2
 8001192:	46a0      	mov	r8, r4
 8001194:	4662      	mov	r2, ip
 8001196:	2a38      	cmp	r2, #56	; 0x38
 8001198:	dd00      	ble.n	800119c <__aeabi_dadd+0x6c>
 800119a:	e161      	b.n	8001460 <__aeabi_dadd+0x330>
 800119c:	2a1f      	cmp	r2, #31
 800119e:	dd00      	ble.n	80011a2 <__aeabi_dadd+0x72>
 80011a0:	e1cc      	b.n	800153c <__aeabi_dadd+0x40c>
 80011a2:	4664      	mov	r4, ip
 80011a4:	2220      	movs	r2, #32
 80011a6:	1b12      	subs	r2, r2, r4
 80011a8:	4644      	mov	r4, r8
 80011aa:	4094      	lsls	r4, r2
 80011ac:	000f      	movs	r7, r1
 80011ae:	46a1      	mov	r9, r4
 80011b0:	4664      	mov	r4, ip
 80011b2:	4091      	lsls	r1, r2
 80011b4:	40e7      	lsrs	r7, r4
 80011b6:	464c      	mov	r4, r9
 80011b8:	1e4a      	subs	r2, r1, #1
 80011ba:	4191      	sbcs	r1, r2
 80011bc:	433c      	orrs	r4, r7
 80011be:	4642      	mov	r2, r8
 80011c0:	4321      	orrs	r1, r4
 80011c2:	4664      	mov	r4, ip
 80011c4:	40e2      	lsrs	r2, r4
 80011c6:	1a80      	subs	r0, r0, r2
 80011c8:	1a5c      	subs	r4, r3, r1
 80011ca:	42a3      	cmp	r3, r4
 80011cc:	419b      	sbcs	r3, r3
 80011ce:	425f      	negs	r7, r3
 80011d0:	1bc7      	subs	r7, r0, r7
 80011d2:	023b      	lsls	r3, r7, #8
 80011d4:	d400      	bmi.n	80011d8 <__aeabi_dadd+0xa8>
 80011d6:	e0d0      	b.n	800137a <__aeabi_dadd+0x24a>
 80011d8:	027f      	lsls	r7, r7, #9
 80011da:	0a7f      	lsrs	r7, r7, #9
 80011dc:	2f00      	cmp	r7, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_dadd+0xb2>
 80011e0:	e0ff      	b.n	80013e2 <__aeabi_dadd+0x2b2>
 80011e2:	0038      	movs	r0, r7
 80011e4:	f001 fe5a 	bl	8002e9c <__clzsi2>
 80011e8:	0001      	movs	r1, r0
 80011ea:	3908      	subs	r1, #8
 80011ec:	2320      	movs	r3, #32
 80011ee:	0022      	movs	r2, r4
 80011f0:	1a5b      	subs	r3, r3, r1
 80011f2:	408f      	lsls	r7, r1
 80011f4:	40da      	lsrs	r2, r3
 80011f6:	408c      	lsls	r4, r1
 80011f8:	4317      	orrs	r7, r2
 80011fa:	42b1      	cmp	r1, r6
 80011fc:	da00      	bge.n	8001200 <__aeabi_dadd+0xd0>
 80011fe:	e0ff      	b.n	8001400 <__aeabi_dadd+0x2d0>
 8001200:	1b89      	subs	r1, r1, r6
 8001202:	1c4b      	adds	r3, r1, #1
 8001204:	2b1f      	cmp	r3, #31
 8001206:	dd00      	ble.n	800120a <__aeabi_dadd+0xda>
 8001208:	e0a8      	b.n	800135c <__aeabi_dadd+0x22c>
 800120a:	2220      	movs	r2, #32
 800120c:	0039      	movs	r1, r7
 800120e:	1ad2      	subs	r2, r2, r3
 8001210:	0020      	movs	r0, r4
 8001212:	4094      	lsls	r4, r2
 8001214:	4091      	lsls	r1, r2
 8001216:	40d8      	lsrs	r0, r3
 8001218:	1e62      	subs	r2, r4, #1
 800121a:	4194      	sbcs	r4, r2
 800121c:	40df      	lsrs	r7, r3
 800121e:	2600      	movs	r6, #0
 8001220:	4301      	orrs	r1, r0
 8001222:	430c      	orrs	r4, r1
 8001224:	0763      	lsls	r3, r4, #29
 8001226:	d009      	beq.n	800123c <__aeabi_dadd+0x10c>
 8001228:	230f      	movs	r3, #15
 800122a:	4023      	ands	r3, r4
 800122c:	2b04      	cmp	r3, #4
 800122e:	d005      	beq.n	800123c <__aeabi_dadd+0x10c>
 8001230:	1d23      	adds	r3, r4, #4
 8001232:	42a3      	cmp	r3, r4
 8001234:	41a4      	sbcs	r4, r4
 8001236:	4264      	negs	r4, r4
 8001238:	193f      	adds	r7, r7, r4
 800123a:	001c      	movs	r4, r3
 800123c:	023b      	lsls	r3, r7, #8
 800123e:	d400      	bmi.n	8001242 <__aeabi_dadd+0x112>
 8001240:	e09e      	b.n	8001380 <__aeabi_dadd+0x250>
 8001242:	4b95      	ldr	r3, [pc, #596]	; (8001498 <__aeabi_dadd+0x368>)
 8001244:	3601      	adds	r6, #1
 8001246:	429e      	cmp	r6, r3
 8001248:	d100      	bne.n	800124c <__aeabi_dadd+0x11c>
 800124a:	e0b7      	b.n	80013bc <__aeabi_dadd+0x28c>
 800124c:	4a93      	ldr	r2, [pc, #588]	; (800149c <__aeabi_dadd+0x36c>)
 800124e:	08e4      	lsrs	r4, r4, #3
 8001250:	4017      	ands	r7, r2
 8001252:	077b      	lsls	r3, r7, #29
 8001254:	0571      	lsls	r1, r6, #21
 8001256:	027f      	lsls	r7, r7, #9
 8001258:	4323      	orrs	r3, r4
 800125a:	0b3f      	lsrs	r7, r7, #12
 800125c:	0d4a      	lsrs	r2, r1, #21
 800125e:	0512      	lsls	r2, r2, #20
 8001260:	433a      	orrs	r2, r7
 8001262:	07ed      	lsls	r5, r5, #31
 8001264:	432a      	orrs	r2, r5
 8001266:	0018      	movs	r0, r3
 8001268:	0011      	movs	r1, r2
 800126a:	bce0      	pop	{r5, r6, r7}
 800126c:	46ba      	mov	sl, r7
 800126e:	46b1      	mov	r9, r6
 8001270:	46a8      	mov	r8, r5
 8001272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001274:	2c00      	cmp	r4, #0
 8001276:	d04b      	beq.n	8001310 <__aeabi_dadd+0x1e0>
 8001278:	464c      	mov	r4, r9
 800127a:	1ba4      	subs	r4, r4, r6
 800127c:	46a4      	mov	ip, r4
 800127e:	2e00      	cmp	r6, #0
 8001280:	d000      	beq.n	8001284 <__aeabi_dadd+0x154>
 8001282:	e123      	b.n	80014cc <__aeabi_dadd+0x39c>
 8001284:	0004      	movs	r4, r0
 8001286:	431c      	orrs	r4, r3
 8001288:	d100      	bne.n	800128c <__aeabi_dadd+0x15c>
 800128a:	e1af      	b.n	80015ec <__aeabi_dadd+0x4bc>
 800128c:	4662      	mov	r2, ip
 800128e:	1e54      	subs	r4, r2, #1
 8001290:	2a01      	cmp	r2, #1
 8001292:	d100      	bne.n	8001296 <__aeabi_dadd+0x166>
 8001294:	e215      	b.n	80016c2 <__aeabi_dadd+0x592>
 8001296:	4d80      	ldr	r5, [pc, #512]	; (8001498 <__aeabi_dadd+0x368>)
 8001298:	45ac      	cmp	ip, r5
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x16e>
 800129c:	e1c8      	b.n	8001630 <__aeabi_dadd+0x500>
 800129e:	46a4      	mov	ip, r4
 80012a0:	e11b      	b.n	80014da <__aeabi_dadd+0x3aa>
 80012a2:	464a      	mov	r2, r9
 80012a4:	1ab2      	subs	r2, r6, r2
 80012a6:	4694      	mov	ip, r2
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	dc00      	bgt.n	80012ae <__aeabi_dadd+0x17e>
 80012ac:	e0ac      	b.n	8001408 <__aeabi_dadd+0x2d8>
 80012ae:	464a      	mov	r2, r9
 80012b0:	2a00      	cmp	r2, #0
 80012b2:	d043      	beq.n	800133c <__aeabi_dadd+0x20c>
 80012b4:	4a78      	ldr	r2, [pc, #480]	; (8001498 <__aeabi_dadd+0x368>)
 80012b6:	4296      	cmp	r6, r2
 80012b8:	d100      	bne.n	80012bc <__aeabi_dadd+0x18c>
 80012ba:	e1af      	b.n	800161c <__aeabi_dadd+0x4ec>
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	003c      	movs	r4, r7
 80012c0:	0412      	lsls	r2, r2, #16
 80012c2:	4314      	orrs	r4, r2
 80012c4:	46a0      	mov	r8, r4
 80012c6:	4662      	mov	r2, ip
 80012c8:	2a38      	cmp	r2, #56	; 0x38
 80012ca:	dc67      	bgt.n	800139c <__aeabi_dadd+0x26c>
 80012cc:	2a1f      	cmp	r2, #31
 80012ce:	dc00      	bgt.n	80012d2 <__aeabi_dadd+0x1a2>
 80012d0:	e15f      	b.n	8001592 <__aeabi_dadd+0x462>
 80012d2:	4647      	mov	r7, r8
 80012d4:	3a20      	subs	r2, #32
 80012d6:	40d7      	lsrs	r7, r2
 80012d8:	4662      	mov	r2, ip
 80012da:	2a20      	cmp	r2, #32
 80012dc:	d005      	beq.n	80012ea <__aeabi_dadd+0x1ba>
 80012de:	4664      	mov	r4, ip
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	1b12      	subs	r2, r2, r4
 80012e4:	4644      	mov	r4, r8
 80012e6:	4094      	lsls	r4, r2
 80012e8:	4321      	orrs	r1, r4
 80012ea:	1e4a      	subs	r2, r1, #1
 80012ec:	4191      	sbcs	r1, r2
 80012ee:	000c      	movs	r4, r1
 80012f0:	433c      	orrs	r4, r7
 80012f2:	e057      	b.n	80013a4 <__aeabi_dadd+0x274>
 80012f4:	003a      	movs	r2, r7
 80012f6:	430a      	orrs	r2, r1
 80012f8:	d100      	bne.n	80012fc <__aeabi_dadd+0x1cc>
 80012fa:	e105      	b.n	8001508 <__aeabi_dadd+0x3d8>
 80012fc:	0022      	movs	r2, r4
 80012fe:	3a01      	subs	r2, #1
 8001300:	2c01      	cmp	r4, #1
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x1d6>
 8001304:	e182      	b.n	800160c <__aeabi_dadd+0x4dc>
 8001306:	4c64      	ldr	r4, [pc, #400]	; (8001498 <__aeabi_dadd+0x368>)
 8001308:	45a4      	cmp	ip, r4
 800130a:	d05b      	beq.n	80013c4 <__aeabi_dadd+0x294>
 800130c:	4694      	mov	ip, r2
 800130e:	e741      	b.n	8001194 <__aeabi_dadd+0x64>
 8001310:	4c63      	ldr	r4, [pc, #396]	; (80014a0 <__aeabi_dadd+0x370>)
 8001312:	1c77      	adds	r7, r6, #1
 8001314:	4227      	tst	r7, r4
 8001316:	d000      	beq.n	800131a <__aeabi_dadd+0x1ea>
 8001318:	e0c4      	b.n	80014a4 <__aeabi_dadd+0x374>
 800131a:	0004      	movs	r4, r0
 800131c:	431c      	orrs	r4, r3
 800131e:	2e00      	cmp	r6, #0
 8001320:	d000      	beq.n	8001324 <__aeabi_dadd+0x1f4>
 8001322:	e169      	b.n	80015f8 <__aeabi_dadd+0x4c8>
 8001324:	2c00      	cmp	r4, #0
 8001326:	d100      	bne.n	800132a <__aeabi_dadd+0x1fa>
 8001328:	e1bf      	b.n	80016aa <__aeabi_dadd+0x57a>
 800132a:	4644      	mov	r4, r8
 800132c:	430c      	orrs	r4, r1
 800132e:	d000      	beq.n	8001332 <__aeabi_dadd+0x202>
 8001330:	e1d0      	b.n	80016d4 <__aeabi_dadd+0x5a4>
 8001332:	0742      	lsls	r2, r0, #29
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	08c0      	lsrs	r0, r0, #3
 800133a:	e029      	b.n	8001390 <__aeabi_dadd+0x260>
 800133c:	003a      	movs	r2, r7
 800133e:	430a      	orrs	r2, r1
 8001340:	d100      	bne.n	8001344 <__aeabi_dadd+0x214>
 8001342:	e170      	b.n	8001626 <__aeabi_dadd+0x4f6>
 8001344:	4662      	mov	r2, ip
 8001346:	4664      	mov	r4, ip
 8001348:	3a01      	subs	r2, #1
 800134a:	2c01      	cmp	r4, #1
 800134c:	d100      	bne.n	8001350 <__aeabi_dadd+0x220>
 800134e:	e0e0      	b.n	8001512 <__aeabi_dadd+0x3e2>
 8001350:	4c51      	ldr	r4, [pc, #324]	; (8001498 <__aeabi_dadd+0x368>)
 8001352:	45a4      	cmp	ip, r4
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x228>
 8001356:	e161      	b.n	800161c <__aeabi_dadd+0x4ec>
 8001358:	4694      	mov	ip, r2
 800135a:	e7b4      	b.n	80012c6 <__aeabi_dadd+0x196>
 800135c:	003a      	movs	r2, r7
 800135e:	391f      	subs	r1, #31
 8001360:	40ca      	lsrs	r2, r1
 8001362:	0011      	movs	r1, r2
 8001364:	2b20      	cmp	r3, #32
 8001366:	d003      	beq.n	8001370 <__aeabi_dadd+0x240>
 8001368:	2240      	movs	r2, #64	; 0x40
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	409f      	lsls	r7, r3
 800136e:	433c      	orrs	r4, r7
 8001370:	1e63      	subs	r3, r4, #1
 8001372:	419c      	sbcs	r4, r3
 8001374:	2700      	movs	r7, #0
 8001376:	2600      	movs	r6, #0
 8001378:	430c      	orrs	r4, r1
 800137a:	0763      	lsls	r3, r4, #29
 800137c:	d000      	beq.n	8001380 <__aeabi_dadd+0x250>
 800137e:	e753      	b.n	8001228 <__aeabi_dadd+0xf8>
 8001380:	46b4      	mov	ip, r6
 8001382:	08e4      	lsrs	r4, r4, #3
 8001384:	077b      	lsls	r3, r7, #29
 8001386:	4323      	orrs	r3, r4
 8001388:	08f8      	lsrs	r0, r7, #3
 800138a:	4a43      	ldr	r2, [pc, #268]	; (8001498 <__aeabi_dadd+0x368>)
 800138c:	4594      	cmp	ip, r2
 800138e:	d01d      	beq.n	80013cc <__aeabi_dadd+0x29c>
 8001390:	4662      	mov	r2, ip
 8001392:	0307      	lsls	r7, r0, #12
 8001394:	0552      	lsls	r2, r2, #21
 8001396:	0b3f      	lsrs	r7, r7, #12
 8001398:	0d52      	lsrs	r2, r2, #21
 800139a:	e760      	b.n	800125e <__aeabi_dadd+0x12e>
 800139c:	4644      	mov	r4, r8
 800139e:	430c      	orrs	r4, r1
 80013a0:	1e62      	subs	r2, r4, #1
 80013a2:	4194      	sbcs	r4, r2
 80013a4:	18e4      	adds	r4, r4, r3
 80013a6:	429c      	cmp	r4, r3
 80013a8:	419b      	sbcs	r3, r3
 80013aa:	425f      	negs	r7, r3
 80013ac:	183f      	adds	r7, r7, r0
 80013ae:	023b      	lsls	r3, r7, #8
 80013b0:	d5e3      	bpl.n	800137a <__aeabi_dadd+0x24a>
 80013b2:	4b39      	ldr	r3, [pc, #228]	; (8001498 <__aeabi_dadd+0x368>)
 80013b4:	3601      	adds	r6, #1
 80013b6:	429e      	cmp	r6, r3
 80013b8:	d000      	beq.n	80013bc <__aeabi_dadd+0x28c>
 80013ba:	e0b5      	b.n	8001528 <__aeabi_dadd+0x3f8>
 80013bc:	0032      	movs	r2, r6
 80013be:	2700      	movs	r7, #0
 80013c0:	2300      	movs	r3, #0
 80013c2:	e74c      	b.n	800125e <__aeabi_dadd+0x12e>
 80013c4:	0742      	lsls	r2, r0, #29
 80013c6:	08db      	lsrs	r3, r3, #3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	08c0      	lsrs	r0, r0, #3
 80013cc:	001a      	movs	r2, r3
 80013ce:	4302      	orrs	r2, r0
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x2a4>
 80013d2:	e1e1      	b.n	8001798 <__aeabi_dadd+0x668>
 80013d4:	2780      	movs	r7, #128	; 0x80
 80013d6:	033f      	lsls	r7, r7, #12
 80013d8:	4307      	orrs	r7, r0
 80013da:	033f      	lsls	r7, r7, #12
 80013dc:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <__aeabi_dadd+0x368>)
 80013de:	0b3f      	lsrs	r7, r7, #12
 80013e0:	e73d      	b.n	800125e <__aeabi_dadd+0x12e>
 80013e2:	0020      	movs	r0, r4
 80013e4:	f001 fd5a 	bl	8002e9c <__clzsi2>
 80013e8:	0001      	movs	r1, r0
 80013ea:	3118      	adds	r1, #24
 80013ec:	291f      	cmp	r1, #31
 80013ee:	dc00      	bgt.n	80013f2 <__aeabi_dadd+0x2c2>
 80013f0:	e6fc      	b.n	80011ec <__aeabi_dadd+0xbc>
 80013f2:	3808      	subs	r0, #8
 80013f4:	4084      	lsls	r4, r0
 80013f6:	0027      	movs	r7, r4
 80013f8:	2400      	movs	r4, #0
 80013fa:	42b1      	cmp	r1, r6
 80013fc:	db00      	blt.n	8001400 <__aeabi_dadd+0x2d0>
 80013fe:	e6ff      	b.n	8001200 <__aeabi_dadd+0xd0>
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <__aeabi_dadd+0x36c>)
 8001402:	1a76      	subs	r6, r6, r1
 8001404:	4017      	ands	r7, r2
 8001406:	e70d      	b.n	8001224 <__aeabi_dadd+0xf4>
 8001408:	2a00      	cmp	r2, #0
 800140a:	d02f      	beq.n	800146c <__aeabi_dadd+0x33c>
 800140c:	464a      	mov	r2, r9
 800140e:	1b92      	subs	r2, r2, r6
 8001410:	4694      	mov	ip, r2
 8001412:	2e00      	cmp	r6, #0
 8001414:	d100      	bne.n	8001418 <__aeabi_dadd+0x2e8>
 8001416:	e0ad      	b.n	8001574 <__aeabi_dadd+0x444>
 8001418:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <__aeabi_dadd+0x368>)
 800141a:	4591      	cmp	r9, r2
 800141c:	d100      	bne.n	8001420 <__aeabi_dadd+0x2f0>
 800141e:	e10f      	b.n	8001640 <__aeabi_dadd+0x510>
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	0412      	lsls	r2, r2, #16
 8001424:	4310      	orrs	r0, r2
 8001426:	4662      	mov	r2, ip
 8001428:	2a38      	cmp	r2, #56	; 0x38
 800142a:	dd00      	ble.n	800142e <__aeabi_dadd+0x2fe>
 800142c:	e10f      	b.n	800164e <__aeabi_dadd+0x51e>
 800142e:	2a1f      	cmp	r2, #31
 8001430:	dd00      	ble.n	8001434 <__aeabi_dadd+0x304>
 8001432:	e180      	b.n	8001736 <__aeabi_dadd+0x606>
 8001434:	4664      	mov	r4, ip
 8001436:	2220      	movs	r2, #32
 8001438:	001e      	movs	r6, r3
 800143a:	1b12      	subs	r2, r2, r4
 800143c:	4667      	mov	r7, ip
 800143e:	0004      	movs	r4, r0
 8001440:	4093      	lsls	r3, r2
 8001442:	4094      	lsls	r4, r2
 8001444:	40fe      	lsrs	r6, r7
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	4193      	sbcs	r3, r2
 800144a:	40f8      	lsrs	r0, r7
 800144c:	4334      	orrs	r4, r6
 800144e:	431c      	orrs	r4, r3
 8001450:	4480      	add	r8, r0
 8001452:	1864      	adds	r4, r4, r1
 8001454:	428c      	cmp	r4, r1
 8001456:	41bf      	sbcs	r7, r7
 8001458:	427f      	negs	r7, r7
 800145a:	464e      	mov	r6, r9
 800145c:	4447      	add	r7, r8
 800145e:	e7a6      	b.n	80013ae <__aeabi_dadd+0x27e>
 8001460:	4642      	mov	r2, r8
 8001462:	430a      	orrs	r2, r1
 8001464:	0011      	movs	r1, r2
 8001466:	1e4a      	subs	r2, r1, #1
 8001468:	4191      	sbcs	r1, r2
 800146a:	e6ad      	b.n	80011c8 <__aeabi_dadd+0x98>
 800146c:	4c0c      	ldr	r4, [pc, #48]	; (80014a0 <__aeabi_dadd+0x370>)
 800146e:	1c72      	adds	r2, r6, #1
 8001470:	4222      	tst	r2, r4
 8001472:	d000      	beq.n	8001476 <__aeabi_dadd+0x346>
 8001474:	e0a1      	b.n	80015ba <__aeabi_dadd+0x48a>
 8001476:	0002      	movs	r2, r0
 8001478:	431a      	orrs	r2, r3
 800147a:	2e00      	cmp	r6, #0
 800147c:	d000      	beq.n	8001480 <__aeabi_dadd+0x350>
 800147e:	e0fa      	b.n	8001676 <__aeabi_dadd+0x546>
 8001480:	2a00      	cmp	r2, #0
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x356>
 8001484:	e145      	b.n	8001712 <__aeabi_dadd+0x5e2>
 8001486:	003a      	movs	r2, r7
 8001488:	430a      	orrs	r2, r1
 800148a:	d000      	beq.n	800148e <__aeabi_dadd+0x35e>
 800148c:	e146      	b.n	800171c <__aeabi_dadd+0x5ec>
 800148e:	0742      	lsls	r2, r0, #29
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	4313      	orrs	r3, r2
 8001494:	08c0      	lsrs	r0, r0, #3
 8001496:	e77b      	b.n	8001390 <__aeabi_dadd+0x260>
 8001498:	000007ff 	.word	0x000007ff
 800149c:	ff7fffff 	.word	0xff7fffff
 80014a0:	000007fe 	.word	0x000007fe
 80014a4:	4647      	mov	r7, r8
 80014a6:	1a5c      	subs	r4, r3, r1
 80014a8:	1bc2      	subs	r2, r0, r7
 80014aa:	42a3      	cmp	r3, r4
 80014ac:	41bf      	sbcs	r7, r7
 80014ae:	427f      	negs	r7, r7
 80014b0:	46b9      	mov	r9, r7
 80014b2:	0017      	movs	r7, r2
 80014b4:	464a      	mov	r2, r9
 80014b6:	1abf      	subs	r7, r7, r2
 80014b8:	023a      	lsls	r2, r7, #8
 80014ba:	d500      	bpl.n	80014be <__aeabi_dadd+0x38e>
 80014bc:	e08d      	b.n	80015da <__aeabi_dadd+0x4aa>
 80014be:	0023      	movs	r3, r4
 80014c0:	433b      	orrs	r3, r7
 80014c2:	d000      	beq.n	80014c6 <__aeabi_dadd+0x396>
 80014c4:	e68a      	b.n	80011dc <__aeabi_dadd+0xac>
 80014c6:	2000      	movs	r0, #0
 80014c8:	2500      	movs	r5, #0
 80014ca:	e761      	b.n	8001390 <__aeabi_dadd+0x260>
 80014cc:	4cb4      	ldr	r4, [pc, #720]	; (80017a0 <__aeabi_dadd+0x670>)
 80014ce:	45a1      	cmp	r9, r4
 80014d0:	d100      	bne.n	80014d4 <__aeabi_dadd+0x3a4>
 80014d2:	e0ad      	b.n	8001630 <__aeabi_dadd+0x500>
 80014d4:	2480      	movs	r4, #128	; 0x80
 80014d6:	0424      	lsls	r4, r4, #16
 80014d8:	4320      	orrs	r0, r4
 80014da:	4664      	mov	r4, ip
 80014dc:	2c38      	cmp	r4, #56	; 0x38
 80014de:	dc3d      	bgt.n	800155c <__aeabi_dadd+0x42c>
 80014e0:	4662      	mov	r2, ip
 80014e2:	2c1f      	cmp	r4, #31
 80014e4:	dd00      	ble.n	80014e8 <__aeabi_dadd+0x3b8>
 80014e6:	e0b7      	b.n	8001658 <__aeabi_dadd+0x528>
 80014e8:	2520      	movs	r5, #32
 80014ea:	001e      	movs	r6, r3
 80014ec:	1b2d      	subs	r5, r5, r4
 80014ee:	0004      	movs	r4, r0
 80014f0:	40ab      	lsls	r3, r5
 80014f2:	40ac      	lsls	r4, r5
 80014f4:	40d6      	lsrs	r6, r2
 80014f6:	40d0      	lsrs	r0, r2
 80014f8:	4642      	mov	r2, r8
 80014fa:	1e5d      	subs	r5, r3, #1
 80014fc:	41ab      	sbcs	r3, r5
 80014fe:	4334      	orrs	r4, r6
 8001500:	1a12      	subs	r2, r2, r0
 8001502:	4690      	mov	r8, r2
 8001504:	4323      	orrs	r3, r4
 8001506:	e02c      	b.n	8001562 <__aeabi_dadd+0x432>
 8001508:	0742      	lsls	r2, r0, #29
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	4313      	orrs	r3, r2
 800150e:	08c0      	lsrs	r0, r0, #3
 8001510:	e73b      	b.n	800138a <__aeabi_dadd+0x25a>
 8001512:	185c      	adds	r4, r3, r1
 8001514:	429c      	cmp	r4, r3
 8001516:	419b      	sbcs	r3, r3
 8001518:	4440      	add	r0, r8
 800151a:	425b      	negs	r3, r3
 800151c:	18c7      	adds	r7, r0, r3
 800151e:	2601      	movs	r6, #1
 8001520:	023b      	lsls	r3, r7, #8
 8001522:	d400      	bmi.n	8001526 <__aeabi_dadd+0x3f6>
 8001524:	e729      	b.n	800137a <__aeabi_dadd+0x24a>
 8001526:	2602      	movs	r6, #2
 8001528:	4a9e      	ldr	r2, [pc, #632]	; (80017a4 <__aeabi_dadd+0x674>)
 800152a:	0863      	lsrs	r3, r4, #1
 800152c:	4017      	ands	r7, r2
 800152e:	2201      	movs	r2, #1
 8001530:	4014      	ands	r4, r2
 8001532:	431c      	orrs	r4, r3
 8001534:	07fb      	lsls	r3, r7, #31
 8001536:	431c      	orrs	r4, r3
 8001538:	087f      	lsrs	r7, r7, #1
 800153a:	e673      	b.n	8001224 <__aeabi_dadd+0xf4>
 800153c:	4644      	mov	r4, r8
 800153e:	3a20      	subs	r2, #32
 8001540:	40d4      	lsrs	r4, r2
 8001542:	4662      	mov	r2, ip
 8001544:	2a20      	cmp	r2, #32
 8001546:	d005      	beq.n	8001554 <__aeabi_dadd+0x424>
 8001548:	4667      	mov	r7, ip
 800154a:	2240      	movs	r2, #64	; 0x40
 800154c:	1bd2      	subs	r2, r2, r7
 800154e:	4647      	mov	r7, r8
 8001550:	4097      	lsls	r7, r2
 8001552:	4339      	orrs	r1, r7
 8001554:	1e4a      	subs	r2, r1, #1
 8001556:	4191      	sbcs	r1, r2
 8001558:	4321      	orrs	r1, r4
 800155a:	e635      	b.n	80011c8 <__aeabi_dadd+0x98>
 800155c:	4303      	orrs	r3, r0
 800155e:	1e58      	subs	r0, r3, #1
 8001560:	4183      	sbcs	r3, r0
 8001562:	1acc      	subs	r4, r1, r3
 8001564:	42a1      	cmp	r1, r4
 8001566:	41bf      	sbcs	r7, r7
 8001568:	4643      	mov	r3, r8
 800156a:	427f      	negs	r7, r7
 800156c:	4655      	mov	r5, sl
 800156e:	464e      	mov	r6, r9
 8001570:	1bdf      	subs	r7, r3, r7
 8001572:	e62e      	b.n	80011d2 <__aeabi_dadd+0xa2>
 8001574:	0002      	movs	r2, r0
 8001576:	431a      	orrs	r2, r3
 8001578:	d100      	bne.n	800157c <__aeabi_dadd+0x44c>
 800157a:	e0bd      	b.n	80016f8 <__aeabi_dadd+0x5c8>
 800157c:	4662      	mov	r2, ip
 800157e:	4664      	mov	r4, ip
 8001580:	3a01      	subs	r2, #1
 8001582:	2c01      	cmp	r4, #1
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x458>
 8001586:	e0e5      	b.n	8001754 <__aeabi_dadd+0x624>
 8001588:	4c85      	ldr	r4, [pc, #532]	; (80017a0 <__aeabi_dadd+0x670>)
 800158a:	45a4      	cmp	ip, r4
 800158c:	d058      	beq.n	8001640 <__aeabi_dadd+0x510>
 800158e:	4694      	mov	ip, r2
 8001590:	e749      	b.n	8001426 <__aeabi_dadd+0x2f6>
 8001592:	4664      	mov	r4, ip
 8001594:	2220      	movs	r2, #32
 8001596:	1b12      	subs	r2, r2, r4
 8001598:	4644      	mov	r4, r8
 800159a:	4094      	lsls	r4, r2
 800159c:	000f      	movs	r7, r1
 800159e:	46a1      	mov	r9, r4
 80015a0:	4664      	mov	r4, ip
 80015a2:	4091      	lsls	r1, r2
 80015a4:	40e7      	lsrs	r7, r4
 80015a6:	464c      	mov	r4, r9
 80015a8:	1e4a      	subs	r2, r1, #1
 80015aa:	4191      	sbcs	r1, r2
 80015ac:	433c      	orrs	r4, r7
 80015ae:	4642      	mov	r2, r8
 80015b0:	430c      	orrs	r4, r1
 80015b2:	4661      	mov	r1, ip
 80015b4:	40ca      	lsrs	r2, r1
 80015b6:	1880      	adds	r0, r0, r2
 80015b8:	e6f4      	b.n	80013a4 <__aeabi_dadd+0x274>
 80015ba:	4c79      	ldr	r4, [pc, #484]	; (80017a0 <__aeabi_dadd+0x670>)
 80015bc:	42a2      	cmp	r2, r4
 80015be:	d100      	bne.n	80015c2 <__aeabi_dadd+0x492>
 80015c0:	e6fd      	b.n	80013be <__aeabi_dadd+0x28e>
 80015c2:	1859      	adds	r1, r3, r1
 80015c4:	4299      	cmp	r1, r3
 80015c6:	419b      	sbcs	r3, r3
 80015c8:	4440      	add	r0, r8
 80015ca:	425f      	negs	r7, r3
 80015cc:	19c7      	adds	r7, r0, r7
 80015ce:	07fc      	lsls	r4, r7, #31
 80015d0:	0849      	lsrs	r1, r1, #1
 80015d2:	0016      	movs	r6, r2
 80015d4:	430c      	orrs	r4, r1
 80015d6:	087f      	lsrs	r7, r7, #1
 80015d8:	e6cf      	b.n	800137a <__aeabi_dadd+0x24a>
 80015da:	1acc      	subs	r4, r1, r3
 80015dc:	42a1      	cmp	r1, r4
 80015de:	41bf      	sbcs	r7, r7
 80015e0:	4643      	mov	r3, r8
 80015e2:	427f      	negs	r7, r7
 80015e4:	1a18      	subs	r0, r3, r0
 80015e6:	4655      	mov	r5, sl
 80015e8:	1bc7      	subs	r7, r0, r7
 80015ea:	e5f7      	b.n	80011dc <__aeabi_dadd+0xac>
 80015ec:	08c9      	lsrs	r1, r1, #3
 80015ee:	077b      	lsls	r3, r7, #29
 80015f0:	4655      	mov	r5, sl
 80015f2:	430b      	orrs	r3, r1
 80015f4:	08f8      	lsrs	r0, r7, #3
 80015f6:	e6c8      	b.n	800138a <__aeabi_dadd+0x25a>
 80015f8:	2c00      	cmp	r4, #0
 80015fa:	d000      	beq.n	80015fe <__aeabi_dadd+0x4ce>
 80015fc:	e081      	b.n	8001702 <__aeabi_dadd+0x5d2>
 80015fe:	4643      	mov	r3, r8
 8001600:	430b      	orrs	r3, r1
 8001602:	d115      	bne.n	8001630 <__aeabi_dadd+0x500>
 8001604:	2080      	movs	r0, #128	; 0x80
 8001606:	2500      	movs	r5, #0
 8001608:	0300      	lsls	r0, r0, #12
 800160a:	e6e3      	b.n	80013d4 <__aeabi_dadd+0x2a4>
 800160c:	1a5c      	subs	r4, r3, r1
 800160e:	42a3      	cmp	r3, r4
 8001610:	419b      	sbcs	r3, r3
 8001612:	1bc7      	subs	r7, r0, r7
 8001614:	425b      	negs	r3, r3
 8001616:	2601      	movs	r6, #1
 8001618:	1aff      	subs	r7, r7, r3
 800161a:	e5da      	b.n	80011d2 <__aeabi_dadd+0xa2>
 800161c:	0742      	lsls	r2, r0, #29
 800161e:	08db      	lsrs	r3, r3, #3
 8001620:	4313      	orrs	r3, r2
 8001622:	08c0      	lsrs	r0, r0, #3
 8001624:	e6d2      	b.n	80013cc <__aeabi_dadd+0x29c>
 8001626:	0742      	lsls	r2, r0, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c0      	lsrs	r0, r0, #3
 800162e:	e6ac      	b.n	800138a <__aeabi_dadd+0x25a>
 8001630:	4643      	mov	r3, r8
 8001632:	4642      	mov	r2, r8
 8001634:	08c9      	lsrs	r1, r1, #3
 8001636:	075b      	lsls	r3, r3, #29
 8001638:	4655      	mov	r5, sl
 800163a:	430b      	orrs	r3, r1
 800163c:	08d0      	lsrs	r0, r2, #3
 800163e:	e6c5      	b.n	80013cc <__aeabi_dadd+0x29c>
 8001640:	4643      	mov	r3, r8
 8001642:	4642      	mov	r2, r8
 8001644:	075b      	lsls	r3, r3, #29
 8001646:	08c9      	lsrs	r1, r1, #3
 8001648:	430b      	orrs	r3, r1
 800164a:	08d0      	lsrs	r0, r2, #3
 800164c:	e6be      	b.n	80013cc <__aeabi_dadd+0x29c>
 800164e:	4303      	orrs	r3, r0
 8001650:	001c      	movs	r4, r3
 8001652:	1e63      	subs	r3, r4, #1
 8001654:	419c      	sbcs	r4, r3
 8001656:	e6fc      	b.n	8001452 <__aeabi_dadd+0x322>
 8001658:	0002      	movs	r2, r0
 800165a:	3c20      	subs	r4, #32
 800165c:	40e2      	lsrs	r2, r4
 800165e:	0014      	movs	r4, r2
 8001660:	4662      	mov	r2, ip
 8001662:	2a20      	cmp	r2, #32
 8001664:	d003      	beq.n	800166e <__aeabi_dadd+0x53e>
 8001666:	2540      	movs	r5, #64	; 0x40
 8001668:	1aad      	subs	r5, r5, r2
 800166a:	40a8      	lsls	r0, r5
 800166c:	4303      	orrs	r3, r0
 800166e:	1e58      	subs	r0, r3, #1
 8001670:	4183      	sbcs	r3, r0
 8001672:	4323      	orrs	r3, r4
 8001674:	e775      	b.n	8001562 <__aeabi_dadd+0x432>
 8001676:	2a00      	cmp	r2, #0
 8001678:	d0e2      	beq.n	8001640 <__aeabi_dadd+0x510>
 800167a:	003a      	movs	r2, r7
 800167c:	430a      	orrs	r2, r1
 800167e:	d0cd      	beq.n	800161c <__aeabi_dadd+0x4ec>
 8001680:	0742      	lsls	r2, r0, #29
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	4313      	orrs	r3, r2
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	08c0      	lsrs	r0, r0, #3
 800168a:	0312      	lsls	r2, r2, #12
 800168c:	4210      	tst	r0, r2
 800168e:	d006      	beq.n	800169e <__aeabi_dadd+0x56e>
 8001690:	08fc      	lsrs	r4, r7, #3
 8001692:	4214      	tst	r4, r2
 8001694:	d103      	bne.n	800169e <__aeabi_dadd+0x56e>
 8001696:	0020      	movs	r0, r4
 8001698:	08cb      	lsrs	r3, r1, #3
 800169a:	077a      	lsls	r2, r7, #29
 800169c:	4313      	orrs	r3, r2
 800169e:	0f5a      	lsrs	r2, r3, #29
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	0752      	lsls	r2, r2, #29
 80016a4:	08db      	lsrs	r3, r3, #3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	e690      	b.n	80013cc <__aeabi_dadd+0x29c>
 80016aa:	4643      	mov	r3, r8
 80016ac:	430b      	orrs	r3, r1
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0x582>
 80016b0:	e709      	b.n	80014c6 <__aeabi_dadd+0x396>
 80016b2:	4643      	mov	r3, r8
 80016b4:	4642      	mov	r2, r8
 80016b6:	08c9      	lsrs	r1, r1, #3
 80016b8:	075b      	lsls	r3, r3, #29
 80016ba:	4655      	mov	r5, sl
 80016bc:	430b      	orrs	r3, r1
 80016be:	08d0      	lsrs	r0, r2, #3
 80016c0:	e666      	b.n	8001390 <__aeabi_dadd+0x260>
 80016c2:	1acc      	subs	r4, r1, r3
 80016c4:	42a1      	cmp	r1, r4
 80016c6:	4189      	sbcs	r1, r1
 80016c8:	1a3f      	subs	r7, r7, r0
 80016ca:	4249      	negs	r1, r1
 80016cc:	4655      	mov	r5, sl
 80016ce:	2601      	movs	r6, #1
 80016d0:	1a7f      	subs	r7, r7, r1
 80016d2:	e57e      	b.n	80011d2 <__aeabi_dadd+0xa2>
 80016d4:	4642      	mov	r2, r8
 80016d6:	1a5c      	subs	r4, r3, r1
 80016d8:	1a87      	subs	r7, r0, r2
 80016da:	42a3      	cmp	r3, r4
 80016dc:	4192      	sbcs	r2, r2
 80016de:	4252      	negs	r2, r2
 80016e0:	1abf      	subs	r7, r7, r2
 80016e2:	023a      	lsls	r2, r7, #8
 80016e4:	d53d      	bpl.n	8001762 <__aeabi_dadd+0x632>
 80016e6:	1acc      	subs	r4, r1, r3
 80016e8:	42a1      	cmp	r1, r4
 80016ea:	4189      	sbcs	r1, r1
 80016ec:	4643      	mov	r3, r8
 80016ee:	4249      	negs	r1, r1
 80016f0:	1a1f      	subs	r7, r3, r0
 80016f2:	4655      	mov	r5, sl
 80016f4:	1a7f      	subs	r7, r7, r1
 80016f6:	e595      	b.n	8001224 <__aeabi_dadd+0xf4>
 80016f8:	077b      	lsls	r3, r7, #29
 80016fa:	08c9      	lsrs	r1, r1, #3
 80016fc:	430b      	orrs	r3, r1
 80016fe:	08f8      	lsrs	r0, r7, #3
 8001700:	e643      	b.n	800138a <__aeabi_dadd+0x25a>
 8001702:	4644      	mov	r4, r8
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	430c      	orrs	r4, r1
 8001708:	d130      	bne.n	800176c <__aeabi_dadd+0x63c>
 800170a:	0742      	lsls	r2, r0, #29
 800170c:	4313      	orrs	r3, r2
 800170e:	08c0      	lsrs	r0, r0, #3
 8001710:	e65c      	b.n	80013cc <__aeabi_dadd+0x29c>
 8001712:	077b      	lsls	r3, r7, #29
 8001714:	08c9      	lsrs	r1, r1, #3
 8001716:	430b      	orrs	r3, r1
 8001718:	08f8      	lsrs	r0, r7, #3
 800171a:	e639      	b.n	8001390 <__aeabi_dadd+0x260>
 800171c:	185c      	adds	r4, r3, r1
 800171e:	429c      	cmp	r4, r3
 8001720:	419b      	sbcs	r3, r3
 8001722:	4440      	add	r0, r8
 8001724:	425b      	negs	r3, r3
 8001726:	18c7      	adds	r7, r0, r3
 8001728:	023b      	lsls	r3, r7, #8
 800172a:	d400      	bmi.n	800172e <__aeabi_dadd+0x5fe>
 800172c:	e625      	b.n	800137a <__aeabi_dadd+0x24a>
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <__aeabi_dadd+0x674>)
 8001730:	2601      	movs	r6, #1
 8001732:	401f      	ands	r7, r3
 8001734:	e621      	b.n	800137a <__aeabi_dadd+0x24a>
 8001736:	0004      	movs	r4, r0
 8001738:	3a20      	subs	r2, #32
 800173a:	40d4      	lsrs	r4, r2
 800173c:	4662      	mov	r2, ip
 800173e:	2a20      	cmp	r2, #32
 8001740:	d004      	beq.n	800174c <__aeabi_dadd+0x61c>
 8001742:	2240      	movs	r2, #64	; 0x40
 8001744:	4666      	mov	r6, ip
 8001746:	1b92      	subs	r2, r2, r6
 8001748:	4090      	lsls	r0, r2
 800174a:	4303      	orrs	r3, r0
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	4193      	sbcs	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	e67e      	b.n	8001452 <__aeabi_dadd+0x322>
 8001754:	185c      	adds	r4, r3, r1
 8001756:	428c      	cmp	r4, r1
 8001758:	4189      	sbcs	r1, r1
 800175a:	4440      	add	r0, r8
 800175c:	4249      	negs	r1, r1
 800175e:	1847      	adds	r7, r0, r1
 8001760:	e6dd      	b.n	800151e <__aeabi_dadd+0x3ee>
 8001762:	0023      	movs	r3, r4
 8001764:	433b      	orrs	r3, r7
 8001766:	d100      	bne.n	800176a <__aeabi_dadd+0x63a>
 8001768:	e6ad      	b.n	80014c6 <__aeabi_dadd+0x396>
 800176a:	e606      	b.n	800137a <__aeabi_dadd+0x24a>
 800176c:	0744      	lsls	r4, r0, #29
 800176e:	4323      	orrs	r3, r4
 8001770:	2480      	movs	r4, #128	; 0x80
 8001772:	08c0      	lsrs	r0, r0, #3
 8001774:	0324      	lsls	r4, r4, #12
 8001776:	4220      	tst	r0, r4
 8001778:	d008      	beq.n	800178c <__aeabi_dadd+0x65c>
 800177a:	4642      	mov	r2, r8
 800177c:	08d6      	lsrs	r6, r2, #3
 800177e:	4226      	tst	r6, r4
 8001780:	d104      	bne.n	800178c <__aeabi_dadd+0x65c>
 8001782:	4655      	mov	r5, sl
 8001784:	0030      	movs	r0, r6
 8001786:	08cb      	lsrs	r3, r1, #3
 8001788:	0751      	lsls	r1, r2, #29
 800178a:	430b      	orrs	r3, r1
 800178c:	0f5a      	lsrs	r2, r3, #29
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	0752      	lsls	r2, r2, #29
 8001794:	4313      	orrs	r3, r2
 8001796:	e619      	b.n	80013cc <__aeabi_dadd+0x29c>
 8001798:	2300      	movs	r3, #0
 800179a:	4a01      	ldr	r2, [pc, #4]	; (80017a0 <__aeabi_dadd+0x670>)
 800179c:	001f      	movs	r7, r3
 800179e:	e55e      	b.n	800125e <__aeabi_dadd+0x12e>
 80017a0:	000007ff 	.word	0x000007ff
 80017a4:	ff7fffff 	.word	0xff7fffff

080017a8 <__aeabi_ddiv>:
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017aa:	4657      	mov	r7, sl
 80017ac:	464e      	mov	r6, r9
 80017ae:	4645      	mov	r5, r8
 80017b0:	46de      	mov	lr, fp
 80017b2:	b5e0      	push	{r5, r6, r7, lr}
 80017b4:	4681      	mov	r9, r0
 80017b6:	0005      	movs	r5, r0
 80017b8:	030c      	lsls	r4, r1, #12
 80017ba:	0048      	lsls	r0, r1, #1
 80017bc:	4692      	mov	sl, r2
 80017be:	001f      	movs	r7, r3
 80017c0:	b085      	sub	sp, #20
 80017c2:	0b24      	lsrs	r4, r4, #12
 80017c4:	0d40      	lsrs	r0, r0, #21
 80017c6:	0fce      	lsrs	r6, r1, #31
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d100      	bne.n	80017ce <__aeabi_ddiv+0x26>
 80017cc:	e156      	b.n	8001a7c <__aeabi_ddiv+0x2d4>
 80017ce:	4bd4      	ldr	r3, [pc, #848]	; (8001b20 <__aeabi_ddiv+0x378>)
 80017d0:	4298      	cmp	r0, r3
 80017d2:	d100      	bne.n	80017d6 <__aeabi_ddiv+0x2e>
 80017d4:	e172      	b.n	8001abc <__aeabi_ddiv+0x314>
 80017d6:	0f6b      	lsrs	r3, r5, #29
 80017d8:	00e4      	lsls	r4, r4, #3
 80017da:	431c      	orrs	r4, r3
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	4323      	orrs	r3, r4
 80017e2:	4698      	mov	r8, r3
 80017e4:	4bcf      	ldr	r3, [pc, #828]	; (8001b24 <__aeabi_ddiv+0x37c>)
 80017e6:	00ed      	lsls	r5, r5, #3
 80017e8:	469b      	mov	fp, r3
 80017ea:	2300      	movs	r3, #0
 80017ec:	4699      	mov	r9, r3
 80017ee:	4483      	add	fp, r0
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	033c      	lsls	r4, r7, #12
 80017f4:	007b      	lsls	r3, r7, #1
 80017f6:	4650      	mov	r0, sl
 80017f8:	0b24      	lsrs	r4, r4, #12
 80017fa:	0d5b      	lsrs	r3, r3, #21
 80017fc:	0fff      	lsrs	r7, r7, #31
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d100      	bne.n	8001804 <__aeabi_ddiv+0x5c>
 8001802:	e11f      	b.n	8001a44 <__aeabi_ddiv+0x29c>
 8001804:	4ac6      	ldr	r2, [pc, #792]	; (8001b20 <__aeabi_ddiv+0x378>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d100      	bne.n	800180c <__aeabi_ddiv+0x64>
 800180a:	e162      	b.n	8001ad2 <__aeabi_ddiv+0x32a>
 800180c:	49c5      	ldr	r1, [pc, #788]	; (8001b24 <__aeabi_ddiv+0x37c>)
 800180e:	0f42      	lsrs	r2, r0, #29
 8001810:	468c      	mov	ip, r1
 8001812:	00e4      	lsls	r4, r4, #3
 8001814:	4659      	mov	r1, fp
 8001816:	4314      	orrs	r4, r2
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	4463      	add	r3, ip
 800181c:	0412      	lsls	r2, r2, #16
 800181e:	1acb      	subs	r3, r1, r3
 8001820:	4314      	orrs	r4, r2
 8001822:	469b      	mov	fp, r3
 8001824:	00c2      	lsls	r2, r0, #3
 8001826:	2000      	movs	r0, #0
 8001828:	0033      	movs	r3, r6
 800182a:	407b      	eors	r3, r7
 800182c:	469a      	mov	sl, r3
 800182e:	464b      	mov	r3, r9
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d827      	bhi.n	8001884 <__aeabi_ddiv+0xdc>
 8001834:	49bc      	ldr	r1, [pc, #752]	; (8001b28 <__aeabi_ddiv+0x380>)
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	58cb      	ldr	r3, [r1, r3]
 800183a:	469f      	mov	pc, r3
 800183c:	46b2      	mov	sl, r6
 800183e:	9b00      	ldr	r3, [sp, #0]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d016      	beq.n	8001872 <__aeabi_ddiv+0xca>
 8001844:	2b03      	cmp	r3, #3
 8001846:	d100      	bne.n	800184a <__aeabi_ddiv+0xa2>
 8001848:	e28e      	b.n	8001d68 <__aeabi_ddiv+0x5c0>
 800184a:	2b01      	cmp	r3, #1
 800184c:	d000      	beq.n	8001850 <__aeabi_ddiv+0xa8>
 800184e:	e0d9      	b.n	8001a04 <__aeabi_ddiv+0x25c>
 8001850:	2300      	movs	r3, #0
 8001852:	2400      	movs	r4, #0
 8001854:	2500      	movs	r5, #0
 8001856:	4652      	mov	r2, sl
 8001858:	051b      	lsls	r3, r3, #20
 800185a:	4323      	orrs	r3, r4
 800185c:	07d2      	lsls	r2, r2, #31
 800185e:	4313      	orrs	r3, r2
 8001860:	0028      	movs	r0, r5
 8001862:	0019      	movs	r1, r3
 8001864:	b005      	add	sp, #20
 8001866:	bcf0      	pop	{r4, r5, r6, r7}
 8001868:	46bb      	mov	fp, r7
 800186a:	46b2      	mov	sl, r6
 800186c:	46a9      	mov	r9, r5
 800186e:	46a0      	mov	r8, r4
 8001870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001872:	2400      	movs	r4, #0
 8001874:	2500      	movs	r5, #0
 8001876:	4baa      	ldr	r3, [pc, #680]	; (8001b20 <__aeabi_ddiv+0x378>)
 8001878:	e7ed      	b.n	8001856 <__aeabi_ddiv+0xae>
 800187a:	46ba      	mov	sl, r7
 800187c:	46a0      	mov	r8, r4
 800187e:	0015      	movs	r5, r2
 8001880:	9000      	str	r0, [sp, #0]
 8001882:	e7dc      	b.n	800183e <__aeabi_ddiv+0x96>
 8001884:	4544      	cmp	r4, r8
 8001886:	d200      	bcs.n	800188a <__aeabi_ddiv+0xe2>
 8001888:	e1c7      	b.n	8001c1a <__aeabi_ddiv+0x472>
 800188a:	d100      	bne.n	800188e <__aeabi_ddiv+0xe6>
 800188c:	e1c2      	b.n	8001c14 <__aeabi_ddiv+0x46c>
 800188e:	2301      	movs	r3, #1
 8001890:	425b      	negs	r3, r3
 8001892:	469c      	mov	ip, r3
 8001894:	002e      	movs	r6, r5
 8001896:	4640      	mov	r0, r8
 8001898:	2500      	movs	r5, #0
 800189a:	44e3      	add	fp, ip
 800189c:	0223      	lsls	r3, r4, #8
 800189e:	0e14      	lsrs	r4, r2, #24
 80018a0:	431c      	orrs	r4, r3
 80018a2:	0c1b      	lsrs	r3, r3, #16
 80018a4:	4699      	mov	r9, r3
 80018a6:	0423      	lsls	r3, r4, #16
 80018a8:	0c1f      	lsrs	r7, r3, #16
 80018aa:	0212      	lsls	r2, r2, #8
 80018ac:	4649      	mov	r1, r9
 80018ae:	9200      	str	r2, [sp, #0]
 80018b0:	9701      	str	r7, [sp, #4]
 80018b2:	f7fe fcd5 	bl	8000260 <__aeabi_uidivmod>
 80018b6:	0002      	movs	r2, r0
 80018b8:	437a      	muls	r2, r7
 80018ba:	040b      	lsls	r3, r1, #16
 80018bc:	0c31      	lsrs	r1, r6, #16
 80018be:	4680      	mov	r8, r0
 80018c0:	4319      	orrs	r1, r3
 80018c2:	428a      	cmp	r2, r1
 80018c4:	d907      	bls.n	80018d6 <__aeabi_ddiv+0x12e>
 80018c6:	2301      	movs	r3, #1
 80018c8:	425b      	negs	r3, r3
 80018ca:	469c      	mov	ip, r3
 80018cc:	1909      	adds	r1, r1, r4
 80018ce:	44e0      	add	r8, ip
 80018d0:	428c      	cmp	r4, r1
 80018d2:	d800      	bhi.n	80018d6 <__aeabi_ddiv+0x12e>
 80018d4:	e207      	b.n	8001ce6 <__aeabi_ddiv+0x53e>
 80018d6:	1a88      	subs	r0, r1, r2
 80018d8:	4649      	mov	r1, r9
 80018da:	f7fe fcc1 	bl	8000260 <__aeabi_uidivmod>
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	468c      	mov	ip, r1
 80018e2:	0431      	lsls	r1, r6, #16
 80018e4:	4666      	mov	r6, ip
 80018e6:	9a01      	ldr	r2, [sp, #4]
 80018e8:	0c09      	lsrs	r1, r1, #16
 80018ea:	4342      	muls	r2, r0
 80018ec:	0003      	movs	r3, r0
 80018ee:	4331      	orrs	r1, r6
 80018f0:	428a      	cmp	r2, r1
 80018f2:	d904      	bls.n	80018fe <__aeabi_ddiv+0x156>
 80018f4:	1909      	adds	r1, r1, r4
 80018f6:	3b01      	subs	r3, #1
 80018f8:	428c      	cmp	r4, r1
 80018fa:	d800      	bhi.n	80018fe <__aeabi_ddiv+0x156>
 80018fc:	e1ed      	b.n	8001cda <__aeabi_ddiv+0x532>
 80018fe:	1a88      	subs	r0, r1, r2
 8001900:	4642      	mov	r2, r8
 8001902:	0412      	lsls	r2, r2, #16
 8001904:	431a      	orrs	r2, r3
 8001906:	4690      	mov	r8, r2
 8001908:	4641      	mov	r1, r8
 800190a:	9b00      	ldr	r3, [sp, #0]
 800190c:	040e      	lsls	r6, r1, #16
 800190e:	0c1b      	lsrs	r3, r3, #16
 8001910:	001f      	movs	r7, r3
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	9b00      	ldr	r3, [sp, #0]
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	041b      	lsls	r3, r3, #16
 800191a:	0c19      	lsrs	r1, r3, #16
 800191c:	000b      	movs	r3, r1
 800191e:	4373      	muls	r3, r6
 8001920:	0c12      	lsrs	r2, r2, #16
 8001922:	437e      	muls	r6, r7
 8001924:	9103      	str	r1, [sp, #12]
 8001926:	4351      	muls	r1, r2
 8001928:	437a      	muls	r2, r7
 800192a:	0c1f      	lsrs	r7, r3, #16
 800192c:	46bc      	mov	ip, r7
 800192e:	1876      	adds	r6, r6, r1
 8001930:	4466      	add	r6, ip
 8001932:	42b1      	cmp	r1, r6
 8001934:	d903      	bls.n	800193e <__aeabi_ddiv+0x196>
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	0249      	lsls	r1, r1, #9
 800193a:	468c      	mov	ip, r1
 800193c:	4462      	add	r2, ip
 800193e:	0c31      	lsrs	r1, r6, #16
 8001940:	188a      	adds	r2, r1, r2
 8001942:	0431      	lsls	r1, r6, #16
 8001944:	041e      	lsls	r6, r3, #16
 8001946:	0c36      	lsrs	r6, r6, #16
 8001948:	198e      	adds	r6, r1, r6
 800194a:	4290      	cmp	r0, r2
 800194c:	d302      	bcc.n	8001954 <__aeabi_ddiv+0x1ac>
 800194e:	d112      	bne.n	8001976 <__aeabi_ddiv+0x1ce>
 8001950:	42b5      	cmp	r5, r6
 8001952:	d210      	bcs.n	8001976 <__aeabi_ddiv+0x1ce>
 8001954:	4643      	mov	r3, r8
 8001956:	1e59      	subs	r1, r3, #1
 8001958:	9b00      	ldr	r3, [sp, #0]
 800195a:	469c      	mov	ip, r3
 800195c:	4465      	add	r5, ip
 800195e:	001f      	movs	r7, r3
 8001960:	429d      	cmp	r5, r3
 8001962:	419b      	sbcs	r3, r3
 8001964:	425b      	negs	r3, r3
 8001966:	191b      	adds	r3, r3, r4
 8001968:	18c0      	adds	r0, r0, r3
 800196a:	4284      	cmp	r4, r0
 800196c:	d200      	bcs.n	8001970 <__aeabi_ddiv+0x1c8>
 800196e:	e1a0      	b.n	8001cb2 <__aeabi_ddiv+0x50a>
 8001970:	d100      	bne.n	8001974 <__aeabi_ddiv+0x1cc>
 8001972:	e19b      	b.n	8001cac <__aeabi_ddiv+0x504>
 8001974:	4688      	mov	r8, r1
 8001976:	1bae      	subs	r6, r5, r6
 8001978:	42b5      	cmp	r5, r6
 800197a:	41ad      	sbcs	r5, r5
 800197c:	1a80      	subs	r0, r0, r2
 800197e:	426d      	negs	r5, r5
 8001980:	1b40      	subs	r0, r0, r5
 8001982:	4284      	cmp	r4, r0
 8001984:	d100      	bne.n	8001988 <__aeabi_ddiv+0x1e0>
 8001986:	e1d5      	b.n	8001d34 <__aeabi_ddiv+0x58c>
 8001988:	4649      	mov	r1, r9
 800198a:	f7fe fc69 	bl	8000260 <__aeabi_uidivmod>
 800198e:	9a01      	ldr	r2, [sp, #4]
 8001990:	040b      	lsls	r3, r1, #16
 8001992:	4342      	muls	r2, r0
 8001994:	0c31      	lsrs	r1, r6, #16
 8001996:	0005      	movs	r5, r0
 8001998:	4319      	orrs	r1, r3
 800199a:	428a      	cmp	r2, r1
 800199c:	d900      	bls.n	80019a0 <__aeabi_ddiv+0x1f8>
 800199e:	e16c      	b.n	8001c7a <__aeabi_ddiv+0x4d2>
 80019a0:	1a88      	subs	r0, r1, r2
 80019a2:	4649      	mov	r1, r9
 80019a4:	f7fe fc5c 	bl	8000260 <__aeabi_uidivmod>
 80019a8:	9a01      	ldr	r2, [sp, #4]
 80019aa:	0436      	lsls	r6, r6, #16
 80019ac:	4342      	muls	r2, r0
 80019ae:	0409      	lsls	r1, r1, #16
 80019b0:	0c36      	lsrs	r6, r6, #16
 80019b2:	0003      	movs	r3, r0
 80019b4:	430e      	orrs	r6, r1
 80019b6:	42b2      	cmp	r2, r6
 80019b8:	d900      	bls.n	80019bc <__aeabi_ddiv+0x214>
 80019ba:	e153      	b.n	8001c64 <__aeabi_ddiv+0x4bc>
 80019bc:	9803      	ldr	r0, [sp, #12]
 80019be:	1ab6      	subs	r6, r6, r2
 80019c0:	0002      	movs	r2, r0
 80019c2:	042d      	lsls	r5, r5, #16
 80019c4:	431d      	orrs	r5, r3
 80019c6:	9f02      	ldr	r7, [sp, #8]
 80019c8:	042b      	lsls	r3, r5, #16
 80019ca:	0c1b      	lsrs	r3, r3, #16
 80019cc:	435a      	muls	r2, r3
 80019ce:	437b      	muls	r3, r7
 80019d0:	469c      	mov	ip, r3
 80019d2:	0c29      	lsrs	r1, r5, #16
 80019d4:	4348      	muls	r0, r1
 80019d6:	0c13      	lsrs	r3, r2, #16
 80019d8:	4484      	add	ip, r0
 80019da:	4463      	add	r3, ip
 80019dc:	4379      	muls	r1, r7
 80019de:	4298      	cmp	r0, r3
 80019e0:	d903      	bls.n	80019ea <__aeabi_ddiv+0x242>
 80019e2:	2080      	movs	r0, #128	; 0x80
 80019e4:	0240      	lsls	r0, r0, #9
 80019e6:	4684      	mov	ip, r0
 80019e8:	4461      	add	r1, ip
 80019ea:	0c18      	lsrs	r0, r3, #16
 80019ec:	0412      	lsls	r2, r2, #16
 80019ee:	041b      	lsls	r3, r3, #16
 80019f0:	0c12      	lsrs	r2, r2, #16
 80019f2:	1841      	adds	r1, r0, r1
 80019f4:	189b      	adds	r3, r3, r2
 80019f6:	428e      	cmp	r6, r1
 80019f8:	d200      	bcs.n	80019fc <__aeabi_ddiv+0x254>
 80019fa:	e0ff      	b.n	8001bfc <__aeabi_ddiv+0x454>
 80019fc:	d100      	bne.n	8001a00 <__aeabi_ddiv+0x258>
 80019fe:	e0fa      	b.n	8001bf6 <__aeabi_ddiv+0x44e>
 8001a00:	2301      	movs	r3, #1
 8001a02:	431d      	orrs	r5, r3
 8001a04:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <__aeabi_ddiv+0x384>)
 8001a06:	445a      	add	r2, fp
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	dc00      	bgt.n	8001a0e <__aeabi_ddiv+0x266>
 8001a0c:	e0aa      	b.n	8001b64 <__aeabi_ddiv+0x3bc>
 8001a0e:	076b      	lsls	r3, r5, #29
 8001a10:	d000      	beq.n	8001a14 <__aeabi_ddiv+0x26c>
 8001a12:	e13d      	b.n	8001c90 <__aeabi_ddiv+0x4e8>
 8001a14:	08ed      	lsrs	r5, r5, #3
 8001a16:	4643      	mov	r3, r8
 8001a18:	01db      	lsls	r3, r3, #7
 8001a1a:	d506      	bpl.n	8001a2a <__aeabi_ddiv+0x282>
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <__aeabi_ddiv+0x388>)
 8001a20:	401a      	ands	r2, r3
 8001a22:	4690      	mov	r8, r2
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	445a      	add	r2, fp
 8001a2a:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <__aeabi_ddiv+0x38c>)
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_ddiv+0x28a>
 8001a30:	e71f      	b.n	8001872 <__aeabi_ddiv+0xca>
 8001a32:	4643      	mov	r3, r8
 8001a34:	075b      	lsls	r3, r3, #29
 8001a36:	431d      	orrs	r5, r3
 8001a38:	4643      	mov	r3, r8
 8001a3a:	0552      	lsls	r2, r2, #21
 8001a3c:	025c      	lsls	r4, r3, #9
 8001a3e:	0b24      	lsrs	r4, r4, #12
 8001a40:	0d53      	lsrs	r3, r2, #21
 8001a42:	e708      	b.n	8001856 <__aeabi_ddiv+0xae>
 8001a44:	4652      	mov	r2, sl
 8001a46:	4322      	orrs	r2, r4
 8001a48:	d100      	bne.n	8001a4c <__aeabi_ddiv+0x2a4>
 8001a4a:	e07b      	b.n	8001b44 <__aeabi_ddiv+0x39c>
 8001a4c:	2c00      	cmp	r4, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_ddiv+0x2aa>
 8001a50:	e0fa      	b.n	8001c48 <__aeabi_ddiv+0x4a0>
 8001a52:	0020      	movs	r0, r4
 8001a54:	f001 fa22 	bl	8002e9c <__clzsi2>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	3a0b      	subs	r2, #11
 8001a5c:	231d      	movs	r3, #29
 8001a5e:	0001      	movs	r1, r0
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	4652      	mov	r2, sl
 8001a64:	3908      	subs	r1, #8
 8001a66:	40da      	lsrs	r2, r3
 8001a68:	408c      	lsls	r4, r1
 8001a6a:	4314      	orrs	r4, r2
 8001a6c:	4652      	mov	r2, sl
 8001a6e:	408a      	lsls	r2, r1
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <__aeabi_ddiv+0x390>)
 8001a72:	4458      	add	r0, fp
 8001a74:	469b      	mov	fp, r3
 8001a76:	4483      	add	fp, r0
 8001a78:	2000      	movs	r0, #0
 8001a7a:	e6d5      	b.n	8001828 <__aeabi_ddiv+0x80>
 8001a7c:	464b      	mov	r3, r9
 8001a7e:	4323      	orrs	r3, r4
 8001a80:	4698      	mov	r8, r3
 8001a82:	d044      	beq.n	8001b0e <__aeabi_ddiv+0x366>
 8001a84:	2c00      	cmp	r4, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_ddiv+0x2e2>
 8001a88:	e0ce      	b.n	8001c28 <__aeabi_ddiv+0x480>
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	f001 fa06 	bl	8002e9c <__clzsi2>
 8001a90:	0001      	movs	r1, r0
 8001a92:	0002      	movs	r2, r0
 8001a94:	390b      	subs	r1, #11
 8001a96:	231d      	movs	r3, #29
 8001a98:	1a5b      	subs	r3, r3, r1
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	40d9      	lsrs	r1, r3
 8001aa0:	3808      	subs	r0, #8
 8001aa2:	4084      	lsls	r4, r0
 8001aa4:	000b      	movs	r3, r1
 8001aa6:	464d      	mov	r5, r9
 8001aa8:	4323      	orrs	r3, r4
 8001aaa:	4698      	mov	r8, r3
 8001aac:	4085      	lsls	r5, r0
 8001aae:	4823      	ldr	r0, [pc, #140]	; (8001b3c <__aeabi_ddiv+0x394>)
 8001ab0:	1a83      	subs	r3, r0, r2
 8001ab2:	469b      	mov	fp, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	e69a      	b.n	80017f2 <__aeabi_ddiv+0x4a>
 8001abc:	464b      	mov	r3, r9
 8001abe:	4323      	orrs	r3, r4
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	d11d      	bne.n	8001b00 <__aeabi_ddiv+0x358>
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	3b06      	subs	r3, #6
 8001aca:	2500      	movs	r5, #0
 8001acc:	4683      	mov	fp, r0
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	e68f      	b.n	80017f2 <__aeabi_ddiv+0x4a>
 8001ad2:	4652      	mov	r2, sl
 8001ad4:	4322      	orrs	r2, r4
 8001ad6:	d109      	bne.n	8001aec <__aeabi_ddiv+0x344>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	4649      	mov	r1, r9
 8001adc:	4319      	orrs	r1, r3
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <__aeabi_ddiv+0x398>)
 8001ae0:	4689      	mov	r9, r1
 8001ae2:	469c      	mov	ip, r3
 8001ae4:	2400      	movs	r4, #0
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	44e3      	add	fp, ip
 8001aea:	e69d      	b.n	8001828 <__aeabi_ddiv+0x80>
 8001aec:	2303      	movs	r3, #3
 8001aee:	464a      	mov	r2, r9
 8001af0:	431a      	orrs	r2, r3
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <__aeabi_ddiv+0x398>)
 8001af4:	4691      	mov	r9, r2
 8001af6:	469c      	mov	ip, r3
 8001af8:	4652      	mov	r2, sl
 8001afa:	2003      	movs	r0, #3
 8001afc:	44e3      	add	fp, ip
 8001afe:	e693      	b.n	8001828 <__aeabi_ddiv+0x80>
 8001b00:	230c      	movs	r3, #12
 8001b02:	4699      	mov	r9, r3
 8001b04:	3b09      	subs	r3, #9
 8001b06:	46a0      	mov	r8, r4
 8001b08:	4683      	mov	fp, r0
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	e671      	b.n	80017f2 <__aeabi_ddiv+0x4a>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	4699      	mov	r9, r3
 8001b12:	2300      	movs	r3, #0
 8001b14:	469b      	mov	fp, r3
 8001b16:	3301      	adds	r3, #1
 8001b18:	2500      	movs	r5, #0
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	e669      	b.n	80017f2 <__aeabi_ddiv+0x4a>
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	000007ff 	.word	0x000007ff
 8001b24:	fffffc01 	.word	0xfffffc01
 8001b28:	0801b618 	.word	0x0801b618
 8001b2c:	000003ff 	.word	0x000003ff
 8001b30:	feffffff 	.word	0xfeffffff
 8001b34:	000007fe 	.word	0x000007fe
 8001b38:	000003f3 	.word	0x000003f3
 8001b3c:	fffffc0d 	.word	0xfffffc0d
 8001b40:	fffff801 	.word	0xfffff801
 8001b44:	4649      	mov	r1, r9
 8001b46:	2301      	movs	r3, #1
 8001b48:	4319      	orrs	r1, r3
 8001b4a:	4689      	mov	r9, r1
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	2001      	movs	r0, #1
 8001b50:	e66a      	b.n	8001828 <__aeabi_ddiv+0x80>
 8001b52:	2300      	movs	r3, #0
 8001b54:	2480      	movs	r4, #128	; 0x80
 8001b56:	469a      	mov	sl, r3
 8001b58:	2500      	movs	r5, #0
 8001b5a:	4b8a      	ldr	r3, [pc, #552]	; (8001d84 <__aeabi_ddiv+0x5dc>)
 8001b5c:	0324      	lsls	r4, r4, #12
 8001b5e:	e67a      	b.n	8001856 <__aeabi_ddiv+0xae>
 8001b60:	2501      	movs	r5, #1
 8001b62:	426d      	negs	r5, r5
 8001b64:	2301      	movs	r3, #1
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	2b38      	cmp	r3, #56	; 0x38
 8001b6a:	dd00      	ble.n	8001b6e <__aeabi_ddiv+0x3c6>
 8001b6c:	e670      	b.n	8001850 <__aeabi_ddiv+0xa8>
 8001b6e:	2b1f      	cmp	r3, #31
 8001b70:	dc00      	bgt.n	8001b74 <__aeabi_ddiv+0x3cc>
 8001b72:	e0bf      	b.n	8001cf4 <__aeabi_ddiv+0x54c>
 8001b74:	211f      	movs	r1, #31
 8001b76:	4249      	negs	r1, r1
 8001b78:	1a8a      	subs	r2, r1, r2
 8001b7a:	4641      	mov	r1, r8
 8001b7c:	40d1      	lsrs	r1, r2
 8001b7e:	000a      	movs	r2, r1
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d004      	beq.n	8001b8e <__aeabi_ddiv+0x3e6>
 8001b84:	4641      	mov	r1, r8
 8001b86:	4b80      	ldr	r3, [pc, #512]	; (8001d88 <__aeabi_ddiv+0x5e0>)
 8001b88:	445b      	add	r3, fp
 8001b8a:	4099      	lsls	r1, r3
 8001b8c:	430d      	orrs	r5, r1
 8001b8e:	1e6b      	subs	r3, r5, #1
 8001b90:	419d      	sbcs	r5, r3
 8001b92:	2307      	movs	r3, #7
 8001b94:	432a      	orrs	r2, r5
 8001b96:	001d      	movs	r5, r3
 8001b98:	2400      	movs	r4, #0
 8001b9a:	4015      	ands	r5, r2
 8001b9c:	4213      	tst	r3, r2
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_ddiv+0x3fa>
 8001ba0:	e0d4      	b.n	8001d4c <__aeabi_ddiv+0x5a4>
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4011      	ands	r1, r2
 8001ba8:	2904      	cmp	r1, #4
 8001baa:	d100      	bne.n	8001bae <__aeabi_ddiv+0x406>
 8001bac:	e0cb      	b.n	8001d46 <__aeabi_ddiv+0x59e>
 8001bae:	1d11      	adds	r1, r2, #4
 8001bb0:	4291      	cmp	r1, r2
 8001bb2:	4192      	sbcs	r2, r2
 8001bb4:	4252      	negs	r2, r2
 8001bb6:	189b      	adds	r3, r3, r2
 8001bb8:	000a      	movs	r2, r1
 8001bba:	0219      	lsls	r1, r3, #8
 8001bbc:	d400      	bmi.n	8001bc0 <__aeabi_ddiv+0x418>
 8001bbe:	e0c2      	b.n	8001d46 <__aeabi_ddiv+0x59e>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	e646      	b.n	8001856 <__aeabi_ddiv+0xae>
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	4641      	mov	r1, r8
 8001bcc:	031b      	lsls	r3, r3, #12
 8001bce:	4219      	tst	r1, r3
 8001bd0:	d008      	beq.n	8001be4 <__aeabi_ddiv+0x43c>
 8001bd2:	421c      	tst	r4, r3
 8001bd4:	d106      	bne.n	8001be4 <__aeabi_ddiv+0x43c>
 8001bd6:	431c      	orrs	r4, r3
 8001bd8:	0324      	lsls	r4, r4, #12
 8001bda:	46ba      	mov	sl, r7
 8001bdc:	0015      	movs	r5, r2
 8001bde:	4b69      	ldr	r3, [pc, #420]	; (8001d84 <__aeabi_ddiv+0x5dc>)
 8001be0:	0b24      	lsrs	r4, r4, #12
 8001be2:	e638      	b.n	8001856 <__aeabi_ddiv+0xae>
 8001be4:	2480      	movs	r4, #128	; 0x80
 8001be6:	4643      	mov	r3, r8
 8001be8:	0324      	lsls	r4, r4, #12
 8001bea:	431c      	orrs	r4, r3
 8001bec:	0324      	lsls	r4, r4, #12
 8001bee:	46b2      	mov	sl, r6
 8001bf0:	4b64      	ldr	r3, [pc, #400]	; (8001d84 <__aeabi_ddiv+0x5dc>)
 8001bf2:	0b24      	lsrs	r4, r4, #12
 8001bf4:	e62f      	b.n	8001856 <__aeabi_ddiv+0xae>
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_ddiv+0x454>
 8001bfa:	e703      	b.n	8001a04 <__aeabi_ddiv+0x25c>
 8001bfc:	19a6      	adds	r6, r4, r6
 8001bfe:	1e68      	subs	r0, r5, #1
 8001c00:	42a6      	cmp	r6, r4
 8001c02:	d200      	bcs.n	8001c06 <__aeabi_ddiv+0x45e>
 8001c04:	e08d      	b.n	8001d22 <__aeabi_ddiv+0x57a>
 8001c06:	428e      	cmp	r6, r1
 8001c08:	d200      	bcs.n	8001c0c <__aeabi_ddiv+0x464>
 8001c0a:	e0a3      	b.n	8001d54 <__aeabi_ddiv+0x5ac>
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_ddiv+0x468>
 8001c0e:	e0b3      	b.n	8001d78 <__aeabi_ddiv+0x5d0>
 8001c10:	0005      	movs	r5, r0
 8001c12:	e6f5      	b.n	8001a00 <__aeabi_ddiv+0x258>
 8001c14:	42aa      	cmp	r2, r5
 8001c16:	d900      	bls.n	8001c1a <__aeabi_ddiv+0x472>
 8001c18:	e639      	b.n	800188e <__aeabi_ddiv+0xe6>
 8001c1a:	4643      	mov	r3, r8
 8001c1c:	07de      	lsls	r6, r3, #31
 8001c1e:	0858      	lsrs	r0, r3, #1
 8001c20:	086b      	lsrs	r3, r5, #1
 8001c22:	431e      	orrs	r6, r3
 8001c24:	07ed      	lsls	r5, r5, #31
 8001c26:	e639      	b.n	800189c <__aeabi_ddiv+0xf4>
 8001c28:	4648      	mov	r0, r9
 8001c2a:	f001 f937 	bl	8002e9c <__clzsi2>
 8001c2e:	0001      	movs	r1, r0
 8001c30:	0002      	movs	r2, r0
 8001c32:	3115      	adds	r1, #21
 8001c34:	3220      	adds	r2, #32
 8001c36:	291c      	cmp	r1, #28
 8001c38:	dc00      	bgt.n	8001c3c <__aeabi_ddiv+0x494>
 8001c3a:	e72c      	b.n	8001a96 <__aeabi_ddiv+0x2ee>
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	3808      	subs	r0, #8
 8001c40:	4083      	lsls	r3, r0
 8001c42:	2500      	movs	r5, #0
 8001c44:	4698      	mov	r8, r3
 8001c46:	e732      	b.n	8001aae <__aeabi_ddiv+0x306>
 8001c48:	f001 f928 	bl	8002e9c <__clzsi2>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	001a      	movs	r2, r3
 8001c50:	3215      	adds	r2, #21
 8001c52:	3020      	adds	r0, #32
 8001c54:	2a1c      	cmp	r2, #28
 8001c56:	dc00      	bgt.n	8001c5a <__aeabi_ddiv+0x4b2>
 8001c58:	e700      	b.n	8001a5c <__aeabi_ddiv+0x2b4>
 8001c5a:	4654      	mov	r4, sl
 8001c5c:	3b08      	subs	r3, #8
 8001c5e:	2200      	movs	r2, #0
 8001c60:	409c      	lsls	r4, r3
 8001c62:	e705      	b.n	8001a70 <__aeabi_ddiv+0x2c8>
 8001c64:	1936      	adds	r6, r6, r4
 8001c66:	3b01      	subs	r3, #1
 8001c68:	42b4      	cmp	r4, r6
 8001c6a:	d900      	bls.n	8001c6e <__aeabi_ddiv+0x4c6>
 8001c6c:	e6a6      	b.n	80019bc <__aeabi_ddiv+0x214>
 8001c6e:	42b2      	cmp	r2, r6
 8001c70:	d800      	bhi.n	8001c74 <__aeabi_ddiv+0x4cc>
 8001c72:	e6a3      	b.n	80019bc <__aeabi_ddiv+0x214>
 8001c74:	1e83      	subs	r3, r0, #2
 8001c76:	1936      	adds	r6, r6, r4
 8001c78:	e6a0      	b.n	80019bc <__aeabi_ddiv+0x214>
 8001c7a:	1909      	adds	r1, r1, r4
 8001c7c:	3d01      	subs	r5, #1
 8001c7e:	428c      	cmp	r4, r1
 8001c80:	d900      	bls.n	8001c84 <__aeabi_ddiv+0x4dc>
 8001c82:	e68d      	b.n	80019a0 <__aeabi_ddiv+0x1f8>
 8001c84:	428a      	cmp	r2, r1
 8001c86:	d800      	bhi.n	8001c8a <__aeabi_ddiv+0x4e2>
 8001c88:	e68a      	b.n	80019a0 <__aeabi_ddiv+0x1f8>
 8001c8a:	1e85      	subs	r5, r0, #2
 8001c8c:	1909      	adds	r1, r1, r4
 8001c8e:	e687      	b.n	80019a0 <__aeabi_ddiv+0x1f8>
 8001c90:	230f      	movs	r3, #15
 8001c92:	402b      	ands	r3, r5
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d100      	bne.n	8001c9a <__aeabi_ddiv+0x4f2>
 8001c98:	e6bc      	b.n	8001a14 <__aeabi_ddiv+0x26c>
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	425b      	negs	r3, r3
 8001c9e:	42ab      	cmp	r3, r5
 8001ca0:	419b      	sbcs	r3, r3
 8001ca2:	3504      	adds	r5, #4
 8001ca4:	425b      	negs	r3, r3
 8001ca6:	08ed      	lsrs	r5, r5, #3
 8001ca8:	4498      	add	r8, r3
 8001caa:	e6b4      	b.n	8001a16 <__aeabi_ddiv+0x26e>
 8001cac:	42af      	cmp	r7, r5
 8001cae:	d900      	bls.n	8001cb2 <__aeabi_ddiv+0x50a>
 8001cb0:	e660      	b.n	8001974 <__aeabi_ddiv+0x1cc>
 8001cb2:	4282      	cmp	r2, r0
 8001cb4:	d804      	bhi.n	8001cc0 <__aeabi_ddiv+0x518>
 8001cb6:	d000      	beq.n	8001cba <__aeabi_ddiv+0x512>
 8001cb8:	e65c      	b.n	8001974 <__aeabi_ddiv+0x1cc>
 8001cba:	42ae      	cmp	r6, r5
 8001cbc:	d800      	bhi.n	8001cc0 <__aeabi_ddiv+0x518>
 8001cbe:	e659      	b.n	8001974 <__aeabi_ddiv+0x1cc>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	469c      	mov	ip, r3
 8001cc6:	9b00      	ldr	r3, [sp, #0]
 8001cc8:	44e0      	add	r8, ip
 8001cca:	469c      	mov	ip, r3
 8001ccc:	4465      	add	r5, ip
 8001cce:	429d      	cmp	r5, r3
 8001cd0:	419b      	sbcs	r3, r3
 8001cd2:	425b      	negs	r3, r3
 8001cd4:	191b      	adds	r3, r3, r4
 8001cd6:	18c0      	adds	r0, r0, r3
 8001cd8:	e64d      	b.n	8001976 <__aeabi_ddiv+0x1ce>
 8001cda:	428a      	cmp	r2, r1
 8001cdc:	d800      	bhi.n	8001ce0 <__aeabi_ddiv+0x538>
 8001cde:	e60e      	b.n	80018fe <__aeabi_ddiv+0x156>
 8001ce0:	1e83      	subs	r3, r0, #2
 8001ce2:	1909      	adds	r1, r1, r4
 8001ce4:	e60b      	b.n	80018fe <__aeabi_ddiv+0x156>
 8001ce6:	428a      	cmp	r2, r1
 8001ce8:	d800      	bhi.n	8001cec <__aeabi_ddiv+0x544>
 8001cea:	e5f4      	b.n	80018d6 <__aeabi_ddiv+0x12e>
 8001cec:	1e83      	subs	r3, r0, #2
 8001cee:	4698      	mov	r8, r3
 8001cf0:	1909      	adds	r1, r1, r4
 8001cf2:	e5f0      	b.n	80018d6 <__aeabi_ddiv+0x12e>
 8001cf4:	4925      	ldr	r1, [pc, #148]	; (8001d8c <__aeabi_ddiv+0x5e4>)
 8001cf6:	0028      	movs	r0, r5
 8001cf8:	4459      	add	r1, fp
 8001cfa:	408d      	lsls	r5, r1
 8001cfc:	4642      	mov	r2, r8
 8001cfe:	408a      	lsls	r2, r1
 8001d00:	1e69      	subs	r1, r5, #1
 8001d02:	418d      	sbcs	r5, r1
 8001d04:	4641      	mov	r1, r8
 8001d06:	40d8      	lsrs	r0, r3
 8001d08:	40d9      	lsrs	r1, r3
 8001d0a:	4302      	orrs	r2, r0
 8001d0c:	432a      	orrs	r2, r5
 8001d0e:	000b      	movs	r3, r1
 8001d10:	0751      	lsls	r1, r2, #29
 8001d12:	d100      	bne.n	8001d16 <__aeabi_ddiv+0x56e>
 8001d14:	e751      	b.n	8001bba <__aeabi_ddiv+0x412>
 8001d16:	210f      	movs	r1, #15
 8001d18:	4011      	ands	r1, r2
 8001d1a:	2904      	cmp	r1, #4
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_ddiv+0x578>
 8001d1e:	e746      	b.n	8001bae <__aeabi_ddiv+0x406>
 8001d20:	e74b      	b.n	8001bba <__aeabi_ddiv+0x412>
 8001d22:	0005      	movs	r5, r0
 8001d24:	428e      	cmp	r6, r1
 8001d26:	d000      	beq.n	8001d2a <__aeabi_ddiv+0x582>
 8001d28:	e66a      	b.n	8001a00 <__aeabi_ddiv+0x258>
 8001d2a:	9a00      	ldr	r2, [sp, #0]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_ddiv+0x58a>
 8001d30:	e666      	b.n	8001a00 <__aeabi_ddiv+0x258>
 8001d32:	e667      	b.n	8001a04 <__aeabi_ddiv+0x25c>
 8001d34:	4a16      	ldr	r2, [pc, #88]	; (8001d90 <__aeabi_ddiv+0x5e8>)
 8001d36:	445a      	add	r2, fp
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_ddiv+0x596>
 8001d3c:	e710      	b.n	8001b60 <__aeabi_ddiv+0x3b8>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	2500      	movs	r5, #0
 8001d42:	4498      	add	r8, r3
 8001d44:	e667      	b.n	8001a16 <__aeabi_ddiv+0x26e>
 8001d46:	075d      	lsls	r5, r3, #29
 8001d48:	025b      	lsls	r3, r3, #9
 8001d4a:	0b1c      	lsrs	r4, r3, #12
 8001d4c:	08d2      	lsrs	r2, r2, #3
 8001d4e:	2300      	movs	r3, #0
 8001d50:	4315      	orrs	r5, r2
 8001d52:	e580      	b.n	8001856 <__aeabi_ddiv+0xae>
 8001d54:	9800      	ldr	r0, [sp, #0]
 8001d56:	3d02      	subs	r5, #2
 8001d58:	0042      	lsls	r2, r0, #1
 8001d5a:	4282      	cmp	r2, r0
 8001d5c:	41bf      	sbcs	r7, r7
 8001d5e:	427f      	negs	r7, r7
 8001d60:	193c      	adds	r4, r7, r4
 8001d62:	1936      	adds	r6, r6, r4
 8001d64:	9200      	str	r2, [sp, #0]
 8001d66:	e7dd      	b.n	8001d24 <__aeabi_ddiv+0x57c>
 8001d68:	2480      	movs	r4, #128	; 0x80
 8001d6a:	4643      	mov	r3, r8
 8001d6c:	0324      	lsls	r4, r4, #12
 8001d6e:	431c      	orrs	r4, r3
 8001d70:	0324      	lsls	r4, r4, #12
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__aeabi_ddiv+0x5dc>)
 8001d74:	0b24      	lsrs	r4, r4, #12
 8001d76:	e56e      	b.n	8001856 <__aeabi_ddiv+0xae>
 8001d78:	9a00      	ldr	r2, [sp, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d3ea      	bcc.n	8001d54 <__aeabi_ddiv+0x5ac>
 8001d7e:	0005      	movs	r5, r0
 8001d80:	e7d3      	b.n	8001d2a <__aeabi_ddiv+0x582>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	000007ff 	.word	0x000007ff
 8001d88:	0000043e 	.word	0x0000043e
 8001d8c:	0000041e 	.word	0x0000041e
 8001d90:	000003ff 	.word	0x000003ff

08001d94 <__eqdf2>:
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d96:	464e      	mov	r6, r9
 8001d98:	4645      	mov	r5, r8
 8001d9a:	46de      	mov	lr, fp
 8001d9c:	4657      	mov	r7, sl
 8001d9e:	4690      	mov	r8, r2
 8001da0:	b5e0      	push	{r5, r6, r7, lr}
 8001da2:	0017      	movs	r7, r2
 8001da4:	031a      	lsls	r2, r3, #12
 8001da6:	0b12      	lsrs	r2, r2, #12
 8001da8:	0005      	movs	r5, r0
 8001daa:	4684      	mov	ip, r0
 8001dac:	4819      	ldr	r0, [pc, #100]	; (8001e14 <__eqdf2+0x80>)
 8001dae:	030e      	lsls	r6, r1, #12
 8001db0:	004c      	lsls	r4, r1, #1
 8001db2:	4691      	mov	r9, r2
 8001db4:	005a      	lsls	r2, r3, #1
 8001db6:	0fdb      	lsrs	r3, r3, #31
 8001db8:	469b      	mov	fp, r3
 8001dba:	0b36      	lsrs	r6, r6, #12
 8001dbc:	0d64      	lsrs	r4, r4, #21
 8001dbe:	0fc9      	lsrs	r1, r1, #31
 8001dc0:	0d52      	lsrs	r2, r2, #21
 8001dc2:	4284      	cmp	r4, r0
 8001dc4:	d019      	beq.n	8001dfa <__eqdf2+0x66>
 8001dc6:	4282      	cmp	r2, r0
 8001dc8:	d010      	beq.n	8001dec <__eqdf2+0x58>
 8001dca:	2001      	movs	r0, #1
 8001dcc:	4294      	cmp	r4, r2
 8001dce:	d10e      	bne.n	8001dee <__eqdf2+0x5a>
 8001dd0:	454e      	cmp	r6, r9
 8001dd2:	d10c      	bne.n	8001dee <__eqdf2+0x5a>
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	45c4      	cmp	ip, r8
 8001dd8:	d109      	bne.n	8001dee <__eqdf2+0x5a>
 8001dda:	4559      	cmp	r1, fp
 8001ddc:	d017      	beq.n	8001e0e <__eqdf2+0x7a>
 8001dde:	2c00      	cmp	r4, #0
 8001de0:	d105      	bne.n	8001dee <__eqdf2+0x5a>
 8001de2:	0030      	movs	r0, r6
 8001de4:	4328      	orrs	r0, r5
 8001de6:	1e43      	subs	r3, r0, #1
 8001de8:	4198      	sbcs	r0, r3
 8001dea:	e000      	b.n	8001dee <__eqdf2+0x5a>
 8001dec:	2001      	movs	r0, #1
 8001dee:	bcf0      	pop	{r4, r5, r6, r7}
 8001df0:	46bb      	mov	fp, r7
 8001df2:	46b2      	mov	sl, r6
 8001df4:	46a9      	mov	r9, r5
 8001df6:	46a0      	mov	r8, r4
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfa:	0033      	movs	r3, r6
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	432b      	orrs	r3, r5
 8001e00:	d1f5      	bne.n	8001dee <__eqdf2+0x5a>
 8001e02:	42a2      	cmp	r2, r4
 8001e04:	d1f3      	bne.n	8001dee <__eqdf2+0x5a>
 8001e06:	464b      	mov	r3, r9
 8001e08:	433b      	orrs	r3, r7
 8001e0a:	d1f0      	bne.n	8001dee <__eqdf2+0x5a>
 8001e0c:	e7e2      	b.n	8001dd4 <__eqdf2+0x40>
 8001e0e:	2000      	movs	r0, #0
 8001e10:	e7ed      	b.n	8001dee <__eqdf2+0x5a>
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	000007ff 	.word	0x000007ff

08001e18 <__gedf2>:
 8001e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1a:	4647      	mov	r7, r8
 8001e1c:	46ce      	mov	lr, r9
 8001e1e:	0004      	movs	r4, r0
 8001e20:	0018      	movs	r0, r3
 8001e22:	0016      	movs	r6, r2
 8001e24:	031b      	lsls	r3, r3, #12
 8001e26:	0b1b      	lsrs	r3, r3, #12
 8001e28:	4d2d      	ldr	r5, [pc, #180]	; (8001ee0 <__gedf2+0xc8>)
 8001e2a:	004a      	lsls	r2, r1, #1
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	0043      	lsls	r3, r0, #1
 8001e32:	030f      	lsls	r7, r1, #12
 8001e34:	46a4      	mov	ip, r4
 8001e36:	46b0      	mov	r8, r6
 8001e38:	0b3f      	lsrs	r7, r7, #12
 8001e3a:	0d52      	lsrs	r2, r2, #21
 8001e3c:	0fc9      	lsrs	r1, r1, #31
 8001e3e:	0d5b      	lsrs	r3, r3, #21
 8001e40:	0fc0      	lsrs	r0, r0, #31
 8001e42:	42aa      	cmp	r2, r5
 8001e44:	d021      	beq.n	8001e8a <__gedf2+0x72>
 8001e46:	42ab      	cmp	r3, r5
 8001e48:	d013      	beq.n	8001e72 <__gedf2+0x5a>
 8001e4a:	2a00      	cmp	r2, #0
 8001e4c:	d122      	bne.n	8001e94 <__gedf2+0x7c>
 8001e4e:	433c      	orrs	r4, r7
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <__gedf2+0x42>
 8001e54:	464d      	mov	r5, r9
 8001e56:	432e      	orrs	r6, r5
 8001e58:	d022      	beq.n	8001ea0 <__gedf2+0x88>
 8001e5a:	2c00      	cmp	r4, #0
 8001e5c:	d010      	beq.n	8001e80 <__gedf2+0x68>
 8001e5e:	4281      	cmp	r1, r0
 8001e60:	d022      	beq.n	8001ea8 <__gedf2+0x90>
 8001e62:	2002      	movs	r0, #2
 8001e64:	3901      	subs	r1, #1
 8001e66:	4008      	ands	r0, r1
 8001e68:	3801      	subs	r0, #1
 8001e6a:	bcc0      	pop	{r6, r7}
 8001e6c:	46b9      	mov	r9, r7
 8001e6e:	46b0      	mov	r8, r6
 8001e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e72:	464d      	mov	r5, r9
 8001e74:	432e      	orrs	r6, r5
 8001e76:	d129      	bne.n	8001ecc <__gedf2+0xb4>
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d1f0      	bne.n	8001e5e <__gedf2+0x46>
 8001e7c:	433c      	orrs	r4, r7
 8001e7e:	d1ee      	bne.n	8001e5e <__gedf2+0x46>
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d1f2      	bne.n	8001e6a <__gedf2+0x52>
 8001e84:	2001      	movs	r0, #1
 8001e86:	4240      	negs	r0, r0
 8001e88:	e7ef      	b.n	8001e6a <__gedf2+0x52>
 8001e8a:	003d      	movs	r5, r7
 8001e8c:	4325      	orrs	r5, r4
 8001e8e:	d11d      	bne.n	8001ecc <__gedf2+0xb4>
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d0ee      	beq.n	8001e72 <__gedf2+0x5a>
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e2      	bne.n	8001e5e <__gedf2+0x46>
 8001e98:	464c      	mov	r4, r9
 8001e9a:	4326      	orrs	r6, r4
 8001e9c:	d1df      	bne.n	8001e5e <__gedf2+0x46>
 8001e9e:	e7e0      	b.n	8001e62 <__gedf2+0x4a>
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	2c00      	cmp	r4, #0
 8001ea4:	d0e1      	beq.n	8001e6a <__gedf2+0x52>
 8001ea6:	e7dc      	b.n	8001e62 <__gedf2+0x4a>
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dc0a      	bgt.n	8001ec2 <__gedf2+0xaa>
 8001eac:	dbe8      	blt.n	8001e80 <__gedf2+0x68>
 8001eae:	454f      	cmp	r7, r9
 8001eb0:	d8d7      	bhi.n	8001e62 <__gedf2+0x4a>
 8001eb2:	d00e      	beq.n	8001ed2 <__gedf2+0xba>
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	454f      	cmp	r7, r9
 8001eb8:	d2d7      	bcs.n	8001e6a <__gedf2+0x52>
 8001eba:	2900      	cmp	r1, #0
 8001ebc:	d0e2      	beq.n	8001e84 <__gedf2+0x6c>
 8001ebe:	0008      	movs	r0, r1
 8001ec0:	e7d3      	b.n	8001e6a <__gedf2+0x52>
 8001ec2:	4243      	negs	r3, r0
 8001ec4:	4158      	adcs	r0, r3
 8001ec6:	0040      	lsls	r0, r0, #1
 8001ec8:	3801      	subs	r0, #1
 8001eca:	e7ce      	b.n	8001e6a <__gedf2+0x52>
 8001ecc:	2002      	movs	r0, #2
 8001ece:	4240      	negs	r0, r0
 8001ed0:	e7cb      	b.n	8001e6a <__gedf2+0x52>
 8001ed2:	45c4      	cmp	ip, r8
 8001ed4:	d8c5      	bhi.n	8001e62 <__gedf2+0x4a>
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	45c4      	cmp	ip, r8
 8001eda:	d2c6      	bcs.n	8001e6a <__gedf2+0x52>
 8001edc:	e7ed      	b.n	8001eba <__gedf2+0xa2>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000007ff 	.word	0x000007ff

08001ee4 <__ledf2>:
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	4647      	mov	r7, r8
 8001ee8:	46ce      	mov	lr, r9
 8001eea:	0004      	movs	r4, r0
 8001eec:	0018      	movs	r0, r3
 8001eee:	0016      	movs	r6, r2
 8001ef0:	031b      	lsls	r3, r3, #12
 8001ef2:	0b1b      	lsrs	r3, r3, #12
 8001ef4:	4d2c      	ldr	r5, [pc, #176]	; (8001fa8 <__ledf2+0xc4>)
 8001ef6:	004a      	lsls	r2, r1, #1
 8001ef8:	4699      	mov	r9, r3
 8001efa:	b580      	push	{r7, lr}
 8001efc:	0043      	lsls	r3, r0, #1
 8001efe:	030f      	lsls	r7, r1, #12
 8001f00:	46a4      	mov	ip, r4
 8001f02:	46b0      	mov	r8, r6
 8001f04:	0b3f      	lsrs	r7, r7, #12
 8001f06:	0d52      	lsrs	r2, r2, #21
 8001f08:	0fc9      	lsrs	r1, r1, #31
 8001f0a:	0d5b      	lsrs	r3, r3, #21
 8001f0c:	0fc0      	lsrs	r0, r0, #31
 8001f0e:	42aa      	cmp	r2, r5
 8001f10:	d00d      	beq.n	8001f2e <__ledf2+0x4a>
 8001f12:	42ab      	cmp	r3, r5
 8001f14:	d010      	beq.n	8001f38 <__ledf2+0x54>
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d127      	bne.n	8001f6a <__ledf2+0x86>
 8001f1a:	433c      	orrs	r4, r7
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d111      	bne.n	8001f44 <__ledf2+0x60>
 8001f20:	464d      	mov	r5, r9
 8001f22:	432e      	orrs	r6, r5
 8001f24:	d10e      	bne.n	8001f44 <__ledf2+0x60>
 8001f26:	2000      	movs	r0, #0
 8001f28:	2c00      	cmp	r4, #0
 8001f2a:	d015      	beq.n	8001f58 <__ledf2+0x74>
 8001f2c:	e00e      	b.n	8001f4c <__ledf2+0x68>
 8001f2e:	003d      	movs	r5, r7
 8001f30:	4325      	orrs	r5, r4
 8001f32:	d110      	bne.n	8001f56 <__ledf2+0x72>
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d118      	bne.n	8001f6a <__ledf2+0x86>
 8001f38:	464d      	mov	r5, r9
 8001f3a:	432e      	orrs	r6, r5
 8001f3c:	d10b      	bne.n	8001f56 <__ledf2+0x72>
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	d102      	bne.n	8001f48 <__ledf2+0x64>
 8001f42:	433c      	orrs	r4, r7
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	d00b      	beq.n	8001f60 <__ledf2+0x7c>
 8001f48:	4281      	cmp	r1, r0
 8001f4a:	d014      	beq.n	8001f76 <__ledf2+0x92>
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	3901      	subs	r1, #1
 8001f50:	4008      	ands	r0, r1
 8001f52:	3801      	subs	r0, #1
 8001f54:	e000      	b.n	8001f58 <__ledf2+0x74>
 8001f56:	2002      	movs	r0, #2
 8001f58:	bcc0      	pop	{r6, r7}
 8001f5a:	46b9      	mov	r9, r7
 8001f5c:	46b0      	mov	r8, r6
 8001f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f60:	2800      	cmp	r0, #0
 8001f62:	d1f9      	bne.n	8001f58 <__ledf2+0x74>
 8001f64:	2001      	movs	r0, #1
 8001f66:	4240      	negs	r0, r0
 8001f68:	e7f6      	b.n	8001f58 <__ledf2+0x74>
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ec      	bne.n	8001f48 <__ledf2+0x64>
 8001f6e:	464c      	mov	r4, r9
 8001f70:	4326      	orrs	r6, r4
 8001f72:	d1e9      	bne.n	8001f48 <__ledf2+0x64>
 8001f74:	e7ea      	b.n	8001f4c <__ledf2+0x68>
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dd04      	ble.n	8001f84 <__ledf2+0xa0>
 8001f7a:	4243      	negs	r3, r0
 8001f7c:	4158      	adcs	r0, r3
 8001f7e:	0040      	lsls	r0, r0, #1
 8001f80:	3801      	subs	r0, #1
 8001f82:	e7e9      	b.n	8001f58 <__ledf2+0x74>
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbeb      	blt.n	8001f60 <__ledf2+0x7c>
 8001f88:	454f      	cmp	r7, r9
 8001f8a:	d8df      	bhi.n	8001f4c <__ledf2+0x68>
 8001f8c:	d006      	beq.n	8001f9c <__ledf2+0xb8>
 8001f8e:	2000      	movs	r0, #0
 8001f90:	454f      	cmp	r7, r9
 8001f92:	d2e1      	bcs.n	8001f58 <__ledf2+0x74>
 8001f94:	2900      	cmp	r1, #0
 8001f96:	d0e5      	beq.n	8001f64 <__ledf2+0x80>
 8001f98:	0008      	movs	r0, r1
 8001f9a:	e7dd      	b.n	8001f58 <__ledf2+0x74>
 8001f9c:	45c4      	cmp	ip, r8
 8001f9e:	d8d5      	bhi.n	8001f4c <__ledf2+0x68>
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	45c4      	cmp	ip, r8
 8001fa4:	d2d8      	bcs.n	8001f58 <__ledf2+0x74>
 8001fa6:	e7f5      	b.n	8001f94 <__ledf2+0xb0>
 8001fa8:	000007ff 	.word	0x000007ff

08001fac <__aeabi_dmul>:
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fae:	4657      	mov	r7, sl
 8001fb0:	464e      	mov	r6, r9
 8001fb2:	4645      	mov	r5, r8
 8001fb4:	46de      	mov	lr, fp
 8001fb6:	b5e0      	push	{r5, r6, r7, lr}
 8001fb8:	4698      	mov	r8, r3
 8001fba:	030c      	lsls	r4, r1, #12
 8001fbc:	004b      	lsls	r3, r1, #1
 8001fbe:	0006      	movs	r6, r0
 8001fc0:	4692      	mov	sl, r2
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	0b24      	lsrs	r4, r4, #12
 8001fc6:	0d5b      	lsrs	r3, r3, #21
 8001fc8:	0fcf      	lsrs	r7, r1, #31
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_dmul+0x24>
 8001fce:	e15c      	b.n	800228a <__aeabi_dmul+0x2de>
 8001fd0:	4ad9      	ldr	r2, [pc, #868]	; (8002338 <__aeabi_dmul+0x38c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dmul+0x2c>
 8001fd6:	e175      	b.n	80022c4 <__aeabi_dmul+0x318>
 8001fd8:	0f42      	lsrs	r2, r0, #29
 8001fda:	00e4      	lsls	r4, r4, #3
 8001fdc:	4314      	orrs	r4, r2
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	0412      	lsls	r2, r2, #16
 8001fe2:	4314      	orrs	r4, r2
 8001fe4:	4ad5      	ldr	r2, [pc, #852]	; (800233c <__aeabi_dmul+0x390>)
 8001fe6:	00c5      	lsls	r5, r0, #3
 8001fe8:	4694      	mov	ip, r2
 8001fea:	4463      	add	r3, ip
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	469b      	mov	fp, r3
 8001ff4:	4643      	mov	r3, r8
 8001ff6:	4642      	mov	r2, r8
 8001ff8:	031e      	lsls	r6, r3, #12
 8001ffa:	0fd2      	lsrs	r2, r2, #31
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4650      	mov	r0, sl
 8002000:	4690      	mov	r8, r2
 8002002:	0b36      	lsrs	r6, r6, #12
 8002004:	0d5b      	lsrs	r3, r3, #21
 8002006:	d100      	bne.n	800200a <__aeabi_dmul+0x5e>
 8002008:	e120      	b.n	800224c <__aeabi_dmul+0x2a0>
 800200a:	4acb      	ldr	r2, [pc, #812]	; (8002338 <__aeabi_dmul+0x38c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d100      	bne.n	8002012 <__aeabi_dmul+0x66>
 8002010:	e162      	b.n	80022d8 <__aeabi_dmul+0x32c>
 8002012:	49ca      	ldr	r1, [pc, #808]	; (800233c <__aeabi_dmul+0x390>)
 8002014:	0f42      	lsrs	r2, r0, #29
 8002016:	468c      	mov	ip, r1
 8002018:	9900      	ldr	r1, [sp, #0]
 800201a:	4463      	add	r3, ip
 800201c:	00f6      	lsls	r6, r6, #3
 800201e:	468c      	mov	ip, r1
 8002020:	4316      	orrs	r6, r2
 8002022:	2280      	movs	r2, #128	; 0x80
 8002024:	449c      	add	ip, r3
 8002026:	0412      	lsls	r2, r2, #16
 8002028:	4663      	mov	r3, ip
 800202a:	4316      	orrs	r6, r2
 800202c:	00c2      	lsls	r2, r0, #3
 800202e:	2000      	movs	r0, #0
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	9900      	ldr	r1, [sp, #0]
 8002034:	4643      	mov	r3, r8
 8002036:	3101      	adds	r1, #1
 8002038:	468c      	mov	ip, r1
 800203a:	4649      	mov	r1, r9
 800203c:	407b      	eors	r3, r7
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	290f      	cmp	r1, #15
 8002042:	d826      	bhi.n	8002092 <__aeabi_dmul+0xe6>
 8002044:	4bbe      	ldr	r3, [pc, #760]	; (8002340 <__aeabi_dmul+0x394>)
 8002046:	0089      	lsls	r1, r1, #2
 8002048:	5859      	ldr	r1, [r3, r1]
 800204a:	468f      	mov	pc, r1
 800204c:	4643      	mov	r3, r8
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	0034      	movs	r4, r6
 8002052:	0015      	movs	r5, r2
 8002054:	4683      	mov	fp, r0
 8002056:	465b      	mov	r3, fp
 8002058:	2b02      	cmp	r3, #2
 800205a:	d016      	beq.n	800208a <__aeabi_dmul+0xde>
 800205c:	2b03      	cmp	r3, #3
 800205e:	d100      	bne.n	8002062 <__aeabi_dmul+0xb6>
 8002060:	e203      	b.n	800246a <__aeabi_dmul+0x4be>
 8002062:	2b01      	cmp	r3, #1
 8002064:	d000      	beq.n	8002068 <__aeabi_dmul+0xbc>
 8002066:	e0cd      	b.n	8002204 <__aeabi_dmul+0x258>
 8002068:	2200      	movs	r2, #0
 800206a:	2400      	movs	r4, #0
 800206c:	2500      	movs	r5, #0
 800206e:	9b01      	ldr	r3, [sp, #4]
 8002070:	0512      	lsls	r2, r2, #20
 8002072:	4322      	orrs	r2, r4
 8002074:	07db      	lsls	r3, r3, #31
 8002076:	431a      	orrs	r2, r3
 8002078:	0028      	movs	r0, r5
 800207a:	0011      	movs	r1, r2
 800207c:	b007      	add	sp, #28
 800207e:	bcf0      	pop	{r4, r5, r6, r7}
 8002080:	46bb      	mov	fp, r7
 8002082:	46b2      	mov	sl, r6
 8002084:	46a9      	mov	r9, r5
 8002086:	46a0      	mov	r8, r4
 8002088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208a:	2400      	movs	r4, #0
 800208c:	2500      	movs	r5, #0
 800208e:	4aaa      	ldr	r2, [pc, #680]	; (8002338 <__aeabi_dmul+0x38c>)
 8002090:	e7ed      	b.n	800206e <__aeabi_dmul+0xc2>
 8002092:	0c28      	lsrs	r0, r5, #16
 8002094:	042d      	lsls	r5, r5, #16
 8002096:	0c2d      	lsrs	r5, r5, #16
 8002098:	002b      	movs	r3, r5
 800209a:	0c11      	lsrs	r1, r2, #16
 800209c:	0412      	lsls	r2, r2, #16
 800209e:	0c12      	lsrs	r2, r2, #16
 80020a0:	4353      	muls	r3, r2
 80020a2:	4698      	mov	r8, r3
 80020a4:	0013      	movs	r3, r2
 80020a6:	002f      	movs	r7, r5
 80020a8:	4343      	muls	r3, r0
 80020aa:	4699      	mov	r9, r3
 80020ac:	434f      	muls	r7, r1
 80020ae:	444f      	add	r7, r9
 80020b0:	46bb      	mov	fp, r7
 80020b2:	4647      	mov	r7, r8
 80020b4:	000b      	movs	r3, r1
 80020b6:	0c3f      	lsrs	r7, r7, #16
 80020b8:	46ba      	mov	sl, r7
 80020ba:	4343      	muls	r3, r0
 80020bc:	44da      	add	sl, fp
 80020be:	9302      	str	r3, [sp, #8]
 80020c0:	45d1      	cmp	r9, sl
 80020c2:	d904      	bls.n	80020ce <__aeabi_dmul+0x122>
 80020c4:	2780      	movs	r7, #128	; 0x80
 80020c6:	027f      	lsls	r7, r7, #9
 80020c8:	46b9      	mov	r9, r7
 80020ca:	444b      	add	r3, r9
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	4653      	mov	r3, sl
 80020d0:	0c1b      	lsrs	r3, r3, #16
 80020d2:	469b      	mov	fp, r3
 80020d4:	4653      	mov	r3, sl
 80020d6:	041f      	lsls	r7, r3, #16
 80020d8:	4643      	mov	r3, r8
 80020da:	041b      	lsls	r3, r3, #16
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	4698      	mov	r8, r3
 80020e0:	003b      	movs	r3, r7
 80020e2:	4443      	add	r3, r8
 80020e4:	9304      	str	r3, [sp, #16]
 80020e6:	0c33      	lsrs	r3, r6, #16
 80020e8:	0436      	lsls	r6, r6, #16
 80020ea:	0c36      	lsrs	r6, r6, #16
 80020ec:	4698      	mov	r8, r3
 80020ee:	0033      	movs	r3, r6
 80020f0:	4343      	muls	r3, r0
 80020f2:	4699      	mov	r9, r3
 80020f4:	4643      	mov	r3, r8
 80020f6:	4343      	muls	r3, r0
 80020f8:	002f      	movs	r7, r5
 80020fa:	469a      	mov	sl, r3
 80020fc:	4643      	mov	r3, r8
 80020fe:	4377      	muls	r7, r6
 8002100:	435d      	muls	r5, r3
 8002102:	0c38      	lsrs	r0, r7, #16
 8002104:	444d      	add	r5, r9
 8002106:	1945      	adds	r5, r0, r5
 8002108:	45a9      	cmp	r9, r5
 800210a:	d903      	bls.n	8002114 <__aeabi_dmul+0x168>
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	025b      	lsls	r3, r3, #9
 8002110:	4699      	mov	r9, r3
 8002112:	44ca      	add	sl, r9
 8002114:	043f      	lsls	r7, r7, #16
 8002116:	0c28      	lsrs	r0, r5, #16
 8002118:	0c3f      	lsrs	r7, r7, #16
 800211a:	042d      	lsls	r5, r5, #16
 800211c:	19ed      	adds	r5, r5, r7
 800211e:	0c27      	lsrs	r7, r4, #16
 8002120:	0424      	lsls	r4, r4, #16
 8002122:	0c24      	lsrs	r4, r4, #16
 8002124:	0003      	movs	r3, r0
 8002126:	0020      	movs	r0, r4
 8002128:	4350      	muls	r0, r2
 800212a:	437a      	muls	r2, r7
 800212c:	4691      	mov	r9, r2
 800212e:	003a      	movs	r2, r7
 8002130:	4453      	add	r3, sl
 8002132:	9305      	str	r3, [sp, #20]
 8002134:	0c03      	lsrs	r3, r0, #16
 8002136:	469a      	mov	sl, r3
 8002138:	434a      	muls	r2, r1
 800213a:	4361      	muls	r1, r4
 800213c:	4449      	add	r1, r9
 800213e:	4451      	add	r1, sl
 8002140:	44ab      	add	fp, r5
 8002142:	4589      	cmp	r9, r1
 8002144:	d903      	bls.n	800214e <__aeabi_dmul+0x1a2>
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	025b      	lsls	r3, r3, #9
 800214a:	4699      	mov	r9, r3
 800214c:	444a      	add	r2, r9
 800214e:	0400      	lsls	r0, r0, #16
 8002150:	0c0b      	lsrs	r3, r1, #16
 8002152:	0c00      	lsrs	r0, r0, #16
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	1809      	adds	r1, r1, r0
 8002158:	0020      	movs	r0, r4
 800215a:	4699      	mov	r9, r3
 800215c:	4643      	mov	r3, r8
 800215e:	4370      	muls	r0, r6
 8002160:	435c      	muls	r4, r3
 8002162:	437e      	muls	r6, r7
 8002164:	435f      	muls	r7, r3
 8002166:	0c03      	lsrs	r3, r0, #16
 8002168:	4698      	mov	r8, r3
 800216a:	19a4      	adds	r4, r4, r6
 800216c:	4444      	add	r4, r8
 800216e:	444a      	add	r2, r9
 8002170:	9703      	str	r7, [sp, #12]
 8002172:	42a6      	cmp	r6, r4
 8002174:	d904      	bls.n	8002180 <__aeabi_dmul+0x1d4>
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	025b      	lsls	r3, r3, #9
 800217a:	4698      	mov	r8, r3
 800217c:	4447      	add	r7, r8
 800217e:	9703      	str	r7, [sp, #12]
 8002180:	0423      	lsls	r3, r4, #16
 8002182:	9e02      	ldr	r6, [sp, #8]
 8002184:	469a      	mov	sl, r3
 8002186:	9b05      	ldr	r3, [sp, #20]
 8002188:	445e      	add	r6, fp
 800218a:	4698      	mov	r8, r3
 800218c:	42ae      	cmp	r6, r5
 800218e:	41ad      	sbcs	r5, r5
 8002190:	1876      	adds	r6, r6, r1
 8002192:	428e      	cmp	r6, r1
 8002194:	4189      	sbcs	r1, r1
 8002196:	0400      	lsls	r0, r0, #16
 8002198:	0c00      	lsrs	r0, r0, #16
 800219a:	4450      	add	r0, sl
 800219c:	4440      	add	r0, r8
 800219e:	426d      	negs	r5, r5
 80021a0:	1947      	adds	r7, r0, r5
 80021a2:	46b8      	mov	r8, r7
 80021a4:	4693      	mov	fp, r2
 80021a6:	4249      	negs	r1, r1
 80021a8:	4689      	mov	r9, r1
 80021aa:	44c3      	add	fp, r8
 80021ac:	44d9      	add	r9, fp
 80021ae:	4298      	cmp	r0, r3
 80021b0:	4180      	sbcs	r0, r0
 80021b2:	45a8      	cmp	r8, r5
 80021b4:	41ad      	sbcs	r5, r5
 80021b6:	4593      	cmp	fp, r2
 80021b8:	4192      	sbcs	r2, r2
 80021ba:	4589      	cmp	r9, r1
 80021bc:	4189      	sbcs	r1, r1
 80021be:	426d      	negs	r5, r5
 80021c0:	4240      	negs	r0, r0
 80021c2:	4328      	orrs	r0, r5
 80021c4:	0c24      	lsrs	r4, r4, #16
 80021c6:	4252      	negs	r2, r2
 80021c8:	4249      	negs	r1, r1
 80021ca:	430a      	orrs	r2, r1
 80021cc:	9b03      	ldr	r3, [sp, #12]
 80021ce:	1900      	adds	r0, r0, r4
 80021d0:	1880      	adds	r0, r0, r2
 80021d2:	18c7      	adds	r7, r0, r3
 80021d4:	464b      	mov	r3, r9
 80021d6:	0ddc      	lsrs	r4, r3, #23
 80021d8:	9b04      	ldr	r3, [sp, #16]
 80021da:	0275      	lsls	r5, r6, #9
 80021dc:	431d      	orrs	r5, r3
 80021de:	1e6a      	subs	r2, r5, #1
 80021e0:	4195      	sbcs	r5, r2
 80021e2:	464b      	mov	r3, r9
 80021e4:	0df6      	lsrs	r6, r6, #23
 80021e6:	027f      	lsls	r7, r7, #9
 80021e8:	4335      	orrs	r5, r6
 80021ea:	025a      	lsls	r2, r3, #9
 80021ec:	433c      	orrs	r4, r7
 80021ee:	4315      	orrs	r5, r2
 80021f0:	01fb      	lsls	r3, r7, #7
 80021f2:	d400      	bmi.n	80021f6 <__aeabi_dmul+0x24a>
 80021f4:	e11c      	b.n	8002430 <__aeabi_dmul+0x484>
 80021f6:	2101      	movs	r1, #1
 80021f8:	086a      	lsrs	r2, r5, #1
 80021fa:	400d      	ands	r5, r1
 80021fc:	4315      	orrs	r5, r2
 80021fe:	07e2      	lsls	r2, r4, #31
 8002200:	4315      	orrs	r5, r2
 8002202:	0864      	lsrs	r4, r4, #1
 8002204:	494f      	ldr	r1, [pc, #316]	; (8002344 <__aeabi_dmul+0x398>)
 8002206:	4461      	add	r1, ip
 8002208:	2900      	cmp	r1, #0
 800220a:	dc00      	bgt.n	800220e <__aeabi_dmul+0x262>
 800220c:	e0b0      	b.n	8002370 <__aeabi_dmul+0x3c4>
 800220e:	076b      	lsls	r3, r5, #29
 8002210:	d009      	beq.n	8002226 <__aeabi_dmul+0x27a>
 8002212:	220f      	movs	r2, #15
 8002214:	402a      	ands	r2, r5
 8002216:	2a04      	cmp	r2, #4
 8002218:	d005      	beq.n	8002226 <__aeabi_dmul+0x27a>
 800221a:	1d2a      	adds	r2, r5, #4
 800221c:	42aa      	cmp	r2, r5
 800221e:	41ad      	sbcs	r5, r5
 8002220:	426d      	negs	r5, r5
 8002222:	1964      	adds	r4, r4, r5
 8002224:	0015      	movs	r5, r2
 8002226:	01e3      	lsls	r3, r4, #7
 8002228:	d504      	bpl.n	8002234 <__aeabi_dmul+0x288>
 800222a:	2180      	movs	r1, #128	; 0x80
 800222c:	4a46      	ldr	r2, [pc, #280]	; (8002348 <__aeabi_dmul+0x39c>)
 800222e:	00c9      	lsls	r1, r1, #3
 8002230:	4014      	ands	r4, r2
 8002232:	4461      	add	r1, ip
 8002234:	4a45      	ldr	r2, [pc, #276]	; (800234c <__aeabi_dmul+0x3a0>)
 8002236:	4291      	cmp	r1, r2
 8002238:	dd00      	ble.n	800223c <__aeabi_dmul+0x290>
 800223a:	e726      	b.n	800208a <__aeabi_dmul+0xde>
 800223c:	0762      	lsls	r2, r4, #29
 800223e:	08ed      	lsrs	r5, r5, #3
 8002240:	0264      	lsls	r4, r4, #9
 8002242:	0549      	lsls	r1, r1, #21
 8002244:	4315      	orrs	r5, r2
 8002246:	0b24      	lsrs	r4, r4, #12
 8002248:	0d4a      	lsrs	r2, r1, #21
 800224a:	e710      	b.n	800206e <__aeabi_dmul+0xc2>
 800224c:	4652      	mov	r2, sl
 800224e:	4332      	orrs	r2, r6
 8002250:	d100      	bne.n	8002254 <__aeabi_dmul+0x2a8>
 8002252:	e07f      	b.n	8002354 <__aeabi_dmul+0x3a8>
 8002254:	2e00      	cmp	r6, #0
 8002256:	d100      	bne.n	800225a <__aeabi_dmul+0x2ae>
 8002258:	e0dc      	b.n	8002414 <__aeabi_dmul+0x468>
 800225a:	0030      	movs	r0, r6
 800225c:	f000 fe1e 	bl	8002e9c <__clzsi2>
 8002260:	0002      	movs	r2, r0
 8002262:	3a0b      	subs	r2, #11
 8002264:	231d      	movs	r3, #29
 8002266:	0001      	movs	r1, r0
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	4652      	mov	r2, sl
 800226c:	3908      	subs	r1, #8
 800226e:	40da      	lsrs	r2, r3
 8002270:	408e      	lsls	r6, r1
 8002272:	4316      	orrs	r6, r2
 8002274:	4652      	mov	r2, sl
 8002276:	408a      	lsls	r2, r1
 8002278:	9b00      	ldr	r3, [sp, #0]
 800227a:	4935      	ldr	r1, [pc, #212]	; (8002350 <__aeabi_dmul+0x3a4>)
 800227c:	1a18      	subs	r0, r3, r0
 800227e:	0003      	movs	r3, r0
 8002280:	468c      	mov	ip, r1
 8002282:	4463      	add	r3, ip
 8002284:	2000      	movs	r0, #0
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	e6d3      	b.n	8002032 <__aeabi_dmul+0x86>
 800228a:	0025      	movs	r5, r4
 800228c:	4305      	orrs	r5, r0
 800228e:	d04a      	beq.n	8002326 <__aeabi_dmul+0x37a>
 8002290:	2c00      	cmp	r4, #0
 8002292:	d100      	bne.n	8002296 <__aeabi_dmul+0x2ea>
 8002294:	e0b0      	b.n	80023f8 <__aeabi_dmul+0x44c>
 8002296:	0020      	movs	r0, r4
 8002298:	f000 fe00 	bl	8002e9c <__clzsi2>
 800229c:	0001      	movs	r1, r0
 800229e:	0002      	movs	r2, r0
 80022a0:	390b      	subs	r1, #11
 80022a2:	231d      	movs	r3, #29
 80022a4:	0010      	movs	r0, r2
 80022a6:	1a5b      	subs	r3, r3, r1
 80022a8:	0031      	movs	r1, r6
 80022aa:	0035      	movs	r5, r6
 80022ac:	3808      	subs	r0, #8
 80022ae:	4084      	lsls	r4, r0
 80022b0:	40d9      	lsrs	r1, r3
 80022b2:	4085      	lsls	r5, r0
 80022b4:	430c      	orrs	r4, r1
 80022b6:	4826      	ldr	r0, [pc, #152]	; (8002350 <__aeabi_dmul+0x3a4>)
 80022b8:	1a83      	subs	r3, r0, r2
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2300      	movs	r3, #0
 80022be:	4699      	mov	r9, r3
 80022c0:	469b      	mov	fp, r3
 80022c2:	e697      	b.n	8001ff4 <__aeabi_dmul+0x48>
 80022c4:	0005      	movs	r5, r0
 80022c6:	4325      	orrs	r5, r4
 80022c8:	d126      	bne.n	8002318 <__aeabi_dmul+0x36c>
 80022ca:	2208      	movs	r2, #8
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2302      	movs	r3, #2
 80022d0:	2400      	movs	r4, #0
 80022d2:	4691      	mov	r9, r2
 80022d4:	469b      	mov	fp, r3
 80022d6:	e68d      	b.n	8001ff4 <__aeabi_dmul+0x48>
 80022d8:	4652      	mov	r2, sl
 80022da:	9b00      	ldr	r3, [sp, #0]
 80022dc:	4332      	orrs	r2, r6
 80022de:	d110      	bne.n	8002302 <__aeabi_dmul+0x356>
 80022e0:	4915      	ldr	r1, [pc, #84]	; (8002338 <__aeabi_dmul+0x38c>)
 80022e2:	2600      	movs	r6, #0
 80022e4:	468c      	mov	ip, r1
 80022e6:	4463      	add	r3, ip
 80022e8:	4649      	mov	r1, r9
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2302      	movs	r3, #2
 80022ee:	4319      	orrs	r1, r3
 80022f0:	4689      	mov	r9, r1
 80022f2:	2002      	movs	r0, #2
 80022f4:	e69d      	b.n	8002032 <__aeabi_dmul+0x86>
 80022f6:	465b      	mov	r3, fp
 80022f8:	9701      	str	r7, [sp, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d000      	beq.n	8002300 <__aeabi_dmul+0x354>
 80022fe:	e6ad      	b.n	800205c <__aeabi_dmul+0xb0>
 8002300:	e6c3      	b.n	800208a <__aeabi_dmul+0xde>
 8002302:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <__aeabi_dmul+0x38c>)
 8002304:	2003      	movs	r0, #3
 8002306:	4694      	mov	ip, r2
 8002308:	4463      	add	r3, ip
 800230a:	464a      	mov	r2, r9
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2303      	movs	r3, #3
 8002310:	431a      	orrs	r2, r3
 8002312:	4691      	mov	r9, r2
 8002314:	4652      	mov	r2, sl
 8002316:	e68c      	b.n	8002032 <__aeabi_dmul+0x86>
 8002318:	220c      	movs	r2, #12
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2303      	movs	r3, #3
 800231e:	0005      	movs	r5, r0
 8002320:	4691      	mov	r9, r2
 8002322:	469b      	mov	fp, r3
 8002324:	e666      	b.n	8001ff4 <__aeabi_dmul+0x48>
 8002326:	2304      	movs	r3, #4
 8002328:	4699      	mov	r9, r3
 800232a:	2300      	movs	r3, #0
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	2400      	movs	r4, #0
 8002332:	469b      	mov	fp, r3
 8002334:	e65e      	b.n	8001ff4 <__aeabi_dmul+0x48>
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	000007ff 	.word	0x000007ff
 800233c:	fffffc01 	.word	0xfffffc01
 8002340:	0801b658 	.word	0x0801b658
 8002344:	000003ff 	.word	0x000003ff
 8002348:	feffffff 	.word	0xfeffffff
 800234c:	000007fe 	.word	0x000007fe
 8002350:	fffffc0d 	.word	0xfffffc0d
 8002354:	4649      	mov	r1, r9
 8002356:	2301      	movs	r3, #1
 8002358:	4319      	orrs	r1, r3
 800235a:	4689      	mov	r9, r1
 800235c:	2600      	movs	r6, #0
 800235e:	2001      	movs	r0, #1
 8002360:	e667      	b.n	8002032 <__aeabi_dmul+0x86>
 8002362:	2300      	movs	r3, #0
 8002364:	2480      	movs	r4, #128	; 0x80
 8002366:	2500      	movs	r5, #0
 8002368:	4a43      	ldr	r2, [pc, #268]	; (8002478 <__aeabi_dmul+0x4cc>)
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	0324      	lsls	r4, r4, #12
 800236e:	e67e      	b.n	800206e <__aeabi_dmul+0xc2>
 8002370:	2001      	movs	r0, #1
 8002372:	1a40      	subs	r0, r0, r1
 8002374:	2838      	cmp	r0, #56	; 0x38
 8002376:	dd00      	ble.n	800237a <__aeabi_dmul+0x3ce>
 8002378:	e676      	b.n	8002068 <__aeabi_dmul+0xbc>
 800237a:	281f      	cmp	r0, #31
 800237c:	dd5b      	ble.n	8002436 <__aeabi_dmul+0x48a>
 800237e:	221f      	movs	r2, #31
 8002380:	0023      	movs	r3, r4
 8002382:	4252      	negs	r2, r2
 8002384:	1a51      	subs	r1, r2, r1
 8002386:	40cb      	lsrs	r3, r1
 8002388:	0019      	movs	r1, r3
 800238a:	2820      	cmp	r0, #32
 800238c:	d003      	beq.n	8002396 <__aeabi_dmul+0x3ea>
 800238e:	4a3b      	ldr	r2, [pc, #236]	; (800247c <__aeabi_dmul+0x4d0>)
 8002390:	4462      	add	r2, ip
 8002392:	4094      	lsls	r4, r2
 8002394:	4325      	orrs	r5, r4
 8002396:	1e6a      	subs	r2, r5, #1
 8002398:	4195      	sbcs	r5, r2
 800239a:	002a      	movs	r2, r5
 800239c:	430a      	orrs	r2, r1
 800239e:	2107      	movs	r1, #7
 80023a0:	000d      	movs	r5, r1
 80023a2:	2400      	movs	r4, #0
 80023a4:	4015      	ands	r5, r2
 80023a6:	4211      	tst	r1, r2
 80023a8:	d05b      	beq.n	8002462 <__aeabi_dmul+0x4b6>
 80023aa:	210f      	movs	r1, #15
 80023ac:	2400      	movs	r4, #0
 80023ae:	4011      	ands	r1, r2
 80023b0:	2904      	cmp	r1, #4
 80023b2:	d053      	beq.n	800245c <__aeabi_dmul+0x4b0>
 80023b4:	1d11      	adds	r1, r2, #4
 80023b6:	4291      	cmp	r1, r2
 80023b8:	4192      	sbcs	r2, r2
 80023ba:	4252      	negs	r2, r2
 80023bc:	18a4      	adds	r4, r4, r2
 80023be:	000a      	movs	r2, r1
 80023c0:	0223      	lsls	r3, r4, #8
 80023c2:	d54b      	bpl.n	800245c <__aeabi_dmul+0x4b0>
 80023c4:	2201      	movs	r2, #1
 80023c6:	2400      	movs	r4, #0
 80023c8:	2500      	movs	r5, #0
 80023ca:	e650      	b.n	800206e <__aeabi_dmul+0xc2>
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	031b      	lsls	r3, r3, #12
 80023d0:	421c      	tst	r4, r3
 80023d2:	d009      	beq.n	80023e8 <__aeabi_dmul+0x43c>
 80023d4:	421e      	tst	r6, r3
 80023d6:	d107      	bne.n	80023e8 <__aeabi_dmul+0x43c>
 80023d8:	4333      	orrs	r3, r6
 80023da:	031c      	lsls	r4, r3, #12
 80023dc:	4643      	mov	r3, r8
 80023de:	0015      	movs	r5, r2
 80023e0:	0b24      	lsrs	r4, r4, #12
 80023e2:	4a25      	ldr	r2, [pc, #148]	; (8002478 <__aeabi_dmul+0x4cc>)
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	e642      	b.n	800206e <__aeabi_dmul+0xc2>
 80023e8:	2280      	movs	r2, #128	; 0x80
 80023ea:	0312      	lsls	r2, r2, #12
 80023ec:	4314      	orrs	r4, r2
 80023ee:	0324      	lsls	r4, r4, #12
 80023f0:	4a21      	ldr	r2, [pc, #132]	; (8002478 <__aeabi_dmul+0x4cc>)
 80023f2:	0b24      	lsrs	r4, r4, #12
 80023f4:	9701      	str	r7, [sp, #4]
 80023f6:	e63a      	b.n	800206e <__aeabi_dmul+0xc2>
 80023f8:	f000 fd50 	bl	8002e9c <__clzsi2>
 80023fc:	0001      	movs	r1, r0
 80023fe:	0002      	movs	r2, r0
 8002400:	3115      	adds	r1, #21
 8002402:	3220      	adds	r2, #32
 8002404:	291c      	cmp	r1, #28
 8002406:	dc00      	bgt.n	800240a <__aeabi_dmul+0x45e>
 8002408:	e74b      	b.n	80022a2 <__aeabi_dmul+0x2f6>
 800240a:	0034      	movs	r4, r6
 800240c:	3808      	subs	r0, #8
 800240e:	2500      	movs	r5, #0
 8002410:	4084      	lsls	r4, r0
 8002412:	e750      	b.n	80022b6 <__aeabi_dmul+0x30a>
 8002414:	f000 fd42 	bl	8002e9c <__clzsi2>
 8002418:	0003      	movs	r3, r0
 800241a:	001a      	movs	r2, r3
 800241c:	3215      	adds	r2, #21
 800241e:	3020      	adds	r0, #32
 8002420:	2a1c      	cmp	r2, #28
 8002422:	dc00      	bgt.n	8002426 <__aeabi_dmul+0x47a>
 8002424:	e71e      	b.n	8002264 <__aeabi_dmul+0x2b8>
 8002426:	4656      	mov	r6, sl
 8002428:	3b08      	subs	r3, #8
 800242a:	2200      	movs	r2, #0
 800242c:	409e      	lsls	r6, r3
 800242e:	e723      	b.n	8002278 <__aeabi_dmul+0x2cc>
 8002430:	9b00      	ldr	r3, [sp, #0]
 8002432:	469c      	mov	ip, r3
 8002434:	e6e6      	b.n	8002204 <__aeabi_dmul+0x258>
 8002436:	4912      	ldr	r1, [pc, #72]	; (8002480 <__aeabi_dmul+0x4d4>)
 8002438:	0022      	movs	r2, r4
 800243a:	4461      	add	r1, ip
 800243c:	002e      	movs	r6, r5
 800243e:	408d      	lsls	r5, r1
 8002440:	408a      	lsls	r2, r1
 8002442:	40c6      	lsrs	r6, r0
 8002444:	1e69      	subs	r1, r5, #1
 8002446:	418d      	sbcs	r5, r1
 8002448:	4332      	orrs	r2, r6
 800244a:	432a      	orrs	r2, r5
 800244c:	40c4      	lsrs	r4, r0
 800244e:	0753      	lsls	r3, r2, #29
 8002450:	d0b6      	beq.n	80023c0 <__aeabi_dmul+0x414>
 8002452:	210f      	movs	r1, #15
 8002454:	4011      	ands	r1, r2
 8002456:	2904      	cmp	r1, #4
 8002458:	d1ac      	bne.n	80023b4 <__aeabi_dmul+0x408>
 800245a:	e7b1      	b.n	80023c0 <__aeabi_dmul+0x414>
 800245c:	0765      	lsls	r5, r4, #29
 800245e:	0264      	lsls	r4, r4, #9
 8002460:	0b24      	lsrs	r4, r4, #12
 8002462:	08d2      	lsrs	r2, r2, #3
 8002464:	4315      	orrs	r5, r2
 8002466:	2200      	movs	r2, #0
 8002468:	e601      	b.n	800206e <__aeabi_dmul+0xc2>
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	0312      	lsls	r2, r2, #12
 800246e:	4314      	orrs	r4, r2
 8002470:	0324      	lsls	r4, r4, #12
 8002472:	4a01      	ldr	r2, [pc, #4]	; (8002478 <__aeabi_dmul+0x4cc>)
 8002474:	0b24      	lsrs	r4, r4, #12
 8002476:	e5fa      	b.n	800206e <__aeabi_dmul+0xc2>
 8002478:	000007ff 	.word	0x000007ff
 800247c:	0000043e 	.word	0x0000043e
 8002480:	0000041e 	.word	0x0000041e

08002484 <__aeabi_dsub>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	4657      	mov	r7, sl
 8002488:	464e      	mov	r6, r9
 800248a:	4645      	mov	r5, r8
 800248c:	46de      	mov	lr, fp
 800248e:	b5e0      	push	{r5, r6, r7, lr}
 8002490:	001e      	movs	r6, r3
 8002492:	0017      	movs	r7, r2
 8002494:	004a      	lsls	r2, r1, #1
 8002496:	030b      	lsls	r3, r1, #12
 8002498:	0d52      	lsrs	r2, r2, #21
 800249a:	0a5b      	lsrs	r3, r3, #9
 800249c:	4690      	mov	r8, r2
 800249e:	0f42      	lsrs	r2, r0, #29
 80024a0:	431a      	orrs	r2, r3
 80024a2:	0fcd      	lsrs	r5, r1, #31
 80024a4:	4ccd      	ldr	r4, [pc, #820]	; (80027dc <__aeabi_dsub+0x358>)
 80024a6:	0331      	lsls	r1, r6, #12
 80024a8:	00c3      	lsls	r3, r0, #3
 80024aa:	4694      	mov	ip, r2
 80024ac:	0070      	lsls	r0, r6, #1
 80024ae:	0f7a      	lsrs	r2, r7, #29
 80024b0:	0a49      	lsrs	r1, r1, #9
 80024b2:	00ff      	lsls	r7, r7, #3
 80024b4:	469a      	mov	sl, r3
 80024b6:	46b9      	mov	r9, r7
 80024b8:	0d40      	lsrs	r0, r0, #21
 80024ba:	0ff6      	lsrs	r6, r6, #31
 80024bc:	4311      	orrs	r1, r2
 80024be:	42a0      	cmp	r0, r4
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x40>
 80024c2:	e0b1      	b.n	8002628 <__aeabi_dsub+0x1a4>
 80024c4:	2201      	movs	r2, #1
 80024c6:	4056      	eors	r6, r2
 80024c8:	46b3      	mov	fp, r6
 80024ca:	42b5      	cmp	r5, r6
 80024cc:	d100      	bne.n	80024d0 <__aeabi_dsub+0x4c>
 80024ce:	e088      	b.n	80025e2 <__aeabi_dsub+0x15e>
 80024d0:	4642      	mov	r2, r8
 80024d2:	1a12      	subs	r2, r2, r0
 80024d4:	2a00      	cmp	r2, #0
 80024d6:	dc00      	bgt.n	80024da <__aeabi_dsub+0x56>
 80024d8:	e0ae      	b.n	8002638 <__aeabi_dsub+0x1b4>
 80024da:	2800      	cmp	r0, #0
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dsub+0x5c>
 80024de:	e0c1      	b.n	8002664 <__aeabi_dsub+0x1e0>
 80024e0:	48be      	ldr	r0, [pc, #760]	; (80027dc <__aeabi_dsub+0x358>)
 80024e2:	4580      	cmp	r8, r0
 80024e4:	d100      	bne.n	80024e8 <__aeabi_dsub+0x64>
 80024e6:	e151      	b.n	800278c <__aeabi_dsub+0x308>
 80024e8:	2080      	movs	r0, #128	; 0x80
 80024ea:	0400      	lsls	r0, r0, #16
 80024ec:	4301      	orrs	r1, r0
 80024ee:	2a38      	cmp	r2, #56	; 0x38
 80024f0:	dd00      	ble.n	80024f4 <__aeabi_dsub+0x70>
 80024f2:	e17b      	b.n	80027ec <__aeabi_dsub+0x368>
 80024f4:	2a1f      	cmp	r2, #31
 80024f6:	dd00      	ble.n	80024fa <__aeabi_dsub+0x76>
 80024f8:	e1ee      	b.n	80028d8 <__aeabi_dsub+0x454>
 80024fa:	2020      	movs	r0, #32
 80024fc:	003e      	movs	r6, r7
 80024fe:	1a80      	subs	r0, r0, r2
 8002500:	000c      	movs	r4, r1
 8002502:	40d6      	lsrs	r6, r2
 8002504:	40d1      	lsrs	r1, r2
 8002506:	4087      	lsls	r7, r0
 8002508:	4662      	mov	r2, ip
 800250a:	4084      	lsls	r4, r0
 800250c:	1a52      	subs	r2, r2, r1
 800250e:	1e78      	subs	r0, r7, #1
 8002510:	4187      	sbcs	r7, r0
 8002512:	4694      	mov	ip, r2
 8002514:	4334      	orrs	r4, r6
 8002516:	4327      	orrs	r7, r4
 8002518:	1bdc      	subs	r4, r3, r7
 800251a:	42a3      	cmp	r3, r4
 800251c:	419b      	sbcs	r3, r3
 800251e:	4662      	mov	r2, ip
 8002520:	425b      	negs	r3, r3
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	4699      	mov	r9, r3
 8002526:	464b      	mov	r3, r9
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	d400      	bmi.n	800252e <__aeabi_dsub+0xaa>
 800252c:	e118      	b.n	8002760 <__aeabi_dsub+0x2dc>
 800252e:	464b      	mov	r3, r9
 8002530:	0258      	lsls	r0, r3, #9
 8002532:	0a43      	lsrs	r3, r0, #9
 8002534:	4699      	mov	r9, r3
 8002536:	464b      	mov	r3, r9
 8002538:	2b00      	cmp	r3, #0
 800253a:	d100      	bne.n	800253e <__aeabi_dsub+0xba>
 800253c:	e137      	b.n	80027ae <__aeabi_dsub+0x32a>
 800253e:	4648      	mov	r0, r9
 8002540:	f000 fcac 	bl	8002e9c <__clzsi2>
 8002544:	0001      	movs	r1, r0
 8002546:	3908      	subs	r1, #8
 8002548:	2320      	movs	r3, #32
 800254a:	0022      	movs	r2, r4
 800254c:	4648      	mov	r0, r9
 800254e:	1a5b      	subs	r3, r3, r1
 8002550:	40da      	lsrs	r2, r3
 8002552:	4088      	lsls	r0, r1
 8002554:	408c      	lsls	r4, r1
 8002556:	4643      	mov	r3, r8
 8002558:	4310      	orrs	r0, r2
 800255a:	4588      	cmp	r8, r1
 800255c:	dd00      	ble.n	8002560 <__aeabi_dsub+0xdc>
 800255e:	e136      	b.n	80027ce <__aeabi_dsub+0x34a>
 8002560:	1ac9      	subs	r1, r1, r3
 8002562:	1c4b      	adds	r3, r1, #1
 8002564:	2b1f      	cmp	r3, #31
 8002566:	dd00      	ble.n	800256a <__aeabi_dsub+0xe6>
 8002568:	e0ea      	b.n	8002740 <__aeabi_dsub+0x2bc>
 800256a:	2220      	movs	r2, #32
 800256c:	0026      	movs	r6, r4
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	0001      	movs	r1, r0
 8002572:	4094      	lsls	r4, r2
 8002574:	40de      	lsrs	r6, r3
 8002576:	40d8      	lsrs	r0, r3
 8002578:	2300      	movs	r3, #0
 800257a:	4091      	lsls	r1, r2
 800257c:	1e62      	subs	r2, r4, #1
 800257e:	4194      	sbcs	r4, r2
 8002580:	4681      	mov	r9, r0
 8002582:	4698      	mov	r8, r3
 8002584:	4331      	orrs	r1, r6
 8002586:	430c      	orrs	r4, r1
 8002588:	0763      	lsls	r3, r4, #29
 800258a:	d009      	beq.n	80025a0 <__aeabi_dsub+0x11c>
 800258c:	230f      	movs	r3, #15
 800258e:	4023      	ands	r3, r4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d005      	beq.n	80025a0 <__aeabi_dsub+0x11c>
 8002594:	1d23      	adds	r3, r4, #4
 8002596:	42a3      	cmp	r3, r4
 8002598:	41a4      	sbcs	r4, r4
 800259a:	4264      	negs	r4, r4
 800259c:	44a1      	add	r9, r4
 800259e:	001c      	movs	r4, r3
 80025a0:	464b      	mov	r3, r9
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	d400      	bmi.n	80025a8 <__aeabi_dsub+0x124>
 80025a6:	e0de      	b.n	8002766 <__aeabi_dsub+0x2e2>
 80025a8:	4641      	mov	r1, r8
 80025aa:	4b8c      	ldr	r3, [pc, #560]	; (80027dc <__aeabi_dsub+0x358>)
 80025ac:	3101      	adds	r1, #1
 80025ae:	4299      	cmp	r1, r3
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x130>
 80025b2:	e0e7      	b.n	8002784 <__aeabi_dsub+0x300>
 80025b4:	464b      	mov	r3, r9
 80025b6:	488a      	ldr	r0, [pc, #552]	; (80027e0 <__aeabi_dsub+0x35c>)
 80025b8:	08e4      	lsrs	r4, r4, #3
 80025ba:	4003      	ands	r3, r0
 80025bc:	0018      	movs	r0, r3
 80025be:	0549      	lsls	r1, r1, #21
 80025c0:	075b      	lsls	r3, r3, #29
 80025c2:	0240      	lsls	r0, r0, #9
 80025c4:	4323      	orrs	r3, r4
 80025c6:	0d4a      	lsrs	r2, r1, #21
 80025c8:	0b04      	lsrs	r4, r0, #12
 80025ca:	0512      	lsls	r2, r2, #20
 80025cc:	07ed      	lsls	r5, r5, #31
 80025ce:	4322      	orrs	r2, r4
 80025d0:	432a      	orrs	r2, r5
 80025d2:	0018      	movs	r0, r3
 80025d4:	0011      	movs	r1, r2
 80025d6:	bcf0      	pop	{r4, r5, r6, r7}
 80025d8:	46bb      	mov	fp, r7
 80025da:	46b2      	mov	sl, r6
 80025dc:	46a9      	mov	r9, r5
 80025de:	46a0      	mov	r8, r4
 80025e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025e2:	4642      	mov	r2, r8
 80025e4:	1a12      	subs	r2, r2, r0
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	dd52      	ble.n	8002690 <__aeabi_dsub+0x20c>
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d100      	bne.n	80025f0 <__aeabi_dsub+0x16c>
 80025ee:	e09c      	b.n	800272a <__aeabi_dsub+0x2a6>
 80025f0:	45a0      	cmp	r8, r4
 80025f2:	d100      	bne.n	80025f6 <__aeabi_dsub+0x172>
 80025f4:	e0ca      	b.n	800278c <__aeabi_dsub+0x308>
 80025f6:	2080      	movs	r0, #128	; 0x80
 80025f8:	0400      	lsls	r0, r0, #16
 80025fa:	4301      	orrs	r1, r0
 80025fc:	2a38      	cmp	r2, #56	; 0x38
 80025fe:	dd00      	ble.n	8002602 <__aeabi_dsub+0x17e>
 8002600:	e149      	b.n	8002896 <__aeabi_dsub+0x412>
 8002602:	2a1f      	cmp	r2, #31
 8002604:	dc00      	bgt.n	8002608 <__aeabi_dsub+0x184>
 8002606:	e197      	b.n	8002938 <__aeabi_dsub+0x4b4>
 8002608:	0010      	movs	r0, r2
 800260a:	000e      	movs	r6, r1
 800260c:	3820      	subs	r0, #32
 800260e:	40c6      	lsrs	r6, r0
 8002610:	2a20      	cmp	r2, #32
 8002612:	d004      	beq.n	800261e <__aeabi_dsub+0x19a>
 8002614:	2040      	movs	r0, #64	; 0x40
 8002616:	1a82      	subs	r2, r0, r2
 8002618:	4091      	lsls	r1, r2
 800261a:	430f      	orrs	r7, r1
 800261c:	46b9      	mov	r9, r7
 800261e:	464c      	mov	r4, r9
 8002620:	1e62      	subs	r2, r4, #1
 8002622:	4194      	sbcs	r4, r2
 8002624:	4334      	orrs	r4, r6
 8002626:	e13a      	b.n	800289e <__aeabi_dsub+0x41a>
 8002628:	000a      	movs	r2, r1
 800262a:	433a      	orrs	r2, r7
 800262c:	d028      	beq.n	8002680 <__aeabi_dsub+0x1fc>
 800262e:	46b3      	mov	fp, r6
 8002630:	42b5      	cmp	r5, r6
 8002632:	d02b      	beq.n	800268c <__aeabi_dsub+0x208>
 8002634:	4a6b      	ldr	r2, [pc, #428]	; (80027e4 <__aeabi_dsub+0x360>)
 8002636:	4442      	add	r2, r8
 8002638:	2a00      	cmp	r2, #0
 800263a:	d05d      	beq.n	80026f8 <__aeabi_dsub+0x274>
 800263c:	4642      	mov	r2, r8
 800263e:	4644      	mov	r4, r8
 8002640:	1a82      	subs	r2, r0, r2
 8002642:	2c00      	cmp	r4, #0
 8002644:	d000      	beq.n	8002648 <__aeabi_dsub+0x1c4>
 8002646:	e0f5      	b.n	8002834 <__aeabi_dsub+0x3b0>
 8002648:	4665      	mov	r5, ip
 800264a:	431d      	orrs	r5, r3
 800264c:	d100      	bne.n	8002650 <__aeabi_dsub+0x1cc>
 800264e:	e19c      	b.n	800298a <__aeabi_dsub+0x506>
 8002650:	1e55      	subs	r5, r2, #1
 8002652:	2a01      	cmp	r2, #1
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x1d4>
 8002656:	e1fb      	b.n	8002a50 <__aeabi_dsub+0x5cc>
 8002658:	4c60      	ldr	r4, [pc, #384]	; (80027dc <__aeabi_dsub+0x358>)
 800265a:	42a2      	cmp	r2, r4
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x1dc>
 800265e:	e1bd      	b.n	80029dc <__aeabi_dsub+0x558>
 8002660:	002a      	movs	r2, r5
 8002662:	e0f0      	b.n	8002846 <__aeabi_dsub+0x3c2>
 8002664:	0008      	movs	r0, r1
 8002666:	4338      	orrs	r0, r7
 8002668:	d100      	bne.n	800266c <__aeabi_dsub+0x1e8>
 800266a:	e0c3      	b.n	80027f4 <__aeabi_dsub+0x370>
 800266c:	1e50      	subs	r0, r2, #1
 800266e:	2a01      	cmp	r2, #1
 8002670:	d100      	bne.n	8002674 <__aeabi_dsub+0x1f0>
 8002672:	e1a8      	b.n	80029c6 <__aeabi_dsub+0x542>
 8002674:	4c59      	ldr	r4, [pc, #356]	; (80027dc <__aeabi_dsub+0x358>)
 8002676:	42a2      	cmp	r2, r4
 8002678:	d100      	bne.n	800267c <__aeabi_dsub+0x1f8>
 800267a:	e087      	b.n	800278c <__aeabi_dsub+0x308>
 800267c:	0002      	movs	r2, r0
 800267e:	e736      	b.n	80024ee <__aeabi_dsub+0x6a>
 8002680:	2201      	movs	r2, #1
 8002682:	4056      	eors	r6, r2
 8002684:	46b3      	mov	fp, r6
 8002686:	42b5      	cmp	r5, r6
 8002688:	d000      	beq.n	800268c <__aeabi_dsub+0x208>
 800268a:	e721      	b.n	80024d0 <__aeabi_dsub+0x4c>
 800268c:	4a55      	ldr	r2, [pc, #340]	; (80027e4 <__aeabi_dsub+0x360>)
 800268e:	4442      	add	r2, r8
 8002690:	2a00      	cmp	r2, #0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x212>
 8002694:	e0b5      	b.n	8002802 <__aeabi_dsub+0x37e>
 8002696:	4642      	mov	r2, r8
 8002698:	4644      	mov	r4, r8
 800269a:	1a82      	subs	r2, r0, r2
 800269c:	2c00      	cmp	r4, #0
 800269e:	d100      	bne.n	80026a2 <__aeabi_dsub+0x21e>
 80026a0:	e138      	b.n	8002914 <__aeabi_dsub+0x490>
 80026a2:	4e4e      	ldr	r6, [pc, #312]	; (80027dc <__aeabi_dsub+0x358>)
 80026a4:	42b0      	cmp	r0, r6
 80026a6:	d100      	bne.n	80026aa <__aeabi_dsub+0x226>
 80026a8:	e1de      	b.n	8002a68 <__aeabi_dsub+0x5e4>
 80026aa:	2680      	movs	r6, #128	; 0x80
 80026ac:	4664      	mov	r4, ip
 80026ae:	0436      	lsls	r6, r6, #16
 80026b0:	4334      	orrs	r4, r6
 80026b2:	46a4      	mov	ip, r4
 80026b4:	2a38      	cmp	r2, #56	; 0x38
 80026b6:	dd00      	ble.n	80026ba <__aeabi_dsub+0x236>
 80026b8:	e196      	b.n	80029e8 <__aeabi_dsub+0x564>
 80026ba:	2a1f      	cmp	r2, #31
 80026bc:	dd00      	ble.n	80026c0 <__aeabi_dsub+0x23c>
 80026be:	e224      	b.n	8002b0a <__aeabi_dsub+0x686>
 80026c0:	2620      	movs	r6, #32
 80026c2:	1ab4      	subs	r4, r6, r2
 80026c4:	46a2      	mov	sl, r4
 80026c6:	4664      	mov	r4, ip
 80026c8:	4656      	mov	r6, sl
 80026ca:	40b4      	lsls	r4, r6
 80026cc:	46a1      	mov	r9, r4
 80026ce:	001c      	movs	r4, r3
 80026d0:	464e      	mov	r6, r9
 80026d2:	40d4      	lsrs	r4, r2
 80026d4:	4326      	orrs	r6, r4
 80026d6:	0034      	movs	r4, r6
 80026d8:	4656      	mov	r6, sl
 80026da:	40b3      	lsls	r3, r6
 80026dc:	1e5e      	subs	r6, r3, #1
 80026de:	41b3      	sbcs	r3, r6
 80026e0:	431c      	orrs	r4, r3
 80026e2:	4663      	mov	r3, ip
 80026e4:	40d3      	lsrs	r3, r2
 80026e6:	18c9      	adds	r1, r1, r3
 80026e8:	19e4      	adds	r4, r4, r7
 80026ea:	42bc      	cmp	r4, r7
 80026ec:	41bf      	sbcs	r7, r7
 80026ee:	427f      	negs	r7, r7
 80026f0:	46b9      	mov	r9, r7
 80026f2:	4680      	mov	r8, r0
 80026f4:	4489      	add	r9, r1
 80026f6:	e0d8      	b.n	80028aa <__aeabi_dsub+0x426>
 80026f8:	4640      	mov	r0, r8
 80026fa:	4c3b      	ldr	r4, [pc, #236]	; (80027e8 <__aeabi_dsub+0x364>)
 80026fc:	3001      	adds	r0, #1
 80026fe:	4220      	tst	r0, r4
 8002700:	d000      	beq.n	8002704 <__aeabi_dsub+0x280>
 8002702:	e0b4      	b.n	800286e <__aeabi_dsub+0x3ea>
 8002704:	4640      	mov	r0, r8
 8002706:	2800      	cmp	r0, #0
 8002708:	d000      	beq.n	800270c <__aeabi_dsub+0x288>
 800270a:	e144      	b.n	8002996 <__aeabi_dsub+0x512>
 800270c:	4660      	mov	r0, ip
 800270e:	4318      	orrs	r0, r3
 8002710:	d100      	bne.n	8002714 <__aeabi_dsub+0x290>
 8002712:	e190      	b.n	8002a36 <__aeabi_dsub+0x5b2>
 8002714:	0008      	movs	r0, r1
 8002716:	4338      	orrs	r0, r7
 8002718:	d000      	beq.n	800271c <__aeabi_dsub+0x298>
 800271a:	e1aa      	b.n	8002a72 <__aeabi_dsub+0x5ee>
 800271c:	4661      	mov	r1, ip
 800271e:	08db      	lsrs	r3, r3, #3
 8002720:	0749      	lsls	r1, r1, #29
 8002722:	430b      	orrs	r3, r1
 8002724:	4661      	mov	r1, ip
 8002726:	08cc      	lsrs	r4, r1, #3
 8002728:	e027      	b.n	800277a <__aeabi_dsub+0x2f6>
 800272a:	0008      	movs	r0, r1
 800272c:	4338      	orrs	r0, r7
 800272e:	d061      	beq.n	80027f4 <__aeabi_dsub+0x370>
 8002730:	1e50      	subs	r0, r2, #1
 8002732:	2a01      	cmp	r2, #1
 8002734:	d100      	bne.n	8002738 <__aeabi_dsub+0x2b4>
 8002736:	e139      	b.n	80029ac <__aeabi_dsub+0x528>
 8002738:	42a2      	cmp	r2, r4
 800273a:	d027      	beq.n	800278c <__aeabi_dsub+0x308>
 800273c:	0002      	movs	r2, r0
 800273e:	e75d      	b.n	80025fc <__aeabi_dsub+0x178>
 8002740:	0002      	movs	r2, r0
 8002742:	391f      	subs	r1, #31
 8002744:	40ca      	lsrs	r2, r1
 8002746:	0011      	movs	r1, r2
 8002748:	2b20      	cmp	r3, #32
 800274a:	d003      	beq.n	8002754 <__aeabi_dsub+0x2d0>
 800274c:	2240      	movs	r2, #64	; 0x40
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	4098      	lsls	r0, r3
 8002752:	4304      	orrs	r4, r0
 8002754:	1e63      	subs	r3, r4, #1
 8002756:	419c      	sbcs	r4, r3
 8002758:	2300      	movs	r3, #0
 800275a:	4699      	mov	r9, r3
 800275c:	4698      	mov	r8, r3
 800275e:	430c      	orrs	r4, r1
 8002760:	0763      	lsls	r3, r4, #29
 8002762:	d000      	beq.n	8002766 <__aeabi_dsub+0x2e2>
 8002764:	e712      	b.n	800258c <__aeabi_dsub+0x108>
 8002766:	464b      	mov	r3, r9
 8002768:	464a      	mov	r2, r9
 800276a:	08e4      	lsrs	r4, r4, #3
 800276c:	075b      	lsls	r3, r3, #29
 800276e:	4323      	orrs	r3, r4
 8002770:	08d4      	lsrs	r4, r2, #3
 8002772:	4642      	mov	r2, r8
 8002774:	4919      	ldr	r1, [pc, #100]	; (80027dc <__aeabi_dsub+0x358>)
 8002776:	428a      	cmp	r2, r1
 8002778:	d00e      	beq.n	8002798 <__aeabi_dsub+0x314>
 800277a:	0324      	lsls	r4, r4, #12
 800277c:	0552      	lsls	r2, r2, #21
 800277e:	0b24      	lsrs	r4, r4, #12
 8002780:	0d52      	lsrs	r2, r2, #21
 8002782:	e722      	b.n	80025ca <__aeabi_dsub+0x146>
 8002784:	000a      	movs	r2, r1
 8002786:	2400      	movs	r4, #0
 8002788:	2300      	movs	r3, #0
 800278a:	e71e      	b.n	80025ca <__aeabi_dsub+0x146>
 800278c:	08db      	lsrs	r3, r3, #3
 800278e:	4662      	mov	r2, ip
 8002790:	0752      	lsls	r2, r2, #29
 8002792:	4313      	orrs	r3, r2
 8002794:	4662      	mov	r2, ip
 8002796:	08d4      	lsrs	r4, r2, #3
 8002798:	001a      	movs	r2, r3
 800279a:	4322      	orrs	r2, r4
 800279c:	d100      	bne.n	80027a0 <__aeabi_dsub+0x31c>
 800279e:	e1fc      	b.n	8002b9a <__aeabi_dsub+0x716>
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	0312      	lsls	r2, r2, #12
 80027a4:	4314      	orrs	r4, r2
 80027a6:	0324      	lsls	r4, r4, #12
 80027a8:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <__aeabi_dsub+0x358>)
 80027aa:	0b24      	lsrs	r4, r4, #12
 80027ac:	e70d      	b.n	80025ca <__aeabi_dsub+0x146>
 80027ae:	0020      	movs	r0, r4
 80027b0:	f000 fb74 	bl	8002e9c <__clzsi2>
 80027b4:	0001      	movs	r1, r0
 80027b6:	3118      	adds	r1, #24
 80027b8:	291f      	cmp	r1, #31
 80027ba:	dc00      	bgt.n	80027be <__aeabi_dsub+0x33a>
 80027bc:	e6c4      	b.n	8002548 <__aeabi_dsub+0xc4>
 80027be:	3808      	subs	r0, #8
 80027c0:	4084      	lsls	r4, r0
 80027c2:	4643      	mov	r3, r8
 80027c4:	0020      	movs	r0, r4
 80027c6:	2400      	movs	r4, #0
 80027c8:	4588      	cmp	r8, r1
 80027ca:	dc00      	bgt.n	80027ce <__aeabi_dsub+0x34a>
 80027cc:	e6c8      	b.n	8002560 <__aeabi_dsub+0xdc>
 80027ce:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <__aeabi_dsub+0x35c>)
 80027d0:	1a5b      	subs	r3, r3, r1
 80027d2:	4010      	ands	r0, r2
 80027d4:	4698      	mov	r8, r3
 80027d6:	4681      	mov	r9, r0
 80027d8:	e6d6      	b.n	8002588 <__aeabi_dsub+0x104>
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	000007ff 	.word	0x000007ff
 80027e0:	ff7fffff 	.word	0xff7fffff
 80027e4:	fffff801 	.word	0xfffff801
 80027e8:	000007fe 	.word	0x000007fe
 80027ec:	430f      	orrs	r7, r1
 80027ee:	1e7a      	subs	r2, r7, #1
 80027f0:	4197      	sbcs	r7, r2
 80027f2:	e691      	b.n	8002518 <__aeabi_dsub+0x94>
 80027f4:	4661      	mov	r1, ip
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	0749      	lsls	r1, r1, #29
 80027fa:	430b      	orrs	r3, r1
 80027fc:	4661      	mov	r1, ip
 80027fe:	08cc      	lsrs	r4, r1, #3
 8002800:	e7b8      	b.n	8002774 <__aeabi_dsub+0x2f0>
 8002802:	4640      	mov	r0, r8
 8002804:	4cd3      	ldr	r4, [pc, #844]	; (8002b54 <__aeabi_dsub+0x6d0>)
 8002806:	3001      	adds	r0, #1
 8002808:	4220      	tst	r0, r4
 800280a:	d000      	beq.n	800280e <__aeabi_dsub+0x38a>
 800280c:	e0a2      	b.n	8002954 <__aeabi_dsub+0x4d0>
 800280e:	4640      	mov	r0, r8
 8002810:	2800      	cmp	r0, #0
 8002812:	d000      	beq.n	8002816 <__aeabi_dsub+0x392>
 8002814:	e101      	b.n	8002a1a <__aeabi_dsub+0x596>
 8002816:	4660      	mov	r0, ip
 8002818:	4318      	orrs	r0, r3
 800281a:	d100      	bne.n	800281e <__aeabi_dsub+0x39a>
 800281c:	e15e      	b.n	8002adc <__aeabi_dsub+0x658>
 800281e:	0008      	movs	r0, r1
 8002820:	4338      	orrs	r0, r7
 8002822:	d000      	beq.n	8002826 <__aeabi_dsub+0x3a2>
 8002824:	e15f      	b.n	8002ae6 <__aeabi_dsub+0x662>
 8002826:	4661      	mov	r1, ip
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	0749      	lsls	r1, r1, #29
 800282c:	430b      	orrs	r3, r1
 800282e:	4661      	mov	r1, ip
 8002830:	08cc      	lsrs	r4, r1, #3
 8002832:	e7a2      	b.n	800277a <__aeabi_dsub+0x2f6>
 8002834:	4dc8      	ldr	r5, [pc, #800]	; (8002b58 <__aeabi_dsub+0x6d4>)
 8002836:	42a8      	cmp	r0, r5
 8002838:	d100      	bne.n	800283c <__aeabi_dsub+0x3b8>
 800283a:	e0cf      	b.n	80029dc <__aeabi_dsub+0x558>
 800283c:	2580      	movs	r5, #128	; 0x80
 800283e:	4664      	mov	r4, ip
 8002840:	042d      	lsls	r5, r5, #16
 8002842:	432c      	orrs	r4, r5
 8002844:	46a4      	mov	ip, r4
 8002846:	2a38      	cmp	r2, #56	; 0x38
 8002848:	dc56      	bgt.n	80028f8 <__aeabi_dsub+0x474>
 800284a:	2a1f      	cmp	r2, #31
 800284c:	dd00      	ble.n	8002850 <__aeabi_dsub+0x3cc>
 800284e:	e0d1      	b.n	80029f4 <__aeabi_dsub+0x570>
 8002850:	2520      	movs	r5, #32
 8002852:	001e      	movs	r6, r3
 8002854:	1aad      	subs	r5, r5, r2
 8002856:	4664      	mov	r4, ip
 8002858:	40ab      	lsls	r3, r5
 800285a:	40ac      	lsls	r4, r5
 800285c:	40d6      	lsrs	r6, r2
 800285e:	1e5d      	subs	r5, r3, #1
 8002860:	41ab      	sbcs	r3, r5
 8002862:	4334      	orrs	r4, r6
 8002864:	4323      	orrs	r3, r4
 8002866:	4664      	mov	r4, ip
 8002868:	40d4      	lsrs	r4, r2
 800286a:	1b09      	subs	r1, r1, r4
 800286c:	e049      	b.n	8002902 <__aeabi_dsub+0x47e>
 800286e:	4660      	mov	r0, ip
 8002870:	1bdc      	subs	r4, r3, r7
 8002872:	1a46      	subs	r6, r0, r1
 8002874:	42a3      	cmp	r3, r4
 8002876:	4180      	sbcs	r0, r0
 8002878:	4240      	negs	r0, r0
 800287a:	4681      	mov	r9, r0
 800287c:	0030      	movs	r0, r6
 800287e:	464e      	mov	r6, r9
 8002880:	1b80      	subs	r0, r0, r6
 8002882:	4681      	mov	r9, r0
 8002884:	0200      	lsls	r0, r0, #8
 8002886:	d476      	bmi.n	8002976 <__aeabi_dsub+0x4f2>
 8002888:	464b      	mov	r3, r9
 800288a:	4323      	orrs	r3, r4
 800288c:	d000      	beq.n	8002890 <__aeabi_dsub+0x40c>
 800288e:	e652      	b.n	8002536 <__aeabi_dsub+0xb2>
 8002890:	2400      	movs	r4, #0
 8002892:	2500      	movs	r5, #0
 8002894:	e771      	b.n	800277a <__aeabi_dsub+0x2f6>
 8002896:	4339      	orrs	r1, r7
 8002898:	000c      	movs	r4, r1
 800289a:	1e62      	subs	r2, r4, #1
 800289c:	4194      	sbcs	r4, r2
 800289e:	18e4      	adds	r4, r4, r3
 80028a0:	429c      	cmp	r4, r3
 80028a2:	419b      	sbcs	r3, r3
 80028a4:	425b      	negs	r3, r3
 80028a6:	4463      	add	r3, ip
 80028a8:	4699      	mov	r9, r3
 80028aa:	464b      	mov	r3, r9
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	d400      	bmi.n	80028b2 <__aeabi_dsub+0x42e>
 80028b0:	e756      	b.n	8002760 <__aeabi_dsub+0x2dc>
 80028b2:	2301      	movs	r3, #1
 80028b4:	469c      	mov	ip, r3
 80028b6:	4ba8      	ldr	r3, [pc, #672]	; (8002b58 <__aeabi_dsub+0x6d4>)
 80028b8:	44e0      	add	r8, ip
 80028ba:	4598      	cmp	r8, r3
 80028bc:	d038      	beq.n	8002930 <__aeabi_dsub+0x4ac>
 80028be:	464b      	mov	r3, r9
 80028c0:	48a6      	ldr	r0, [pc, #664]	; (8002b5c <__aeabi_dsub+0x6d8>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	4003      	ands	r3, r0
 80028c6:	0018      	movs	r0, r3
 80028c8:	0863      	lsrs	r3, r4, #1
 80028ca:	4014      	ands	r4, r2
 80028cc:	431c      	orrs	r4, r3
 80028ce:	07c3      	lsls	r3, r0, #31
 80028d0:	431c      	orrs	r4, r3
 80028d2:	0843      	lsrs	r3, r0, #1
 80028d4:	4699      	mov	r9, r3
 80028d6:	e657      	b.n	8002588 <__aeabi_dsub+0x104>
 80028d8:	0010      	movs	r0, r2
 80028da:	000e      	movs	r6, r1
 80028dc:	3820      	subs	r0, #32
 80028de:	40c6      	lsrs	r6, r0
 80028e0:	2a20      	cmp	r2, #32
 80028e2:	d004      	beq.n	80028ee <__aeabi_dsub+0x46a>
 80028e4:	2040      	movs	r0, #64	; 0x40
 80028e6:	1a82      	subs	r2, r0, r2
 80028e8:	4091      	lsls	r1, r2
 80028ea:	430f      	orrs	r7, r1
 80028ec:	46b9      	mov	r9, r7
 80028ee:	464f      	mov	r7, r9
 80028f0:	1e7a      	subs	r2, r7, #1
 80028f2:	4197      	sbcs	r7, r2
 80028f4:	4337      	orrs	r7, r6
 80028f6:	e60f      	b.n	8002518 <__aeabi_dsub+0x94>
 80028f8:	4662      	mov	r2, ip
 80028fa:	431a      	orrs	r2, r3
 80028fc:	0013      	movs	r3, r2
 80028fe:	1e5a      	subs	r2, r3, #1
 8002900:	4193      	sbcs	r3, r2
 8002902:	1afc      	subs	r4, r7, r3
 8002904:	42a7      	cmp	r7, r4
 8002906:	41bf      	sbcs	r7, r7
 8002908:	427f      	negs	r7, r7
 800290a:	1bcb      	subs	r3, r1, r7
 800290c:	4699      	mov	r9, r3
 800290e:	465d      	mov	r5, fp
 8002910:	4680      	mov	r8, r0
 8002912:	e608      	b.n	8002526 <__aeabi_dsub+0xa2>
 8002914:	4666      	mov	r6, ip
 8002916:	431e      	orrs	r6, r3
 8002918:	d100      	bne.n	800291c <__aeabi_dsub+0x498>
 800291a:	e0be      	b.n	8002a9a <__aeabi_dsub+0x616>
 800291c:	1e56      	subs	r6, r2, #1
 800291e:	2a01      	cmp	r2, #1
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x4a0>
 8002922:	e109      	b.n	8002b38 <__aeabi_dsub+0x6b4>
 8002924:	4c8c      	ldr	r4, [pc, #560]	; (8002b58 <__aeabi_dsub+0x6d4>)
 8002926:	42a2      	cmp	r2, r4
 8002928:	d100      	bne.n	800292c <__aeabi_dsub+0x4a8>
 800292a:	e119      	b.n	8002b60 <__aeabi_dsub+0x6dc>
 800292c:	0032      	movs	r2, r6
 800292e:	e6c1      	b.n	80026b4 <__aeabi_dsub+0x230>
 8002930:	4642      	mov	r2, r8
 8002932:	2400      	movs	r4, #0
 8002934:	2300      	movs	r3, #0
 8002936:	e648      	b.n	80025ca <__aeabi_dsub+0x146>
 8002938:	2020      	movs	r0, #32
 800293a:	000c      	movs	r4, r1
 800293c:	1a80      	subs	r0, r0, r2
 800293e:	003e      	movs	r6, r7
 8002940:	4087      	lsls	r7, r0
 8002942:	4084      	lsls	r4, r0
 8002944:	40d6      	lsrs	r6, r2
 8002946:	1e78      	subs	r0, r7, #1
 8002948:	4187      	sbcs	r7, r0
 800294a:	40d1      	lsrs	r1, r2
 800294c:	4334      	orrs	r4, r6
 800294e:	433c      	orrs	r4, r7
 8002950:	448c      	add	ip, r1
 8002952:	e7a4      	b.n	800289e <__aeabi_dsub+0x41a>
 8002954:	4a80      	ldr	r2, [pc, #512]	; (8002b58 <__aeabi_dsub+0x6d4>)
 8002956:	4290      	cmp	r0, r2
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x4d8>
 800295a:	e0e9      	b.n	8002b30 <__aeabi_dsub+0x6ac>
 800295c:	19df      	adds	r7, r3, r7
 800295e:	429f      	cmp	r7, r3
 8002960:	419b      	sbcs	r3, r3
 8002962:	4461      	add	r1, ip
 8002964:	425b      	negs	r3, r3
 8002966:	18c9      	adds	r1, r1, r3
 8002968:	07cc      	lsls	r4, r1, #31
 800296a:	087f      	lsrs	r7, r7, #1
 800296c:	084b      	lsrs	r3, r1, #1
 800296e:	4699      	mov	r9, r3
 8002970:	4680      	mov	r8, r0
 8002972:	433c      	orrs	r4, r7
 8002974:	e6f4      	b.n	8002760 <__aeabi_dsub+0x2dc>
 8002976:	1afc      	subs	r4, r7, r3
 8002978:	42a7      	cmp	r7, r4
 800297a:	41bf      	sbcs	r7, r7
 800297c:	4663      	mov	r3, ip
 800297e:	427f      	negs	r7, r7
 8002980:	1ac9      	subs	r1, r1, r3
 8002982:	1bcb      	subs	r3, r1, r7
 8002984:	4699      	mov	r9, r3
 8002986:	465d      	mov	r5, fp
 8002988:	e5d5      	b.n	8002536 <__aeabi_dsub+0xb2>
 800298a:	08ff      	lsrs	r7, r7, #3
 800298c:	074b      	lsls	r3, r1, #29
 800298e:	465d      	mov	r5, fp
 8002990:	433b      	orrs	r3, r7
 8002992:	08cc      	lsrs	r4, r1, #3
 8002994:	e6ee      	b.n	8002774 <__aeabi_dsub+0x2f0>
 8002996:	4662      	mov	r2, ip
 8002998:	431a      	orrs	r2, r3
 800299a:	d000      	beq.n	800299e <__aeabi_dsub+0x51a>
 800299c:	e082      	b.n	8002aa4 <__aeabi_dsub+0x620>
 800299e:	000b      	movs	r3, r1
 80029a0:	433b      	orrs	r3, r7
 80029a2:	d11b      	bne.n	80029dc <__aeabi_dsub+0x558>
 80029a4:	2480      	movs	r4, #128	; 0x80
 80029a6:	2500      	movs	r5, #0
 80029a8:	0324      	lsls	r4, r4, #12
 80029aa:	e6f9      	b.n	80027a0 <__aeabi_dsub+0x31c>
 80029ac:	19dc      	adds	r4, r3, r7
 80029ae:	429c      	cmp	r4, r3
 80029b0:	419b      	sbcs	r3, r3
 80029b2:	4461      	add	r1, ip
 80029b4:	4689      	mov	r9, r1
 80029b6:	425b      	negs	r3, r3
 80029b8:	4499      	add	r9, r3
 80029ba:	464b      	mov	r3, r9
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	d444      	bmi.n	8002a4a <__aeabi_dsub+0x5c6>
 80029c0:	2301      	movs	r3, #1
 80029c2:	4698      	mov	r8, r3
 80029c4:	e6cc      	b.n	8002760 <__aeabi_dsub+0x2dc>
 80029c6:	1bdc      	subs	r4, r3, r7
 80029c8:	4662      	mov	r2, ip
 80029ca:	42a3      	cmp	r3, r4
 80029cc:	419b      	sbcs	r3, r3
 80029ce:	1a51      	subs	r1, r2, r1
 80029d0:	425b      	negs	r3, r3
 80029d2:	1acb      	subs	r3, r1, r3
 80029d4:	4699      	mov	r9, r3
 80029d6:	2301      	movs	r3, #1
 80029d8:	4698      	mov	r8, r3
 80029da:	e5a4      	b.n	8002526 <__aeabi_dsub+0xa2>
 80029dc:	08ff      	lsrs	r7, r7, #3
 80029de:	074b      	lsls	r3, r1, #29
 80029e0:	465d      	mov	r5, fp
 80029e2:	433b      	orrs	r3, r7
 80029e4:	08cc      	lsrs	r4, r1, #3
 80029e6:	e6d7      	b.n	8002798 <__aeabi_dsub+0x314>
 80029e8:	4662      	mov	r2, ip
 80029ea:	431a      	orrs	r2, r3
 80029ec:	0014      	movs	r4, r2
 80029ee:	1e63      	subs	r3, r4, #1
 80029f0:	419c      	sbcs	r4, r3
 80029f2:	e679      	b.n	80026e8 <__aeabi_dsub+0x264>
 80029f4:	0015      	movs	r5, r2
 80029f6:	4664      	mov	r4, ip
 80029f8:	3d20      	subs	r5, #32
 80029fa:	40ec      	lsrs	r4, r5
 80029fc:	46a0      	mov	r8, r4
 80029fe:	2a20      	cmp	r2, #32
 8002a00:	d005      	beq.n	8002a0e <__aeabi_dsub+0x58a>
 8002a02:	2540      	movs	r5, #64	; 0x40
 8002a04:	4664      	mov	r4, ip
 8002a06:	1aaa      	subs	r2, r5, r2
 8002a08:	4094      	lsls	r4, r2
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	469a      	mov	sl, r3
 8002a0e:	4654      	mov	r4, sl
 8002a10:	1e63      	subs	r3, r4, #1
 8002a12:	419c      	sbcs	r4, r3
 8002a14:	4643      	mov	r3, r8
 8002a16:	4323      	orrs	r3, r4
 8002a18:	e773      	b.n	8002902 <__aeabi_dsub+0x47e>
 8002a1a:	4662      	mov	r2, ip
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	d023      	beq.n	8002a68 <__aeabi_dsub+0x5e4>
 8002a20:	000a      	movs	r2, r1
 8002a22:	433a      	orrs	r2, r7
 8002a24:	d000      	beq.n	8002a28 <__aeabi_dsub+0x5a4>
 8002a26:	e0a0      	b.n	8002b6a <__aeabi_dsub+0x6e6>
 8002a28:	4662      	mov	r2, ip
 8002a2a:	08db      	lsrs	r3, r3, #3
 8002a2c:	0752      	lsls	r2, r2, #29
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	4662      	mov	r2, ip
 8002a32:	08d4      	lsrs	r4, r2, #3
 8002a34:	e6b0      	b.n	8002798 <__aeabi_dsub+0x314>
 8002a36:	000b      	movs	r3, r1
 8002a38:	433b      	orrs	r3, r7
 8002a3a:	d100      	bne.n	8002a3e <__aeabi_dsub+0x5ba>
 8002a3c:	e728      	b.n	8002890 <__aeabi_dsub+0x40c>
 8002a3e:	08ff      	lsrs	r7, r7, #3
 8002a40:	074b      	lsls	r3, r1, #29
 8002a42:	465d      	mov	r5, fp
 8002a44:	433b      	orrs	r3, r7
 8002a46:	08cc      	lsrs	r4, r1, #3
 8002a48:	e697      	b.n	800277a <__aeabi_dsub+0x2f6>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	4698      	mov	r8, r3
 8002a4e:	e736      	b.n	80028be <__aeabi_dsub+0x43a>
 8002a50:	1afc      	subs	r4, r7, r3
 8002a52:	42a7      	cmp	r7, r4
 8002a54:	41bf      	sbcs	r7, r7
 8002a56:	4663      	mov	r3, ip
 8002a58:	427f      	negs	r7, r7
 8002a5a:	1ac9      	subs	r1, r1, r3
 8002a5c:	1bcb      	subs	r3, r1, r7
 8002a5e:	4699      	mov	r9, r3
 8002a60:	2301      	movs	r3, #1
 8002a62:	465d      	mov	r5, fp
 8002a64:	4698      	mov	r8, r3
 8002a66:	e55e      	b.n	8002526 <__aeabi_dsub+0xa2>
 8002a68:	074b      	lsls	r3, r1, #29
 8002a6a:	08ff      	lsrs	r7, r7, #3
 8002a6c:	433b      	orrs	r3, r7
 8002a6e:	08cc      	lsrs	r4, r1, #3
 8002a70:	e692      	b.n	8002798 <__aeabi_dsub+0x314>
 8002a72:	1bdc      	subs	r4, r3, r7
 8002a74:	4660      	mov	r0, ip
 8002a76:	42a3      	cmp	r3, r4
 8002a78:	41b6      	sbcs	r6, r6
 8002a7a:	1a40      	subs	r0, r0, r1
 8002a7c:	4276      	negs	r6, r6
 8002a7e:	1b80      	subs	r0, r0, r6
 8002a80:	4681      	mov	r9, r0
 8002a82:	0200      	lsls	r0, r0, #8
 8002a84:	d560      	bpl.n	8002b48 <__aeabi_dsub+0x6c4>
 8002a86:	1afc      	subs	r4, r7, r3
 8002a88:	42a7      	cmp	r7, r4
 8002a8a:	41bf      	sbcs	r7, r7
 8002a8c:	4663      	mov	r3, ip
 8002a8e:	427f      	negs	r7, r7
 8002a90:	1ac9      	subs	r1, r1, r3
 8002a92:	1bcb      	subs	r3, r1, r7
 8002a94:	4699      	mov	r9, r3
 8002a96:	465d      	mov	r5, fp
 8002a98:	e576      	b.n	8002588 <__aeabi_dsub+0x104>
 8002a9a:	08ff      	lsrs	r7, r7, #3
 8002a9c:	074b      	lsls	r3, r1, #29
 8002a9e:	433b      	orrs	r3, r7
 8002aa0:	08cc      	lsrs	r4, r1, #3
 8002aa2:	e667      	b.n	8002774 <__aeabi_dsub+0x2f0>
 8002aa4:	000a      	movs	r2, r1
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	433a      	orrs	r2, r7
 8002aaa:	d100      	bne.n	8002aae <__aeabi_dsub+0x62a>
 8002aac:	e66f      	b.n	800278e <__aeabi_dsub+0x30a>
 8002aae:	4662      	mov	r2, ip
 8002ab0:	0752      	lsls	r2, r2, #29
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	4662      	mov	r2, ip
 8002ab6:	08d4      	lsrs	r4, r2, #3
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	0312      	lsls	r2, r2, #12
 8002abc:	4214      	tst	r4, r2
 8002abe:	d007      	beq.n	8002ad0 <__aeabi_dsub+0x64c>
 8002ac0:	08c8      	lsrs	r0, r1, #3
 8002ac2:	4210      	tst	r0, r2
 8002ac4:	d104      	bne.n	8002ad0 <__aeabi_dsub+0x64c>
 8002ac6:	465d      	mov	r5, fp
 8002ac8:	0004      	movs	r4, r0
 8002aca:	08fb      	lsrs	r3, r7, #3
 8002acc:	0749      	lsls	r1, r1, #29
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	0f5a      	lsrs	r2, r3, #29
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	08db      	lsrs	r3, r3, #3
 8002ad6:	0752      	lsls	r2, r2, #29
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	e65d      	b.n	8002798 <__aeabi_dsub+0x314>
 8002adc:	074b      	lsls	r3, r1, #29
 8002ade:	08ff      	lsrs	r7, r7, #3
 8002ae0:	433b      	orrs	r3, r7
 8002ae2:	08cc      	lsrs	r4, r1, #3
 8002ae4:	e649      	b.n	800277a <__aeabi_dsub+0x2f6>
 8002ae6:	19dc      	adds	r4, r3, r7
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	419b      	sbcs	r3, r3
 8002aec:	4461      	add	r1, ip
 8002aee:	4689      	mov	r9, r1
 8002af0:	425b      	negs	r3, r3
 8002af2:	4499      	add	r9, r3
 8002af4:	464b      	mov	r3, r9
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	d400      	bmi.n	8002afc <__aeabi_dsub+0x678>
 8002afa:	e631      	b.n	8002760 <__aeabi_dsub+0x2dc>
 8002afc:	464a      	mov	r2, r9
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <__aeabi_dsub+0x6d8>)
 8002b00:	401a      	ands	r2, r3
 8002b02:	2301      	movs	r3, #1
 8002b04:	4691      	mov	r9, r2
 8002b06:	4698      	mov	r8, r3
 8002b08:	e62a      	b.n	8002760 <__aeabi_dsub+0x2dc>
 8002b0a:	0016      	movs	r6, r2
 8002b0c:	4664      	mov	r4, ip
 8002b0e:	3e20      	subs	r6, #32
 8002b10:	40f4      	lsrs	r4, r6
 8002b12:	46a0      	mov	r8, r4
 8002b14:	2a20      	cmp	r2, #32
 8002b16:	d005      	beq.n	8002b24 <__aeabi_dsub+0x6a0>
 8002b18:	2640      	movs	r6, #64	; 0x40
 8002b1a:	4664      	mov	r4, ip
 8002b1c:	1ab2      	subs	r2, r6, r2
 8002b1e:	4094      	lsls	r4, r2
 8002b20:	4323      	orrs	r3, r4
 8002b22:	469a      	mov	sl, r3
 8002b24:	4654      	mov	r4, sl
 8002b26:	1e63      	subs	r3, r4, #1
 8002b28:	419c      	sbcs	r4, r3
 8002b2a:	4643      	mov	r3, r8
 8002b2c:	431c      	orrs	r4, r3
 8002b2e:	e5db      	b.n	80026e8 <__aeabi_dsub+0x264>
 8002b30:	0002      	movs	r2, r0
 8002b32:	2400      	movs	r4, #0
 8002b34:	2300      	movs	r3, #0
 8002b36:	e548      	b.n	80025ca <__aeabi_dsub+0x146>
 8002b38:	19dc      	adds	r4, r3, r7
 8002b3a:	42bc      	cmp	r4, r7
 8002b3c:	41bf      	sbcs	r7, r7
 8002b3e:	4461      	add	r1, ip
 8002b40:	4689      	mov	r9, r1
 8002b42:	427f      	negs	r7, r7
 8002b44:	44b9      	add	r9, r7
 8002b46:	e738      	b.n	80029ba <__aeabi_dsub+0x536>
 8002b48:	464b      	mov	r3, r9
 8002b4a:	4323      	orrs	r3, r4
 8002b4c:	d100      	bne.n	8002b50 <__aeabi_dsub+0x6cc>
 8002b4e:	e69f      	b.n	8002890 <__aeabi_dsub+0x40c>
 8002b50:	e606      	b.n	8002760 <__aeabi_dsub+0x2dc>
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	000007fe 	.word	0x000007fe
 8002b58:	000007ff 	.word	0x000007ff
 8002b5c:	ff7fffff 	.word	0xff7fffff
 8002b60:	08ff      	lsrs	r7, r7, #3
 8002b62:	074b      	lsls	r3, r1, #29
 8002b64:	433b      	orrs	r3, r7
 8002b66:	08cc      	lsrs	r4, r1, #3
 8002b68:	e616      	b.n	8002798 <__aeabi_dsub+0x314>
 8002b6a:	4662      	mov	r2, ip
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	0752      	lsls	r2, r2, #29
 8002b70:	4313      	orrs	r3, r2
 8002b72:	4662      	mov	r2, ip
 8002b74:	08d4      	lsrs	r4, r2, #3
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	0312      	lsls	r2, r2, #12
 8002b7a:	4214      	tst	r4, r2
 8002b7c:	d007      	beq.n	8002b8e <__aeabi_dsub+0x70a>
 8002b7e:	08c8      	lsrs	r0, r1, #3
 8002b80:	4210      	tst	r0, r2
 8002b82:	d104      	bne.n	8002b8e <__aeabi_dsub+0x70a>
 8002b84:	465d      	mov	r5, fp
 8002b86:	0004      	movs	r4, r0
 8002b88:	08fb      	lsrs	r3, r7, #3
 8002b8a:	0749      	lsls	r1, r1, #29
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	0f5a      	lsrs	r2, r3, #29
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	0752      	lsls	r2, r2, #29
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	e5fe      	b.n	8002798 <__aeabi_dsub+0x314>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	4a01      	ldr	r2, [pc, #4]	; (8002ba4 <__aeabi_dsub+0x720>)
 8002b9e:	001c      	movs	r4, r3
 8002ba0:	e513      	b.n	80025ca <__aeabi_dsub+0x146>
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	000007ff 	.word	0x000007ff

08002ba8 <__aeabi_dcmpun>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	0005      	movs	r5, r0
 8002bac:	480c      	ldr	r0, [pc, #48]	; (8002be0 <__aeabi_dcmpun+0x38>)
 8002bae:	031c      	lsls	r4, r3, #12
 8002bb0:	0016      	movs	r6, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	030a      	lsls	r2, r1, #12
 8002bb6:	0049      	lsls	r1, r1, #1
 8002bb8:	0b12      	lsrs	r2, r2, #12
 8002bba:	0d49      	lsrs	r1, r1, #21
 8002bbc:	0b24      	lsrs	r4, r4, #12
 8002bbe:	0d5b      	lsrs	r3, r3, #21
 8002bc0:	4281      	cmp	r1, r0
 8002bc2:	d008      	beq.n	8002bd6 <__aeabi_dcmpun+0x2e>
 8002bc4:	4a06      	ldr	r2, [pc, #24]	; (8002be0 <__aeabi_dcmpun+0x38>)
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d103      	bne.n	8002bd4 <__aeabi_dcmpun+0x2c>
 8002bcc:	0020      	movs	r0, r4
 8002bce:	4330      	orrs	r0, r6
 8002bd0:	1e43      	subs	r3, r0, #1
 8002bd2:	4198      	sbcs	r0, r3
 8002bd4:	bd70      	pop	{r4, r5, r6, pc}
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	432a      	orrs	r2, r5
 8002bda:	d1fb      	bne.n	8002bd4 <__aeabi_dcmpun+0x2c>
 8002bdc:	e7f2      	b.n	8002bc4 <__aeabi_dcmpun+0x1c>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	000007ff 	.word	0x000007ff

08002be4 <__aeabi_d2iz>:
 8002be4:	000a      	movs	r2, r1
 8002be6:	b530      	push	{r4, r5, lr}
 8002be8:	4c13      	ldr	r4, [pc, #76]	; (8002c38 <__aeabi_d2iz+0x54>)
 8002bea:	0053      	lsls	r3, r2, #1
 8002bec:	0309      	lsls	r1, r1, #12
 8002bee:	0005      	movs	r5, r0
 8002bf0:	0b09      	lsrs	r1, r1, #12
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	0d5b      	lsrs	r3, r3, #21
 8002bf6:	0fd2      	lsrs	r2, r2, #31
 8002bf8:	42a3      	cmp	r3, r4
 8002bfa:	dd04      	ble.n	8002c06 <__aeabi_d2iz+0x22>
 8002bfc:	480f      	ldr	r0, [pc, #60]	; (8002c3c <__aeabi_d2iz+0x58>)
 8002bfe:	4283      	cmp	r3, r0
 8002c00:	dd02      	ble.n	8002c08 <__aeabi_d2iz+0x24>
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <__aeabi_d2iz+0x5c>)
 8002c04:	18d0      	adds	r0, r2, r3
 8002c06:	bd30      	pop	{r4, r5, pc}
 8002c08:	2080      	movs	r0, #128	; 0x80
 8002c0a:	0340      	lsls	r0, r0, #13
 8002c0c:	4301      	orrs	r1, r0
 8002c0e:	480d      	ldr	r0, [pc, #52]	; (8002c44 <__aeabi_d2iz+0x60>)
 8002c10:	1ac0      	subs	r0, r0, r3
 8002c12:	281f      	cmp	r0, #31
 8002c14:	dd08      	ble.n	8002c28 <__aeabi_d2iz+0x44>
 8002c16:	480c      	ldr	r0, [pc, #48]	; (8002c48 <__aeabi_d2iz+0x64>)
 8002c18:	1ac3      	subs	r3, r0, r3
 8002c1a:	40d9      	lsrs	r1, r3
 8002c1c:	000b      	movs	r3, r1
 8002c1e:	4258      	negs	r0, r3
 8002c20:	2a00      	cmp	r2, #0
 8002c22:	d1f0      	bne.n	8002c06 <__aeabi_d2iz+0x22>
 8002c24:	0018      	movs	r0, r3
 8002c26:	e7ee      	b.n	8002c06 <__aeabi_d2iz+0x22>
 8002c28:	4c08      	ldr	r4, [pc, #32]	; (8002c4c <__aeabi_d2iz+0x68>)
 8002c2a:	40c5      	lsrs	r5, r0
 8002c2c:	46a4      	mov	ip, r4
 8002c2e:	4463      	add	r3, ip
 8002c30:	4099      	lsls	r1, r3
 8002c32:	000b      	movs	r3, r1
 8002c34:	432b      	orrs	r3, r5
 8002c36:	e7f2      	b.n	8002c1e <__aeabi_d2iz+0x3a>
 8002c38:	000003fe 	.word	0x000003fe
 8002c3c:	0000041d 	.word	0x0000041d
 8002c40:	7fffffff 	.word	0x7fffffff
 8002c44:	00000433 	.word	0x00000433
 8002c48:	00000413 	.word	0x00000413
 8002c4c:	fffffbed 	.word	0xfffffbed

08002c50 <__aeabi_i2d>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d016      	beq.n	8002c84 <__aeabi_i2d+0x34>
 8002c56:	17c3      	asrs	r3, r0, #31
 8002c58:	18c5      	adds	r5, r0, r3
 8002c5a:	405d      	eors	r5, r3
 8002c5c:	0fc4      	lsrs	r4, r0, #31
 8002c5e:	0028      	movs	r0, r5
 8002c60:	f000 f91c 	bl	8002e9c <__clzsi2>
 8002c64:	4a11      	ldr	r2, [pc, #68]	; (8002cac <__aeabi_i2d+0x5c>)
 8002c66:	1a12      	subs	r2, r2, r0
 8002c68:	280a      	cmp	r0, #10
 8002c6a:	dc16      	bgt.n	8002c9a <__aeabi_i2d+0x4a>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	002e      	movs	r6, r5
 8002c70:	3315      	adds	r3, #21
 8002c72:	409e      	lsls	r6, r3
 8002c74:	230b      	movs	r3, #11
 8002c76:	1a18      	subs	r0, r3, r0
 8002c78:	40c5      	lsrs	r5, r0
 8002c7a:	0552      	lsls	r2, r2, #21
 8002c7c:	032d      	lsls	r5, r5, #12
 8002c7e:	0b2d      	lsrs	r5, r5, #12
 8002c80:	0d53      	lsrs	r3, r2, #21
 8002c82:	e003      	b.n	8002c8c <__aeabi_i2d+0x3c>
 8002c84:	2400      	movs	r4, #0
 8002c86:	2300      	movs	r3, #0
 8002c88:	2500      	movs	r5, #0
 8002c8a:	2600      	movs	r6, #0
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	432b      	orrs	r3, r5
 8002c90:	07e4      	lsls	r4, r4, #31
 8002c92:	4323      	orrs	r3, r4
 8002c94:	0030      	movs	r0, r6
 8002c96:	0019      	movs	r1, r3
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
 8002c9a:	380b      	subs	r0, #11
 8002c9c:	4085      	lsls	r5, r0
 8002c9e:	0552      	lsls	r2, r2, #21
 8002ca0:	032d      	lsls	r5, r5, #12
 8002ca2:	2600      	movs	r6, #0
 8002ca4:	0b2d      	lsrs	r5, r5, #12
 8002ca6:	0d53      	lsrs	r3, r2, #21
 8002ca8:	e7f0      	b.n	8002c8c <__aeabi_i2d+0x3c>
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	0000041e 	.word	0x0000041e

08002cb0 <__aeabi_ui2d>:
 8002cb0:	b510      	push	{r4, lr}
 8002cb2:	1e04      	subs	r4, r0, #0
 8002cb4:	d010      	beq.n	8002cd8 <__aeabi_ui2d+0x28>
 8002cb6:	f000 f8f1 	bl	8002e9c <__clzsi2>
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <__aeabi_ui2d+0x48>)
 8002cbc:	1a1b      	subs	r3, r3, r0
 8002cbe:	280a      	cmp	r0, #10
 8002cc0:	dc11      	bgt.n	8002ce6 <__aeabi_ui2d+0x36>
 8002cc2:	220b      	movs	r2, #11
 8002cc4:	0021      	movs	r1, r4
 8002cc6:	1a12      	subs	r2, r2, r0
 8002cc8:	40d1      	lsrs	r1, r2
 8002cca:	3015      	adds	r0, #21
 8002ccc:	030a      	lsls	r2, r1, #12
 8002cce:	055b      	lsls	r3, r3, #21
 8002cd0:	4084      	lsls	r4, r0
 8002cd2:	0b12      	lsrs	r2, r2, #12
 8002cd4:	0d5b      	lsrs	r3, r3, #21
 8002cd6:	e001      	b.n	8002cdc <__aeabi_ui2d+0x2c>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2200      	movs	r2, #0
 8002cdc:	051b      	lsls	r3, r3, #20
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	0020      	movs	r0, r4
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	bd10      	pop	{r4, pc}
 8002ce6:	0022      	movs	r2, r4
 8002ce8:	380b      	subs	r0, #11
 8002cea:	4082      	lsls	r2, r0
 8002cec:	055b      	lsls	r3, r3, #21
 8002cee:	0312      	lsls	r2, r2, #12
 8002cf0:	2400      	movs	r4, #0
 8002cf2:	0b12      	lsrs	r2, r2, #12
 8002cf4:	0d5b      	lsrs	r3, r3, #21
 8002cf6:	e7f1      	b.n	8002cdc <__aeabi_ui2d+0x2c>
 8002cf8:	0000041e 	.word	0x0000041e

08002cfc <__aeabi_f2d>:
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	0043      	lsls	r3, r0, #1
 8002d00:	0246      	lsls	r6, r0, #9
 8002d02:	0fc4      	lsrs	r4, r0, #31
 8002d04:	20fe      	movs	r0, #254	; 0xfe
 8002d06:	0e1b      	lsrs	r3, r3, #24
 8002d08:	1c59      	adds	r1, r3, #1
 8002d0a:	0a75      	lsrs	r5, r6, #9
 8002d0c:	4208      	tst	r0, r1
 8002d0e:	d00c      	beq.n	8002d2a <__aeabi_f2d+0x2e>
 8002d10:	22e0      	movs	r2, #224	; 0xe0
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	4694      	mov	ip, r2
 8002d16:	076d      	lsls	r5, r5, #29
 8002d18:	0b36      	lsrs	r6, r6, #12
 8002d1a:	4463      	add	r3, ip
 8002d1c:	051b      	lsls	r3, r3, #20
 8002d1e:	4333      	orrs	r3, r6
 8002d20:	07e4      	lsls	r4, r4, #31
 8002d22:	4323      	orrs	r3, r4
 8002d24:	0028      	movs	r0, r5
 8002d26:	0019      	movs	r1, r3
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d114      	bne.n	8002d58 <__aeabi_f2d+0x5c>
 8002d2e:	2d00      	cmp	r5, #0
 8002d30:	d01b      	beq.n	8002d6a <__aeabi_f2d+0x6e>
 8002d32:	0028      	movs	r0, r5
 8002d34:	f000 f8b2 	bl	8002e9c <__clzsi2>
 8002d38:	280a      	cmp	r0, #10
 8002d3a:	dc1c      	bgt.n	8002d76 <__aeabi_f2d+0x7a>
 8002d3c:	230b      	movs	r3, #11
 8002d3e:	002e      	movs	r6, r5
 8002d40:	1a1b      	subs	r3, r3, r0
 8002d42:	40de      	lsrs	r6, r3
 8002d44:	0003      	movs	r3, r0
 8002d46:	3315      	adds	r3, #21
 8002d48:	409d      	lsls	r5, r3
 8002d4a:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <__aeabi_f2d+0x88>)
 8002d4c:	0336      	lsls	r6, r6, #12
 8002d4e:	1a12      	subs	r2, r2, r0
 8002d50:	0552      	lsls	r2, r2, #21
 8002d52:	0b36      	lsrs	r6, r6, #12
 8002d54:	0d53      	lsrs	r3, r2, #21
 8002d56:	e7e1      	b.n	8002d1c <__aeabi_f2d+0x20>
 8002d58:	2d00      	cmp	r5, #0
 8002d5a:	d009      	beq.n	8002d70 <__aeabi_f2d+0x74>
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	0b36      	lsrs	r6, r6, #12
 8002d60:	0312      	lsls	r2, r2, #12
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <__aeabi_f2d+0x8c>)
 8002d64:	076d      	lsls	r5, r5, #29
 8002d66:	4316      	orrs	r6, r2
 8002d68:	e7d8      	b.n	8002d1c <__aeabi_f2d+0x20>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2600      	movs	r6, #0
 8002d6e:	e7d5      	b.n	8002d1c <__aeabi_f2d+0x20>
 8002d70:	2600      	movs	r6, #0
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <__aeabi_f2d+0x8c>)
 8002d74:	e7d2      	b.n	8002d1c <__aeabi_f2d+0x20>
 8002d76:	0003      	movs	r3, r0
 8002d78:	3b0b      	subs	r3, #11
 8002d7a:	409d      	lsls	r5, r3
 8002d7c:	002e      	movs	r6, r5
 8002d7e:	2500      	movs	r5, #0
 8002d80:	e7e3      	b.n	8002d4a <__aeabi_f2d+0x4e>
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	00000389 	.word	0x00000389
 8002d88:	000007ff 	.word	0x000007ff

08002d8c <__aeabi_d2f>:
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	004b      	lsls	r3, r1, #1
 8002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d92:	0d5b      	lsrs	r3, r3, #21
 8002d94:	030c      	lsls	r4, r1, #12
 8002d96:	4e3d      	ldr	r6, [pc, #244]	; (8002e8c <__aeabi_d2f+0x100>)
 8002d98:	0a64      	lsrs	r4, r4, #9
 8002d9a:	0f40      	lsrs	r0, r0, #29
 8002d9c:	1c5f      	adds	r7, r3, #1
 8002d9e:	0fc9      	lsrs	r1, r1, #31
 8002da0:	4304      	orrs	r4, r0
 8002da2:	00d5      	lsls	r5, r2, #3
 8002da4:	4237      	tst	r7, r6
 8002da6:	d00a      	beq.n	8002dbe <__aeabi_d2f+0x32>
 8002da8:	4839      	ldr	r0, [pc, #228]	; (8002e90 <__aeabi_d2f+0x104>)
 8002daa:	181e      	adds	r6, r3, r0
 8002dac:	2efe      	cmp	r6, #254	; 0xfe
 8002dae:	dd16      	ble.n	8002dde <__aeabi_d2f+0x52>
 8002db0:	20ff      	movs	r0, #255	; 0xff
 8002db2:	2400      	movs	r4, #0
 8002db4:	05c0      	lsls	r0, r0, #23
 8002db6:	4320      	orrs	r0, r4
 8002db8:	07c9      	lsls	r1, r1, #31
 8002dba:	4308      	orrs	r0, r1
 8002dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <__aeabi_d2f+0x44>
 8002dc2:	432c      	orrs	r4, r5
 8002dc4:	d026      	beq.n	8002e14 <__aeabi_d2f+0x88>
 8002dc6:	2205      	movs	r2, #5
 8002dc8:	0192      	lsls	r2, r2, #6
 8002dca:	0a54      	lsrs	r4, r2, #9
 8002dcc:	b2d8      	uxtb	r0, r3
 8002dce:	e7f1      	b.n	8002db4 <__aeabi_d2f+0x28>
 8002dd0:	4325      	orrs	r5, r4
 8002dd2:	d0ed      	beq.n	8002db0 <__aeabi_d2f+0x24>
 8002dd4:	2080      	movs	r0, #128	; 0x80
 8002dd6:	03c0      	lsls	r0, r0, #15
 8002dd8:	4304      	orrs	r4, r0
 8002dda:	20ff      	movs	r0, #255	; 0xff
 8002ddc:	e7ea      	b.n	8002db4 <__aeabi_d2f+0x28>
 8002dde:	2e00      	cmp	r6, #0
 8002de0:	dd1b      	ble.n	8002e1a <__aeabi_d2f+0x8e>
 8002de2:	0192      	lsls	r2, r2, #6
 8002de4:	1e53      	subs	r3, r2, #1
 8002de6:	419a      	sbcs	r2, r3
 8002de8:	00e4      	lsls	r4, r4, #3
 8002dea:	0f6d      	lsrs	r5, r5, #29
 8002dec:	4322      	orrs	r2, r4
 8002dee:	432a      	orrs	r2, r5
 8002df0:	0753      	lsls	r3, r2, #29
 8002df2:	d048      	beq.n	8002e86 <__aeabi_d2f+0xfa>
 8002df4:	230f      	movs	r3, #15
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d000      	beq.n	8002dfe <__aeabi_d2f+0x72>
 8002dfc:	3204      	adds	r2, #4
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	04db      	lsls	r3, r3, #19
 8002e02:	4013      	ands	r3, r2
 8002e04:	d03f      	beq.n	8002e86 <__aeabi_d2f+0xfa>
 8002e06:	1c70      	adds	r0, r6, #1
 8002e08:	2efe      	cmp	r6, #254	; 0xfe
 8002e0a:	d0d1      	beq.n	8002db0 <__aeabi_d2f+0x24>
 8002e0c:	0192      	lsls	r2, r2, #6
 8002e0e:	0a54      	lsrs	r4, r2, #9
 8002e10:	b2c0      	uxtb	r0, r0
 8002e12:	e7cf      	b.n	8002db4 <__aeabi_d2f+0x28>
 8002e14:	2000      	movs	r0, #0
 8002e16:	2400      	movs	r4, #0
 8002e18:	e7cc      	b.n	8002db4 <__aeabi_d2f+0x28>
 8002e1a:	0032      	movs	r2, r6
 8002e1c:	3217      	adds	r2, #23
 8002e1e:	db22      	blt.n	8002e66 <__aeabi_d2f+0xda>
 8002e20:	2080      	movs	r0, #128	; 0x80
 8002e22:	0400      	lsls	r0, r0, #16
 8002e24:	4320      	orrs	r0, r4
 8002e26:	241e      	movs	r4, #30
 8002e28:	1ba4      	subs	r4, r4, r6
 8002e2a:	2c1f      	cmp	r4, #31
 8002e2c:	dd1d      	ble.n	8002e6a <__aeabi_d2f+0xde>
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4252      	negs	r2, r2
 8002e32:	1b96      	subs	r6, r2, r6
 8002e34:	0002      	movs	r2, r0
 8002e36:	40f2      	lsrs	r2, r6
 8002e38:	0016      	movs	r6, r2
 8002e3a:	2c20      	cmp	r4, #32
 8002e3c:	d004      	beq.n	8002e48 <__aeabi_d2f+0xbc>
 8002e3e:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <__aeabi_d2f+0x108>)
 8002e40:	4694      	mov	ip, r2
 8002e42:	4463      	add	r3, ip
 8002e44:	4098      	lsls	r0, r3
 8002e46:	4305      	orrs	r5, r0
 8002e48:	002a      	movs	r2, r5
 8002e4a:	1e53      	subs	r3, r2, #1
 8002e4c:	419a      	sbcs	r2, r3
 8002e4e:	4332      	orrs	r2, r6
 8002e50:	2600      	movs	r6, #0
 8002e52:	0753      	lsls	r3, r2, #29
 8002e54:	d1ce      	bne.n	8002df4 <__aeabi_d2f+0x68>
 8002e56:	2480      	movs	r4, #128	; 0x80
 8002e58:	0013      	movs	r3, r2
 8002e5a:	04e4      	lsls	r4, r4, #19
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	4023      	ands	r3, r4
 8002e60:	4222      	tst	r2, r4
 8002e62:	d1d3      	bne.n	8002e0c <__aeabi_d2f+0x80>
 8002e64:	e7b0      	b.n	8002dc8 <__aeabi_d2f+0x3c>
 8002e66:	2300      	movs	r3, #0
 8002e68:	e7ad      	b.n	8002dc6 <__aeabi_d2f+0x3a>
 8002e6a:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <__aeabi_d2f+0x10c>)
 8002e6c:	4694      	mov	ip, r2
 8002e6e:	002a      	movs	r2, r5
 8002e70:	40e2      	lsrs	r2, r4
 8002e72:	0014      	movs	r4, r2
 8002e74:	002a      	movs	r2, r5
 8002e76:	4463      	add	r3, ip
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	4098      	lsls	r0, r3
 8002e7c:	1e55      	subs	r5, r2, #1
 8002e7e:	41aa      	sbcs	r2, r5
 8002e80:	4302      	orrs	r2, r0
 8002e82:	4322      	orrs	r2, r4
 8002e84:	e7e4      	b.n	8002e50 <__aeabi_d2f+0xc4>
 8002e86:	0033      	movs	r3, r6
 8002e88:	e79e      	b.n	8002dc8 <__aeabi_d2f+0x3c>
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	000007fe 	.word	0x000007fe
 8002e90:	fffffc80 	.word	0xfffffc80
 8002e94:	fffffca2 	.word	0xfffffca2
 8002e98:	fffffc82 	.word	0xfffffc82

08002e9c <__clzsi2>:
 8002e9c:	211c      	movs	r1, #28
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	d301      	bcc.n	8002eaa <__clzsi2+0xe>
 8002ea6:	0c00      	lsrs	r0, r0, #16
 8002ea8:	3910      	subs	r1, #16
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	4298      	cmp	r0, r3
 8002eae:	d301      	bcc.n	8002eb4 <__clzsi2+0x18>
 8002eb0:	0a00      	lsrs	r0, r0, #8
 8002eb2:	3908      	subs	r1, #8
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	4298      	cmp	r0, r3
 8002eb8:	d301      	bcc.n	8002ebe <__clzsi2+0x22>
 8002eba:	0900      	lsrs	r0, r0, #4
 8002ebc:	3904      	subs	r1, #4
 8002ebe:	a202      	add	r2, pc, #8	; (adr r2, 8002ec8 <__clzsi2+0x2c>)
 8002ec0:	5c10      	ldrb	r0, [r2, r0]
 8002ec2:	1840      	adds	r0, r0, r1
 8002ec4:	4770      	bx	lr
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	02020304 	.word	0x02020304
 8002ecc:	01010101 	.word	0x01010101
	...

08002ed8 <rightTofInitInterrupt>:
//	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
//	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
//	TOF_calib();
//}

void rightTofInitInterrupt(void){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af02      	add	r7, sp, #8
	rightTofDev.I2cHandle = &hi2c1;
 8002ede:	4a5c      	ldr	r2, [pc, #368]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002ee0:	23ae      	movs	r3, #174	; 0xae
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	495b      	ldr	r1, [pc, #364]	; (8003054 <rightTofInitInterrupt+0x17c>)
 8002ee6:	50d1      	str	r1, [r2, r3]
	rightTofDev.I2cDevAddr = 0x52;
 8002ee8:	4a59      	ldr	r2, [pc, #356]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002eea:	23b0      	movs	r3, #176	; 0xb0
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2152      	movs	r1, #82	; 0x52
 8002ef0:	54d1      	strb	r1, [r2, r3]
	rightTofDev.comms_speed_khz = 400;
 8002ef2:	4a57      	ldr	r2, [pc, #348]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002ef4:	23bb      	movs	r3, #187	; 0xbb
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	21c8      	movs	r1, #200	; 0xc8
 8002efa:	0049      	lsls	r1, r1, #1
 8002efc:	52d1      	strh	r1, [r2, r3]
	rightTofDev.comms_type = 1;
 8002efe:	4a54      	ldr	r2, [pc, #336]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002f00:	23ba      	movs	r3, #186	; 0xba
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	2101      	movs	r1, #1
 8002f06:	54d1      	strb	r1, [r2, r3]

	HAL_GPIO_WritePin(X_SHUT_RIGHT_GPIO_Port, X_SHUT_RIGHT_Pin, GPIO_PIN_SET);
 8002f08:	4b53      	ldr	r3, [pc, #332]	; (8003058 <rightTofInitInterrupt+0x180>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	2108      	movs	r1, #8
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f004 f8d4 	bl	80070bc <HAL_GPIO_WritePin>
	//GPIO_write(X_SHUT_RIGHT_GPIO_Port, X_SHUT_RIGHT_Pin, GPIO_PIN_SET); // Enable XSHUT
	HAL_Delay(20);
 8002f14:	2014      	movs	r0, #20
 8002f16:	f003 fdcf 	bl	8006ab8 <HAL_Delay>

	rightError=VL53L0X_DataInit(&rightTofDev);
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f00a f831 	bl	800cf84 <VL53L0X_DataInit>
 8002f22:	0003      	movs	r3, r0
 8002f24:	001a      	movs	r2, r3
 8002f26:	4b4d      	ldr	r3, [pc, #308]	; (800305c <rightTofInitInterrupt+0x184>)
 8002f28:	701a      	strb	r2, [r3, #0]
	printf("error DataInit =: %d\r\n",rightError);
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	; (800305c <rightTofInitInterrupt+0x184>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	001a      	movs	r2, r3
 8002f32:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <rightTofInitInterrupt+0x188>)
 8002f34:	0011      	movs	r1, r2
 8002f36:	0018      	movs	r0, r3
 8002f38:	f012 ff14 	bl	8015d64 <iprintf>
	rightError=VL53L0X_StaticInit(&rightTofDev);
 8002f3c:	4b44      	ldr	r3, [pc, #272]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f00a f9ba 	bl	800d2b8 <VL53L0X_StaticInit>
 8002f44:	0003      	movs	r3, r0
 8002f46:	001a      	movs	r2, r3
 8002f48:	4b44      	ldr	r3, [pc, #272]	; (800305c <rightTofInitInterrupt+0x184>)
 8002f4a:	701a      	strb	r2, [r3, #0]
	printf("error StaticInit =: %d\r\n",rightError);
 8002f4c:	4b43      	ldr	r3, [pc, #268]	; (800305c <rightTofInitInterrupt+0x184>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	001a      	movs	r2, r3
 8002f54:	4b43      	ldr	r3, [pc, #268]	; (8003064 <rightTofInitInterrupt+0x18c>)
 8002f56:	0011      	movs	r1, r2
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f012 ff03 	bl	8015d64 <iprintf>

	rightError=VL53L0X_PerformRefSpadManagement(&rightTofDev, &rightRefSpadCount, &rightIsApertureSpads);
 8002f5e:	4a42      	ldr	r2, [pc, #264]	; (8003068 <rightTofInitInterrupt+0x190>)
 8002f60:	4942      	ldr	r1, [pc, #264]	; (800306c <rightTofInitInterrupt+0x194>)
 8002f62:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002f64:	0018      	movs	r0, r3
 8002f66:	f00b ffc7 	bl	800eef8 <VL53L0X_PerformRefSpadManagement>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <rightTofInitInterrupt+0x184>)
 8002f70:	701a      	strb	r2, [r3, #0]
	printf("error performRef =: %d\r\n",rightError);
 8002f72:	4b3a      	ldr	r3, [pc, #232]	; (800305c <rightTofInitInterrupt+0x184>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	001a      	movs	r2, r3
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <rightTofInitInterrupt+0x198>)
 8002f7c:	0011      	movs	r1, r2
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f012 fef0 	bl	8015d64 <iprintf>
	rightError=VL53L0X_PerformRefCalibration(&rightTofDev, &rightVhvSettings, &rightPhaseCal);
 8002f84:	4a3b      	ldr	r2, [pc, #236]	; (8003074 <rightTofInitInterrupt+0x19c>)
 8002f86:	493c      	ldr	r1, [pc, #240]	; (8003078 <rightTofInitInterrupt+0x1a0>)
 8002f88:	4b31      	ldr	r3, [pc, #196]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f00b f9df 	bl	800e34e <VL53L0X_PerformRefCalibration>
 8002f90:	0003      	movs	r3, r0
 8002f92:	001a      	movs	r2, r3
 8002f94:	4b31      	ldr	r3, [pc, #196]	; (800305c <rightTofInitInterrupt+0x184>)
 8002f96:	701a      	strb	r2, [r3, #0]
	printf("error performCalibration =: %d\r\n",rightError);
 8002f98:	4b30      	ldr	r3, [pc, #192]	; (800305c <rightTofInitInterrupt+0x184>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	001a      	movs	r2, r3
 8002fa0:	4b36      	ldr	r3, [pc, #216]	; (800307c <rightTofInitInterrupt+0x1a4>)
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f012 fedd 	bl	8015d64 <iprintf>


	rightError=VL53L0X_SetDeviceMode(&rightTofDev,VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8002faa:	4b29      	ldr	r3, [pc, #164]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002fac:	2101      	movs	r1, #1
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f00a fc0a 	bl	800d7c8 <VL53L0X_SetDeviceMode>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <rightTofInitInterrupt+0x184>)
 8002fba:	701a      	strb	r2, [r3, #0]
	printf("error setDeviceMode=: %d\r\n",rightError);
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <rightTofInitInterrupt+0x184>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <rightTofInitInterrupt+0x1a8>)
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f012 fecb 	bl	8015d64 <iprintf>

	rightError=vl53l0x_Right_Range_Profiles(&rightTofDev);
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f000 f94f 	bl	8003274 <vl53l0x_Right_Range_Profiles>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	001a      	movs	r2, r3
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <rightTofInitInterrupt+0x184>)
 8002fdc:	701a      	strb	r2, [r3, #0]
	printf("error RangeProfile=: %d\r\n",rightError);
 8002fde:	4b1f      	ldr	r3, [pc, #124]	; (800305c <rightTofInitInterrupt+0x184>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b25b      	sxtb	r3, r3
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	4b27      	ldr	r3, [pc, #156]	; (8003084 <rightTofInitInterrupt+0x1ac>)
 8002fe8:	0011      	movs	r1, r2
 8002fea:	0018      	movs	r0, r3
 8002fec:	f012 feba 	bl	8015d64 <iprintf>
	rightError=VL53L0X_SetGpioConfig(&rightTofDev,0,VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);
 8002ff0:	4817      	ldr	r0, [pc, #92]	; (8003050 <rightTofInitInterrupt+0x178>)
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	f00b fd2c 	bl	800ea58 <VL53L0X_SetGpioConfig>
 8003000:	0003      	movs	r3, r0
 8003002:	001a      	movs	r2, r3
 8003004:	4b15      	ldr	r3, [pc, #84]	; (800305c <rightTofInitInterrupt+0x184>)
 8003006:	701a      	strb	r2, [r3, #0]
	printf("error SetGPIOConfig=: %d\r\n",rightError);
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <rightTofInitInterrupt+0x184>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b25b      	sxtb	r3, r3
 800300e:	001a      	movs	r2, r3
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <rightTofInitInterrupt+0x1b0>)
 8003012:	0011      	movs	r1, r2
 8003014:	0018      	movs	r0, r3
 8003016:	f012 fea5 	bl	8015d64 <iprintf>
	VL53L0X_ClearInterruptMask(&rightTofDev,0);
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <rightTofInitInterrupt+0x178>)
 800301c:	2100      	movs	r1, #0
 800301e:	0018      	movs	r0, r3
 8003020:	f00b fee4 	bl	800edec <VL53L0X_ClearInterruptMask>
	printf("error ClearInterruptMaskt=: %d\r\n",rightError);
 8003024:	4b0d      	ldr	r3, [pc, #52]	; (800305c <rightTofInitInterrupt+0x184>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	b25b      	sxtb	r3, r3
 800302a:	001a      	movs	r2, r3
 800302c:	4b17      	ldr	r3, [pc, #92]	; (800308c <rightTofInitInterrupt+0x1b4>)
 800302e:	0011      	movs	r1, r2
 8003030:	0018      	movs	r0, r3
 8003032:	f012 fe97 	bl	8015d64 <iprintf>

	VL53L0X_SetDeviceAddress(&rightTofDev, 0x53);
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <rightTofInitInterrupt+0x178>)
 8003038:	2153      	movs	r1, #83	; 0x53
 800303a:	0018      	movs	r0, r3
 800303c:	f009 ff83 	bl	800cf46 <VL53L0X_SetDeviceAddress>
	rightTofDev.I2cDevAddr = 0x53;
 8003040:	4a03      	ldr	r2, [pc, #12]	; (8003050 <rightTofInitInterrupt+0x178>)
 8003042:	23b0      	movs	r3, #176	; 0xb0
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2153      	movs	r1, #83	; 0x53
 8003048:	54d1      	strb	r1, [r2, r3]
}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	200009dc 	.word	0x200009dc
 8003054:	2000062c 	.word	0x2000062c
 8003058:	50000400 	.word	0x50000400
 800305c:	200004c8 	.word	0x200004c8
 8003060:	0801a8a8 	.word	0x0801a8a8
 8003064:	0801a8c0 	.word	0x0801a8c0
 8003068:	20000d1c 	.word	0x20000d1c
 800306c:	20000d18 	.word	0x20000d18
 8003070:	0801a8dc 	.word	0x0801a8dc
 8003074:	20000d1e 	.word	0x20000d1e
 8003078:	20000d1d 	.word	0x20000d1d
 800307c:	0801a8f8 	.word	0x0801a8f8
 8003080:	0801a91c 	.word	0x0801a91c
 8003084:	0801a938 	.word	0x0801a938
 8003088:	0801a954 	.word	0x0801a954
 800308c:	0801a970 	.word	0x0801a970

08003090 <leftTofInitInterrupt>:


void leftTofInitInterrupt(void){
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af02      	add	r7, sp, #8
	leftTofDev.I2cHandle = &hi2c1;
 8003096:	4a5c      	ldr	r2, [pc, #368]	; (8003208 <leftTofInitInterrupt+0x178>)
 8003098:	23ae      	movs	r3, #174	; 0xae
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	495b      	ldr	r1, [pc, #364]	; (800320c <leftTofInitInterrupt+0x17c>)
 800309e:	50d1      	str	r1, [r2, r3]
	leftTofDev.I2cDevAddr = 0x52;
 80030a0:	4a59      	ldr	r2, [pc, #356]	; (8003208 <leftTofInitInterrupt+0x178>)
 80030a2:	23b0      	movs	r3, #176	; 0xb0
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2152      	movs	r1, #82	; 0x52
 80030a8:	54d1      	strb	r1, [r2, r3]
	leftTofDev.comms_speed_khz = 400;
 80030aa:	4a57      	ldr	r2, [pc, #348]	; (8003208 <leftTofInitInterrupt+0x178>)
 80030ac:	23bb      	movs	r3, #187	; 0xbb
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	21c8      	movs	r1, #200	; 0xc8
 80030b2:	0049      	lsls	r1, r1, #1
 80030b4:	52d1      	strh	r1, [r2, r3]
	leftTofDev.comms_type = 1;
 80030b6:	4a54      	ldr	r2, [pc, #336]	; (8003208 <leftTofInitInterrupt+0x178>)
 80030b8:	23ba      	movs	r3, #186	; 0xba
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2101      	movs	r1, #1
 80030be:	54d1      	strb	r1, [r2, r3]

	HAL_GPIO_WritePin(X_SHUT_LEFT_GPIO_Port, X_SHUT_LEFT_Pin, GPIO_PIN_SET);
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <leftTofInitInterrupt+0x180>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	2120      	movs	r1, #32
 80030c6:	0018      	movs	r0, r3
 80030c8:	f003 fff8 	bl	80070bc <HAL_GPIO_WritePin>
	//GPIO_write(X_SHUT_RIGHT_GPIO_Port, X_SHUT_RIGHT_Pin, GPIO_PIN_SET); // Enable XSHUT
	HAL_Delay(20);
 80030cc:	2014      	movs	r0, #20
 80030ce:	f003 fcf3 	bl	8006ab8 <HAL_Delay>


	leftError=VL53L0X_DataInit(&leftTofDev);
 80030d2:	4b4d      	ldr	r3, [pc, #308]	; (8003208 <leftTofInitInterrupt+0x178>)
 80030d4:	0018      	movs	r0, r3
 80030d6:	f009 ff55 	bl	800cf84 <VL53L0X_DataInit>
 80030da:	0003      	movs	r3, r0
 80030dc:	001a      	movs	r2, r3
 80030de:	4b4d      	ldr	r3, [pc, #308]	; (8003214 <leftTofInitInterrupt+0x184>)
 80030e0:	701a      	strb	r2, [r3, #0]
	printf("error DataInit =: %d\r\n",leftError);
 80030e2:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <leftTofInitInterrupt+0x184>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	001a      	movs	r2, r3
 80030ea:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <leftTofInitInterrupt+0x188>)
 80030ec:	0011      	movs	r1, r2
 80030ee:	0018      	movs	r0, r3
 80030f0:	f012 fe38 	bl	8015d64 <iprintf>
	leftError=VL53L0X_StaticInit(&leftTofDev);
 80030f4:	4b44      	ldr	r3, [pc, #272]	; (8003208 <leftTofInitInterrupt+0x178>)
 80030f6:	0018      	movs	r0, r3
 80030f8:	f00a f8de 	bl	800d2b8 <VL53L0X_StaticInit>
 80030fc:	0003      	movs	r3, r0
 80030fe:	001a      	movs	r2, r3
 8003100:	4b44      	ldr	r3, [pc, #272]	; (8003214 <leftTofInitInterrupt+0x184>)
 8003102:	701a      	strb	r2, [r3, #0]
	printf("error StaticInit =: %d\r\n",leftError);
 8003104:	4b43      	ldr	r3, [pc, #268]	; (8003214 <leftTofInitInterrupt+0x184>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b25b      	sxtb	r3, r3
 800310a:	001a      	movs	r2, r3
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <leftTofInitInterrupt+0x18c>)
 800310e:	0011      	movs	r1, r2
 8003110:	0018      	movs	r0, r3
 8003112:	f012 fe27 	bl	8015d64 <iprintf>
	leftError=VL53L0X_PerformRefSpadManagement(&leftTofDev, &leftRefSpadCount, &leftIsApertureSpads);
 8003116:	4a42      	ldr	r2, [pc, #264]	; (8003220 <leftTofInitInterrupt+0x190>)
 8003118:	4942      	ldr	r1, [pc, #264]	; (8003224 <leftTofInitInterrupt+0x194>)
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <leftTofInitInterrupt+0x178>)
 800311c:	0018      	movs	r0, r3
 800311e:	f00b feeb 	bl	800eef8 <VL53L0X_PerformRefSpadManagement>
 8003122:	0003      	movs	r3, r0
 8003124:	001a      	movs	r2, r3
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <leftTofInitInterrupt+0x184>)
 8003128:	701a      	strb	r2, [r3, #0]
	printf("error performRef =: %d\r\n",leftError);
 800312a:	4b3a      	ldr	r3, [pc, #232]	; (8003214 <leftTofInitInterrupt+0x184>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	001a      	movs	r2, r3
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <leftTofInitInterrupt+0x198>)
 8003134:	0011      	movs	r1, r2
 8003136:	0018      	movs	r0, r3
 8003138:	f012 fe14 	bl	8015d64 <iprintf>
	leftError=VL53L0X_PerformRefCalibration(&leftTofDev, &leftVhvSettings, &leftPhaseCal);
 800313c:	4a3b      	ldr	r2, [pc, #236]	; (800322c <leftTofInitInterrupt+0x19c>)
 800313e:	493c      	ldr	r1, [pc, #240]	; (8003230 <leftTofInitInterrupt+0x1a0>)
 8003140:	4b31      	ldr	r3, [pc, #196]	; (8003208 <leftTofInitInterrupt+0x178>)
 8003142:	0018      	movs	r0, r3
 8003144:	f00b f903 	bl	800e34e <VL53L0X_PerformRefCalibration>
 8003148:	0003      	movs	r3, r0
 800314a:	001a      	movs	r2, r3
 800314c:	4b31      	ldr	r3, [pc, #196]	; (8003214 <leftTofInitInterrupt+0x184>)
 800314e:	701a      	strb	r2, [r3, #0]
	printf("error performCalibration =: %d\r\n",leftError);
 8003150:	4b30      	ldr	r3, [pc, #192]	; (8003214 <leftTofInitInterrupt+0x184>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b25b      	sxtb	r3, r3
 8003156:	001a      	movs	r2, r3
 8003158:	4b36      	ldr	r3, [pc, #216]	; (8003234 <leftTofInitInterrupt+0x1a4>)
 800315a:	0011      	movs	r1, r2
 800315c:	0018      	movs	r0, r3
 800315e:	f012 fe01 	bl	8015d64 <iprintf>
	leftError=VL53L0X_SetDeviceMode(&leftTofDev,VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8003162:	4b29      	ldr	r3, [pc, #164]	; (8003208 <leftTofInitInterrupt+0x178>)
 8003164:	2101      	movs	r1, #1
 8003166:	0018      	movs	r0, r3
 8003168:	f00a fb2e 	bl	800d7c8 <VL53L0X_SetDeviceMode>
 800316c:	0003      	movs	r3, r0
 800316e:	001a      	movs	r2, r3
 8003170:	4b28      	ldr	r3, [pc, #160]	; (8003214 <leftTofInitInterrupt+0x184>)
 8003172:	701a      	strb	r2, [r3, #0]
	printf("error setDeviceMode=: %d\r\n",leftError);
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <leftTofInitInterrupt+0x184>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	b25b      	sxtb	r3, r3
 800317a:	001a      	movs	r2, r3
 800317c:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <leftTofInitInterrupt+0x1a8>)
 800317e:	0011      	movs	r1, r2
 8003180:	0018      	movs	r0, r3
 8003182:	f012 fdef 	bl	8015d64 <iprintf>
	leftError=vl53l0x_Left_Range_Profiles(&leftTofDev);
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <leftTofInitInterrupt+0x178>)
 8003188:	0018      	movs	r0, r3
 800318a:	f000 f8c7 	bl	800331c <vl53l0x_Left_Range_Profiles>
 800318e:	0003      	movs	r3, r0
 8003190:	001a      	movs	r2, r3
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <leftTofInitInterrupt+0x184>)
 8003194:	701a      	strb	r2, [r3, #0]
	printf("error RangeProfile=: %d\r\n",leftError);
 8003196:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <leftTofInitInterrupt+0x184>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b25b      	sxtb	r3, r3
 800319c:	001a      	movs	r2, r3
 800319e:	4b27      	ldr	r3, [pc, #156]	; (800323c <leftTofInitInterrupt+0x1ac>)
 80031a0:	0011      	movs	r1, r2
 80031a2:	0018      	movs	r0, r3
 80031a4:	f012 fdde 	bl	8015d64 <iprintf>
	leftError=VL53L0X_SetGpioConfig(&leftTofDev,0,VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);
 80031a8:	4817      	ldr	r0, [pc, #92]	; (8003208 <leftTofInitInterrupt+0x178>)
 80031aa:	2301      	movs	r3, #1
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2304      	movs	r3, #4
 80031b0:	2201      	movs	r2, #1
 80031b2:	2100      	movs	r1, #0
 80031b4:	f00b fc50 	bl	800ea58 <VL53L0X_SetGpioConfig>
 80031b8:	0003      	movs	r3, r0
 80031ba:	001a      	movs	r2, r3
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <leftTofInitInterrupt+0x184>)
 80031be:	701a      	strb	r2, [r3, #0]
	printf("error SetGPIOConfig=: %d\r\n",leftError);
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <leftTofInitInterrupt+0x184>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b25b      	sxtb	r3, r3
 80031c6:	001a      	movs	r2, r3
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <leftTofInitInterrupt+0x1b0>)
 80031ca:	0011      	movs	r1, r2
 80031cc:	0018      	movs	r0, r3
 80031ce:	f012 fdc9 	bl	8015d64 <iprintf>
	VL53L0X_ClearInterruptMask(&leftTofDev,0);
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <leftTofInitInterrupt+0x178>)
 80031d4:	2100      	movs	r1, #0
 80031d6:	0018      	movs	r0, r3
 80031d8:	f00b fe08 	bl	800edec <VL53L0X_ClearInterruptMask>
	printf("error ClearInterruptMaskt=: %d\r\n",leftError);
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <leftTofInitInterrupt+0x184>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	001a      	movs	r2, r3
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <leftTofInitInterrupt+0x1b4>)
 80031e6:	0011      	movs	r1, r2
 80031e8:	0018      	movs	r0, r3
 80031ea:	f012 fdbb 	bl	8015d64 <iprintf>

	VL53L0X_SetDeviceAddress(&leftTofDev, 0x54);
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <leftTofInitInterrupt+0x178>)
 80031f0:	2154      	movs	r1, #84	; 0x54
 80031f2:	0018      	movs	r0, r3
 80031f4:	f009 fea7 	bl	800cf46 <VL53L0X_SetDeviceAddress>
	leftTofDev.I2cDevAddr = 0x54;
 80031f8:	4a03      	ldr	r2, [pc, #12]	; (8003208 <leftTofInitInterrupt+0x178>)
 80031fa:	23b0      	movs	r3, #176	; 0xb0
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2154      	movs	r1, #84	; 0x54
 8003200:	54d1      	strb	r1, [r2, r3]
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000b88 	.word	0x20000b88
 800320c:	2000062c 	.word	0x2000062c
 8003210:	50000c00 	.word	0x50000c00
 8003214:	200004ca 	.word	0x200004ca
 8003218:	0801a8a8 	.word	0x0801a8a8
 800321c:	0801a8c0 	.word	0x0801a8c0
 8003220:	20000d24 	.word	0x20000d24
 8003224:	20000d20 	.word	0x20000d20
 8003228:	0801a8dc 	.word	0x0801a8dc
 800322c:	20000d26 	.word	0x20000d26
 8003230:	20000d25 	.word	0x20000d25
 8003234:	0801a8f8 	.word	0x0801a8f8
 8003238:	0801a91c 	.word	0x0801a91c
 800323c:	0801a938 	.word	0x0801a938
 8003240:	0801a954 	.word	0x0801a954
 8003244:	0801a970 	.word	0x0801a970

08003248 <vl53l0x_PerformRangingMeasurement>:
	GPIO_write(X_SHUT_TOF2_GPIO_Port,X_SHUT_TOF2_Pin,0);		// disabe tof 2
	HAL_Delay(2000);
}
 */

uint16_t vl53l0x_PerformRangingMeasurement(VL53L0X_DEV Dev,VL53L0X_RangingMeasurementData_t *VL53L0X_RangingMeasurementData){
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]

	VL53L0X_GetRangingMeasurementData(Dev,VL53L0X_RangingMeasurementData);
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	0011      	movs	r1, r2
 8003258:	0018      	movs	r0, r3
 800325a:	f00b fa6b 	bl	800e734 <VL53L0X_GetRangingMeasurementData>
	VL53L0X_ClearInterruptMask(Dev, 0);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2100      	movs	r1, #0
 8003262:	0018      	movs	r0, r3
 8003264:	f00b fdc2 	bl	800edec <VL53L0X_ClearInterruptMask>

	return VL53L0X_RangingMeasurementData->RangeMilliMeter;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	891b      	ldrh	r3, [r3, #8]
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <vl53l0x_Right_Range_Profiles>:

VL53L0X_Error vl53l0x_Right_Range_Profiles(VL53L0X_DEV Dev)
{
 8003274:	b5b0      	push	{r4, r5, r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	01db      	lsls	r3, r3, #7
 8003280:	617b      	str	r3, [r7, #20]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8003282:	2390      	movs	r3, #144	; 0x90
 8003284:	035b      	lsls	r3, r3, #13
 8003286:	613b      	str	r3, [r7, #16]
	uint32_t timingBudget = 33000;
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <vl53l0x_Right_Range_Profiles+0x98>)
 800328a:	60fb      	str	r3, [r7, #12]
	uint8_t preRangeVcselPeriod = 14;
 800328c:	210b      	movs	r1, #11
 800328e:	187b      	adds	r3, r7, r1
 8003290:	220e      	movs	r2, #14
 8003292:	701a      	strb	r2, [r3, #0]
	uint8_t finalRangeVcselPeriod = 10;
 8003294:	200a      	movs	r0, #10
 8003296:	183b      	adds	r3, r7, r0
 8003298:	220a      	movs	r2, #10
 800329a:	701a      	strb	r2, [r3, #0]
		timingBudget = 33000;
		preRangeVcselPeriod = 18;
		finalRangeVcselPeriod = 14;
		break;
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	01db      	lsls	r3, r3, #7
 80032a0:	617b      	str	r3, [r7, #20]
		sigmaLimit = (FixPoint1616_t)(18*65536);
 80032a2:	2390      	movs	r3, #144	; 0x90
 80032a4:	035b      	lsls	r3, r3, #13
 80032a6:	613b      	str	r3, [r7, #16]
		timingBudget = 200000;
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <vl53l0x_Right_Range_Profiles+0x9c>)
 80032aa:	60fb      	str	r3, [r7, #12]
		preRangeVcselPeriod = 14;
 80032ac:	000c      	movs	r4, r1
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	220e      	movs	r2, #14
 80032b2:	701a      	strb	r2, [r3, #0]
		finalRangeVcselPeriod = 10;
 80032b4:	0005      	movs	r5, r0
 80032b6:	183b      	adds	r3, r7, r0
 80032b8:	220a      	movs	r2, #10
 80032ba:	701a      	strb	r2, [r3, #0]
		break;
 80032bc:	46c0      	nop			; (mov r8, r8)
		break;
	default:
		printf("Not Supported");
	}

	VL53L0X_SetLimitCheckValue(&rightTofDev,VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <vl53l0x_Right_Range_Profiles+0xa0>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	0018      	movs	r0, r3
 80032c6:	f00a fe99 	bl	800dffc <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(&rightTofDev,VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <vl53l0x_Right_Range_Profiles+0xa0>)
 80032ce:	2100      	movs	r1, #0
 80032d0:	0018      	movs	r0, r3
 80032d2:	f00a fe93 	bl	800dffc <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&rightTofDev,timingBudget);
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <vl53l0x_Right_Range_Profiles+0xa0>)
 80032da:	0011      	movs	r1, r2
 80032dc:	0018      	movs	r0, r3
 80032de:	f00a fadf 	bl	800d8a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(&rightTofDev,VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <vl53l0x_Right_Range_Profiles+0xa0>)
 80032e8:	2100      	movs	r1, #0
 80032ea:	0018      	movs	r0, r3
 80032ec:	f00a fb0a 	bl	800d904 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(&rightTofDev,VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 80032f0:	197b      	adds	r3, r7, r5
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <vl53l0x_Right_Range_Profiles+0xa0>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	0018      	movs	r0, r3
 80032fa:	f00a fb03 	bl	800d904 <VL53L0X_SetVcselPulsePeriod>

	return rightStatus;
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <vl53l0x_Right_Range_Profiles+0xa4>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b25b      	sxtb	r3, r3
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b006      	add	sp, #24
 800330a:	bdb0      	pop	{r4, r5, r7, pc}
 800330c:	000080e8 	.word	0x000080e8
 8003310:	00030d40 	.word	0x00030d40
 8003314:	200009dc 	.word	0x200009dc
 8003318:	200004c9 	.word	0x200004c9

0800331c <vl53l0x_Left_Range_Profiles>:

VL53L0X_Error vl53l0x_Left_Range_Profiles(VL53L0X_DEV Dev)
{
 800331c:	b5b0      	push	{r4, r5, r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	01db      	lsls	r3, r3, #7
 8003328:	617b      	str	r3, [r7, #20]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800332a:	2390      	movs	r3, #144	; 0x90
 800332c:	035b      	lsls	r3, r3, #13
 800332e:	613b      	str	r3, [r7, #16]
	uint32_t timingBudget = 33000;
 8003330:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <vl53l0x_Left_Range_Profiles+0x98>)
 8003332:	60fb      	str	r3, [r7, #12]
	uint8_t preRangeVcselPeriod = 14;
 8003334:	210b      	movs	r1, #11
 8003336:	187b      	adds	r3, r7, r1
 8003338:	220e      	movs	r2, #14
 800333a:	701a      	strb	r2, [r3, #0]
	uint8_t finalRangeVcselPeriod = 10;
 800333c:	200a      	movs	r0, #10
 800333e:	183b      	adds	r3, r7, r0
 8003340:	220a      	movs	r2, #10
 8003342:	701a      	strb	r2, [r3, #0]
		timingBudget = 33000;
		preRangeVcselPeriod = 18;
		finalRangeVcselPeriod = 14;
		break;
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	01db      	lsls	r3, r3, #7
 8003348:	617b      	str	r3, [r7, #20]
		sigmaLimit = (FixPoint1616_t)(18*65536);
 800334a:	2390      	movs	r3, #144	; 0x90
 800334c:	035b      	lsls	r3, r3, #13
 800334e:	613b      	str	r3, [r7, #16]
		timingBudget = 200000;
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <vl53l0x_Left_Range_Profiles+0x9c>)
 8003352:	60fb      	str	r3, [r7, #12]
		preRangeVcselPeriod = 14;
 8003354:	000c      	movs	r4, r1
 8003356:	187b      	adds	r3, r7, r1
 8003358:	220e      	movs	r2, #14
 800335a:	701a      	strb	r2, [r3, #0]
		finalRangeVcselPeriod = 10;
 800335c:	0005      	movs	r5, r0
 800335e:	183b      	adds	r3, r7, r0
 8003360:	220a      	movs	r2, #10
 8003362:	701a      	strb	r2, [r3, #0]
		break;
 8003364:	46c0      	nop			; (mov r8, r8)
		break;
	default:
		printf("Not Supported");
	}

	VL53L0X_SetLimitCheckValue(&leftTofDev,VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <vl53l0x_Left_Range_Profiles+0xa0>)
 800336a:	2101      	movs	r1, #1
 800336c:	0018      	movs	r0, r3
 800336e:	f00a fe45 	bl	800dffc <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(&leftTofDev,VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <vl53l0x_Left_Range_Profiles+0xa0>)
 8003376:	2100      	movs	r1, #0
 8003378:	0018      	movs	r0, r3
 800337a:	f00a fe3f 	bl	800dffc <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&leftTofDev,timingBudget);
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <vl53l0x_Left_Range_Profiles+0xa0>)
 8003382:	0011      	movs	r1, r2
 8003384:	0018      	movs	r0, r3
 8003386:	f00a fa8b 	bl	800d8a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(&leftTofDev,VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800338a:	193b      	adds	r3, r7, r4
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <vl53l0x_Left_Range_Profiles+0xa0>)
 8003390:	2100      	movs	r1, #0
 8003392:	0018      	movs	r0, r3
 8003394:	f00a fab6 	bl	800d904 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(&leftTofDev,VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8003398:	197b      	adds	r3, r7, r5
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	4b07      	ldr	r3, [pc, #28]	; (80033bc <vl53l0x_Left_Range_Profiles+0xa0>)
 800339e:	2101      	movs	r1, #1
 80033a0:	0018      	movs	r0, r3
 80033a2:	f00a faaf 	bl	800d904 <VL53L0X_SetVcselPulsePeriod>

	return leftStatus;
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <vl53l0x_Left_Range_Profiles+0xa4>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b25b      	sxtb	r3, r3
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b006      	add	sp, #24
 80033b2:	bdb0      	pop	{r4, r5, r7, pc}
 80033b4:	000080e8 	.word	0x000080e8
 80033b8:	00030d40 	.word	0x00030d40
 80033bc:	20000b88 	.word	0x20000b88
 80033c0:	200004cb 	.word	0x200004cb

080033c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	4a08      	ldr	r2, [pc, #32]	; (80033f0 <MX_FREERTOS_Init+0x2c>)
 80033ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033d0:	c313      	stmia	r3!, {r0, r1, r4}
 80033d2:	ca03      	ldmia	r2!, {r0, r1}
 80033d4:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	2100      	movs	r1, #0
 80033da:	0018      	movs	r0, r3
 80033dc:	f00f fe0b 	bl	8012ff6 <osThreadCreate>
 80033e0:	0002      	movs	r2, r0
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <MX_FREERTOS_Init+0x30>)
 80033e4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b007      	add	sp, #28
 80033ec:	bd90      	pop	{r4, r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	0801a9a0 	.word	0x0801a9a0
 80033f4:	200004cc 	.word	0x200004cc

080033f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003400:	2001      	movs	r0, #1
 8003402:	f00f fe20 	bl	8013046 <osDelay>
 8003406:	e7fb      	b.n	8003400 <StartDefaultTask+0x8>

08003408 <colorSetPhotodiodeType>:
		GPIO_write(color_S1_GPIO_Port,color_S1_Pin,0);
		break;
	}
}

void colorSetPhotodiodeType(h_color_sensor_t * h_color_sensor,color_sensor_color_t color){
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	000a      	movs	r2, r1
 8003412:	1cfb      	adds	r3, r7, #3
 8003414:	701a      	strb	r2, [r3, #0]
	h_color_sensor->color=color;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	1cfa      	adds	r2, r7, #3
 800341a:	7812      	ldrb	r2, [r2, #0]
 800341c:	701a      	strb	r2, [r3, #0]
	switch(color){
 800341e:	1cfb      	adds	r3, r7, #3
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b04      	cmp	r3, #4
 8003424:	d008      	beq.n	8003438 <colorSetPhotodiodeType+0x30>
 8003426:	dc43      	bgt.n	80034b0 <colorSetPhotodiodeType+0xa8>
 8003428:	2b03      	cmp	r3, #3
 800342a:	d014      	beq.n	8003456 <colorSetPhotodiodeType+0x4e>
 800342c:	dc40      	bgt.n	80034b0 <colorSetPhotodiodeType+0xa8>
 800342e:	2b01      	cmp	r3, #1
 8003430:	d02f      	beq.n	8003492 <colorSetPhotodiodeType+0x8a>
 8003432:	2b02      	cmp	r3, #2
 8003434:	d01e      	beq.n	8003474 <colorSetPhotodiodeType+0x6c>
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
		//printf("\n--- photosensor set rouge ---\r\n\n");
		break;
	}
}
 8003436:	e03b      	b.n	80034b0 <colorSetPhotodiodeType+0xa8>
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8003438:	23a0      	movs	r3, #160	; 0xa0
 800343a:	05db      	lsls	r3, r3, #23
 800343c:	2201      	movs	r2, #1
 800343e:	2108      	movs	r1, #8
 8003440:	0018      	movs	r0, r3
 8003442:	f000 fbab 	bl	8003b9c <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 8003446:	23a0      	movs	r3, #160	; 0xa0
 8003448:	05db      	lsls	r3, r3, #23
 800344a:	2201      	movs	r2, #1
 800344c:	2120      	movs	r1, #32
 800344e:	0018      	movs	r0, r3
 8003450:	f000 fba4 	bl	8003b9c <GPIO_write>
		break;
 8003454:	e02c      	b.n	80034b0 <colorSetPhotodiodeType+0xa8>
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,1);
 8003456:	23a0      	movs	r3, #160	; 0xa0
 8003458:	05db      	lsls	r3, r3, #23
 800345a:	2201      	movs	r2, #1
 800345c:	2108      	movs	r1, #8
 800345e:	0018      	movs	r0, r3
 8003460:	f000 fb9c 	bl	8003b9c <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 8003464:	23a0      	movs	r3, #160	; 0xa0
 8003466:	05db      	lsls	r3, r3, #23
 8003468:	2200      	movs	r2, #0
 800346a:	2120      	movs	r1, #32
 800346c:	0018      	movs	r0, r3
 800346e:	f000 fb95 	bl	8003b9c <GPIO_write>
		break;
 8003472:	e01d      	b.n	80034b0 <colorSetPhotodiodeType+0xa8>
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8003474:	23a0      	movs	r3, #160	; 0xa0
 8003476:	05db      	lsls	r3, r3, #23
 8003478:	2200      	movs	r2, #0
 800347a:	2108      	movs	r1, #8
 800347c:	0018      	movs	r0, r3
 800347e:	f000 fb8d 	bl	8003b9c <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,1);
 8003482:	23a0      	movs	r3, #160	; 0xa0
 8003484:	05db      	lsls	r3, r3, #23
 8003486:	2201      	movs	r2, #1
 8003488:	2120      	movs	r1, #32
 800348a:	0018      	movs	r0, r3
 800348c:	f000 fb86 	bl	8003b9c <GPIO_write>
		break;
 8003490:	e00e      	b.n	80034b0 <colorSetPhotodiodeType+0xa8>
		GPIO_write(color_S2_GPIO_Port,color_S2_Pin,0);
 8003492:	23a0      	movs	r3, #160	; 0xa0
 8003494:	05db      	lsls	r3, r3, #23
 8003496:	2200      	movs	r2, #0
 8003498:	2108      	movs	r1, #8
 800349a:	0018      	movs	r0, r3
 800349c:	f000 fb7e 	bl	8003b9c <GPIO_write>
		GPIO_write(color_S3_GPIO_Port,color_S3_Pin,0);
 80034a0:	23a0      	movs	r3, #160	; 0xa0
 80034a2:	05db      	lsls	r3, r3, #23
 80034a4:	2200      	movs	r2, #0
 80034a6:	2120      	movs	r1, #32
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 fb77 	bl	8003b9c <GPIO_write>
		break;
 80034ae:	46c0      	nop			; (mov r8, r8)
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <colorDisable>:
uint32_t colorGetGreenValue(h_color_sensor_t * h_color_sensor){
	printf("sensor_value : %ld\r\n",h_color_sensor->frequence);
	return h_color_sensor->green_color;
}

void colorDisable(h_color_sensor_t * h_color_sensor){
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b095      	sub	sp, #84	; 0x54
 80034bc:	af12      	add	r7, sp, #72	; 0x48
 80034be:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 1);
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	4810      	ldr	r0, [pc, #64]	; (8003508 <colorDisable+0x50>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	0019      	movs	r1, r3
 80034ca:	f000 fb67 	bl	8003b9c <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_DISABLE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	709a      	strb	r2, [r3, #2]
	timer_handle(htim14,INPUT_CAPTURE_IT,STOP,TIM_CHANNEL_1);
 80034d4:	4c0d      	ldr	r4, [pc, #52]	; (800350c <colorDisable+0x54>)
 80034d6:	2300      	movs	r3, #0
 80034d8:	9311      	str	r3, [sp, #68]	; 0x44
 80034da:	2300      	movs	r3, #0
 80034dc:	9310      	str	r3, [sp, #64]	; 0x40
 80034de:	2301      	movs	r3, #1
 80034e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80034e2:	466b      	mov	r3, sp
 80034e4:	0018      	movs	r0, r3
 80034e6:	0023      	movs	r3, r4
 80034e8:	3310      	adds	r3, #16
 80034ea:	223c      	movs	r2, #60	; 0x3c
 80034ec:	0019      	movs	r1, r3
 80034ee:	f011 fccf 	bl	8014e90 <memcpy>
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	6861      	ldr	r1, [r4, #4]
 80034f6:	68a2      	ldr	r2, [r4, #8]
 80034f8:	68e3      	ldr	r3, [r4, #12]
 80034fa:	f000 fac1 	bl	8003a80 <timer_handle>
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b003      	add	sp, #12
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	50000800 	.word	0x50000800
 800350c:	20000fa0 	.word	0x20000fa0

08003510 <colorEnable>:

void colorEnable(h_color_sensor_t * h_color_sensor){
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b095      	sub	sp, #84	; 0x54
 8003514:	af12      	add	r7, sp, #72	; 0x48
 8003516:	6078      	str	r0, [r7, #4]
	GPIO_write(color_enable_GPIO_Port,color_enable_Pin, 0);
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	4810      	ldr	r0, [pc, #64]	; (8003560 <colorEnable+0x50>)
 800351e:	2200      	movs	r2, #0
 8003520:	0019      	movs	r1, r3
 8003522:	f000 fb3b 	bl	8003b9c <GPIO_write>
	h_color_sensor->sensor_state=SENSOR_ENABLE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	709a      	strb	r2, [r3, #2]
	timer_handle(htim14,INPUT_CAPTURE_IT,START,TIM_CHANNEL_1);
 800352c:	4c0d      	ldr	r4, [pc, #52]	; (8003564 <colorEnable+0x54>)
 800352e:	2300      	movs	r3, #0
 8003530:	9311      	str	r3, [sp, #68]	; 0x44
 8003532:	2301      	movs	r3, #1
 8003534:	9310      	str	r3, [sp, #64]	; 0x40
 8003536:	2301      	movs	r3, #1
 8003538:	930f      	str	r3, [sp, #60]	; 0x3c
 800353a:	466b      	mov	r3, sp
 800353c:	0018      	movs	r0, r3
 800353e:	0023      	movs	r3, r4
 8003540:	3310      	adds	r3, #16
 8003542:	223c      	movs	r2, #60	; 0x3c
 8003544:	0019      	movs	r1, r3
 8003546:	f011 fca3 	bl	8014e90 <memcpy>
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	6861      	ldr	r1, [r4, #4]
 800354e:	68a2      	ldr	r2, [r4, #8]
 8003550:	68e3      	ldr	r3, [r4, #12]
 8003552:	f000 fa95 	bl	8003a80 <timer_handle>
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b003      	add	sp, #12
 800355c:	bd90      	pop	{r4, r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	50000800 	.word	0x50000800
 8003564:	20000fa0 	.word	0x20000fa0

08003568 <colorSensorHandleInputCapture_IT>:
}


// --- fonction de gestion du retour capteur ---

void colorSensorHandleInputCapture_IT(h_color_sensor_t * h_color_sensor,TIM_TypeDef *TIM){
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	//printf("entré dans tim2 IT\r\n");
	if(tour==0){
 8003572:	4b29      	ldr	r3, [pc, #164]	; (8003618 <colorSensorHandleInputCapture_IT+0xb0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d107      	bne.n	800358a <colorSensorHandleInputCapture_IT+0x22>
		temps1=TIM->CNT;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	001a      	movs	r2, r3
 8003580:	4b26      	ldr	r3, [pc, #152]	; (800361c <colorSensorHandleInputCapture_IT+0xb4>)
 8003582:	601a      	str	r2, [r3, #0]
		tour=0;
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <colorSensorHandleInputCapture_IT+0xb0>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
	}
	if(tour==1){
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <colorSensorHandleInputCapture_IT+0xb0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <colorSensorHandleInputCapture_IT+0x3a>
		temps2=TIM->CNT;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	001a      	movs	r2, r3
 8003598:	4b21      	ldr	r3, [pc, #132]	; (8003620 <colorSensorHandleInputCapture_IT+0xb8>)
 800359a:	601a      	str	r2, [r3, #0]
		tour=1;
 800359c:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <colorSensorHandleInputCapture_IT+0xb0>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
	}
	tour=1-tour;
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <colorSensorHandleInputCapture_IT+0xb0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2201      	movs	r2, #1
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <colorSensorHandleInputCapture_IT+0xb0>)
 80035ac:	601a      	str	r2, [r3, #0]
	freq=abs(temps2-temps1);
 80035ae:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <colorSensorHandleInputCapture_IT+0xb8>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <colorSensorHandleInputCapture_IT+0xb4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	17da      	asrs	r2, r3, #31
 80035ba:	189b      	adds	r3, r3, r2
 80035bc:	4053      	eors	r3, r2
 80035be:	001a      	movs	r2, r3
 80035c0:	4b18      	ldr	r3, [pc, #96]	; (8003624 <colorSensorHandleInputCapture_IT+0xbc>)
 80035c2:	601a      	str	r2, [r3, #0]
	h_color_sensor->frequence=freq;
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <colorSensorHandleInputCapture_IT+0xbc>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	605a      	str	r2, [r3, #4]
		}
		printf("fin affichage\r\n");
		u=0;
	}*/

	if((calibration_flag==1)&&(freq<FREQ_MAX_ACCEPTABLE)){
 80035cc:	4b16      	ldr	r3, [pc, #88]	; (8003628 <colorSensorHandleInputCapture_IT+0xc0>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d10c      	bne.n	80035ee <colorSensorHandleInputCapture_IT+0x86>
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <colorSensorHandleInputCapture_IT+0xbc>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a14      	ldr	r2, [pc, #80]	; (800362c <colorSensorHandleInputCapture_IT+0xc4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d807      	bhi.n	80035ee <colorSensorHandleInputCapture_IT+0x86>
		colorHandleCalibrationValues(h_color_sensor,freq);
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <colorSensorHandleInputCapture_IT+0xbc>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	0011      	movs	r1, r2
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 f822 	bl	8003630 <colorHandleCalibrationValues>
	}
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
		// Analyse des valeur pour prise de decision sur la couleur
		colorHandleRawValues(h_color_sensor, freq);
	}
}
 80035ec:	e00f      	b.n	800360e <colorSensorHandleInputCapture_IT+0xa6>
	else if ((calibration_flag==0)&&(freq<FREQ_MAX_ACCEPTABLE)){
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <colorSensorHandleInputCapture_IT+0xc0>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <colorSensorHandleInputCapture_IT+0xa6>
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <colorSensorHandleInputCapture_IT+0xbc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a0c      	ldr	r2, [pc, #48]	; (800362c <colorSensorHandleInputCapture_IT+0xc4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d806      	bhi.n	800360e <colorSensorHandleInputCapture_IT+0xa6>
		colorHandleRawValues(h_color_sensor, freq);
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <colorSensorHandleInputCapture_IT+0xbc>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0011      	movs	r1, r2
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f8dd 	bl	80037c8 <colorHandleRawValues>
}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	200004dc 	.word	0x200004dc
 800361c:	200004d4 	.word	0x200004d4
 8003620:	200004d8 	.word	0x200004d8
 8003624:	200004d0 	.word	0x200004d0
 8003628:	200005ac 	.word	0x200005ac
 800362c:	0000c34f 	.word	0x0000c34f

08003630 <colorHandleCalibrationValues>:

static int colorHandleCalibrationValues(h_color_sensor_t * h_color_sensor, uint32_t frequence){
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
	calib_tab[u]=freq;
 800363a:	4b56      	ldr	r3, [pc, #344]	; (8003794 <colorHandleCalibrationValues+0x164>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b56      	ldr	r3, [pc, #344]	; (8003798 <colorHandleCalibrationValues+0x168>)
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	4b56      	ldr	r3, [pc, #344]	; (800379c <colorHandleCalibrationValues+0x16c>)
 8003644:	0092      	lsls	r2, r2, #2
 8003646:	50d1      	str	r1, [r2, r3]
	u++;
 8003648:	4b52      	ldr	r3, [pc, #328]	; (8003794 <colorHandleCalibrationValues+0x164>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <colorHandleCalibrationValues+0x164>)
 8003650:	601a      	str	r2, [r3, #0]
	if(u==CALIBRATION_NB_VALUES){
 8003652:	4b50      	ldr	r3, [pc, #320]	; (8003794 <colorHandleCalibrationValues+0x164>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b1e      	cmp	r3, #30
 8003658:	d000      	beq.n	800365c <colorHandleCalibrationValues+0x2c>
 800365a:	e095      	b.n	8003788 <colorHandleCalibrationValues+0x158>
		colorDisable(h_color_sensor);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	0018      	movs	r0, r3
 8003660:	f7ff ff2a 	bl	80034b8 <colorDisable>
		uint32_t res=0;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<30;i++){
 8003668:	2300      	movs	r3, #0
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	e012      	b.n	8003694 <colorHandleCalibrationValues+0x64>
			res=res+calib_tab[i];
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <colorHandleCalibrationValues+0x16c>)
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	0092      	lsls	r2, r2, #2
 8003674:	58d3      	ldr	r3, [r2, r3]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	18d3      	adds	r3, r2, r3
 800367a:	60fb      	str	r3, [r7, #12]
			printf("calib values[%d] : %ld\r\n",i,calib_tab[i]);
 800367c:	4b47      	ldr	r3, [pc, #284]	; (800379c <colorHandleCalibrationValues+0x16c>)
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	0092      	lsls	r2, r2, #2
 8003682:	58d2      	ldr	r2, [r2, r3]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <colorHandleCalibrationValues+0x170>)
 8003688:	0018      	movs	r0, r3
 800368a:	f012 fb6b 	bl	8015d64 <iprintf>
		for(int i=0;i<30;i++){
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3301      	adds	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b1d      	cmp	r3, #29
 8003698:	dde9      	ble.n	800366e <colorHandleCalibrationValues+0x3e>
		}
		switch(h_color_sensor->calib_state){
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	7d1b      	ldrb	r3, [r3, #20]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d052      	beq.n	8003748 <colorHandleCalibrationValues+0x118>
 80036a2:	dc67      	bgt.n	8003774 <colorHandleCalibrationValues+0x144>
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d035      	beq.n	8003714 <colorHandleCalibrationValues+0xe4>
 80036a8:	dc64      	bgt.n	8003774 <colorHandleCalibrationValues+0x144>
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d002      	beq.n	80036b4 <colorHandleCalibrationValues+0x84>
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d01a      	beq.n	80036e8 <colorHandleCalibrationValues+0xb8>
 80036b2:	e05f      	b.n	8003774 <colorHandleCalibrationValues+0x144>
		case CALIB_VERT_CANETTE:
			h_color_sensor->calib_struct.calib_value_vert_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	211e      	movs	r1, #30
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7fc fd4b 	bl	8000154 <__udivsi3>
 80036be:	0003      	movs	r3, r0
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	845a      	strh	r2, [r3, #34]	; 0x22
			h_color_sensor->green_transformation.green_min_freq=h_color_sensor->calib_struct.calib_value_vert_canette;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	835a      	strh	r2, [r3, #26]
			printf("Struct calib : champ vert_canette remplie\r\n");
 80036ce:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <colorHandleCalibrationValues+0x174>)
 80036d0:	0018      	movs	r0, r3
 80036d2:	f012 fbd3 	bl	8015e7c <puts>
			printf("Calib_value_vert_canette : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_canette);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036da:	001a      	movs	r2, r3
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <colorHandleCalibrationValues+0x178>)
 80036de:	0011      	movs	r1, r2
 80036e0:	0018      	movs	r0, r3
 80036e2:	f012 fb3f 	bl	8015d64 <iprintf>
			break;
 80036e6:	e04a      	b.n	800377e <colorHandleCalibrationValues+0x14e>
		case CALIB_VERT_VIDE:
			h_color_sensor->calib_struct.calib_value_vert_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	211e      	movs	r1, #30
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7fc fd31 	bl	8000154 <__udivsi3>
 80036f2:	0003      	movs	r3, r0
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	849a      	strh	r2, [r3, #36]	; 0x24
			printf("Struct calib : champ vert_vide remplie\r\n");
 80036fa:	4b2c      	ldr	r3, [pc, #176]	; (80037ac <colorHandleCalibrationValues+0x17c>)
 80036fc:	0018      	movs	r0, r3
 80036fe:	f012 fbbd 	bl	8015e7c <puts>
			printf("Calib_value_vert_vide : %u\r\n\n",h_color_sensor->calib_struct.calib_value_vert_vide);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003706:	001a      	movs	r2, r3
 8003708:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <colorHandleCalibrationValues+0x180>)
 800370a:	0011      	movs	r1, r2
 800370c:	0018      	movs	r0, r3
 800370e:	f012 fb29 	bl	8015d64 <iprintf>
			break;
 8003712:	e034      	b.n	800377e <colorHandleCalibrationValues+0x14e>
		case CALIB_ROUGE_CANETTE:
			h_color_sensor->calib_struct.calib_value_rouge_canette=(uint16_t)(res/CALIBRATION_NB_VALUES);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	211e      	movs	r1, #30
 8003718:	0018      	movs	r0, r3
 800371a:	f7fc fd1b 	bl	8000154 <__udivsi3>
 800371e:	0003      	movs	r3, r0
 8003720:	b29a      	uxth	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	84da      	strh	r2, [r3, #38]	; 0x26
			h_color_sensor->red_transformation.red_min_freq=h_color_sensor->calib_struct.calib_value_rouge_canette;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	841a      	strh	r2, [r3, #32]
			printf("Struct calib : champ rouge_canette remplie\r\n");
 800372e:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <colorHandleCalibrationValues+0x184>)
 8003730:	0018      	movs	r0, r3
 8003732:	f012 fba3 	bl	8015e7c <puts>
			printf("Calib_value_rouge_canette : %u\r\n\n",h_color_sensor->calib_struct.calib_value_rouge_canette);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800373a:	001a      	movs	r2, r3
 800373c:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <colorHandleCalibrationValues+0x188>)
 800373e:	0011      	movs	r1, r2
 8003740:	0018      	movs	r0, r3
 8003742:	f012 fb0f 	bl	8015d64 <iprintf>
			break;
 8003746:	e01a      	b.n	800377e <colorHandleCalibrationValues+0x14e>
		case CALIB_ROUGE_VIDE:
			h_color_sensor->calib_struct.calib_value_rouge_vide=(uint16_t)(res/CALIBRATION_NB_VALUES);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	211e      	movs	r1, #30
 800374c:	0018      	movs	r0, r3
 800374e:	f7fc fd01 	bl	8000154 <__udivsi3>
 8003752:	0003      	movs	r3, r0
 8003754:	b29a      	uxth	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	851a      	strh	r2, [r3, #40]	; 0x28
			printf("Struct calib : champ rouge_vide remplie\r\n");
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <colorHandleCalibrationValues+0x18c>)
 800375c:	0018      	movs	r0, r3
 800375e:	f012 fb8d 	bl	8015e7c <puts>
			printf("Calib_value_rouge_vide : %u\r\n",h_color_sensor->calib_struct.calib_value_rouge_vide);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	001a      	movs	r2, r3
 8003768:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <colorHandleCalibrationValues+0x190>)
 800376a:	0011      	movs	r1, r2
 800376c:	0018      	movs	r0, r3
 800376e:	f012 faf9 	bl	8015d64 <iprintf>
			break;
 8003772:	e004      	b.n	800377e <colorHandleCalibrationValues+0x14e>
		default:
			printf("bug dans la calibration\r\n\n");
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <colorHandleCalibrationValues+0x194>)
 8003776:	0018      	movs	r0, r3
 8003778:	f012 fb80 	bl	8015e7c <puts>
			break;
 800377c:	46c0      	nop			; (mov r8, r8)
		}
		u=0;
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <colorHandleCalibrationValues+0x164>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
		return 1;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <colorHandleCalibrationValues+0x15a>
	}
	return 0;
 8003788:	2300      	movs	r3, #0
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b004      	add	sp, #16
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	20000628 	.word	0x20000628
 8003798:	200004d0 	.word	0x200004d0
 800379c:	200005b0 	.word	0x200005b0
 80037a0:	0801aba4 	.word	0x0801aba4
 80037a4:	0801abc0 	.word	0x0801abc0
 80037a8:	0801abec 	.word	0x0801abec
 80037ac:	0801ac10 	.word	0x0801ac10
 80037b0:	0801ac38 	.word	0x0801ac38
 80037b4:	0801ac58 	.word	0x0801ac58
 80037b8:	0801ac84 	.word	0x0801ac84
 80037bc:	0801aca8 	.word	0x0801aca8
 80037c0:	0801acd4 	.word	0x0801acd4
 80037c4:	0801acf4 	.word	0x0801acf4

080037c8 <colorHandleRawValues>:

static int colorHandleRawValues(h_color_sensor_t * h_color_sensor, uint32_t frequence){
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b08b      	sub	sp, #44	; 0x2c
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	//printf("entre dans color_handle\r\n");
	if(raw_values_compteur<((NB_MEASURE_WANTED/2)-1)){
 80037d2:	4b82      	ldr	r3, [pc, #520]	; (80039dc <colorHandleRawValues+0x214>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d824      	bhi.n	8003824 <colorHandleRawValues+0x5c>
		// premieres valeurs du tableau donc on est dans le vert
		if(frequence<(h_color_sensor->green_transformation.green_min_freq)){
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8b5b      	ldrh	r3, [r3, #26]
 80037de:	001a      	movs	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d202      	bcs.n	80037ec <colorHandleRawValues+0x24>
			frequence = (uint32_t)h_color_sensor->green_transformation.green_min_freq;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8b5b      	ldrh	r3, [r3, #26]
 80037ea:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 80037ec:	4b7b      	ldr	r3, [pc, #492]	; (80039dc <colorHandleRawValues+0x214>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	001a      	movs	r2, r3
 80037f2:	4b7b      	ldr	r3, [pc, #492]	; (80039e0 <colorHandleRawValues+0x218>)
 80037f4:	0092      	lsls	r2, r2, #2
 80037f6:	6839      	ldr	r1, [r7, #0]
 80037f8:	50d1      	str	r1, [r2, r3]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8adb      	ldrh	r3, [r3, #22]
 80037fe:	001a      	movs	r2, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4353      	muls	r3, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	8b12      	ldrh	r2, [r2, #24]
 8003808:	0011      	movs	r1, r2
 800380a:	4a74      	ldr	r2, [pc, #464]	; (80039dc <colorHandleRawValues+0x214>)
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	1859      	adds	r1, r3, r1
 8003810:	4b74      	ldr	r3, [pc, #464]	; (80039e4 <colorHandleRawValues+0x21c>)
 8003812:	0092      	lsls	r2, r2, #2
 8003814:	50d1      	str	r1, [r2, r3]
		raw_values_compteur++;
 8003816:	4b71      	ldr	r3, [pc, #452]	; (80039dc <colorHandleRawValues+0x214>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4b6f      	ldr	r3, [pc, #444]	; (80039dc <colorHandleRawValues+0x214>)
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e0d6      	b.n	80039d2 <colorHandleRawValues+0x20a>
	}

	else if(raw_values_compteur==((NB_MEASURE_WANTED/2)-1)){
 8003824:	4b6d      	ldr	r3, [pc, #436]	; (80039dc <colorHandleRawValues+0x214>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b09      	cmp	r3, #9
 800382a:	d131      	bne.n	8003890 <colorHandleRawValues+0xc8>
		//on est encore dans le vert mais on doit en plus changer la couleur de detection
		if(frequence<(h_color_sensor->green_transformation.green_min_freq)){
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8b5b      	ldrh	r3, [r3, #26]
 8003830:	001a      	movs	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	4293      	cmp	r3, r2
 8003836:	d202      	bcs.n	800383e <colorHandleRawValues+0x76>
			frequence = (uint32_t)h_color_sensor->green_transformation.green_min_freq;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8b5b      	ldrh	r3, [r3, #26]
 800383c:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 800383e:	4b67      	ldr	r3, [pc, #412]	; (80039dc <colorHandleRawValues+0x214>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	001a      	movs	r2, r3
 8003844:	4b66      	ldr	r3, [pc, #408]	; (80039e0 <colorHandleRawValues+0x218>)
 8003846:	0092      	lsls	r2, r2, #2
 8003848:	6839      	ldr	r1, [r7, #0]
 800384a:	50d1      	str	r1, [r2, r3]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->green_transformation.green_coef_dir)*frequence)+(h_color_sensor->green_transformation.green_ord_origin);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8adb      	ldrh	r3, [r3, #22]
 8003850:	001a      	movs	r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	4353      	muls	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	8b12      	ldrh	r2, [r2, #24]
 800385a:	0011      	movs	r1, r2
 800385c:	4a5f      	ldr	r2, [pc, #380]	; (80039dc <colorHandleRawValues+0x214>)
 800385e:	7812      	ldrb	r2, [r2, #0]
 8003860:	1859      	adds	r1, r3, r1
 8003862:	4b60      	ldr	r3, [pc, #384]	; (80039e4 <colorHandleRawValues+0x21c>)
 8003864:	0092      	lsls	r2, r2, #2
 8003866:	50d1      	str	r1, [r2, r3]
		raw_values_compteur++;
 8003868:	4b5c      	ldr	r3, [pc, #368]	; (80039dc <colorHandleRawValues+0x214>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b5a      	ldr	r3, [pc, #360]	; (80039dc <colorHandleRawValues+0x214>)
 8003872:	701a      	strb	r2, [r3, #0]

		// color change
		colorDisable(h_color_sensor);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	0018      	movs	r0, r3
 8003878:	f7ff fe1e 	bl	80034b8 <colorDisable>
		colorSetPhotodiodeType(h_color_sensor,RED);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2101      	movs	r1, #1
 8003880:	0018      	movs	r0, r3
 8003882:	f7ff fdc1 	bl	8003408 <colorSetPhotodiodeType>
		colorEnable(h_color_sensor);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f7ff fe41 	bl	8003510 <colorEnable>
 800388e:	e0a0      	b.n	80039d2 <colorHandleRawValues+0x20a>
	}

	else if((raw_values_compteur>((NB_MEASURE_WANTED/2)-1))&&(raw_values_compteur<NB_MEASURE_WANTED)){
 8003890:	4b52      	ldr	r3, [pc, #328]	; (80039dc <colorHandleRawValues+0x214>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b09      	cmp	r3, #9
 8003896:	d928      	bls.n	80038ea <colorHandleRawValues+0x122>
 8003898:	4b50      	ldr	r3, [pc, #320]	; (80039dc <colorHandleRawValues+0x214>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b13      	cmp	r3, #19
 800389e:	d824      	bhi.n	80038ea <colorHandleRawValues+0x122>
		// valeures rouges
		if(frequence<(h_color_sensor->red_transformation.red_min_freq)){
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8c1b      	ldrh	r3, [r3, #32]
 80038a4:	001a      	movs	r2, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d202      	bcs.n	80038b2 <colorHandleRawValues+0xea>
			frequence = (uint32_t)h_color_sensor->red_transformation.red_min_freq;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8c1b      	ldrh	r3, [r3, #32]
 80038b0:	603b      	str	r3, [r7, #0]
		}
		//--debug
		color_raw_values[raw_values_compteur]=frequence;
 80038b2:	4b4a      	ldr	r3, [pc, #296]	; (80039dc <colorHandleRawValues+0x214>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	001a      	movs	r2, r3
 80038b8:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <colorHandleRawValues+0x218>)
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	6839      	ldr	r1, [r7, #0]
 80038be:	50d1      	str	r1, [r2, r3]
		//--fin debug
		color_scaled_values[raw_values_compteur]=((h_color_sensor->red_transformation.red_coef_dir)*frequence)+(h_color_sensor->red_transformation.red_ord_origin);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8b9b      	ldrh	r3, [r3, #28]
 80038c4:	001a      	movs	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	4353      	muls	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	8bd2      	ldrh	r2, [r2, #30]
 80038ce:	0011      	movs	r1, r2
 80038d0:	4a42      	ldr	r2, [pc, #264]	; (80039dc <colorHandleRawValues+0x214>)
 80038d2:	7812      	ldrb	r2, [r2, #0]
 80038d4:	1859      	adds	r1, r3, r1
 80038d6:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <colorHandleRawValues+0x21c>)
 80038d8:	0092      	lsls	r2, r2, #2
 80038da:	50d1      	str	r1, [r2, r3]
		raw_values_compteur++;
 80038dc:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <colorHandleRawValues+0x214>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <colorHandleRawValues+0x214>)
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e073      	b.n	80039d2 <colorHandleRawValues+0x20a>
	}

	else if(raw_values_compteur==NB_MEASURE_WANTED){
 80038ea:	4b3c      	ldr	r3, [pc, #240]	; (80039dc <colorHandleRawValues+0x214>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b14      	cmp	r3, #20
 80038f0:	d16f      	bne.n	80039d2 <colorHandleRawValues+0x20a>
		// Pret a faire la moyenne du tableau pour plus de fiabilité
		colorDisable(h_color_sensor);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7ff fddf 	bl	80034b8 <colorDisable>
		uint32_t green_mean=0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
		uint32_t red_mean=0;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]

		// green mean with erase of waste values (the 2 first one each time)
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 8003902:	2302      	movs	r3, #2
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e009      	b.n	800391c <colorHandleRawValues+0x154>
			green_mean=green_mean+color_scaled_values[i];
 8003908:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <colorHandleRawValues+0x21c>)
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	0092      	lsls	r2, r2, #2
 800390e:	58d3      	ldr	r3, [r2, r3]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	18d3      	adds	r3, r2, r3
 8003914:	61fb      	str	r3, [r7, #28]
		for(int i=DECHET_MEASURE; i<((NB_MEASURE_WANTED/2));i++){
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	3301      	adds	r3, #1
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b09      	cmp	r3, #9
 8003920:	ddf2      	ble.n	8003908 <colorHandleRawValues+0x140>
		}
		green_color_value=floor(green_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	08db      	lsrs	r3, r3, #3
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff f9c2 	bl	8002cb0 <__aeabi_ui2d>
 800392c:	0002      	movs	r2, r0
 800392e:	000b      	movs	r3, r1
 8003930:	0010      	movs	r0, r2
 8003932:	0019      	movs	r1, r3
 8003934:	f7fc fdfc 	bl	8000530 <__aeabi_d2uiz>
 8003938:	0002      	movs	r2, r0
 800393a:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <colorHandleRawValues+0x220>)
 800393c:	601a      	str	r2, [r3, #0]
		h_color_sensor->green_color=green_color_value;
 800393e:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <colorHandleRawValues+0x220>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]

		//red values mean
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 8003946:	230c      	movs	r3, #12
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e009      	b.n	8003960 <colorHandleRawValues+0x198>
			red_mean=red_mean+color_scaled_values[i];
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <colorHandleRawValues+0x21c>)
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	0092      	lsls	r2, r2, #2
 8003952:	58d3      	ldr	r3, [r2, r3]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	18d3      	adds	r3, r2, r3
 8003958:	61bb      	str	r3, [r7, #24]
		for(int i=((NB_MEASURE_WANTED/2)+DECHET_MEASURE);i<NB_MEASURE_WANTED;i++){
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	3301      	adds	r3, #1
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b13      	cmp	r3, #19
 8003964:	ddf2      	ble.n	800394c <colorHandleRawValues+0x184>
		}
		red_color_value=floor(red_mean/((NB_MEASURE_WANTED/2)-DECHET_MEASURE));
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	08db      	lsrs	r3, r3, #3
 800396a:	0018      	movs	r0, r3
 800396c:	f7ff f9a0 	bl	8002cb0 <__aeabi_ui2d>
 8003970:	0002      	movs	r2, r0
 8003972:	000b      	movs	r3, r1
 8003974:	0010      	movs	r0, r2
 8003976:	0019      	movs	r1, r3
 8003978:	f7fc fdda 	bl	8000530 <__aeabi_d2uiz>
 800397c:	0002      	movs	r2, r0
 800397e:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <colorHandleRawValues+0x224>)
 8003980:	601a      	str	r2, [r3, #0]
		h_color_sensor->red_color=red_color_value;
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <colorHandleRawValues+0x224>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60da      	str	r2, [r3, #12]

		raw_values_compteur=0;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <colorHandleRawValues+0x214>)
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]

		//Affichage tableau
		for(int i=0;i<NB_MEASURE_WANTED;i++){
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e012      	b.n	80039bc <colorHandleRawValues+0x1f4>
			printf("color_raw_values[%d] : %ld\t->\t color_scaled_value[%d] : %ld\r\n",i,color_raw_values[i],i,color_scaled_values[i]);
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <colorHandleRawValues+0x218>)
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	0092      	lsls	r2, r2, #2
 800399c:	58d4      	ldr	r4, [r2, r3]
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <colorHandleRawValues+0x21c>)
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	0092      	lsls	r2, r2, #2
 80039a4:	58d3      	ldr	r3, [r2, r3]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	68f9      	ldr	r1, [r7, #12]
 80039aa:	4811      	ldr	r0, [pc, #68]	; (80039f0 <colorHandleRawValues+0x228>)
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	0013      	movs	r3, r2
 80039b0:	0022      	movs	r2, r4
 80039b2:	f012 f9d7 	bl	8015d64 <iprintf>
		for(int i=0;i<NB_MEASURE_WANTED;i++){
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3301      	adds	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b13      	cmp	r3, #19
 80039c0:	dde9      	ble.n	8003996 <colorHandleRawValues+0x1ce>
		}
		colorAnalyse(h_color_sensor,green_color_value,red_color_value);
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <colorHandleRawValues+0x220>)
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <colorHandleRawValues+0x224>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f000 f811 	bl	80039f4 <colorAnalyse>
	}

	return 0; // fonctionnement normal
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b009      	add	sp, #36	; 0x24
 80039da:	bd90      	pop	{r4, r7, pc}
 80039dc:	200005a0 	.word	0x200005a0
 80039e0:	20000540 	.word	0x20000540
 80039e4:	200004e0 	.word	0x200004e0
 80039e8:	200005a4 	.word	0x200005a4
 80039ec:	200005a8 	.word	0x200005a8
 80039f0:	0801ad10 	.word	0x0801ad10

080039f4 <colorAnalyse>:


// --- fonction d'analyse et de prise de décision ---

static void colorAnalyse(h_color_sensor_t * h_color_sensor, color_t green, color_t red){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
	printf("green : %ld \r\n",green);
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <colorAnalyse+0x60>)
 8003a04:	0011      	movs	r1, r2
 8003a06:	0018      	movs	r0, r3
 8003a08:	f012 f9ac 	bl	8015d64 <iprintf>
	printf("red : %ld \r\n",red);
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <colorAnalyse+0x64>)
 8003a10:	0011      	movs	r1, r2
 8003a12:	0018      	movs	r0, r3
 8003a14:	f012 f9a6 	bl	8015d64 <iprintf>
	if(green<red){
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d204      	bcs.n	8003a2a <colorAnalyse+0x36>
		printf("c'est vert\r\n");
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <colorAnalyse+0x68>)
 8003a22:	0018      	movs	r0, r3
 8003a24:	f012 fa2a 	bl	8015e7c <puts>
		/*if(freeRTOS){
			printf("task resume all\r\n");
			xTaskResumeAll();
		}*/
	}
}
 8003a28:	e010      	b.n	8003a4c <colorAnalyse+0x58>
	else if(green==red){
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d108      	bne.n	8003a44 <colorAnalyse+0x50>
		printf("Measure again\r\n");
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <colorAnalyse+0x6c>)
 8003a34:	0018      	movs	r0, r3
 8003a36:	f012 fa21 	bl	8015e7c <puts>
		colorDoMeasureAgain(h_color_sensor);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f000 f813 	bl	8003a68 <colorDoMeasureAgain>
}
 8003a42:	e003      	b.n	8003a4c <colorAnalyse+0x58>
		printf("c'est rouge\r\n");
 8003a44:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <colorAnalyse+0x70>)
 8003a46:	0018      	movs	r0, r3
 8003a48:	f012 fa18 	bl	8015e7c <puts>
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b004      	add	sp, #16
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	0801ad50 	.word	0x0801ad50
 8003a58:	0801ad60 	.word	0x0801ad60
 8003a5c:	0801ad70 	.word	0x0801ad70
 8003a60:	0801ad7c 	.word	0x0801ad7c
 8003a64:	0801ad8c 	.word	0x0801ad8c

08003a68 <colorDoMeasureAgain>:

static void colorDoMeasureAgain(h_color_sensor_t * h_color_sensor){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	colorEnable(h_color_sensor);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7ff fd4c 	bl	8003510 <colorEnable>
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <timer_handle>:
 * tim_mode_t mode : htim configuration accirding to what is in .ioc file (INPUT_CAPTURE_IT, BASE_IT, PWM)
 * tim_status_t status : same but START,STOP
 * uint32_t channel ; the output channel of htim
 * @return none
 */
void timer_handle(TIM_HandleTypeDef htim, tim_mode_t mode, tim_status_t status,uint32_t channel){
 8003a80:	b084      	sub	sp, #16
 8003a82:	b5b0      	push	{r4, r5, r7, lr}
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	2510      	movs	r5, #16
 8003a88:	197c      	adds	r4, r7, r5
 8003a8a:	6020      	str	r0, [r4, #0]
 8003a8c:	6061      	str	r1, [r4, #4]
 8003a8e:	60a2      	str	r2, [r4, #8]
 8003a90:	60e3      	str	r3, [r4, #12]
	if(status==START){
 8003a92:	2350      	movs	r3, #80	; 0x50
 8003a94:	002a      	movs	r2, r5
 8003a96:	189b      	adds	r3, r3, r2
 8003a98:	19db      	adds	r3, r3, r7
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d122      	bne.n	8003ae6 <timer_handle+0x66>
		switch(mode){
 8003aa0:	234c      	movs	r3, #76	; 0x4c
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	19db      	adds	r3, r3, r7
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d00e      	beq.n	8003aca <timer_handle+0x4a>
 8003aac:	dd00      	ble.n	8003ab0 <timer_handle+0x30>
 8003aae:	e068      	b.n	8003b82 <timer_handle+0x102>
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d002      	beq.n	8003aba <timer_handle+0x3a>
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d010      	beq.n	8003ada <timer_handle+0x5a>
			break;
		case BASE_IT:
			HAL_TIM_Base_Start_IT(&htim);
			break;
		default :
			break;
 8003ab8:	e063      	b.n	8003b82 <timer_handle+0x102>
			HAL_TIM_IC_Start_IT(&htim, channel);
 8003aba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003abc:	2310      	movs	r3, #16
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	0011      	movs	r1, r2
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f005 fa7e 	bl	8008fc4 <HAL_TIM_IC_Start_IT>
			break;
 8003ac8:	e062      	b.n	8003b90 <timer_handle+0x110>
			HAL_TIM_PWM_Start(&htim,channel);
 8003aca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003acc:	2310      	movs	r3, #16
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	0011      	movs	r1, r2
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f005 f8a6 	bl	8008c24 <HAL_TIM_PWM_Start>
			break;
 8003ad8:	e05a      	b.n	8003b90 <timer_handle+0x110>
			HAL_TIM_Base_Start_IT(&htim);
 8003ada:	2310      	movs	r3, #16
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f004 ffbc 	bl	8008a5c <HAL_TIM_Base_Start_IT>
			break;
 8003ae4:	e054      	b.n	8003b90 <timer_handle+0x110>
		}
	}
	else if (status==STOP){
 8003ae6:	2350      	movs	r3, #80	; 0x50
 8003ae8:	2210      	movs	r2, #16
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	19db      	adds	r3, r3, r7
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d121      	bne.n	8003b38 <timer_handle+0xb8>
		switch(mode){
 8003af4:	234c      	movs	r3, #76	; 0x4c
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	19db      	adds	r3, r3, r7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d00d      	beq.n	8003b1c <timer_handle+0x9c>
 8003b00:	dc41      	bgt.n	8003b86 <timer_handle+0x106>
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d002      	beq.n	8003b0c <timer_handle+0x8c>
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d010      	beq.n	8003b2c <timer_handle+0xac>
			break;
		case BASE_IT:
			HAL_TIM_Base_Stop_IT(&htim);
			break;
		default :
			break;
 8003b0a:	e03c      	b.n	8003b86 <timer_handle+0x106>
			HAL_TIM_IC_Stop_IT(&htim, channel);
 8003b0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b0e:	2310      	movs	r3, #16
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	0011      	movs	r1, r2
 8003b14:	0018      	movs	r0, r3
 8003b16:	f005 fb87 	bl	8009228 <HAL_TIM_IC_Stop_IT>
			break;
 8003b1a:	e039      	b.n	8003b90 <timer_handle+0x110>
			HAL_TIM_PWM_Stop(&htim,channel);
 8003b1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b1e:	2310      	movs	r3, #16
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	0011      	movs	r1, r2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f005 f961 	bl	8008dec <HAL_TIM_PWM_Stop>
			break;
 8003b2a:	e031      	b.n	8003b90 <timer_handle+0x110>
			HAL_TIM_Base_Stop_IT(&htim);
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	0018      	movs	r0, r3
 8003b32:	f004 ffe9 	bl	8008b08 <HAL_TIM_Base_Stop_IT>
			break;
 8003b36:	e02b      	b.n	8003b90 <timer_handle+0x110>
		}
	}
	else if (status==INIT){
 8003b38:	2350      	movs	r3, #80	; 0x50
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d121      	bne.n	8003b8a <timer_handle+0x10a>
		switch(mode){
 8003b46:	234c      	movs	r3, #76	; 0x4c
 8003b48:	189b      	adds	r3, r3, r2
 8003b4a:	19db      	adds	r3, r3, r7
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d00b      	beq.n	8003b6a <timer_handle+0xea>
 8003b52:	dc1c      	bgt.n	8003b8e <timer_handle+0x10e>
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d002      	beq.n	8003b5e <timer_handle+0xde>
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d00c      	beq.n	8003b76 <timer_handle+0xf6>
			break;
		case BASE_IT:
			HAL_TIM_Base_Init(&htim);
			break;
		default :
			break;
 8003b5c:	e017      	b.n	8003b8e <timer_handle+0x10e>
			HAL_TIM_IC_Init(&htim);
 8003b5e:	2310      	movs	r3, #16
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	0018      	movs	r0, r3
 8003b64:	f005 f9ce 	bl	8008f04 <HAL_TIM_IC_Init>
			break;
 8003b68:	e012      	b.n	8003b90 <timer_handle+0x110>
			HAL_TIM_PWM_Init(&htim);
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f004 fff8 	bl	8008b64 <HAL_TIM_PWM_Init>
			break;
 8003b74:	e00c      	b.n	8003b90 <timer_handle+0x110>
			HAL_TIM_Base_Init(&htim);
 8003b76:	2310      	movs	r3, #16
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f004 ff16 	bl	80089ac <HAL_TIM_Base_Init>
			break;
 8003b80:	e006      	b.n	8003b90 <timer_handle+0x110>
			break;
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	e004      	b.n	8003b90 <timer_handle+0x110>
			break;
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	e002      	b.n	8003b90 <timer_handle+0x110>
		}
	}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	e000      	b.n	8003b90 <timer_handle+0x110>
			break;
 8003b8e:	46c0      	nop			; (mov r8, r8)
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bcb0      	pop	{r4, r5, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	b004      	add	sp, #16
 8003b9a:	4718      	bx	r3

08003b9c <GPIO_write>:
 * uint16_t gpio_pin : The pin of the GPIO you want to deal with
 * GPIO_PinState gpio_PinState : the state you want your GPIO to have (1 or 0)
 *
 * @return 0 if fail else 1
 */
void GPIO_write(GPIO_TypeDef * gpio_port,uint16_t gpio_pin,GPIO_PinState gpio_PinState ){
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	0008      	movs	r0, r1
 8003ba6:	0011      	movs	r1, r2
 8003ba8:	1cbb      	adds	r3, r7, #2
 8003baa:	1c02      	adds	r2, r0, #0
 8003bac:	801a      	strh	r2, [r3, #0]
 8003bae:	1c7b      	adds	r3, r7, #1
 8003bb0:	1c0a      	adds	r2, r1, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(gpio_port,gpio_pin,gpio_PinState);
 8003bb4:	1c7b      	adds	r3, r7, #1
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	1cbb      	adds	r3, r7, #2
 8003bba:	8819      	ldrh	r1, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f003 fa7c 	bl	80070bc <HAL_GPIO_WritePin>
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <speedControlLoop_init>:
 *      Author: lucas
 */
#include "control_loop.h"


void speedControlLoop_init(h_speedControlLoop_t * controlLoop, h_zxbm_t * motor, int kp, int ki, int antiWindupThreshold, int correctionFactor){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
	controlLoop->motor = motor;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	601a      	str	r2, [r3, #0]
	zxbm_setDutyCycle(motor, 0);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2100      	movs	r1, #0
 8003be4:	0018      	movs	r0, r3
 8003be6:	f002 febb 	bl	8006960 <zxbm_setDutyCycle>

	controlLoop->kp = kp;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	60da      	str	r2, [r3, #12]
	controlLoop->ki = ki;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	611a      	str	r2, [r3, #16]
	controlLoop->antiWindupThreshold = antiWindupThreshold;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c

	controlLoop->correctionFactor = correctionFactor;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40

	controlLoop->absolutePostion = 0;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
	controlLoop->sumErrorSpeed = 0;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Default values*/
	controlLoop->accelStep = 2;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2202      	movs	r2, #2
 8003c12:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b004      	add	sp, #16
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <speedControlLoop_updateSpeed>:

void speedControlLoop_updateSpeed(h_speedControlLoop_t * controlLoop, int setSpeed){
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	controlLoop->previousCNT = controlLoop->currentCNT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	619a      	str	r2, [r3, #24]
	controlLoop->currentCNT = controlLoop->encoder.getCounter();
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4798      	blx	r3
 8003c34:	0003      	movs	r3, r0
 8003c36:	001a      	movs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	615a      	str	r2, [r3, #20]


	if(controlLoop->encoder.isCountingDown()){
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4798      	blx	r3
 8003c42:	1e03      	subs	r3, r0, #0
 8003c44:	d02e      	beq.n	8003ca4 <speedControlLoop_updateSpeed+0x88>
		controlLoop->diffCNT = (controlLoop->previousCNT < controlLoop->currentCNT)? controlLoop->previousCNT + (65535 - controlLoop->currentCNT) : controlLoop->previousCNT - controlLoop->currentCNT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	da07      	bge.n	8003c62 <speedControlLoop_updateSpeed+0x46>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	4960      	ldr	r1, [pc, #384]	; (8003ddc <speedControlLoop_updateSpeed+0x1c0>)
 8003c5c:	1acb      	subs	r3, r1, r3
 8003c5e:	18d2      	adds	r2, r2, r3
 8003c60:	e004      	b.n	8003c6c <speedControlLoop_updateSpeed+0x50>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	1ad2      	subs	r2, r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	61da      	str	r2, [r3, #28]
		if(controlLoop->diffCNT < 200 || controlLoop->diffCNT > -200)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	2bc7      	cmp	r3, #199	; 0xc7
 8003c76:	dd03      	ble.n	8003c80 <speedControlLoop_updateSpeed+0x64>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	33c7      	adds	r3, #199	; 0xc7
 8003c7e:	db3f      	blt.n	8003d00 <speedControlLoop_updateSpeed+0xe4>
			controlLoop->absolutePostion = controlLoop->absolutePostion + controlLoop->diffCNT*((controlLoop->motor->isReversed == 0)? -1 : 1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69d9      	ldr	r1, [r3, #28]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	7d1b      	ldrb	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <speedControlLoop_updateSpeed+0x7c>
 8003c92:	2301      	movs	r3, #1
 8003c94:	425b      	negs	r3, r3
 8003c96:	e000      	b.n	8003c9a <speedControlLoop_updateSpeed+0x7e>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	434b      	muls	r3, r1
 8003c9c:	18d2      	adds	r2, r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ca2:	e02d      	b.n	8003d00 <speedControlLoop_updateSpeed+0xe4>
	}else{
		controlLoop->diffCNT = (controlLoop->currentCNT < controlLoop->previousCNT)? controlLoop->currentCNT + (65535 - controlLoop->previousCNT) : controlLoop->currentCNT - controlLoop->previousCNT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	da07      	bge.n	8003cc0 <speedControlLoop_updateSpeed+0xa4>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	4948      	ldr	r1, [pc, #288]	; (8003ddc <speedControlLoop_updateSpeed+0x1c0>)
 8003cba:	1acb      	subs	r3, r1, r3
 8003cbc:	18d2      	adds	r2, r2, r3
 8003cbe:	e004      	b.n	8003cca <speedControlLoop_updateSpeed+0xae>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	1ad2      	subs	r2, r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	61da      	str	r2, [r3, #28]
		if(controlLoop->diffCNT < 200 || controlLoop->diffCNT > -200)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	2bc7      	cmp	r3, #199	; 0xc7
 8003cd4:	dd03      	ble.n	8003cde <speedControlLoop_updateSpeed+0xc2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	33c7      	adds	r3, #199	; 0xc7
 8003cdc:	db10      	blt.n	8003d00 <speedControlLoop_updateSpeed+0xe4>
			controlLoop->absolutePostion = controlLoop->absolutePostion + controlLoop->diffCNT*((controlLoop->motor->isReversed == 0)? 1 : -1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69d9      	ldr	r1, [r3, #28]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	7d1b      	ldrb	r3, [r3, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <speedControlLoop_updateSpeed+0xd8>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e001      	b.n	8003cf8 <speedControlLoop_updateSpeed+0xdc>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	425b      	negs	r3, r3
 8003cf8:	434b      	muls	r3, r1
 8003cfa:	18d2      	adds	r2, r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
	}

	controlLoop->currentSpeed = (controlLoop->diffCNT)*(1000 + controlLoop->correctionFactor);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	21fa      	movs	r1, #250	; 0xfa
 8003d0a:	0089      	lsls	r1, r1, #2
 8003d0c:	468c      	mov	ip, r1
 8003d0e:	4463      	add	r3, ip
 8003d10:	435a      	muls	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	621a      	str	r2, [r3, #32]
	controlLoop->errorSpeed = 1000*setSpeed - controlLoop->currentSpeed;
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	0013      	movs	r3, r2
 8003d1a:	015b      	lsls	r3, r3, #5
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	189b      	adds	r3, r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	001a      	movs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28

	if (abs(controlLoop->errorSpeed) < controlLoop->antiWindupThreshold*1000)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	17da      	asrs	r2, r3, #31
 8003d36:	1899      	adds	r1, r3, r2
 8003d38:	4051      	eors	r1, r2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d3e:	0013      	movs	r3, r2
 8003d40:	015b      	lsls	r3, r3, #5
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4299      	cmp	r1, r3
 8003d4c:	da06      	bge.n	8003d5c <speedControlLoop_updateSpeed+0x140>
		controlLoop->sumErrorSpeed += controlLoop->errorSpeed;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	18d2      	adds	r2, r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	62da      	str	r2, [r3, #44]	; 0x2c

	controlLoop->newDutyCycle = controlLoop->kp*controlLoop->errorSpeed + controlLoop->sumErrorSpeed/controlLoop->ki;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	4353      	muls	r3, r2
 8003d66:	001c      	movs	r4, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	0019      	movs	r1, r3
 8003d72:	0010      	movs	r0, r2
 8003d74:	f7fc fa78 	bl	8000268 <__divsi3>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	18e2      	adds	r2, r4, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	635a      	str	r2, [r3, #52]	; 0x34

	if(controlLoop->currentDutyCycle < controlLoop->newDutyCycle)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	da10      	bge.n	8003dae <speedControlLoop_updateSpeed+0x192>
		controlLoop->currentDutyCycle += (1000 + 2*controlLoop->correctionFactor)*controlLoop->accelStep;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	001a      	movs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	33f5      	adds	r3, #245	; 0xf5
 8003d98:	33ff      	adds	r3, #255	; 0xff
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	434b      	muls	r3, r1
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	18d3      	adds	r3, r2, r3
 8003da6:	001a      	movs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
 8003dac:	e003      	b.n	8003db6 <speedControlLoop_updateSpeed+0x19a>
	else
		controlLoop->currentDutyCycle = controlLoop->newDutyCycle;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30

	zxbm_setDutyCycle(controlLoop->motor, (controlLoop->currentDutyCycle)/1000);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681c      	ldr	r4, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	22fa      	movs	r2, #250	; 0xfa
 8003dc0:	0091      	lsls	r1, r2, #2
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7fc fa50 	bl	8000268 <__divsi3>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	0019      	movs	r1, r3
 8003dcc:	0020      	movs	r0, r4
 8003dce:	f002 fdc7 	bl	8006960 <zxbm_setDutyCycle>
}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b003      	add	sp, #12
 8003dd8:	bd90      	pop	{r4, r7, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	0000ffff 	.word	0x0000ffff

08003de0 <startRightPWM>:
 *  Created on: Dec 1, 2022
 *      Author: lucas
 */
#include "drv_timer.h"

void startRightPWM(void){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <startRightPWM+0x14>)
 8003de6:	2100      	movs	r1, #0
 8003de8:	0018      	movs	r0, r3
 8003dea:	f004 ff1b 	bl	8008c24 <HAL_TIM_PWM_Start>
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000fec 	.word	0x20000fec

08003df8 <startRightPWMN>:
void startRightPWMN(void){
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <startRightPWMN+0x14>)
 8003dfe:	2100      	movs	r1, #0
 8003e00:	0018      	movs	r0, r3
 8003e02:	f006 fcfd 	bl	800a800 <HAL_TIMEx_PWMN_Start>
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20000fec 	.word	0x20000fec

08003e10 <stopRightPWM>:
void stopRightPWM(void){
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <stopRightPWM+0x14>)
 8003e16:	2100      	movs	r1, #0
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f004 ffe7 	bl	8008dec <HAL_TIM_PWM_Stop>
}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000fec 	.word	0x20000fec

08003e28 <stopRightPWMN>:
void stopRightPWMN(void){
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <stopRightPWMN+0x14>)
 8003e2e:	2100      	movs	r1, #0
 8003e30:	0018      	movs	r0, r3
 8003e32:	f006 fd83 	bl	800a93c <HAL_TIMEx_PWMN_Stop>
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000fec 	.word	0x20000fec

08003e40 <setRightDutyCycle>:
void setRightDutyCycle(int dutyCycle){
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
	uint32_t timerPeriod = __HAL_TIM_GET_AUTORELOAD(&htim15);
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <setRightDutyCycle+0x58>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	60fb      	str	r3, [r7, #12]

	uint32_t timerCompare = (dutyCycle/100.0) * timerPeriod;
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7fe fefd 	bl	8002c50 <__aeabi_i2d>
 8003e56:	2200      	movs	r2, #0
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <setRightDutyCycle+0x5c>)
 8003e5a:	f7fd fca5 	bl	80017a8 <__aeabi_ddiv>
 8003e5e:	0002      	movs	r2, r0
 8003e60:	000b      	movs	r3, r1
 8003e62:	0014      	movs	r4, r2
 8003e64:	001d      	movs	r5, r3
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7fe ff22 	bl	8002cb0 <__aeabi_ui2d>
 8003e6c:	0002      	movs	r2, r0
 8003e6e:	000b      	movs	r3, r1
 8003e70:	0020      	movs	r0, r4
 8003e72:	0029      	movs	r1, r5
 8003e74:	f7fe f89a 	bl	8001fac <__aeabi_dmul>
 8003e78:	0002      	movs	r2, r0
 8003e7a:	000b      	movs	r3, r1
 8003e7c:	0010      	movs	r0, r2
 8003e7e:	0019      	movs	r1, r3
 8003e80:	f7fc fb56 	bl	8000530 <__aeabi_d2uiz>
 8003e84:	0003      	movs	r3, r0
 8003e86:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1,(uint32_t) timerCompare);
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <setRightDutyCycle+0x58>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b004      	add	sp, #16
 8003e96:	bdb0      	pop	{r4, r5, r7, pc}
 8003e98:	20000fec 	.word	0x20000fec
 8003e9c:	40590000 	.word	0x40590000

08003ea0 <getRightEncoderCounter>:
uint32_t getRightEncoderCounter(){
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim1);
 8003ea4:	4b02      	ldr	r3, [pc, #8]	; (8003eb0 <getRightEncoderCounter+0x10>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003eaa:	0018      	movs	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000ebc 	.word	0x20000ebc

08003eb4 <isRightEncoderCountingDown>:
int isRightEncoderCountingDown(){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
	return __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <isRightEncoderCountingDown+0x1c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	3b10      	subs	r3, #16
 8003ec4:	425a      	negs	r2, r3
 8003ec6:	4153      	adcs	r3, r2
 8003ec8:	b2db      	uxtb	r3, r3
}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000ebc 	.word	0x20000ebc

08003ed4 <startLeftPWM>:


void startLeftPWM(void){
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <startLeftPWM+0x14>)
 8003eda:	2100      	movs	r1, #0
 8003edc:	0018      	movs	r0, r3
 8003ede:	f004 fea1 	bl	8008c24 <HAL_TIM_PWM_Start>
}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20001038 	.word	0x20001038

08003eec <startLeftPWMN>:
void startLeftPWMN(void){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <startLeftPWMN+0x14>)
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f006 fc83 	bl	800a800 <HAL_TIMEx_PWMN_Start>
}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20001038 	.word	0x20001038

08003f04 <stopLeftPWM>:
void stopLeftPWM(void){
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <stopLeftPWM+0x14>)
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f004 ff6d 	bl	8008dec <HAL_TIM_PWM_Stop>
}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20001038 	.word	0x20001038

08003f1c <stopLeftPWMN>:
void stopLeftPWMN(void){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <stopLeftPWMN+0x14>)
 8003f22:	2100      	movs	r1, #0
 8003f24:	0018      	movs	r0, r3
 8003f26:	f006 fd09 	bl	800a93c <HAL_TIMEx_PWMN_Stop>
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20001038 	.word	0x20001038

08003f34 <setLeftDutyCycle>:
void setLeftDutyCycle(int dutyCycle){
 8003f34:	b5b0      	push	{r4, r5, r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	uint32_t timerPeriod = __HAL_TIM_GET_AUTORELOAD(&htim16);
 8003f3c:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <setLeftDutyCycle+0x58>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	60fb      	str	r3, [r7, #12]

	uint32_t timerCompare = (dutyCycle/100.0) * timerPeriod;
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fe fe83 	bl	8002c50 <__aeabi_i2d>
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <setLeftDutyCycle+0x5c>)
 8003f4e:	f7fd fc2b 	bl	80017a8 <__aeabi_ddiv>
 8003f52:	0002      	movs	r2, r0
 8003f54:	000b      	movs	r3, r1
 8003f56:	0014      	movs	r4, r2
 8003f58:	001d      	movs	r5, r3
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7fe fea8 	bl	8002cb0 <__aeabi_ui2d>
 8003f60:	0002      	movs	r2, r0
 8003f62:	000b      	movs	r3, r1
 8003f64:	0020      	movs	r0, r4
 8003f66:	0029      	movs	r1, r5
 8003f68:	f7fe f820 	bl	8001fac <__aeabi_dmul>
 8003f6c:	0002      	movs	r2, r0
 8003f6e:	000b      	movs	r3, r1
 8003f70:	0010      	movs	r0, r2
 8003f72:	0019      	movs	r1, r3
 8003f74:	f7fc fadc 	bl	8000530 <__aeabi_d2uiz>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,(uint32_t) timerCompare);
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <setLeftDutyCycle+0x58>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b004      	add	sp, #16
 8003f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f8c:	20001038 	.word	0x20001038
 8003f90:	40590000 	.word	0x40590000

08003f94 <getLeftEncoderCounter>:
uint32_t getLeftEncoderCounter(){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim3);
 8003f98:	4b02      	ldr	r3, [pc, #8]	; (8003fa4 <getLeftEncoderCounter+0x10>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000f08 	.word	0x20000f08

08003fa8 <isLeftEncoderCountingDown>:
int isLeftEncoderCountingDown(){
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
	return __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <isLeftEncoderCountingDown+0x1c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	3b10      	subs	r3, #16
 8003fb8:	425a      	negs	r2, r3
 8003fba:	4153      	adcs	r3, r2
 8003fbc:	b2db      	uxtb	r3, r3
}
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000f08 	.word	0x20000f08

08003fc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b08b      	sub	sp, #44	; 0x2c
 8003fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fce:	2414      	movs	r4, #20
 8003fd0:	193b      	adds	r3, r7, r4
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	2314      	movs	r3, #20
 8003fd6:	001a      	movs	r2, r3
 8003fd8:	2100      	movs	r1, #0
 8003fda:	f010 ff62 	bl	8014ea2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fde:	4b72      	ldr	r3, [pc, #456]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8003fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe2:	4b71      	ldr	r3, [pc, #452]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8003fe4:	2104      	movs	r1, #4
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8003fea:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8003fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fee:	2204      	movs	r2, #4
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8003ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffa:	4b6b      	ldr	r3, [pc, #428]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8003ffc:	2120      	movs	r1, #32
 8003ffe:	430a      	orrs	r2, r1
 8004000:	635a      	str	r2, [r3, #52]	; 0x34
 8004002:	4b69      	ldr	r3, [pc, #420]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8004004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004006:	2220      	movs	r2, #32
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800400e:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8004010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004012:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8004014:	2101      	movs	r1, #1
 8004016:	430a      	orrs	r2, r1
 8004018:	635a      	str	r2, [r3, #52]	; 0x34
 800401a:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	2201      	movs	r2, #1
 8004020:	4013      	ands	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004026:	4b60      	ldr	r3, [pc, #384]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8004028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800402a:	4b5f      	ldr	r3, [pc, #380]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 800402c:	2102      	movs	r1, #2
 800402e:	430a      	orrs	r2, r1
 8004030:	635a      	str	r2, [r3, #52]	; 0x34
 8004032:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	2202      	movs	r2, #2
 8004038:	4013      	ands	r3, r2
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800403e:	4b5a      	ldr	r3, [pc, #360]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8004040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004042:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 8004044:	2108      	movs	r1, #8
 8004046:	430a      	orrs	r2, r1
 8004048:	635a      	str	r2, [r3, #52]	; 0x34
 800404a:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <MX_GPIO_Init+0x1e0>)
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	2208      	movs	r2, #8
 8004050:	4013      	ands	r3, r2
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(color_enable_GPIO_Port, color_enable_Pin, GPIO_PIN_RESET);
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	4854      	ldr	r0, [pc, #336]	; (80041ac <MX_GPIO_Init+0x1e4>)
 800405c:	2200      	movs	r2, #0
 800405e:	0019      	movs	r1, r3
 8004060:	f003 f82c 	bl	80070bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, color_S0_Pin|color_S1_Pin|color_S2_Pin|color_S3_Pin, GPIO_PIN_RESET);
 8004064:	23a0      	movs	r3, #160	; 0xa0
 8004066:	05db      	lsls	r3, r3, #23
 8004068:	2200      	movs	r2, #0
 800406a:	212b      	movs	r1, #43	; 0x2b
 800406c:	0018      	movs	r0, r3
 800406e:	f003 f825 	bl	80070bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X_SHUT_LEFT_GPIO_Port, X_SHUT_LEFT_Pin, GPIO_PIN_RESET);
 8004072:	4b4f      	ldr	r3, [pc, #316]	; (80041b0 <MX_GPIO_Init+0x1e8>)
 8004074:	2200      	movs	r2, #0
 8004076:	2120      	movs	r1, #32
 8004078:	0018      	movs	r0, r3
 800407a:	f003 f81f 	bl	80070bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X_SHUT_RIGHT_GPIO_Port, X_SHUT_RIGHT_Pin, GPIO_PIN_RESET);
 800407e:	4b4d      	ldr	r3, [pc, #308]	; (80041b4 <MX_GPIO_Init+0x1ec>)
 8004080:	2200      	movs	r2, #0
 8004082:	2108      	movs	r1, #8
 8004084:	0018      	movs	r0, r3
 8004086:	f003 f819 	bl	80070bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800408a:	193b      	adds	r3, r7, r4
 800408c:	2280      	movs	r2, #128	; 0x80
 800408e:	0192      	lsls	r2, r2, #6
 8004090:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004092:	193b      	adds	r3, r7, r4
 8004094:	2288      	movs	r2, #136	; 0x88
 8004096:	0352      	lsls	r2, r2, #13
 8004098:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800409a:	193b      	adds	r3, r7, r4
 800409c:	2202      	movs	r2, #2
 800409e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040a0:	193b      	adds	r3, r7, r4
 80040a2:	4a42      	ldr	r2, [pc, #264]	; (80041ac <MX_GPIO_Init+0x1e4>)
 80040a4:	0019      	movs	r1, r3
 80040a6:	0010      	movs	r0, r2
 80040a8:	f002 fea4 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = color_enable_Pin;
 80040ac:	0021      	movs	r1, r4
 80040ae:	193b      	adds	r3, r7, r4
 80040b0:	2280      	movs	r2, #128	; 0x80
 80040b2:	0212      	lsls	r2, r2, #8
 80040b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040b6:	000c      	movs	r4, r1
 80040b8:	193b      	adds	r3, r7, r4
 80040ba:	2201      	movs	r2, #1
 80040bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040be:	193b      	adds	r3, r7, r4
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c4:	193b      	adds	r3, r7, r4
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(color_enable_GPIO_Port, &GPIO_InitStruct);
 80040ca:	193b      	adds	r3, r7, r4
 80040cc:	4a37      	ldr	r2, [pc, #220]	; (80041ac <MX_GPIO_Init+0x1e4>)
 80040ce:	0019      	movs	r1, r3
 80040d0:	0010      	movs	r0, r2
 80040d2:	f002 fe8f 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = color_S0_Pin|color_S1_Pin|color_S2_Pin|color_S3_Pin;
 80040d6:	193b      	adds	r3, r7, r4
 80040d8:	222b      	movs	r2, #43	; 0x2b
 80040da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040dc:	193b      	adds	r3, r7, r4
 80040de:	2201      	movs	r2, #1
 80040e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e2:	193b      	adds	r3, r7, r4
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	2200      	movs	r2, #0
 80040ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ee:	193a      	adds	r2, r7, r4
 80040f0:	23a0      	movs	r3, #160	; 0xa0
 80040f2:	05db      	lsls	r3, r3, #23
 80040f4:	0011      	movs	r1, r2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f002 fe7c 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040fc:	193b      	adds	r3, r7, r4
 80040fe:	22c0      	movs	r2, #192	; 0xc0
 8004100:	0112      	lsls	r2, r2, #4
 8004102:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004104:	193b      	adds	r3, r7, r4
 8004106:	22c4      	movs	r2, #196	; 0xc4
 8004108:	0392      	lsls	r2, r2, #14
 800410a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800410c:	193b      	adds	r3, r7, r4
 800410e:	2201      	movs	r2, #1
 8004110:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004112:	193a      	adds	r2, r7, r4
 8004114:	23a0      	movs	r3, #160	; 0xa0
 8004116:	05db      	lsls	r3, r3, #23
 8004118:	0011      	movs	r1, r2
 800411a:	0018      	movs	r0, r3
 800411c:	f002 fe6a 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = X_SHUT_LEFT_Pin;
 8004120:	193b      	adds	r3, r7, r4
 8004122:	2220      	movs	r2, #32
 8004124:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004126:	193b      	adds	r3, r7, r4
 8004128:	2201      	movs	r2, #1
 800412a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412c:	193b      	adds	r3, r7, r4
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004132:	193b      	adds	r3, r7, r4
 8004134:	2200      	movs	r2, #0
 8004136:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(X_SHUT_LEFT_GPIO_Port, &GPIO_InitStruct);
 8004138:	193b      	adds	r3, r7, r4
 800413a:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <MX_GPIO_Init+0x1e8>)
 800413c:	0019      	movs	r1, r3
 800413e:	0010      	movs	r0, r2
 8004140:	f002 fe58 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004144:	0021      	movs	r1, r4
 8004146:	187b      	adds	r3, r7, r1
 8004148:	2240      	movs	r2, #64	; 0x40
 800414a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800414c:	187b      	adds	r3, r7, r1
 800414e:	2288      	movs	r2, #136	; 0x88
 8004150:	0352      	lsls	r2, r2, #13
 8004152:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	187b      	adds	r3, r7, r1
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800415a:	000c      	movs	r4, r1
 800415c:	187b      	adds	r3, r7, r1
 800415e:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <MX_GPIO_Init+0x1e8>)
 8004160:	0019      	movs	r1, r3
 8004162:	0010      	movs	r0, r2
 8004164:	f002 fe46 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = X_SHUT_RIGHT_Pin;
 8004168:	0021      	movs	r1, r4
 800416a:	187b      	adds	r3, r7, r1
 800416c:	2208      	movs	r2, #8
 800416e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004170:	187b      	adds	r3, r7, r1
 8004172:	2201      	movs	r2, #1
 8004174:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004176:	187b      	adds	r3, r7, r1
 8004178:	2200      	movs	r2, #0
 800417a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417c:	187b      	adds	r3, r7, r1
 800417e:	2200      	movs	r2, #0
 8004180:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(X_SHUT_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8004182:	187b      	adds	r3, r7, r1
 8004184:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <MX_GPIO_Init+0x1ec>)
 8004186:	0019      	movs	r1, r3
 8004188:	0010      	movs	r0, r2
 800418a:	f002 fe33 	bl	8006df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 800418e:	2200      	movs	r2, #0
 8004190:	2103      	movs	r1, #3
 8004192:	2007      	movs	r0, #7
 8004194:	f002 fd3c 	bl	8006c10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004198:	2007      	movs	r0, #7
 800419a:	f002 fd4e 	bl	8006c3a <HAL_NVIC_EnableIRQ>

}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b00b      	add	sp, #44	; 0x2c
 80041a4:	bd90      	pop	{r4, r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	40021000 	.word	0x40021000
 80041ac:	50000800 	.word	0x50000800
 80041b0:	50000c00 	.word	0x50000c00
 80041b4:	50000400 	.word	0x50000400

080041b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <MX_I2C1_Init+0x74>)
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <MX_I2C1_Init+0x78>)
 80041c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80041c2:	4b1a      	ldr	r3, [pc, #104]	; (800422c <MX_I2C1_Init+0x74>)
 80041c4:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <MX_I2C1_Init+0x7c>)
 80041c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041c8:	4b18      	ldr	r3, [pc, #96]	; (800422c <MX_I2C1_Init+0x74>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041ce:	4b17      	ldr	r3, [pc, #92]	; (800422c <MX_I2C1_Init+0x74>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <MX_I2C1_Init+0x74>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <MX_I2C1_Init+0x74>)
 80041dc:	2200      	movs	r2, #0
 80041de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <MX_I2C1_Init+0x74>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <MX_I2C1_Init+0x74>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <MX_I2C1_Init+0x74>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <MX_I2C1_Init+0x74>)
 80041f4:	0018      	movs	r0, r3
 80041f6:	f002 ffa9 	bl	800714c <HAL_I2C_Init>
 80041fa:	1e03      	subs	r3, r0, #0
 80041fc:	d001      	beq.n	8004202 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80041fe:	f000 fc59 	bl	8004ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <MX_I2C1_Init+0x74>)
 8004204:	2100      	movs	r1, #0
 8004206:	0018      	movs	r0, r3
 8004208:	f003 fcd6 	bl	8007bb8 <HAL_I2CEx_ConfigAnalogFilter>
 800420c:	1e03      	subs	r3, r0, #0
 800420e:	d001      	beq.n	8004214 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004210:	f000 fc50 	bl	8004ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <MX_I2C1_Init+0x74>)
 8004216:	2100      	movs	r1, #0
 8004218:	0018      	movs	r0, r3
 800421a:	f003 fd19 	bl	8007c50 <HAL_I2CEx_ConfigDigitalFilter>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d001      	beq.n	8004226 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004222:	f000 fc47 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	2000062c 	.word	0x2000062c
 8004230:	40005400 	.word	0x40005400
 8004234:	10707dbc 	.word	0x10707dbc

08004238 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004238:	b590      	push	{r4, r7, lr}
 800423a:	b091      	sub	sp, #68	; 0x44
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	232c      	movs	r3, #44	; 0x2c
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	0018      	movs	r0, r3
 8004246:	2314      	movs	r3, #20
 8004248:	001a      	movs	r2, r3
 800424a:	2100      	movs	r1, #0
 800424c:	f010 fe29 	bl	8014ea2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004250:	2410      	movs	r4, #16
 8004252:	193b      	adds	r3, r7, r4
 8004254:	0018      	movs	r0, r3
 8004256:	231c      	movs	r3, #28
 8004258:	001a      	movs	r2, r3
 800425a:	2100      	movs	r1, #0
 800425c:	f010 fe21 	bl	8014ea2 <memset>
  if(i2cHandle->Instance==I2C1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <HAL_I2C_MspInit+0xb8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d13e      	bne.n	80042e8 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800426a:	193b      	adds	r3, r7, r4
 800426c:	2220      	movs	r2, #32
 800426e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004270:	193b      	adds	r3, r7, r4
 8004272:	2200      	movs	r2, #0
 8004274:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004276:	193b      	adds	r3, r7, r4
 8004278:	0018      	movs	r0, r3
 800427a:	f004 fa63 	bl	8008744 <HAL_RCCEx_PeriphCLKConfig>
 800427e:	1e03      	subs	r3, r0, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004282:	f000 fc17 	bl	8004ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004286:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_I2C_MspInit+0xbc>)
 8004288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428a:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <HAL_I2C_MspInit+0xbc>)
 800428c:	2102      	movs	r1, #2
 800428e:	430a      	orrs	r2, r1
 8004290:	635a      	str	r2, [r3, #52]	; 0x34
 8004292:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <HAL_I2C_MspInit+0xbc>)
 8004294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004296:	2202      	movs	r2, #2
 8004298:	4013      	ands	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	187b      	adds	r3, r7, r1
 80042a2:	22c0      	movs	r2, #192	; 0xc0
 80042a4:	0092      	lsls	r2, r2, #2
 80042a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042a8:	187b      	adds	r3, r7, r1
 80042aa:	2212      	movs	r2, #18
 80042ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ae:	187b      	adds	r3, r7, r1
 80042b0:	2200      	movs	r2, #0
 80042b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b4:	187b      	adds	r3, r7, r1
 80042b6:	2200      	movs	r2, #0
 80042b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80042ba:	187b      	adds	r3, r7, r1
 80042bc:	2206      	movs	r2, #6
 80042be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c0:	187b      	adds	r3, r7, r1
 80042c2:	4a0d      	ldr	r2, [pc, #52]	; (80042f8 <HAL_I2C_MspInit+0xc0>)
 80042c4:	0019      	movs	r1, r3
 80042c6:	0010      	movs	r0, r2
 80042c8:	f002 fd94 	bl	8006df4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_I2C_MspInit+0xbc>)
 80042ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <HAL_I2C_MspInit+0xbc>)
 80042d2:	2180      	movs	r1, #128	; 0x80
 80042d4:	0389      	lsls	r1, r1, #14
 80042d6:	430a      	orrs	r2, r1
 80042d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_I2C_MspInit+0xbc>)
 80042dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	039b      	lsls	r3, r3, #14
 80042e2:	4013      	ands	r3, r2
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b011      	add	sp, #68	; 0x44
 80042ee:	bd90      	pop	{r4, r7, pc}
 80042f0:	40005400 	.word	0x40005400
 80042f4:	40021000 	.word	0x40021000
 80042f8:	50000400 	.word	0x50000400

080042fc <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004304:	2301      	movs	r3, #1
 8004306:	425b      	negs	r3, r3
 8004308:	1d39      	adds	r1, r7, #4
 800430a:	4808      	ldr	r0, [pc, #32]	; (800432c <__io_putchar+0x30>)
 800430c:	2201      	movs	r2, #1
 800430e:	f006 fd6f 	bl	800adf0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004312:	2301      	movs	r3, #1
 8004314:	425b      	negs	r3, r3
 8004316:	1d39      	adds	r1, r7, #4
 8004318:	4805      	ldr	r0, [pc, #20]	; (8004330 <__io_putchar+0x34>)
 800431a:	2201      	movs	r2, #1
 800431c:	f006 fd68 	bl	800adf0 <HAL_UART_Transmit>
	return ch;
 8004320:	687b      	ldr	r3, [r7, #4]
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b002      	add	sp, #8
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	200010d4 	.word	0x200010d4
 8004330:	200011fc 	.word	0x200011fc

08004334 <__io_getchar>:

int __io_getchar(void){
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800433a:	1dfb      	adds	r3, r7, #7
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]

	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <__io_getchar+0x3c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2208      	movs	r2, #8
 8004346:	621a      	str	r2, [r3, #32]

	/* Wait for reception of a character on the USART RX line and echo this
	 * character on console */
	HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004348:	2301      	movs	r3, #1
 800434a:	425b      	negs	r3, r3
 800434c:	1df9      	adds	r1, r7, #7
 800434e:	4808      	ldr	r0, [pc, #32]	; (8004370 <__io_getchar+0x3c>)
 8004350:	2201      	movs	r2, #1
 8004352:	f006 fde9 	bl	800af28 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004356:	2301      	movs	r3, #1
 8004358:	425b      	negs	r3, r3
 800435a:	1df9      	adds	r1, r7, #7
 800435c:	4804      	ldr	r0, [pc, #16]	; (8004370 <__io_getchar+0x3c>)
 800435e:	2201      	movs	r2, #1
 8004360:	f006 fd46 	bl	800adf0 <HAL_UART_Transmit>
	return ch;
 8004364:	1dfb      	adds	r3, r7, #7
 8004366:	781b      	ldrb	r3, [r3, #0]
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b002      	add	sp, #8
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200010d4 	.word	0x200010d4

08004374 <tofTask>:

static void tofTask(void * unused){
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	while(1){
		robot.leftDist = vl53l0x_PerformRangingMeasurement(&rightTofDev,&rightTofStruct);
 800437c:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <tofTask+0x38>)
 800437e:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <tofTask+0x3c>)
 8004380:	0011      	movs	r1, r2
 8004382:	0018      	movs	r0, r3
 8004384:	f7fe ff60 	bl	8003248 <vl53l0x_PerformRangingMeasurement>
 8004388:	0003      	movs	r3, r0
 800438a:	001a      	movs	r2, r3
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <tofTask+0x40>)
 800438e:	669a      	str	r2, [r3, #104]	; 0x68
		robot.rightDist = vl53l0x_PerformRangingMeasurement(&leftTofDev,&leftTofStruct);
 8004390:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <tofTask+0x44>)
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <tofTask+0x48>)
 8004394:	0011      	movs	r1, r2
 8004396:	0018      	movs	r0, r3
 8004398:	f7fe ff56 	bl	8003248 <vl53l0x_PerformRangingMeasurement>
 800439c:	0003      	movs	r3, r0
 800439e:	001a      	movs	r2, r3
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <tofTask+0x40>)
 80043a2:	66da      	str	r2, [r3, #108]	; 0x6c

		//printf("%d\t %d\r\n", vl53l0x_PerformRangingMeasurement(&rightTofDev,&rightTofStruct), vl53l0x_PerformRangingMeasurement(&leftTofDev,&leftTofStruct));
		vTaskDelay(5);
 80043a4:	2005      	movs	r0, #5
 80043a6:	f00f fab9 	bl	801391c <vTaskDelay>
		robot.leftDist = vl53l0x_PerformRangingMeasurement(&rightTofDev,&rightTofStruct);
 80043aa:	e7e7      	b.n	800437c <tofTask+0x8>
 80043ac:	200009c0 	.word	0x200009c0
 80043b0:	200009dc 	.word	0x200009dc
 80043b4:	20000914 	.word	0x20000914
 80043b8:	20000b6c 	.word	0x20000b6c
 80043bc:	20000b88 	.word	0x20000b88

080043c0 <syncTask>:
	}
}

static void syncTask(void * unused){
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

	xl320_init(&xl320, 1, BR_1M);
 80043c8:	4ba4      	ldr	r3, [pc, #656]	; (800465c <syncTask+0x29c>)
 80043ca:	2203      	movs	r2, #3
 80043cc:	2101      	movs	r1, #1
 80043ce:	0018      	movs	r0, r3
 80043d0:	f002 f8dc 	bl	800658c <xl320_init>
	xl320_setSpeed(&xl320, 20);
 80043d4:	4aa2      	ldr	r2, [pc, #648]	; (8004660 <syncTask+0x2a0>)
 80043d6:	4ba1      	ldr	r3, [pc, #644]	; (800465c <syncTask+0x29c>)
 80043d8:	1c11      	adds	r1, r2, #0
 80043da:	0018      	movs	r0, r3
 80043dc:	f002 fa66 	bl	80068ac <xl320_setSpeed>
	xl320_torqueEnable(&xl320);
 80043e0:	4b9e      	ldr	r3, [pc, #632]	; (800465c <syncTask+0x29c>)
 80043e2:	0018      	movs	r0, r3
 80043e4:	f002 faa4 	bl	8006930 <xl320_torqueEnable>
	xl320_setGoalPosition(&xl320, 69);
 80043e8:	4a9e      	ldr	r2, [pc, #632]	; (8004664 <syncTask+0x2a4>)
 80043ea:	4b9c      	ldr	r3, [pc, #624]	; (800465c <syncTask+0x29c>)
 80043ec:	1c11      	adds	r1, r2, #0
 80043ee:	0018      	movs	r0, r3
 80043f0:	f002 fa24 	bl	800683c <xl320_setGoalPosition>

	while(robot.waitForStart){
 80043f4:	e008      	b.n	8004408 <syncTask+0x48>
		robot_stop(&robot);
 80043f6:	4b9c      	ldr	r3, [pc, #624]	; (8004668 <syncTask+0x2a8>)
 80043f8:	0018      	movs	r0, r3
 80043fa:	f000 fcc6 	bl	8004d8a <robot_stop>
		vTaskDelay(2000);
 80043fe:	23fa      	movs	r3, #250	; 0xfa
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	0018      	movs	r0, r3
 8004404:	f00f fa8a 	bl	801391c <vTaskDelay>
	while(robot.waitForStart){
 8004408:	4b97      	ldr	r3, [pc, #604]	; (8004668 <syncTask+0x2a8>)
 800440a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f2      	bne.n	80043f6 <syncTask+0x36>
	}


	while(1){

		switch (robot.state){
 8004410:	4b95      	ldr	r3, [pc, #596]	; (8004668 <syncTask+0x2a8>)
 8004412:	2270      	movs	r2, #112	; 0x70
 8004414:	5c9b      	ldrb	r3, [r3, r2]
 8004416:	2b05      	cmp	r3, #5
 8004418:	d900      	bls.n	800441c <syncTask+0x5c>
 800441a:	e110      	b.n	800463e <syncTask+0x27e>
 800441c:	009a      	lsls	r2, r3, #2
 800441e:	4b93      	ldr	r3, [pc, #588]	; (800466c <syncTask+0x2ac>)
 8004420:	18d3      	adds	r3, r2, r3
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	469f      	mov	pc, r3
				rightDist = vl53l0x_PerformRangingMeasurement(&leftTofDev,&leftTofStruct);
			}

			 */

			zxbm_run(robot.leftMotor->motor, zxbm_forward);
 8004426:	4b90      	ldr	r3, [pc, #576]	; (8004668 <syncTask+0x2a8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2100      	movs	r1, #0
 800442e:	0018      	movs	r0, r3
 8004430:	f002 faae 	bl	8006990 <zxbm_run>
			zxbm_run(robot.rightMotor->motor, zxbm_forward);
 8004434:	4b8c      	ldr	r3, [pc, #560]	; (8004668 <syncTask+0x2a8>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2100      	movs	r1, #0
 800443c:	0018      	movs	r0, r3
 800443e:	f002 faa7 	bl	8006990 <zxbm_run>

			robot.leftSpeedCommand = 8;
 8004442:	4b89      	ldr	r3, [pc, #548]	; (8004668 <syncTask+0x2a8>)
 8004444:	2208      	movs	r2, #8
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
			robot.rightSpeedCommand = 8;
 8004448:	4b87      	ldr	r3, [pc, #540]	; (8004668 <syncTask+0x2a8>)
 800444a:	2208      	movs	r2, #8
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
			if( robot.leftDist < 1200 || robot.rightDist < 1200){
 800444e:	4b86      	ldr	r3, [pc, #536]	; (8004668 <syncTask+0x2a8>)
 8004450:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004452:	2396      	movs	r3, #150	; 0x96
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	429a      	cmp	r2, r3
 8004458:	db06      	blt.n	8004468 <syncTask+0xa8>
 800445a:	4b83      	ldr	r3, [pc, #524]	; (8004668 <syncTask+0x2a8>)
 800445c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800445e:	2396      	movs	r3, #150	; 0x96
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	429a      	cmp	r2, r3
 8004464:	db00      	blt.n	8004468 <syncTask+0xa8>
 8004466:	e0ef      	b.n	8004648 <syncTask+0x288>
				//robot_stop(&robot);
				robot.state = targetLocked;
 8004468:	4b7f      	ldr	r3, [pc, #508]	; (8004668 <syncTask+0x2a8>)
 800446a:	2270      	movs	r2, #112	; 0x70
 800446c:	2100      	movs	r1, #0
 800446e:	5499      	strb	r1, [r3, r2]
			}
			break;
 8004470:	e0ea      	b.n	8004648 <syncTask+0x288>

		case targetLocked :
			if(robot.leftDist > 230 && robot.rightDist > 230 && robot.leftDist < 1200 && robot.rightDist < 1200){
 8004472:	4b7d      	ldr	r3, [pc, #500]	; (8004668 <syncTask+0x2a8>)
 8004474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004476:	2be6      	cmp	r3, #230	; 0xe6
 8004478:	dd4e      	ble.n	8004518 <syncTask+0x158>
 800447a:	4b7b      	ldr	r3, [pc, #492]	; (8004668 <syncTask+0x2a8>)
 800447c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447e:	2be6      	cmp	r3, #230	; 0xe6
 8004480:	dd4a      	ble.n	8004518 <syncTask+0x158>
 8004482:	4b79      	ldr	r3, [pc, #484]	; (8004668 <syncTask+0x2a8>)
 8004484:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004486:	2396      	movs	r3, #150	; 0x96
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	429a      	cmp	r2, r3
 800448c:	da44      	bge.n	8004518 <syncTask+0x158>
 800448e:	4b76      	ldr	r3, [pc, #472]	; (8004668 <syncTask+0x2a8>)
 8004490:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004492:	2396      	movs	r3, #150	; 0x96
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	429a      	cmp	r2, r3
 8004498:	da3e      	bge.n	8004518 <syncTask+0x158>
				if(robot.leftDist - robot.rightDist > 20){
 800449a:	4b73      	ldr	r3, [pc, #460]	; (8004668 <syncTask+0x2a8>)
 800449c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800449e:	4b72      	ldr	r3, [pc, #456]	; (8004668 <syncTask+0x2a8>)
 80044a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b14      	cmp	r3, #20
 80044a6:	dd14      	ble.n	80044d2 <syncTask+0x112>
					zxbm_run(robot.leftMotor->motor, zxbm_forward);
 80044a8:	4b6f      	ldr	r3, [pc, #444]	; (8004668 <syncTask+0x2a8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2100      	movs	r1, #0
 80044b0:	0018      	movs	r0, r3
 80044b2:	f002 fa6d 	bl	8006990 <zxbm_run>
					zxbm_run(robot.rightMotor->motor, zxbm_forward);
 80044b6:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <syncTask+0x2a8>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2100      	movs	r1, #0
 80044be:	0018      	movs	r0, r3
 80044c0:	f002 fa66 	bl	8006990 <zxbm_run>

					robot.leftSpeedCommand = 5;
 80044c4:	4b68      	ldr	r3, [pc, #416]	; (8004668 <syncTask+0x2a8>)
 80044c6:	2205      	movs	r2, #5
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
					robot.rightSpeedCommand = 5+3;
 80044ca:	4b67      	ldr	r3, [pc, #412]	; (8004668 <syncTask+0x2a8>)
 80044cc:	2208      	movs	r2, #8
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44
				if(robot.leftDist - robot.rightDist > 20){
 80044d0:	e034      	b.n	800453c <syncTask+0x17c>
				}else if(robot.leftDist - robot.rightDist < -20){
 80044d2:	4b65      	ldr	r3, [pc, #404]	; (8004668 <syncTask+0x2a8>)
 80044d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044d6:	4b64      	ldr	r3, [pc, #400]	; (8004668 <syncTask+0x2a8>)
 80044d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	3314      	adds	r3, #20
 80044de:	da14      	bge.n	800450a <syncTask+0x14a>
					zxbm_run(robot.leftMotor->motor, zxbm_forward);
 80044e0:	4b61      	ldr	r3, [pc, #388]	; (8004668 <syncTask+0x2a8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2100      	movs	r1, #0
 80044e8:	0018      	movs	r0, r3
 80044ea:	f002 fa51 	bl	8006990 <zxbm_run>
					zxbm_run(robot.rightMotor->motor, zxbm_forward);
 80044ee:	4b5e      	ldr	r3, [pc, #376]	; (8004668 <syncTask+0x2a8>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2100      	movs	r1, #0
 80044f6:	0018      	movs	r0, r3
 80044f8:	f002 fa4a 	bl	8006990 <zxbm_run>

					robot.leftSpeedCommand = 5+3;
 80044fc:	4b5a      	ldr	r3, [pc, #360]	; (8004668 <syncTask+0x2a8>)
 80044fe:	2208      	movs	r2, #8
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
					robot.rightSpeedCommand = 5;
 8004502:	4b59      	ldr	r3, [pc, #356]	; (8004668 <syncTask+0x2a8>)
 8004504:	2205      	movs	r2, #5
 8004506:	645a      	str	r2, [r3, #68]	; 0x44
				if(robot.leftDist - robot.rightDist > 20){
 8004508:	e018      	b.n	800453c <syncTask+0x17c>
				}else{

					robot.leftSpeedCommand = 5;
 800450a:	4b57      	ldr	r3, [pc, #348]	; (8004668 <syncTask+0x2a8>)
 800450c:	2205      	movs	r2, #5
 800450e:	641a      	str	r2, [r3, #64]	; 0x40
					robot.rightSpeedCommand = 5;
 8004510:	4b55      	ldr	r3, [pc, #340]	; (8004668 <syncTask+0x2a8>)
 8004512:	2205      	movs	r2, #5
 8004514:	645a      	str	r2, [r3, #68]	; 0x44
				if(robot.leftDist - robot.rightDist > 20){
 8004516:	e011      	b.n	800453c <syncTask+0x17c>
				}
			}else if(robot.leftDist < 250 && robot.rightDist < 250){
 8004518:	4b53      	ldr	r3, [pc, #332]	; (8004668 <syncTask+0x2a8>)
 800451a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451c:	2bf9      	cmp	r3, #249	; 0xf9
 800451e:	dc08      	bgt.n	8004532 <syncTask+0x172>
 8004520:	4b51      	ldr	r3, [pc, #324]	; (8004668 <syncTask+0x2a8>)
 8004522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004524:	2bf9      	cmp	r3, #249	; 0xf9
 8004526:	dc04      	bgt.n	8004532 <syncTask+0x172>
				robot.state = capture;
 8004528:	4b4f      	ldr	r3, [pc, #316]	; (8004668 <syncTask+0x2a8>)
 800452a:	2270      	movs	r2, #112	; 0x70
 800452c:	2101      	movs	r1, #1
 800452e:	5499      	strb	r1, [r3, r2]
 8004530:	e004      	b.n	800453c <syncTask+0x17c>
			}else{
				robot.state = search;
 8004532:	4b4d      	ldr	r3, [pc, #308]	; (8004668 <syncTask+0x2a8>)
 8004534:	2270      	movs	r2, #112	; 0x70
 8004536:	2102      	movs	r1, #2
 8004538:	5499      	strb	r1, [r3, r2]
			}
			break;
 800453a:	e086      	b.n	800464a <syncTask+0x28a>
 800453c:	e085      	b.n	800464a <syncTask+0x28a>

		case capture :

			xl320_setGoalPosition(&xl320, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	4b46      	ldr	r3, [pc, #280]	; (800465c <syncTask+0x29c>)
 8004542:	1c11      	adds	r1, r2, #0
 8004544:	0018      	movs	r0, r3
 8004546:	f002 f979 	bl	800683c <xl320_setGoalPosition>
			if(robot.leftDist > 50 && robot.rightDist > 50){
 800454a:	4b47      	ldr	r3, [pc, #284]	; (8004668 <syncTask+0x2a8>)
 800454c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454e:	2b32      	cmp	r3, #50	; 0x32
 8004550:	dd42      	ble.n	80045d8 <syncTask+0x218>
 8004552:	4b45      	ldr	r3, [pc, #276]	; (8004668 <syncTask+0x2a8>)
 8004554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004556:	2b32      	cmp	r3, #50	; 0x32
 8004558:	dd3e      	ble.n	80045d8 <syncTask+0x218>
				if(robot.leftDist - robot.rightDist > 20){
 800455a:	4b43      	ldr	r3, [pc, #268]	; (8004668 <syncTask+0x2a8>)
 800455c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800455e:	4b42      	ldr	r3, [pc, #264]	; (8004668 <syncTask+0x2a8>)
 8004560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b14      	cmp	r3, #20
 8004566:	dd14      	ble.n	8004592 <syncTask+0x1d2>
					zxbm_run(robot.leftMotor->motor, zxbm_forward);
 8004568:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <syncTask+0x2a8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2100      	movs	r1, #0
 8004570:	0018      	movs	r0, r3
 8004572:	f002 fa0d 	bl	8006990 <zxbm_run>
					zxbm_run(robot.rightMotor->motor, zxbm_forward);
 8004576:	4b3c      	ldr	r3, [pc, #240]	; (8004668 <syncTask+0x2a8>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2100      	movs	r1, #0
 800457e:	0018      	movs	r0, r3
 8004580:	f002 fa06 	bl	8006990 <zxbm_run>

					robot.leftSpeedCommand = 3;
 8004584:	4b38      	ldr	r3, [pc, #224]	; (8004668 <syncTask+0x2a8>)
 8004586:	2203      	movs	r2, #3
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
					robot.rightSpeedCommand = 3+2;
 800458a:	4b37      	ldr	r3, [pc, #220]	; (8004668 <syncTask+0x2a8>)
 800458c:	2205      	movs	r2, #5
 800458e:	645a      	str	r2, [r3, #68]	; 0x44
				if(robot.leftDist - robot.rightDist > 20){
 8004590:	e027      	b.n	80045e2 <syncTask+0x222>
				}else if(robot.leftDist - robot.rightDist < -20){
 8004592:	4b35      	ldr	r3, [pc, #212]	; (8004668 <syncTask+0x2a8>)
 8004594:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004596:	4b34      	ldr	r3, [pc, #208]	; (8004668 <syncTask+0x2a8>)
 8004598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	3314      	adds	r3, #20
 800459e:	da14      	bge.n	80045ca <syncTask+0x20a>
					zxbm_run(robot.leftMotor->motor, zxbm_forward);
 80045a0:	4b31      	ldr	r3, [pc, #196]	; (8004668 <syncTask+0x2a8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2100      	movs	r1, #0
 80045a8:	0018      	movs	r0, r3
 80045aa:	f002 f9f1 	bl	8006990 <zxbm_run>
					zxbm_run(robot.rightMotor->motor, zxbm_forward);
 80045ae:	4b2e      	ldr	r3, [pc, #184]	; (8004668 <syncTask+0x2a8>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2100      	movs	r1, #0
 80045b6:	0018      	movs	r0, r3
 80045b8:	f002 f9ea 	bl	8006990 <zxbm_run>

					robot.leftSpeedCommand = 3+2;
 80045bc:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <syncTask+0x2a8>)
 80045be:	2205      	movs	r2, #5
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
					robot.rightSpeedCommand = 3;
 80045c2:	4b29      	ldr	r3, [pc, #164]	; (8004668 <syncTask+0x2a8>)
 80045c4:	2203      	movs	r2, #3
 80045c6:	645a      	str	r2, [r3, #68]	; 0x44
				if(robot.leftDist - robot.rightDist > 20){
 80045c8:	e00b      	b.n	80045e2 <syncTask+0x222>
				}else{

					robot.leftSpeedCommand = 3;
 80045ca:	4b27      	ldr	r3, [pc, #156]	; (8004668 <syncTask+0x2a8>)
 80045cc:	2203      	movs	r2, #3
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40
					robot.rightSpeedCommand = 3;
 80045d0:	4b25      	ldr	r3, [pc, #148]	; (8004668 <syncTask+0x2a8>)
 80045d2:	2203      	movs	r2, #3
 80045d4:	645a      	str	r2, [r3, #68]	; 0x44
				if(robot.leftDist - robot.rightDist > 20){
 80045d6:	e004      	b.n	80045e2 <syncTask+0x222>
				}
			}else{
				robot.state = loaded;
 80045d8:	4b23      	ldr	r3, [pc, #140]	; (8004668 <syncTask+0x2a8>)
 80045da:	2270      	movs	r2, #112	; 0x70
 80045dc:	2103      	movs	r1, #3
 80045de:	5499      	strb	r1, [r3, r2]
			}
			break;
 80045e0:	e033      	b.n	800464a <syncTask+0x28a>
 80045e2:	e032      	b.n	800464a <syncTask+0x28a>
		case loaded :
			xl320_setGoalPosition(&xl320, 69);
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <syncTask+0x2a4>)
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <syncTask+0x29c>)
 80045e8:	1c11      	adds	r1, r2, #0
 80045ea:	0018      	movs	r0, r3
 80045ec:	f002 f926 	bl	800683c <xl320_setGoalPosition>
			vTaskDelay(500);
 80045f0:	23fa      	movs	r3, #250	; 0xfa
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	0018      	movs	r0, r3
 80045f6:	f00f f991 	bl	801391c <vTaskDelay>
			robot.state = color;
 80045fa:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <syncTask+0x2a8>)
 80045fc:	2270      	movs	r2, #112	; 0x70
 80045fe:	2104      	movs	r1, #4
 8004600:	5499      	strb	r1, [r3, r2]
		case color :
			//colorSetPhotodiodeType(&color_sensor1, GREEN);
			//colorEnable(&color_sensor1);
			//vTaskDelay(1);
			//colorDisable(&color_sensor1);
			robot.state = locked;
 8004602:	4b19      	ldr	r3, [pc, #100]	; (8004668 <syncTask+0x2a8>)
 8004604:	2270      	movs	r2, #112	; 0x70
 8004606:	2105      	movs	r1, #5
 8004608:	5499      	strb	r1, [r3, r2]
			break;
 800460a:	e01e      	b.n	800464a <syncTask+0x28a>
		case locked :
			while(robot.leftDist < 50 && robot.rightDist < 50){
				robot_stop(&robot);
 800460c:	4b16      	ldr	r3, [pc, #88]	; (8004668 <syncTask+0x2a8>)
 800460e:	0018      	movs	r0, r3
 8004610:	f000 fbbb 	bl	8004d8a <robot_stop>
				//robot.leftDist = vl53l0x_PerformRangingMeasurement(&rightTofDev,&rightTofStruct);
				//robot.rightDist = vl53l0x_PerformRangingMeasurement(&leftTofDev,&leftTofStruct);
				vTaskDelay(20);
 8004614:	2014      	movs	r0, #20
 8004616:	f00f f981 	bl	801391c <vTaskDelay>
			while(robot.leftDist < 50 && robot.rightDist < 50){
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <syncTask+0x2a8>)
 800461c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800461e:	2b31      	cmp	r3, #49	; 0x31
 8004620:	dc03      	bgt.n	800462a <syncTask+0x26a>
 8004622:	4b11      	ldr	r3, [pc, #68]	; (8004668 <syncTask+0x2a8>)
 8004624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004626:	2b31      	cmp	r3, #49	; 0x31
 8004628:	ddf0      	ble.n	800460c <syncTask+0x24c>
			}
			vTaskDelay(1000);
 800462a:	23fa      	movs	r3, #250	; 0xfa
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	0018      	movs	r0, r3
 8004630:	f00f f974 	bl	801391c <vTaskDelay>
			robot.state = search;
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <syncTask+0x2a8>)
 8004636:	2270      	movs	r2, #112	; 0x70
 8004638:	2102      	movs	r1, #2
 800463a:	5499      	strb	r1, [r3, r2]
			break;
 800463c:	e005      	b.n	800464a <syncTask+0x28a>
		default :
			robot_stop(&robot);
 800463e:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <syncTask+0x2a8>)
 8004640:	0018      	movs	r0, r3
 8004642:	f000 fba2 	bl	8004d8a <robot_stop>
 8004646:	e000      	b.n	800464a <syncTask+0x28a>
			break;
 8004648:	46c0      	nop			; (mov r8, r8)
		}
		//robot_stop(&robot);
		robot_borderAvoidance(&robot);
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <syncTask+0x2a8>)
 800464c:	0018      	movs	r0, r3
 800464e:	f000 fbad 	bl	8004dac <robot_borderAvoidance>

		//printf("%d\r\n", robot.state);
		vTaskDelay(5);
 8004652:	2005      	movs	r0, #5
 8004654:	f00f f962 	bl	801391c <vTaskDelay>
		switch (robot.state){
 8004658:	e6da      	b.n	8004410 <syncTask+0x50>
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	20000988 	.word	0x20000988
 8004660:	41a00000 	.word	0x41a00000
 8004664:	428a0000 	.word	0x428a0000
 8004668:	20000914 	.word	0x20000914
 800466c:	0801b698 	.word	0x0801b698

08004670 <HAL_GPIO_EXTI_Rising_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	0002      	movs	r2, r0
 8004678:	1dbb      	adds	r3, r7, #6
 800467a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_10){
 800467c:	1dbb      	adds	r3, r7, #6
 800467e:	881a      	ldrh	r2, [r3, #0]
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	429a      	cmp	r2, r3
 8004686:	d107      	bne.n	8004698 <HAL_GPIO_EXTI_Rising_Callback+0x28>
		robot.leftBorderDetectedFlag = 1;
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 800468a:	2201      	movs	r2, #1
 800468c:	655a      	str	r2, [r3, #84]	; 0x54
		robot_stop(&robot);
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 8004690:	0018      	movs	r0, r3
 8004692:	f000 fb7a 	bl	8004d8a <robot_stop>
		robot.rightBorderDetectedFlag = 1;
		robot_stop(&robot);
	}else if(GPIO_Pin == GPIO_PIN_13){
		robot.waitForStart = 0;
	}
}
 8004696:	e016      	b.n	80046c6 <HAL_GPIO_EXTI_Rising_Callback+0x56>
	}else if(GPIO_Pin == GPIO_PIN_11){
 8004698:	1dbb      	adds	r3, r7, #6
 800469a:	881a      	ldrh	r2, [r3, #0]
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d107      	bne.n	80046b4 <HAL_GPIO_EXTI_Rising_Callback+0x44>
		robot.rightBorderDetectedFlag = 1;
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	659a      	str	r2, [r3, #88]	; 0x58
		robot_stop(&robot);
 80046aa:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 80046ac:	0018      	movs	r0, r3
 80046ae:	f000 fb6c 	bl	8004d8a <robot_stop>
}
 80046b2:	e008      	b.n	80046c6 <HAL_GPIO_EXTI_Rising_Callback+0x56>
	}else if(GPIO_Pin == GPIO_PIN_13){
 80046b4:	1dbb      	adds	r3, r7, #6
 80046b6:	881a      	ldrh	r2, [r3, #0]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	019b      	lsls	r3, r3, #6
 80046bc:	429a      	cmp	r2, r3
 80046be:	d102      	bne.n	80046c6 <HAL_GPIO_EXTI_Rising_Callback+0x56>
		robot.waitForStart = 0;
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b002      	add	sp, #8
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	20000914 	.word	0x20000914

080046d4 <HAL_GPIO_EXTI_Falling_Callback>:



void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	0002      	movs	r2, r0
 80046dc:	1dbb      	adds	r3, r7, #6
 80046de:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_10){
 80046e0:	1dbb      	adds	r3, r7, #6
 80046e2:	881a      	ldrh	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d107      	bne.n	80046fc <HAL_GPIO_EXTI_Falling_Callback+0x28>
		robot.leftBorderDetectedFlag = 0;
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
		robot_stop(&robot);
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80046f4:	0018      	movs	r0, r3
 80046f6:	f000 fb48 	bl	8004d8a <robot_stop>
		robot.rightBorderDetectedFlag = 0;
		robot_stop(&robot);
	}


}
 80046fa:	e00c      	b.n	8004716 <HAL_GPIO_EXTI_Falling_Callback+0x42>
	}else if(GPIO_Pin == GPIO_PIN_11){
 80046fc:	1dbb      	adds	r3, r7, #6
 80046fe:	881a      	ldrh	r2, [r3, #0]
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	429a      	cmp	r2, r3
 8004706:	d106      	bne.n	8004716 <HAL_GPIO_EXTI_Falling_Callback+0x42>
		robot.rightBorderDetectedFlag = 0;
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 800470a:	2200      	movs	r2, #0
 800470c:	659a      	str	r2, [r3, #88]	; 0x58
		robot_stop(&robot);
 800470e:	4b04      	ldr	r3, [pc, #16]	; (8004720 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8004710:	0018      	movs	r0, r3
 8004712:	f000 fb3a 	bl	8004d8a <robot_stop>
}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	b002      	add	sp, #8
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	20000914 	.word	0x20000914

08004724 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800472a:	f002 f989 	bl	8006a40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800472e:	f000 f95b 	bl	80049e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004732:	f7ff fc49 	bl	8003fc8 <MX_GPIO_Init>
	MX_TIM1_Init();
 8004736:	f001 f83f 	bl	80057b8 <MX_TIM1_Init>
	MX_TIM3_Init();
 800473a:	f001 f8a7 	bl	800588c <MX_TIM3_Init>
	MX_TIM15_Init();
 800473e:	f001 f991 	bl	8005a64 <MX_TIM15_Init>
	MX_TIM16_Init();
 8004742:	f001 fa47 	bl	8005bd4 <MX_TIM16_Init>
	MX_USART1_UART_Init();
 8004746:	f001 fd5b 	bl	8006200 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800474a:	f001 fdab 	bl	80062a4 <MX_USART2_UART_Init>
	MX_TIM7_Init();
 800474e:	f001 f901 	bl	8005954 <MX_TIM7_Init>
	MX_TIM17_Init();
 8004752:	f001 fac7 	bl	8005ce4 <MX_TIM17_Init>
	MX_I2C1_Init();
 8004756:	f7ff fd2f 	bl	80041b8 <MX_I2C1_Init>
	MX_USART3_UART_Init();
 800475a:	f001 fdf1 	bl	8006340 <MX_USART3_UART_Init>
	MX_TIM14_Init();
 800475e:	f001 f935 	bl	80059cc <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	xl320.serial.transmit = uart_half_duplex_transmit;
 8004762:	4b75      	ldr	r3, [pc, #468]	; (8004938 <main+0x214>)
 8004764:	4a75      	ldr	r2, [pc, #468]	; (800493c <main+0x218>)
 8004766:	605a      	str	r2, [r3, #4]
	xl320.serial.receive  = uart_half_duplex_receive;
 8004768:	4b73      	ldr	r3, [pc, #460]	; (8004938 <main+0x214>)
 800476a:	4a75      	ldr	r2, [pc, #468]	; (8004940 <main+0x21c>)
 800476c:	609a      	str	r2, [r3, #8]
	/* CONTROL LOOP INIT BEGIN */
	g_rightControlLoop.encoder.getCounter = getRightEncoderCounter;
 800476e:	4b75      	ldr	r3, [pc, #468]	; (8004944 <main+0x220>)
 8004770:	4a75      	ldr	r2, [pc, #468]	; (8004948 <main+0x224>)
 8004772:	605a      	str	r2, [r3, #4]
	g_rightControlLoop.encoder.isCountingDown = isRightEncoderCountingDown;
 8004774:	4b73      	ldr	r3, [pc, #460]	; (8004944 <main+0x220>)
 8004776:	4a75      	ldr	r2, [pc, #468]	; (800494c <main+0x228>)
 8004778:	609a      	str	r2, [r3, #8]

	g_leftControlLoop.encoder.getCounter = getLeftEncoderCounter;
 800477a:	4b75      	ldr	r3, [pc, #468]	; (8004950 <main+0x22c>)
 800477c:	4a75      	ldr	r2, [pc, #468]	; (8004954 <main+0x230>)
 800477e:	605a      	str	r2, [r3, #4]
	g_leftControlLoop.encoder.isCountingDown= isLeftEncoderCountingDown;
 8004780:	4b73      	ldr	r3, [pc, #460]	; (8004950 <main+0x22c>)
 8004782:	4a75      	ldr	r2, [pc, #468]	; (8004958 <main+0x234>)
 8004784:	609a      	str	r2, [r3, #8]

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8004786:	4b75      	ldr	r3, [pc, #468]	; (800495c <main+0x238>)
 8004788:	213c      	movs	r1, #60	; 0x3c
 800478a:	0018      	movs	r0, r3
 800478c:	f004 feae 	bl	80094ec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8004790:	4b73      	ldr	r3, [pc, #460]	; (8004960 <main+0x23c>)
 8004792:	213c      	movs	r1, #60	; 0x3c
 8004794:	0018      	movs	r0, r3
 8004796:	f004 fea9 	bl	80094ec <HAL_TIM_Encoder_Start>

	g_rightMotor.timer.startPWM 		= 	startRightPWM;
 800479a:	4b72      	ldr	r3, [pc, #456]	; (8004964 <main+0x240>)
 800479c:	4a72      	ldr	r2, [pc, #456]	; (8004968 <main+0x244>)
 800479e:	601a      	str	r2, [r3, #0]
	g_rightMotor.timer.startPWMN 		= 	startRightPWMN;
 80047a0:	4b70      	ldr	r3, [pc, #448]	; (8004964 <main+0x240>)
 80047a2:	4a72      	ldr	r2, [pc, #456]	; (800496c <main+0x248>)
 80047a4:	605a      	str	r2, [r3, #4]
	g_rightMotor.timer.stopPWM 			=	stopRightPWM;
 80047a6:	4b6f      	ldr	r3, [pc, #444]	; (8004964 <main+0x240>)
 80047a8:	4a71      	ldr	r2, [pc, #452]	; (8004970 <main+0x24c>)
 80047aa:	609a      	str	r2, [r3, #8]
	g_rightMotor.timer.stopPWMN 		= 	stopRightPWMN;
 80047ac:	4b6d      	ldr	r3, [pc, #436]	; (8004964 <main+0x240>)
 80047ae:	4a71      	ldr	r2, [pc, #452]	; (8004974 <main+0x250>)
 80047b0:	60da      	str	r2, [r3, #12]
	g_rightMotor.timer.setDutyCycle 	= 	setRightDutyCycle;
 80047b2:	4b6c      	ldr	r3, [pc, #432]	; (8004964 <main+0x240>)
 80047b4:	4a70      	ldr	r2, [pc, #448]	; (8004978 <main+0x254>)
 80047b6:	611a      	str	r2, [r3, #16]
	g_rightMotor.isReversed 			= 	noReversed;
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <main+0x240>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	751a      	strb	r2, [r3, #20]

	g_leftMotor.timer.startPWM			= 	startLeftPWM;
 80047be:	4b6f      	ldr	r3, [pc, #444]	; (800497c <main+0x258>)
 80047c0:	4a6f      	ldr	r2, [pc, #444]	; (8004980 <main+0x25c>)
 80047c2:	601a      	str	r2, [r3, #0]
	g_leftMotor.timer.startPWMN			=	startLeftPWMN;
 80047c4:	4b6d      	ldr	r3, [pc, #436]	; (800497c <main+0x258>)
 80047c6:	4a6f      	ldr	r2, [pc, #444]	; (8004984 <main+0x260>)
 80047c8:	605a      	str	r2, [r3, #4]
	g_leftMotor.timer.stopPWM			=	stopLeftPWM;
 80047ca:	4b6c      	ldr	r3, [pc, #432]	; (800497c <main+0x258>)
 80047cc:	4a6e      	ldr	r2, [pc, #440]	; (8004988 <main+0x264>)
 80047ce:	609a      	str	r2, [r3, #8]
	g_leftMotor.timer.stopPWMN			=	stopLeftPWMN;
 80047d0:	4b6a      	ldr	r3, [pc, #424]	; (800497c <main+0x258>)
 80047d2:	4a6e      	ldr	r2, [pc, #440]	; (800498c <main+0x268>)
 80047d4:	60da      	str	r2, [r3, #12]
	g_leftMotor.timer.setDutyCycle		=	setLeftDutyCycle;
 80047d6:	4b69      	ldr	r3, [pc, #420]	; (800497c <main+0x258>)
 80047d8:	4a6d      	ldr	r2, [pc, #436]	; (8004990 <main+0x26c>)
 80047da:	611a      	str	r2, [r3, #16]
	g_leftMotor.isReversed 				= 	reversed;
 80047dc:	4b67      	ldr	r3, [pc, #412]	; (800497c <main+0x258>)
 80047de:	2201      	movs	r2, #1
 80047e0:	751a      	strb	r2, [r3, #20]

	speedControlLoop_init(&g_rightControlLoop, &g_rightMotor, 15, 3, 80, 0);
 80047e2:	4960      	ldr	r1, [pc, #384]	; (8004964 <main+0x240>)
 80047e4:	4857      	ldr	r0, [pc, #348]	; (8004944 <main+0x220>)
 80047e6:	2300      	movs	r3, #0
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	2350      	movs	r3, #80	; 0x50
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2303      	movs	r3, #3
 80047f0:	220f      	movs	r2, #15
 80047f2:	f7ff f9eb 	bl	8003bcc <speedControlLoop_init>
	speedControlLoop_init(&g_leftControlLoop, &g_leftMotor, 15, 3, 80, -15);
 80047f6:	4961      	ldr	r1, [pc, #388]	; (800497c <main+0x258>)
 80047f8:	4855      	ldr	r0, [pc, #340]	; (8004950 <main+0x22c>)
 80047fa:	230f      	movs	r3, #15
 80047fc:	425b      	negs	r3, r3
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	2350      	movs	r3, #80	; 0x50
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2303      	movs	r3, #3
 8004806:	220f      	movs	r2, #15
 8004808:	f7ff f9e0 	bl	8003bcc <speedControlLoop_init>

	robot_initStruct(&robot, &g_leftControlLoop, &g_rightControlLoop);
 800480c:	4a4d      	ldr	r2, [pc, #308]	; (8004944 <main+0x220>)
 800480e:	4950      	ldr	r1, [pc, #320]	; (8004950 <main+0x22c>)
 8004810:	4b60      	ldr	r3, [pc, #384]	; (8004994 <main+0x270>)
 8004812:	0018      	movs	r0, r3
 8004814:	f000 f953 	bl	8004abe <robot_initStruct>

	zxbm_run(robot.leftMotor->motor, zxbm_forward);
 8004818:	4b5e      	ldr	r3, [pc, #376]	; (8004994 <main+0x270>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2100      	movs	r1, #0
 8004820:	0018      	movs	r0, r3
 8004822:	f002 f8b5 	bl	8006990 <zxbm_run>
	zxbm_run(robot.rightMotor->motor, zxbm_forward);
 8004826:	4b5b      	ldr	r3, [pc, #364]	; (8004994 <main+0x270>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2100      	movs	r1, #0
 800482e:	0018      	movs	r0, r3
 8004830:	f002 f8ae 	bl	8006990 <zxbm_run>

	/*************************************************************/
	printf("--- TOF--- \r\n");
 8004834:	4b58      	ldr	r3, [pc, #352]	; (8004998 <main+0x274>)
 8004836:	0018      	movs	r0, r3
 8004838:	f011 fb20 	bl	8015e7c <puts>
	//TOF 1
	HAL_GPIO_WritePin(X_SHUT_RIGHT_GPIO_Port, X_SHUT_RIGHT_Pin, GPIO_PIN_RESET);
 800483c:	4b57      	ldr	r3, [pc, #348]	; (800499c <main+0x278>)
 800483e:	2200      	movs	r2, #0
 8004840:	2108      	movs	r1, #8
 8004842:	0018      	movs	r0, r3
 8004844:	f002 fc3a 	bl	80070bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X_SHUT_LEFT_GPIO_Port, X_SHUT_LEFT_Pin, GPIO_PIN_RESET);
 8004848:	4b55      	ldr	r3, [pc, #340]	; (80049a0 <main+0x27c>)
 800484a:	2200      	movs	r2, #0
 800484c:	2120      	movs	r1, #32
 800484e:	0018      	movs	r0, r3
 8004850:	f002 fc34 	bl	80070bc <HAL_GPIO_WritePin>


	leftTofInitInterrupt();
 8004854:	f7fe fc1c 	bl	8003090 <leftTofInitInterrupt>
	rightTofInitInterrupt();
 8004858:	f7fe fb3e 	bl	8002ed8 <rightTofInitInterrupt>

	leftError2=VL53L0X_StartMeasurement(&leftTofDev);
 800485c:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <main+0x280>)
 800485e:	0018      	movs	r0, r3
 8004860:	f009 fe18 	bl	800e494 <VL53L0X_StartMeasurement>
 8004864:	0003      	movs	r3, r0
 8004866:	001a      	movs	r2, r3
 8004868:	4b4f      	ldr	r3, [pc, #316]	; (80049a8 <main+0x284>)
 800486a:	701a      	strb	r2, [r3, #0]
	rightError2=VL53L0X_StartMeasurement(&rightTofDev);
 800486c:	4b4f      	ldr	r3, [pc, #316]	; (80049ac <main+0x288>)
 800486e:	0018      	movs	r0, r3
 8004870:	f009 fe10 	bl	800e494 <VL53L0X_StartMeasurement>
 8004874:	0003      	movs	r3, r0
 8004876:	001a      	movs	r2, r3
 8004878:	4b4d      	ldr	r3, [pc, #308]	; (80049b0 <main+0x28c>)
 800487a:	701a      	strb	r2, [r3, #0]
	printf("error start measurement : %d\r\n",rightError2);
 800487c:	4b4c      	ldr	r3, [pc, #304]	; (80049b0 <main+0x28c>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	b25b      	sxtb	r3, r3
 8004882:	001a      	movs	r2, r3
 8004884:	4b4b      	ldr	r3, [pc, #300]	; (80049b4 <main+0x290>)
 8004886:	0011      	movs	r1, r2
 8004888:	0018      	movs	r0, r3
 800488a:	f011 fa6b 	bl	8015d64 <iprintf>
	/************************************************************/

	setvbuf(stdin, NULL, _IONBF, 0);
 800488e:	4b4a      	ldr	r3, [pc, #296]	; (80049b8 <main+0x294>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6858      	ldr	r0, [r3, #4]
 8004894:	2300      	movs	r3, #0
 8004896:	2202      	movs	r2, #2
 8004898:	2100      	movs	r1, #0
 800489a:	f011 fb0b 	bl	8015eb4 <setvbuf>

	//colorSensorInit(&color_sensor1, GREEN,CENT_POUR_CENT,SENSOR_DISABLE);
	//colorHandleCalibrationSensor(&color_sensor1);

	/************************************************************/
	HAL_TIM_Base_Start_IT(&htim7);
 800489e:	4b47      	ldr	r3, [pc, #284]	; (80049bc <main+0x298>)
 80048a0:	0018      	movs	r0, r3
 80048a2:	f004 f8db 	bl	8008a5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);
 80048a6:	4b46      	ldr	r3, [pc, #280]	; (80049c0 <main+0x29c>)
 80048a8:	0018      	movs	r0, r3
 80048aa:	f004 f8d7 	bl	8008a5c <HAL_TIM_Base_Start_IT>

	//robot_addVirtualBorder(&robot, xType, inferior, 600);
	//robot_addVirtualBorder(&robot, xType, superior, 0);

	TaskHandle_t syncTaskHandler = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]

	if(pdTRUE != xTaskCreate(syncTask, "syncTask", STACK_DEPTH, (void*) NULL, SHELL_TASK_PRIORITY + 3, &syncTaskHandler)) {
 80048b2:	23fa      	movs	r3, #250	; 0xfa
 80048b4:	005a      	lsls	r2, r3, #1
 80048b6:	4943      	ldr	r1, [pc, #268]	; (80049c4 <main+0x2a0>)
 80048b8:	4843      	ldr	r0, [pc, #268]	; (80049c8 <main+0x2a4>)
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	230d      	movs	r3, #13
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	f00e feee 	bl	80136a4 <xTaskCreate>
 80048c8:	0003      	movs	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d004      	beq.n	80048d8 <main+0x1b4>
		printf("Control loop task failed");
 80048ce:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <main+0x2a8>)
 80048d0:	0018      	movs	r0, r3
 80048d2:	f011 fa47 	bl	8015d64 <iprintf>
		while(1);
 80048d6:	e7fe      	b.n	80048d6 <main+0x1b2>
	}

	TaskHandle_t tofTaskHandler = NULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	603b      	str	r3, [r7, #0]

	if(pdTRUE != xTaskCreate(tofTask, "tofTask", STACK_DEPTH, (void*) NULL, SHELL_TASK_PRIORITY + 2, &tofTaskHandler)) {
 80048dc:	23fa      	movs	r3, #250	; 0xfa
 80048de:	005a      	lsls	r2, r3, #1
 80048e0:	493b      	ldr	r1, [pc, #236]	; (80049d0 <main+0x2ac>)
 80048e2:	483c      	ldr	r0, [pc, #240]	; (80049d4 <main+0x2b0>)
 80048e4:	003b      	movs	r3, r7
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	230c      	movs	r3, #12
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	2300      	movs	r3, #0
 80048ee:	f00e fed9 	bl	80136a4 <xTaskCreate>
 80048f2:	0003      	movs	r3, r0
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d004      	beq.n	8004902 <main+0x1de>
		printf("TOF loop task failed");
 80048f8:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <main+0x2b4>)
 80048fa:	0018      	movs	r0, r3
 80048fc:	f011 fa32 	bl	8015d64 <iprintf>
		while(1);
 8004900:	e7fe      	b.n	8004900 <main+0x1dc>
	}

	drv_uart_init();
 8004902:	f001 fbf5 	bl	80060f0 <drv_uart_init>
	g_shell.uart.receive = drv_uart_receive;
 8004906:	4a35      	ldr	r2, [pc, #212]	; (80049dc <main+0x2b8>)
 8004908:	23e4      	movs	r3, #228	; 0xe4
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4934      	ldr	r1, [pc, #208]	; (80049e0 <main+0x2bc>)
 800490e:	50d1      	str	r1, [r2, r3]
	g_shell.uart.transmit = drv_uart_transmit;
 8004910:	4a32      	ldr	r2, [pc, #200]	; (80049dc <main+0x2b8>)
 8004912:	23e2      	movs	r3, #226	; 0xe2
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	4933      	ldr	r1, [pc, #204]	; (80049e4 <main+0x2c0>)
 8004918:	50d1      	str	r1, [r2, r3]
	sh_init(&g_shell);
 800491a:	4b30      	ldr	r3, [pc, #192]	; (80049dc <main+0x2b8>)
 800491c:	0018      	movs	r0, r3
 800491e:	f000 fc07 	bl	8005130 <sh_init>
	sh_start(&g_shell);
 8004922:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <main+0x2b8>)
 8004924:	0018      	movs	r0, r3
 8004926:	f000 fc41 	bl	80051ac <sh_start>

	vTaskStartScheduler();
 800492a:	f00f f88b 	bl	8013a44 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800492e:	f7fe fd49 	bl	80033c4 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8004932:	f00e fb58 	bl	8012fe6 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8004936:	e7fe      	b.n	8004936 <main+0x212>
 8004938:	20000988 	.word	0x20000988
 800493c:	08006191 	.word	0x08006191
 8004940:	080061c9 	.word	0x080061c9
 8004944:	20000884 	.word	0x20000884
 8004948:	08003ea1 	.word	0x08003ea1
 800494c:	08003eb5 	.word	0x08003eb5
 8004950:	200008cc 	.word	0x200008cc
 8004954:	08003f95 	.word	0x08003f95
 8004958:	08003fa9 	.word	0x08003fa9
 800495c:	20000ebc 	.word	0x20000ebc
 8004960:	20000f08 	.word	0x20000f08
 8004964:	20000854 	.word	0x20000854
 8004968:	08003de1 	.word	0x08003de1
 800496c:	08003df9 	.word	0x08003df9
 8004970:	08003e11 	.word	0x08003e11
 8004974:	08003e29 	.word	0x08003e29
 8004978:	08003e41 	.word	0x08003e41
 800497c:	2000086c 	.word	0x2000086c
 8004980:	08003ed5 	.word	0x08003ed5
 8004984:	08003eed 	.word	0x08003eed
 8004988:	08003f05 	.word	0x08003f05
 800498c:	08003f1d 	.word	0x08003f1d
 8004990:	08003f35 	.word	0x08003f35
 8004994:	20000914 	.word	0x20000914
 8004998:	0801ae50 	.word	0x0801ae50
 800499c:	50000400 	.word	0x50000400
 80049a0:	50000c00 	.word	0x50000c00
 80049a4:	20000b88 	.word	0x20000b88
 80049a8:	20000d28 	.word	0x20000d28
 80049ac:	200009dc 	.word	0x200009dc
 80049b0:	20000d27 	.word	0x20000d27
 80049b4:	0801ae60 	.word	0x0801ae60
 80049b8:	200002d8 	.word	0x200002d8
 80049bc:	20000f54 	.word	0x20000f54
 80049c0:	20001084 	.word	0x20001084
 80049c4:	0801ae80 	.word	0x0801ae80
 80049c8:	080043c1 	.word	0x080043c1
 80049cc:	0801ae8c 	.word	0x0801ae8c
 80049d0:	0801aea8 	.word	0x0801aea8
 80049d4:	08004375 	.word	0x08004375
 80049d8:	0801aeb0 	.word	0x0801aeb0
 80049dc:	20000680 	.word	0x20000680
 80049e0:	08006111 	.word	0x08006111
 80049e4:	08006159 	.word	0x08006159

080049e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b093      	sub	sp, #76	; 0x4c
 80049ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049ee:	2414      	movs	r4, #20
 80049f0:	193b      	adds	r3, r7, r4
 80049f2:	0018      	movs	r0, r3
 80049f4:	2334      	movs	r3, #52	; 0x34
 80049f6:	001a      	movs	r2, r3
 80049f8:	2100      	movs	r1, #0
 80049fa:	f010 fa52 	bl	8014ea2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	0018      	movs	r0, r3
 8004a02:	2310      	movs	r3, #16
 8004a04:	001a      	movs	r2, r3
 8004a06:	2100      	movs	r1, #0
 8004a08:	f010 fa4b 	bl	8014ea2 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	0018      	movs	r0, r3
 8004a12:	f003 f969 	bl	8007ce8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a16:	193b      	adds	r3, r7, r4
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a1c:	193b      	adds	r3, r7, r4
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	0252      	lsls	r2, r2, #9
 8004a22:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a24:	0021      	movs	r1, r4
 8004a26:	187b      	adds	r3, r7, r1
 8004a28:	2202      	movs	r2, #2
 8004a2a:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a2c:	187b      	adds	r3, r7, r1
 8004a2e:	2203      	movs	r2, #3
 8004a30:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004a32:	187b      	adds	r3, r7, r1
 8004a34:	2200      	movs	r2, #0
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8004a38:	187b      	adds	r3, r7, r1
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a3e:	187b      	adds	r3, r7, r1
 8004a40:	2280      	movs	r2, #128	; 0x80
 8004a42:	0292      	lsls	r2, r2, #10
 8004a44:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a46:	187b      	adds	r3, r7, r1
 8004a48:	2280      	movs	r2, #128	; 0x80
 8004a4a:	0592      	lsls	r2, r2, #22
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a4e:	187b      	adds	r3, r7, r1
 8004a50:	0018      	movs	r0, r3
 8004a52:	f003 f995 	bl	8007d80 <HAL_RCC_OscConfig>
 8004a56:	1e03      	subs	r3, r0, #0
 8004a58:	d001      	beq.n	8004a5e <SystemClock_Config+0x76>
	{
		Error_Handler();
 8004a5a:	f000 f82b 	bl	8004ab4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	2207      	movs	r2, #7
 8004a62:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a64:	1d3b      	adds	r3, r7, #4
 8004a66:	2202      	movs	r2, #2
 8004a68:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a6a:	1d3b      	adds	r3, r7, #4
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	2200      	movs	r2, #0
 8004a74:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	2102      	movs	r1, #2
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f003 fc90 	bl	80083a0 <HAL_RCC_ClockConfig>
 8004a80:	1e03      	subs	r3, r0, #0
 8004a82:	d001      	beq.n	8004a88 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 8004a84:	f000 f816 	bl	8004ab4 <Error_Handler>
	}
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b013      	add	sp, #76	; 0x4c
 8004a8e:	bd90      	pop	{r4, r7, pc}

08004a90 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8004aa2:	f001 ffed 	bl	8006a80 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	40001000 	.word	0x40001000

08004ab4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ab8:	b672      	cpsid	i
}
 8004aba:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004abc:	e7fe      	b.n	8004abc <Error_Handler+0x8>

08004abe <robot_initStruct>:
	polarCoordinates[1] = ((int) ceilf(angle * RAD_TO_DEG_RATIO)) - robot->w;

	printf("Polar coordinates : %d\t %d\r\n", polarCoordinates[0], polarCoordinates[1]);
}

void robot_initStruct(h_robot_t * robot, h_speedControlLoop_t * leftMotor, h_speedControlLoop_t * rightMotor){
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
	robot->leftMotor 		= leftMotor;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	601a      	str	r2, [r3, #0]
	robot->rightMotor 		= rightMotor;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	605a      	str	r2, [r3, #4]

	robot->x				= 0;//75;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	635a      	str	r2, [r3, #52]	; 0x34
	robot->y				= 0;//82;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
	robot->w				= 0; //Should be 45
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	63da      	str	r2, [r3, #60]	; 0x3c

	robot->isRobotMoving 	= 0;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	651a      	str	r2, [r3, #80]	; 0x50

	robot->leftSpeedCommand 	= 0;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40
	robot->rightSpeedCommand 	= 0;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	645a      	str	r2, [r3, #68]	; 0x44

	robot->oldTickLeft 	= 0;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	649a      	str	r2, [r3, #72]	; 0x48
	robot->oldTickRight = 0;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	64da      	str	r2, [r3, #76]	; 0x4c

	robot->leftBorderDetectedFlag = 0;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
	robot->rightBorderDetectedFlag = 0;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	659a      	str	r2, [r3, #88]	; 0x58

	robot->virtualBorderArrayIndex = 0;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30

	robot->waitForStart = 1;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	665a      	str	r2, [r3, #100]	; 0x64

	robot->virtualBorderSensor.xOffset = 140;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	228c      	movs	r2, #140	; 0x8c
 8004b22:	609a      	str	r2, [r3, #8]
	robot->virtualBorderSensor.yOffset = 0;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	60da      	str	r2, [r3, #12]
	robot->virtualBorderDetectionFlag = 0;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	65da      	str	r2, [r3, #92]	; 0x5c
	robot->virtualBorderDetectionFlagOld = 0;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	661a      	str	r2, [r3, #96]	; 0x60

	robot->state = search;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2270      	movs	r2, #112	; 0x70
 8004b3a:	2102      	movs	r1, #2
 8004b3c:	5499      	strb	r1, [r3, r2]
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b004      	add	sp, #16
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <robot_updateOdometry>:





void robot_updateOdometry(h_robot_t * robot){
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	int leftDeltaTick, rightDeltaTick;
	float deltaAngle, deltaDistance;

	leftDeltaTick = robot->leftMotor->absolutePostion - robot->oldTickLeft;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]
	robot->oldTickLeft = robot->leftMotor->absolutePostion;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	649a      	str	r2, [r3, #72]	; 0x48

	rightDeltaTick = robot->rightMotor->absolutePostion - robot->oldTickRight;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	613b      	str	r3, [r7, #16]
	robot->oldTickRight = robot->rightMotor->absolutePostion;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	64da      	str	r2, [r3, #76]	; 0x4c

	deltaAngle = ((float)(rightDeltaTick - leftDeltaTick))/(2*DEG_TO_TICK_RATIO);
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	0018      	movs	r0, r3
 8004b88:	f7fc fa84 	bl	8001094 <__aeabi_i2f>
 8004b8c:	1c03      	adds	r3, r0, #0
 8004b8e:	1c18      	adds	r0, r3, #0
 8004b90:	f7fe f8b4 	bl	8002cfc <__aeabi_f2d>
 8004b94:	4a46      	ldr	r2, [pc, #280]	; (8004cb0 <robot_updateOdometry+0x168>)
 8004b96:	4b47      	ldr	r3, [pc, #284]	; (8004cb4 <robot_updateOdometry+0x16c>)
 8004b98:	f7fc fe06 	bl	80017a8 <__aeabi_ddiv>
 8004b9c:	0002      	movs	r2, r0
 8004b9e:	000b      	movs	r3, r1
 8004ba0:	0010      	movs	r0, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	f7fe f8f2 	bl	8002d8c <__aeabi_d2f>
 8004ba8:	1c03      	adds	r3, r0, #0
 8004baa:	60fb      	str	r3, [r7, #12]
	robot->w += (int) (ceilf(deltaAngle/ANGLE_CALIB_RATIO));//));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f7fe f8a3 	bl	8002cfc <__aeabi_f2d>
 8004bb6:	4a40      	ldr	r2, [pc, #256]	; (8004cb8 <robot_updateOdometry+0x170>)
 8004bb8:	4b40      	ldr	r3, [pc, #256]	; (8004cbc <robot_updateOdometry+0x174>)
 8004bba:	f7fc fdf5 	bl	80017a8 <__aeabi_ddiv>
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	000b      	movs	r3, r1
 8004bc2:	0010      	movs	r0, r2
 8004bc4:	0019      	movs	r1, r3
 8004bc6:	f7fe f8e1 	bl	8002d8c <__aeabi_d2f>
 8004bca:	1c03      	adds	r3, r0, #0
 8004bcc:	1c18      	adds	r0, r3, #0
 8004bce:	f015 f81f 	bl	8019c10 <ceilf>
 8004bd2:	1c03      	adds	r3, r0, #0
 8004bd4:	1c18      	adds	r0, r3, #0
 8004bd6:	f7fc fa3d 	bl	8001054 <__aeabi_f2iz>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	18e2      	adds	r2, r4, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	63da      	str	r2, [r3, #60]	; 0x3c

	deltaDistance = ((float)(rightDeltaTick + leftDeltaTick))/(2 * MM_TO_TICK_RATIO);
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	18d3      	adds	r3, r2, r3
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7fc fa53 	bl	8001094 <__aeabi_i2f>
 8004bee:	1c03      	adds	r3, r0, #0
 8004bf0:	1c18      	adds	r0, r3, #0
 8004bf2:	f7fe f883 	bl	8002cfc <__aeabi_f2d>
 8004bf6:	4a32      	ldr	r2, [pc, #200]	; (8004cc0 <robot_updateOdometry+0x178>)
 8004bf8:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <robot_updateOdometry+0x17c>)
 8004bfa:	f7fc fdd5 	bl	80017a8 <__aeabi_ddiv>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	000b      	movs	r3, r1
 8004c02:	0010      	movs	r0, r2
 8004c04:	0019      	movs	r1, r3
 8004c06:	f7fe f8c1 	bl	8002d8c <__aeabi_d2f>
 8004c0a:	1c03      	adds	r3, r0, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
	robot->x += (int) ceilf(deltaDistance * cosf(robot->w * DEG_TO_RAD_RATIO));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7fe f81a 	bl	8002c50 <__aeabi_i2d>
 8004c1c:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <robot_updateOdometry+0x180>)
 8004c1e:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <robot_updateOdometry+0x184>)
 8004c20:	f7fd f9c4 	bl	8001fac <__aeabi_dmul>
 8004c24:	0002      	movs	r2, r0
 8004c26:	000b      	movs	r3, r1
 8004c28:	0010      	movs	r0, r2
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	f7fe f8ae 	bl	8002d8c <__aeabi_d2f>
 8004c30:	1c03      	adds	r3, r0, #0
 8004c32:	1c18      	adds	r0, r3, #0
 8004c34:	f015 f82a 	bl	8019c8c <cosf>
 8004c38:	1c03      	adds	r3, r0, #0
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	1c18      	adds	r0, r3, #0
 8004c3e:	f7fb ff35 	bl	8000aac <__aeabi_fmul>
 8004c42:	1c03      	adds	r3, r0, #0
 8004c44:	1c18      	adds	r0, r3, #0
 8004c46:	f014 ffe3 	bl	8019c10 <ceilf>
 8004c4a:	1c03      	adds	r3, r0, #0
 8004c4c:	1c18      	adds	r0, r3, #0
 8004c4e:	f7fc fa01 	bl	8001054 <__aeabi_f2iz>
 8004c52:	0003      	movs	r3, r0
 8004c54:	18e2      	adds	r2, r4, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	635a      	str	r2, [r3, #52]	; 0x34
	robot->y += (int) ceilf(deltaDistance * sinf(robot->w * DEG_TO_RAD_RATIO));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	0018      	movs	r0, r3
 8004c64:	f7fd fff4 	bl	8002c50 <__aeabi_i2d>
 8004c68:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <robot_updateOdometry+0x180>)
 8004c6a:	4b18      	ldr	r3, [pc, #96]	; (8004ccc <robot_updateOdometry+0x184>)
 8004c6c:	f7fd f99e 	bl	8001fac <__aeabi_dmul>
 8004c70:	0002      	movs	r2, r0
 8004c72:	000b      	movs	r3, r1
 8004c74:	0010      	movs	r0, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	f7fe f888 	bl	8002d8c <__aeabi_d2f>
 8004c7c:	1c03      	adds	r3, r0, #0
 8004c7e:	1c18      	adds	r0, r3, #0
 8004c80:	f015 f83c 	bl	8019cfc <sinf>
 8004c84:	1c03      	adds	r3, r0, #0
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	1c18      	adds	r0, r3, #0
 8004c8a:	f7fb ff0f 	bl	8000aac <__aeabi_fmul>
 8004c8e:	1c03      	adds	r3, r0, #0
 8004c90:	1c18      	adds	r0, r3, #0
 8004c92:	f014 ffbd 	bl	8019c10 <ceilf>
 8004c96:	1c03      	adds	r3, r0, #0
 8004c98:	1c18      	adds	r0, r3, #0
 8004c9a:	f7fc f9db 	bl	8001054 <__aeabi_f2iz>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	18e2      	adds	r2, r4, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b007      	add	sp, #28
 8004cac:	bd90      	pop	{r4, r7, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	ca57a787 	.word	0xca57a787
 8004cb4:	403e5432 	.word	0x403e5432
 8004cb8:	33333333 	.word	0x33333333
 8004cbc:	3ff13333 	.word	0x3ff13333
 8004cc0:	9270b06c 	.word	0x9270b06c
 8004cc4:	4034afe6 	.word	0x4034afe6
 8004cc8:	00de4c51 	.word	0x00de4c51
 8004ccc:	3f91df33 	.word	0x3f91df33

08004cd0 <robot_goToAngle>:

void robot_goToAngle(h_robot_t * robot, int w){
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
	//w *= ANGLE_CALIB_RATIO;
	int initialAngle = robot->w;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	60fb      	str	r3, [r7, #12]
	if(w > 0){
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dd28      	ble.n	8004d38 <robot_goToAngle+0x68>
		zxbm_run(robot->leftMotor->motor, zxbm_backward);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f001 fe4e 	bl	8006990 <zxbm_run>
		zxbm_run(robot->rightMotor->motor, zxbm_forward);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f001 fe47 	bl	8006990 <zxbm_run>

		while((robot->w <  w + initialAngle) && (robot->leftDist > 1200)  && (robot->rightDist >1200)){
 8004d02:	e005      	b.n	8004d10 <robot_goToAngle+0x40>
			robot->leftSpeedCommand = ROTATION_SPEED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2203      	movs	r2, #3
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
			robot->rightSpeedCommand = ROTATION_SPEED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
		while((robot->w <  w + initialAngle) && (robot->leftDist > 1200)  && (robot->rightDist >1200)){
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	18cb      	adds	r3, r1, r3
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	da28      	bge.n	8004d70 <robot_goToAngle+0xa0>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d22:	2396      	movs	r3, #150	; 0x96
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	429a      	cmp	r2, r3
 8004d28:	dd22      	ble.n	8004d70 <robot_goToAngle+0xa0>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d2e:	2396      	movs	r3, #150	; 0x96
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	429a      	cmp	r2, r3
 8004d34:	dce6      	bgt.n	8004d04 <robot_goToAngle+0x34>
 8004d36:	e01b      	b.n	8004d70 <robot_goToAngle+0xa0>
		}
	}else{
		zxbm_run(robot->leftMotor->motor, zxbm_forward);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2100      	movs	r1, #0
 8004d40:	0018      	movs	r0, r3
 8004d42:	f001 fe25 	bl	8006990 <zxbm_run>
		zxbm_run(robot->rightMotor->motor, zxbm_backward);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f001 fe1e 	bl	8006990 <zxbm_run>

		while(robot->w >  w + initialAngle){
 8004d54:	e005      	b.n	8004d62 <robot_goToAngle+0x92>
			robot->leftSpeedCommand = ROTATION_SPEED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2203      	movs	r2, #3
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
			robot->rightSpeedCommand = ROTATION_SPEED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2203      	movs	r2, #3
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44
		while(robot->w >  w + initialAngle){
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	18cb      	adds	r3, r1, r3
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	dcf2      	bgt.n	8004d56 <robot_goToAngle+0x86>
		}
	}

	robot->leftSpeedCommand = NO_SPEED;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
	robot->rightSpeedCommand = NO_SPEED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44

	robot->isRobotMoving = 0;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b004      	add	sp, #16
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <robot_stop>:

void robot_stop(h_robot_t * robot){
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
	robot->leftSpeedCommand = NO_SPEED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40
	robot->rightSpeedCommand = NO_SPEED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44

	robot->isRobotMoving = 0;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}

08004dac <robot_borderAvoidance>:

void robot_borderAvoidance(h_robot_t * robot){
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
	if(robot->leftBorderDetectedFlag){
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <robot_borderAvoidance+0x20>
		robot_goToAngle(robot, -90);
 8004dbc:	235a      	movs	r3, #90	; 0x5a
 8004dbe:	425a      	negs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0011      	movs	r1, r2
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f7ff ff83 	bl	8004cd0 <robot_goToAngle>
		printf("virtual border hit\r\n");
		robot_goToAngle(robot, 180);
		robot->virtualBorderDetectionFlag = 0;
	}
	*/
}
 8004dca:	e008      	b.n	8004dde <robot_borderAvoidance+0x32>
	}else if (robot->rightBorderDetectedFlag){
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <robot_borderAvoidance+0x32>
		robot_goToAngle(robot, +90);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	215a      	movs	r1, #90	; 0x5a
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7ff ff79 	bl	8004cd0 <robot_goToAngle>
}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	46bd      	mov	sp, r7
 8004de2:	b002      	add	sp, #8
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <robot_virtualBorderSensor>:
		(robot->virtualBorderArray[robot->virtualBorderArrayIndex]).side	= side;
		robot->virtualBorderArrayIndex ++;
	}
}

static int robot_virtualBorderSensor(int x_sensor, int y_sensor, h_virtualBorder_t border){
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	0039      	movs	r1, r7
 8004df2:	600a      	str	r2, [r1, #0]
 8004df4:	604b      	str	r3, [r1, #4]
	switch (border.type){
 8004df6:	003b      	movs	r3, r7
 8004df8:	791b      	ldrb	r3, [r3, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <robot_virtualBorderSensor+0x1e>
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d00f      	beq.n	8004e22 <robot_virtualBorderSensor+0x3c>
 8004e02:	e010      	b.n	8004e26 <robot_virtualBorderSensor+0x40>
	case xType:
		if(border.side*(border.offset - x_sensor) < 0){
 8004e04:	003b      	movs	r3, r7
 8004e06:	795b      	ldrb	r3, [r3, #5]
 8004e08:	b25b      	sxtb	r3, r3
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	003b      	movs	r3, r7
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	434b      	muls	r3, r1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	da01      	bge.n	8004e1e <robot_virtualBorderSensor+0x38>
			return 1;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e004      	b.n	8004e28 <robot_virtualBorderSensor+0x42>
		}
		return 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e002      	b.n	8004e28 <robot_virtualBorderSensor+0x42>
		break;
	case yType:
		return 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e000      	b.n	8004e28 <robot_virtualBorderSensor+0x42>

	default:
		return 0;
 8004e26:	2300      	movs	r3, #0
		break;
	}
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b004      	add	sp, #16
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <robot_virtualBorderAvoidance>:

void robot_virtualBorderAvoidance(h_robot_t * robot){
 8004e30:	b5b0      	push	{r4, r5, r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	int xSensor, ySensor;

	time ++;
 8004e38:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <robot_virtualBorderAvoidance+0xf8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	4b3a      	ldr	r3, [pc, #232]	; (8004f28 <robot_virtualBorderAvoidance+0xf8>)
 8004e40:	601a      	str	r2, [r3, #0]

	xSensor = robot->x + robot->virtualBorderSensor.xOffset*cosf(robot->w);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	0018      	movs	r0, r3
 8004e48:	f7fc f924 	bl	8001094 <__aeabi_i2f>
 8004e4c:	1c04      	adds	r4, r0, #0
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0018      	movs	r0, r3
 8004e54:	f7fc f91e 	bl	8001094 <__aeabi_i2f>
 8004e58:	1c05      	adds	r5, r0, #0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f7fc f918 	bl	8001094 <__aeabi_i2f>
 8004e64:	1c03      	adds	r3, r0, #0
 8004e66:	1c18      	adds	r0, r3, #0
 8004e68:	f014 ff10 	bl	8019c8c <cosf>
 8004e6c:	1c03      	adds	r3, r0, #0
 8004e6e:	1c19      	adds	r1, r3, #0
 8004e70:	1c28      	adds	r0, r5, #0
 8004e72:	f7fb fe1b 	bl	8000aac <__aeabi_fmul>
 8004e76:	1c03      	adds	r3, r0, #0
 8004e78:	1c19      	adds	r1, r3, #0
 8004e7a:	1c20      	adds	r0, r4, #0
 8004e7c:	f7fb fbc8 	bl	8000610 <__aeabi_fadd>
 8004e80:	1c03      	adds	r3, r0, #0
 8004e82:	1c18      	adds	r0, r3, #0
 8004e84:	f7fc f8e6 	bl	8001054 <__aeabi_f2iz>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	613b      	str	r3, [r7, #16]
	ySensor = robot->y + robot->virtualBorderSensor.yOffset*sinf(robot->w);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7fc f8ff 	bl	8001094 <__aeabi_i2f>
 8004e96:	1c04      	adds	r4, r0, #0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f7fc f8f9 	bl	8001094 <__aeabi_i2f>
 8004ea2:	1c05      	adds	r5, r0, #0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7fc f8f3 	bl	8001094 <__aeabi_i2f>
 8004eae:	1c03      	adds	r3, r0, #0
 8004eb0:	1c18      	adds	r0, r3, #0
 8004eb2:	f014 ff23 	bl	8019cfc <sinf>
 8004eb6:	1c03      	adds	r3, r0, #0
 8004eb8:	1c19      	adds	r1, r3, #0
 8004eba:	1c28      	adds	r0, r5, #0
 8004ebc:	f7fb fdf6 	bl	8000aac <__aeabi_fmul>
 8004ec0:	1c03      	adds	r3, r0, #0
 8004ec2:	1c19      	adds	r1, r3, #0
 8004ec4:	1c20      	adds	r0, r4, #0
 8004ec6:	f7fb fba3 	bl	8000610 <__aeabi_fadd>
 8004eca:	1c03      	adds	r3, r0, #0
 8004ecc:	1c18      	adds	r0, r3, #0
 8004ece:	f7fc f8c1 	bl	8001054 <__aeabi_f2iz>
 8004ed2:	0003      	movs	r3, r0
 8004ed4:	60fb      	str	r3, [r7, #12]

	//printf("%d\t %d\t %d\r\n", xSensor, ySensor, time);
	for(int i = 0; i < robot->virtualBorderArrayIndex; i++){
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e01b      	b.n	8004f14 <robot_virtualBorderAvoidance+0xe4>
		if(robot_virtualBorderSensor(xSensor, ySensor, robot->virtualBorderArray[i]) && time > 15){
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	68fc      	ldr	r4, [r7, #12]
 8004ee6:	6938      	ldr	r0, [r7, #16]
 8004ee8:	585a      	ldr	r2, [r3, r1]
 8004eea:	18cb      	adds	r3, r1, r3
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	0021      	movs	r1, r4
 8004ef0:	f7ff ff79 	bl	8004de6 <robot_virtualBorderSensor>
 8004ef4:	1e03      	subs	r3, r0, #0
 8004ef6:	d00a      	beq.n	8004f0e <robot_virtualBorderAvoidance+0xde>
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <robot_virtualBorderAvoidance+0xf8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b0f      	cmp	r3, #15
 8004efe:	dd06      	ble.n	8004f0e <robot_virtualBorderAvoidance+0xde>
			time = 0;
 8004f00:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <robot_virtualBorderAvoidance+0xf8>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
			robot->virtualBorderDetectionFlag = 1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 8004f0c:	e008      	b.n	8004f20 <robot_virtualBorderAvoidance+0xf0>
	for(int i = 0; i < robot->virtualBorderArrayIndex; i++){
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	3301      	adds	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	dbde      	blt.n	8004edc <robot_virtualBorderAvoidance+0xac>
		}
	}
}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b006      	add	sp, #24
 8004f26:	bdb0      	pop	{r4, r5, r7, pc}
 8004f28:	20000000 	.word	0x20000000

08004f2c <sh_uartWrite>:

static char g_backspaceString[] = "\b \b";
static char g_promptString[] = "> ";
char g_statistics[256];

static int sh_uartWrite(h_shell_t* shell, char * s, uint16_t size) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	1dbb      	adds	r3, r7, #6
 8004f38:	801a      	strh	r2, [r3, #0]
	shell->uart.transmit(s, size);
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	23e2      	movs	r3, #226	; 0xe2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	58d3      	ldr	r3, [r2, r3]
 8004f42:	1dba      	adds	r2, r7, #6
 8004f44:	8811      	ldrh	r1, [r2, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	0010      	movs	r0, r2
 8004f4a:	4798      	blx	r3
	return size;
 8004f4c:	1dbb      	adds	r3, r7, #6
 8004f4e:	881b      	ldrh	r3, [r3, #0]
}
 8004f50:	0018      	movs	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b004      	add	sp, #16
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <sh_stats>:

int sh_stats(h_shell_t* shell, int argc, char ** argv){
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
	vTaskGetRunTimeStats((char*) &g_statistics);
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <sh_stats+0x2c>)
 8004f66:	0018      	movs	r0, r3
 8004f68:	f00f fb7a 	bl	8014660 <vTaskGetRunTimeStats>
	printf("%s", g_statistics);
 8004f6c:	4a05      	ldr	r2, [pc, #20]	; (8004f84 <sh_stats+0x2c>)
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <sh_stats+0x30>)
 8004f70:	0011      	movs	r1, r2
 8004f72:	0018      	movs	r0, r3
 8004f74:	f010 fef6 	bl	8015d64 <iprintf>
	return 0;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b004      	add	sp, #16
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	20000d2c 	.word	0x20000d2c
 8004f88:	0801aec8 	.word	0x0801aec8

08004f8c <sh_help>:

static int sh_help(h_shell_t* shell, int argc, char ** argv) {
 8004f8c:	b590      	push	{r4, r7, lr}
 8004f8e:	b089      	sub	sp, #36	; 0x24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < shell->shell_func_list_size ; i++) {
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	e026      	b.n	8004fec <sh_help+0x60>
		int size;
		size = snprintf (shell->print_buffer, BUFFER_SIZE, "%s:\t\t%s\r\n", shell->shell_func_list[i].c, shell->shell_func_list[i].description);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1d18      	adds	r0, r3, #4
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	0013      	movs	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	18cb      	adds	r3, r1, r3
 8004fb0:	3344      	adds	r3, #68	; 0x44
 8004fb2:	681c      	ldr	r4, [r3, #0]
 8004fb4:	68f9      	ldr	r1, [r7, #12]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	0013      	movs	r3, r2
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	18cb      	adds	r3, r1, r3
 8004fc2:	334c      	adds	r3, #76	; 0x4c
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a0e      	ldr	r2, [pc, #56]	; (8005000 <sh_help+0x74>)
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	0023      	movs	r3, r4
 8004fcc:	2140      	movs	r1, #64	; 0x40
 8004fce:	f011 f83d 	bl	801604c <sniprintf>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	613b      	str	r3, [r7, #16]
		sh_uartWrite(shell, shell->print_buffer, size);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1d19      	adds	r1, r3, #4
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f7ff ffa3 	bl	8004f2c <sh_uartWrite>
	for(i = 0 ; i < shell->shell_func_list_size ; i++) {
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	dbd3      	blt.n	8004f9e <sh_help+0x12>
	}
	return 0;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b007      	add	sp, #28
 8004ffe:	bd90      	pop	{r4, r7, pc}
 8005000:	0801aecc 	.word	0x0801aecc

08005004 <shellTask>:

static void shellTask (void * pvParameters){
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	h_shell_t* shell = (h_shell_t*) pvParameters;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	60fb      	str	r3, [r7, #12]

	sh_run(shell);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	0018      	movs	r0, r3
 8005014:	f000 f928 	bl	8005268 <sh_run>
}
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	b004      	add	sp, #16
 800501e:	bd80      	pop	{r7, pc}

08005020 <sh_exec>:

static int sh_exec(h_shell_t* shell, char * buf) {
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b08f      	sub	sp, #60	; 0x3c
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	argc = 1;
 800502a:	2301      	movs	r3, #1
 800502c:	633b      	str	r3, [r7, #48]	; 0x30
	argv[0] = buf;
 800502e:	2308      	movs	r3, #8
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	601a      	str	r2, [r3, #0]
	for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800503a:	e017      	b.n	800506c <sh_exec+0x4c>
		if(*p == ' ' || *p == '\n') {
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b20      	cmp	r3, #32
 8005042:	d003      	beq.n	800504c <sh_exec+0x2c>
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b0a      	cmp	r3, #10
 800504a:	d10c      	bne.n	8005066 <sh_exec+0x46>
			*p = '\0';
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
			argv[argc] = p+1;
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	2308      	movs	r3, #8
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505c:	0092      	lsls	r2, r2, #2
 800505e:	50d1      	str	r1, [r2, r3]
			argc++;
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	3301      	adds	r3, #1
 8005064:	633b      	str	r3, [r7, #48]	; 0x30
	for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	3301      	adds	r3, #1
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <sh_exec+0x5a>
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	2b07      	cmp	r3, #7
 8005078:	dde0      	ble.n	800503c <sh_exec+0x1c>
		}
	}

	for(i = 0 ; i < shell->shell_func_list_size ; i++) {
 800507a:	2300      	movs	r3, #0
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
 800507e:	e023      	b.n	80050c8 <sh_exec+0xa8>
		if (strcmp(shell->shell_func_list[i].c, argv[0]) == 0)
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005084:	0013      	movs	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	189b      	adds	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	18cb      	adds	r3, r1, r3
 800508e:	3344      	adds	r3, #68	; 0x44
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	2408      	movs	r4, #8
 8005094:	193b      	adds	r3, r7, r4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	0019      	movs	r1, r3
 800509a:	0010      	movs	r0, r2
 800509c:	f7fb f834 	bl	8000108 <strcmp>
 80050a0:	1e03      	subs	r3, r0, #0
 80050a2:	d10e      	bne.n	80050c2 <sh_exec+0xa2>
			return shell->shell_func_list[i].func(shell, argc, argv);
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a8:	0013      	movs	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	189b      	adds	r3, r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	18cb      	adds	r3, r1, r3
 80050b2:	3348      	adds	r3, #72	; 0x48
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	193a      	adds	r2, r7, r4
 80050b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
 80050be:	0003      	movs	r3, r0
 80050c0:	e01c      	b.n	80050fc <sh_exec+0xdc>
	for(i = 0 ; i < shell->shell_func_list_size ; i++) {
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	3301      	adds	r3, #1
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ce:	429a      	cmp	r2, r3
 80050d0:	dbd6      	blt.n	8005080 <sh_exec+0x60>
	}

	int size;
	size = snprintf (shell->print_buffer, BUFFER_SIZE, "%s: no such command\r\n", argv[0]);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	1d18      	adds	r0, r3, #4
 80050d6:	2308      	movs	r3, #8
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a09      	ldr	r2, [pc, #36]	; (8005104 <sh_exec+0xe4>)
 80050de:	2140      	movs	r1, #64	; 0x40
 80050e0:	f010 ffb4 	bl	801604c <sniprintf>
 80050e4:	0003      	movs	r3, r0
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
	sh_uartWrite(shell, shell->print_buffer, size);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	1d19      	adds	r1, r3, #4
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f7ff ff1a 	bl	8004f2c <sh_uartWrite>
	return -1;
 80050f8:	2301      	movs	r3, #1
 80050fa:	425b      	negs	r3, r3
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	b00f      	add	sp, #60	; 0x3c
 8005102:	bd90      	pop	{r4, r7, pc}
 8005104:	0801aed8 	.word	0x0801aed8

08005108 <sh_uartRead>:

char sh_uartRead(h_shell_t* shell) {
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	char c;

	shell->uart.receive(&c, 1);
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	23e4      	movs	r3, #228	; 0xe4
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	58d3      	ldr	r3, [r2, r3]
 8005118:	240f      	movs	r4, #15
 800511a:	193a      	adds	r2, r7, r4
 800511c:	2101      	movs	r1, #1
 800511e:	0010      	movs	r0, r2
 8005120:	4798      	blx	r3

	return c;
 8005122:	193b      	adds	r3, r7, r4
 8005124:	781b      	ldrb	r3, [r3, #0]
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b005      	add	sp, #20
 800512c:	bd90      	pop	{r4, r7, pc}
	...

08005130 <sh_init>:

void sh_init(h_shell_t* shell) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	int size = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
	shell->shell_func_list_size = 0;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
	shell->shellTaskHandler = NULL;
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	23e8      	movs	r3, #232	; 0xe8
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	2100      	movs	r1, #0
 800514a:	50d1      	str	r1, [r2, r3]


	size = snprintf (shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Bière Dynamics Debug Tool =====\r\n");
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	4a0f      	ldr	r2, [pc, #60]	; (8005190 <sh_init+0x60>)
 8005152:	2140      	movs	r1, #64	; 0x40
 8005154:	0018      	movs	r0, r3
 8005156:	f010 ff79 	bl	801604c <sniprintf>
 800515a:	0003      	movs	r3, r0
 800515c:	60fb      	str	r3, [r7, #12]
	sh_uartWrite(shell, shell->print_buffer, size);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	1d19      	adds	r1, r3, #4
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	b29a      	uxth	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	0018      	movs	r0, r3
 800516a:	f7ff fedf 	bl	8004f2c <sh_uartWrite>

	sh_add(shell, "help", sh_help, "Help");
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <sh_init+0x64>)
 8005170:	4a09      	ldr	r2, [pc, #36]	; (8005198 <sh_init+0x68>)
 8005172:	490a      	ldr	r1, [pc, #40]	; (800519c <sh_init+0x6c>)
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f83d 	bl	80051f4 <sh_add>
	sh_add(shell, "stats", sh_stats, "CPU occupation of the running tasks");
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <sh_init+0x70>)
 800517c:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <sh_init+0x74>)
 800517e:	490a      	ldr	r1, [pc, #40]	; (80051a8 <sh_init+0x78>)
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f837 	bl	80051f4 <sh_add>
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b004      	add	sp, #16
 800518c:	bd80      	pop	{r7, pc}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	0801aef0 	.word	0x0801aef0
 8005194:	0801af20 	.word	0x0801af20
 8005198:	08004f8d 	.word	0x08004f8d
 800519c:	0801af28 	.word	0x0801af28
 80051a0:	0801af30 	.word	0x0801af30
 80051a4:	08004f59 	.word	0x08004f59
 80051a8:	0801af54 	.word	0x0801af54

080051ac <sh_start>:


void sh_start(h_shell_t* shell) {
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
	if(pdTRUE != xTaskCreate(shellTask, "shellTask", STACK_DEPTH, (void*) shell, SHELL_TASK_PRIORITY, &(shell->shellTaskHandler))) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	33d1      	adds	r3, #209	; 0xd1
 80051b8:	33ff      	adds	r3, #255	; 0xff
 80051ba:	687c      	ldr	r4, [r7, #4]
 80051bc:	22fa      	movs	r2, #250	; 0xfa
 80051be:	0052      	lsls	r2, r2, #1
 80051c0:	4909      	ldr	r1, [pc, #36]	; (80051e8 <sh_start+0x3c>)
 80051c2:	480a      	ldr	r0, [pc, #40]	; (80051ec <sh_start+0x40>)
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	230a      	movs	r3, #10
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	0023      	movs	r3, r4
 80051cc:	f00e fa6a 	bl	80136a4 <xTaskCreate>
 80051d0:	0003      	movs	r3, r0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d004      	beq.n	80051e0 <sh_start+0x34>
		printf("Shell task failed");
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <sh_start+0x44>)
 80051d8:	0018      	movs	r0, r3
 80051da:	f010 fdc3 	bl	8015d64 <iprintf>
		while(1);
 80051de:	e7fe      	b.n	80051de <sh_start+0x32>
	}
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b003      	add	sp, #12
 80051e6:	bd90      	pop	{r4, r7, pc}
 80051e8:	0801af5c 	.word	0x0801af5c
 80051ec:	08005005 	.word	0x08005005
 80051f0:	0801af68 	.word	0x0801af68

080051f4 <sh_add>:

int sh_add(h_shell_t* shell, char* c, int (* pfunc)(h_shell_t* shell, int argc, char ** argv), char * description) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
	if (shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b1f      	cmp	r3, #31
 8005208:	dc27      	bgt.n	800525a <sh_add+0x66>
		shell->shell_func_list[shell->shell_func_list_size].c = c;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68f9      	ldr	r1, [r7, #12]
 8005210:	0013      	movs	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	189b      	adds	r3, r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	18cb      	adds	r3, r1, r3
 800521a:	3344      	adds	r3, #68	; 0x44
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	601a      	str	r2, [r3, #0]
		shell->shell_func_list[shell->shell_func_list_size].func = pfunc;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68f9      	ldr	r1, [r7, #12]
 8005226:	0013      	movs	r3, r2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	189b      	adds	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	18cb      	adds	r3, r1, r3
 8005230:	3348      	adds	r3, #72	; 0x48
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
		shell->shell_func_list[shell->shell_func_list_size].description = description;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	0013      	movs	r3, r2
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	189b      	adds	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	18cb      	adds	r3, r1, r3
 8005246:	334c      	adds	r3, #76	; 0x4c
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	601a      	str	r2, [r3, #0]
		shell->shell_func_list_size++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	601a      	str	r2, [r3, #0]
		return 0;
 8005256:	2300      	movs	r3, #0
 8005258:	e001      	b.n	800525e <sh_add+0x6a>
	}
	return -1;
 800525a:	2301      	movs	r3, #1
 800525c:	425b      	negs	r3, r3
}
 800525e:	0018      	movs	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	b004      	add	sp, #16
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <sh_run>:

int sh_run(h_shell_t* shell) {
 8005268:	b590      	push	{r4, r7, lr}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	613b      	str	r3, [r7, #16]

	static char cmd_buffer[BUFFER_SIZE];

	while(1) {
		sh_uartWrite(shell, g_promptString, 2);
 8005278:	4937      	ldr	r1, [pc, #220]	; (8005358 <sh_run+0xf0>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	0018      	movs	r0, r3
 8005280:	f7ff fe54 	bl	8004f2c <sh_uartWrite>
		reading = 1;
 8005284:	2301      	movs	r3, #1
 8005286:	617b      	str	r3, [r7, #20]

		while(reading) {
 8005288:	e05b      	b.n	8005342 <sh_run+0xda>
			//printf("shell reading loop in\r\n");
			char c = sh_uartRead(shell);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0018      	movs	r0, r3
 800528e:	f7ff ff3b 	bl	8005108 <sh_uartRead>
 8005292:	0003      	movs	r3, r0
 8005294:	001a      	movs	r2, r3
 8005296:	210b      	movs	r1, #11
 8005298:	187b      	adds	r3, r7, r1
 800529a:	701a      	strb	r2, [r3, #0]
			int size;

			switch(c){
 800529c:	187b      	adds	r3, r7, r1
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d02e      	beq.n	8005302 <sh_run+0x9a>
 80052a4:	2b0d      	cmp	r3, #13
 80052a6:	d139      	bne.n	800531c <sh_run+0xb4>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (shell->print_buffer, BUFFER_SIZE, "\r\n");
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4a2b      	ldr	r2, [pc, #172]	; (800535c <sh_run+0xf4>)
 80052ae:	2140      	movs	r1, #64	; 0x40
 80052b0:	0018      	movs	r0, r3
 80052b2:	f010 fecb 	bl	801604c <sniprintf>
 80052b6:	0003      	movs	r3, r0
 80052b8:	60fb      	str	r3, [r7, #12]
				sh_uartWrite(shell, shell->print_buffer, size);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	1d19      	adds	r1, r3, #4
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7ff fe31 	bl	8004f2c <sh_uartWrite>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	613a      	str	r2, [r7, #16]
 80052d0:	4a23      	ldr	r2, [pc, #140]	; (8005360 <sh_run+0xf8>)
 80052d2:	2100      	movs	r1, #0
 80052d4:	54d1      	strb	r1, [r2, r3]
				size = snprintf (shell->print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	1d18      	adds	r0, r3, #4
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <sh_run+0xf8>)
 80052dc:	4a21      	ldr	r2, [pc, #132]	; (8005364 <sh_run+0xfc>)
 80052de:	2140      	movs	r1, #64	; 0x40
 80052e0:	f010 feb4 	bl	801604c <sniprintf>
 80052e4:	0003      	movs	r3, r0
 80052e6:	60fb      	str	r3, [r7, #12]
				sh_uartWrite(shell, shell->print_buffer, size);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	1d19      	adds	r1, r3, #4
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	0018      	movs	r0, r3
 80052f4:	f7ff fe1a 	bl	8004f2c <sh_uartWrite>
				reading = 0;        //exit read loop
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
				break;
 8005300:	e01f      	b.n	8005342 <sh_run+0xda>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	dd1b      	ble.n	8005340 <sh_run+0xd8>
					pos--;          //remove it in buffer
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3b01      	subs	r3, #1
 800530c:	613b      	str	r3, [r7, #16]

					sh_uartWrite(shell, g_backspaceString, 3);	// delete the char on the terminal
 800530e:	4916      	ldr	r1, [pc, #88]	; (8005368 <sh_run+0x100>)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2203      	movs	r2, #3
 8005314:	0018      	movs	r0, r3
 8005316:	f7ff fe09 	bl	8004f2c <sh_uartWrite>
				}
				break;
 800531a:	e011      	b.n	8005340 <sh_run+0xd8>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b3f      	cmp	r3, #63	; 0x3f
 8005320:	dc0f      	bgt.n	8005342 <sh_run+0xda>
					sh_uartWrite(shell, &c, 1);
 8005322:	240b      	movs	r4, #11
 8005324:	1939      	adds	r1, r7, r4
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	0018      	movs	r0, r3
 800532c:	f7ff fdfe 	bl	8004f2c <sh_uartWrite>
					cmd_buffer[pos++] = c; //store
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	613a      	str	r2, [r7, #16]
 8005336:	193a      	adds	r2, r7, r4
 8005338:	7811      	ldrb	r1, [r2, #0]
 800533a:	4a09      	ldr	r2, [pc, #36]	; (8005360 <sh_run+0xf8>)
 800533c:	54d1      	strb	r1, [r2, r3]
 800533e:	e000      	b.n	8005342 <sh_run+0xda>
				break;
 8005340:	46c0      	nop			; (mov r8, r8)
		while(reading) {
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1a0      	bne.n	800528a <sh_run+0x22>
				}
			}
		}
		sh_exec(shell, cmd_buffer);
 8005348:	4a05      	ldr	r2, [pc, #20]	; (8005360 <sh_run+0xf8>)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0011      	movs	r1, r2
 800534e:	0018      	movs	r0, r3
 8005350:	f7ff fe66 	bl	8005020 <sh_exec>
		sh_uartWrite(shell, g_promptString, 2);
 8005354:	e790      	b.n	8005278 <sh_run+0x10>
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	20000008 	.word	0x20000008
 800535c:	0801af7c 	.word	0x0801af7c
 8005360:	20000e2c 	.word	0x20000e2c
 8005364:	0801af80 	.word	0x0801af80
 8005368:	20000004 	.word	0x20000004

0800536c <configureTimerForRunTimeStats>:
	}
	return 0;
}

//The two following functions need to be defined to get the task statistics
void configureTimerForRunTimeStats(void){
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0

}
 8005370:	46c0      	nop			; (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void){
 8005376:	b580      	push	{r7, lr}
 8005378:	af00      	add	r7, sp, #0
	//return 0;
}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	0018      	movs	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800538a:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <HAL_MspInit+0x50>)
 800538c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800538e:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <HAL_MspInit+0x50>)
 8005390:	2101      	movs	r1, #1
 8005392:	430a      	orrs	r2, r1
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
 8005396:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <HAL_MspInit+0x50>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2201      	movs	r2, #1
 800539c:	4013      	ands	r3, r2
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053a2:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <HAL_MspInit+0x50>)
 80053a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a6:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_MspInit+0x50>)
 80053a8:	2180      	movs	r1, #128	; 0x80
 80053aa:	0549      	lsls	r1, r1, #21
 80053ac:	430a      	orrs	r2, r1
 80053ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <HAL_MspInit+0x50>)
 80053b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	055b      	lsls	r3, r3, #21
 80053b8:	4013      	ands	r3, r2
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80053be:	2302      	movs	r3, #2
 80053c0:	425b      	negs	r3, r3
 80053c2:	2200      	movs	r2, #0
 80053c4:	2103      	movs	r1, #3
 80053c6:	0018      	movs	r0, r3
 80053c8:	f001 fc22 	bl	8006c10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b002      	add	sp, #8
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40021000 	.word	0x40021000

080053d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053d8:	b5b0      	push	{r4, r5, r7, lr}
 80053da:	b08c      	sub	sp, #48	; 0x30
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80053e0:	232b      	movs	r3, #43	; 0x2b
 80053e2:	18fb      	adds	r3, r7, r3
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80053e8:	4b37      	ldr	r3, [pc, #220]	; (80054c8 <HAL_InitTick+0xf0>)
 80053ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ec:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <HAL_InitTick+0xf0>)
 80053ee:	2110      	movs	r1, #16
 80053f0:	430a      	orrs	r2, r1
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80053f4:	4b34      	ldr	r3, [pc, #208]	; (80054c8 <HAL_InitTick+0xf0>)
 80053f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f8:	2210      	movs	r2, #16
 80053fa:	4013      	ands	r3, r2
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005400:	230c      	movs	r3, #12
 8005402:	18fa      	adds	r2, r7, r3
 8005404:	2410      	movs	r4, #16
 8005406:	193b      	adds	r3, r7, r4
 8005408:	0011      	movs	r1, r2
 800540a:	0018      	movs	r0, r3
 800540c:	f003 f970 	bl	80086f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005410:	193b      	adds	r3, r7, r4
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	2b00      	cmp	r3, #0
 800541a:	d104      	bne.n	8005426 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800541c:	f003 f952 	bl	80086c4 <HAL_RCC_GetPCLK1Freq>
 8005420:	0003      	movs	r3, r0
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005424:	e004      	b.n	8005430 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005426:	f003 f94d 	bl	80086c4 <HAL_RCC_GetPCLK1Freq>
 800542a:	0003      	movs	r3, r0
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	4926      	ldr	r1, [pc, #152]	; (80054cc <HAL_InitTick+0xf4>)
 8005434:	0018      	movs	r0, r3
 8005436:	f7fa fe8d 	bl	8000154 <__udivsi3>
 800543a:	0003      	movs	r3, r0
 800543c:	3b01      	subs	r3, #1
 800543e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005440:	4b23      	ldr	r3, [pc, #140]	; (80054d0 <HAL_InitTick+0xf8>)
 8005442:	4a24      	ldr	r2, [pc, #144]	; (80054d4 <HAL_InitTick+0xfc>)
 8005444:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <HAL_InitTick+0xf8>)
 8005448:	4a23      	ldr	r2, [pc, #140]	; (80054d8 <HAL_InitTick+0x100>)
 800544a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800544c:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <HAL_InitTick+0xf8>)
 800544e:	6a3a      	ldr	r2, [r7, #32]
 8005450:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8005452:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <HAL_InitTick+0xf8>)
 8005454:	2200      	movs	r2, #0
 8005456:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005458:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <HAL_InitTick+0xf8>)
 800545a:	2200      	movs	r2, #0
 800545c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800545e:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <HAL_InitTick+0xf8>)
 8005460:	2200      	movs	r2, #0
 8005462:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005464:	252b      	movs	r5, #43	; 0x2b
 8005466:	197c      	adds	r4, r7, r5
 8005468:	4b19      	ldr	r3, [pc, #100]	; (80054d0 <HAL_InitTick+0xf8>)
 800546a:	0018      	movs	r0, r3
 800546c:	f003 fa9e 	bl	80089ac <HAL_TIM_Base_Init>
 8005470:	0003      	movs	r3, r0
 8005472:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8005474:	197b      	adds	r3, r7, r5
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11e      	bne.n	80054ba <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800547c:	197c      	adds	r4, r7, r5
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <HAL_InitTick+0xf8>)
 8005480:	0018      	movs	r0, r3
 8005482:	f003 faeb 	bl	8008a5c <HAL_TIM_Base_Start_IT>
 8005486:	0003      	movs	r3, r0
 8005488:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800548a:	197b      	adds	r3, r7, r5
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d113      	bne.n	80054ba <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005492:	2011      	movs	r0, #17
 8005494:	f001 fbd1 	bl	8006c3a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b03      	cmp	r3, #3
 800549c:	d809      	bhi.n	80054b2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	0019      	movs	r1, r3
 80054a4:	2011      	movs	r0, #17
 80054a6:	f001 fbb3 	bl	8006c10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054aa:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <HAL_InitTick+0x104>)
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e003      	b.n	80054ba <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80054b2:	232b      	movs	r3, #43	; 0x2b
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80054ba:	232b      	movs	r3, #43	; 0x2b
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	781b      	ldrb	r3, [r3, #0]
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b00c      	add	sp, #48	; 0x30
 80054c6:	bdb0      	pop	{r4, r5, r7, pc}
 80054c8:	40021000 	.word	0x40021000
 80054cc:	000f4240 	.word	0x000f4240
 80054d0:	20000e6c 	.word	0x20000e6c
 80054d4:	40001000 	.word	0x40001000
 80054d8:	000003e7 	.word	0x000003e7
 80054dc:	20000010 	.word	0x20000010

080054e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80054e4:	e7fe      	b.n	80054e4 <NMI_Handler+0x4>

080054e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054ea:	e7fe      	b.n	80054ea <HardFault_Handler+0x4>

080054ec <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80054f0:	2040      	movs	r0, #64	; 0x40
 80054f2:	f001 fe01 	bl	80070f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	0018      	movs	r0, r3
 80054fc:	f001 fdfc 	bl	80070f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8005500:	2380      	movs	r3, #128	; 0x80
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	0018      	movs	r0, r3
 8005506:	f001 fdf7 	bl	80070f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	0018      	movs	r0, r3
 8005510:	f001 fdf2 	bl	80070f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005520:	4b03      	ldr	r3, [pc, #12]	; (8005530 <TIM6_IRQHandler+0x14>)
 8005522:	0018      	movs	r0, r3
 8005524:	f004 f886 	bl	8009634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	20000e6c 	.word	0x20000e6c

08005534 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	speedControlLoop_updateSpeed(robot.rightMotor, robot.rightSpeedCommand);
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <TIM7_IRQHandler+0x34>)
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <TIM7_IRQHandler+0x34>)
 800553e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005540:	0019      	movs	r1, r3
 8005542:	0010      	movs	r0, r2
 8005544:	f7fe fb6a 	bl	8003c1c <speedControlLoop_updateSpeed>
	speedControlLoop_updateSpeed(robot.leftMotor, robot.leftSpeedCommand);
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <TIM7_IRQHandler+0x34>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <TIM7_IRQHandler+0x34>)
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	0019      	movs	r1, r3
 8005552:	0010      	movs	r0, r2
 8005554:	f7fe fb62 	bl	8003c1c <speedControlLoop_updateSpeed>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <TIM7_IRQHandler+0x38>)
 800555a:	0018      	movs	r0, r3
 800555c:	f004 f86a 	bl	8009634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	20000914 	.word	0x20000914
 800556c:	20000f54 	.word	0x20000f54

08005570 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	colorSensorHandleInputCapture_IT(&color_sensor1, TIM14);
 8005574:	4a06      	ldr	r2, [pc, #24]	; (8005590 <TIM14_IRQHandler+0x20>)
 8005576:	4b07      	ldr	r3, [pc, #28]	; (8005594 <TIM14_IRQHandler+0x24>)
 8005578:	0011      	movs	r1, r2
 800557a:	0018      	movs	r0, r3
 800557c:	f7fd fff4 	bl	8003568 <colorSensorHandleInputCapture_IT>

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <TIM14_IRQHandler+0x28>)
 8005582:	0018      	movs	r0, r3
 8005584:	f004 f856 	bl	8009634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005588:	46c0      	nop			; (mov r8, r8)
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	40002000 	.word	0x40002000
 8005594:	20000994 	.word	0x20000994
 8005598:	20000fa0 	.word	0x20000fa0

0800559c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
	robot_updateOdometry(&robot);
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <TIM17_IRQHandler+0x24>)
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7ff fad0 	bl	8004b48 <robot_updateOdometry>
	robot_virtualBorderAvoidance(&robot);
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <TIM17_IRQHandler+0x24>)
 80055aa:	0018      	movs	r0, r3
 80055ac:	f7ff fc40 	bl	8004e30 <robot_virtualBorderAvoidance>

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <TIM17_IRQHandler+0x28>)
 80055b2:	0018      	movs	r0, r3
 80055b4:	f004 f83e 	bl	8009634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80055b8:	46c0      	nop			; (mov r8, r8)
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	20000914 	.word	0x20000914
 80055c4:	20001084 	.word	0x20001084

080055c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	BaseType_t higher_priority_task_woken = pdFALSE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	607b      	str	r3, [r7, #4]

	sh_uartRead(&g_shell);
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <USART1_IRQHandler+0x40>)
 80055d4:	0018      	movs	r0, r3
 80055d6:	f7ff fd97 	bl	8005108 <sh_uartRead>
	xSemaphoreGiveFromISR(sem_usart1, &higher_priority_task_woken);
 80055da:	4b0c      	ldr	r3, [pc, #48]	; (800560c <USART1_IRQHandler+0x44>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	1d3a      	adds	r2, r7, #4
 80055e0:	0011      	movs	r1, r2
 80055e2:	0018      	movs	r0, r3
 80055e4:	f00d fe95 	bl	8013312 <xQueueGiveFromISR>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <USART1_IRQHandler+0x48>)
 80055ea:	0018      	movs	r0, r3
 80055ec:	f005 fdd6 	bl	800b19c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	portYIELD_FROM_ISR(higher_priority_task_woken);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <USART1_IRQHandler+0x36>
 80055f6:	4b07      	ldr	r3, [pc, #28]	; (8005614 <USART1_IRQHandler+0x4c>)
 80055f8:	2280      	movs	r2, #128	; 0x80
 80055fa:	0552      	lsls	r2, r2, #21
 80055fc:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	46bd      	mov	sp, r7
 8005602:	b002      	add	sp, #8
 8005604:	bd80      	pop	{r7, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	20000680 	.word	0x20000680
 800560c:	200010d0 	.word	0x200010d0
 8005610:	200010d4 	.word	0x200010d4
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800561c:	4b03      	ldr	r3, [pc, #12]	; (800562c <USART2_IRQHandler+0x14>)
 800561e:	0018      	movs	r0, r3
 8005620:	f005 fdbc 	bl	800b19c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005624:	46c0      	nop			; (mov r8, r8)
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	20001168 	.word	0x20001168

08005630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  return 1;
 8005634:	2301      	movs	r3, #1
}
 8005636:	0018      	movs	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <_kill>:

int _kill(int pid, int sig)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005646:	f00f fbe5 	bl	8014e14 <__errno>
 800564a:	0003      	movs	r3, r0
 800564c:	2216      	movs	r2, #22
 800564e:	601a      	str	r2, [r3, #0]
  return -1;
 8005650:	2301      	movs	r3, #1
 8005652:	425b      	negs	r3, r3
}
 8005654:	0018      	movs	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	b002      	add	sp, #8
 800565a:	bd80      	pop	{r7, pc}

0800565c <_exit>:

void _exit (int status)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005664:	2301      	movs	r3, #1
 8005666:	425a      	negs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	0011      	movs	r1, r2
 800566c:	0018      	movs	r0, r3
 800566e:	f7ff ffe5 	bl	800563c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005672:	e7fe      	b.n	8005672 <_exit+0x16>

08005674 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	e00a      	b.n	800569c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005686:	f7fe fe55 	bl	8004334 <__io_getchar>
 800568a:	0001      	movs	r1, r0
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	60ba      	str	r2, [r7, #8]
 8005692:	b2ca      	uxtb	r2, r1
 8005694:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	3301      	adds	r3, #1
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	dbf0      	blt.n	8005686 <_read+0x12>
  }

  return len;
 80056a4:	687b      	ldr	r3, [r7, #4]
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b006      	add	sp, #24
 80056ac:	bd80      	pop	{r7, pc}

080056ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b086      	sub	sp, #24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e009      	b.n	80056d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	60ba      	str	r2, [r7, #8]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7fe fe17 	bl	80042fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	3301      	adds	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	429a      	cmp	r2, r3
 80056da:	dbf1      	blt.n	80056c0 <_write+0x12>
  }
  return len;
 80056dc:	687b      	ldr	r3, [r7, #4]
}
 80056de:	0018      	movs	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b006      	add	sp, #24
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <_close>:

int _close(int file)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80056ee:	2301      	movs	r3, #1
 80056f0:	425b      	negs	r3, r3
}
 80056f2:	0018      	movs	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b002      	add	sp, #8
 80056f8:	bd80      	pop	{r7, pc}

080056fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	0192      	lsls	r2, r2, #6
 800570a:	605a      	str	r2, [r3, #4]
  return 0;
 800570c:	2300      	movs	r3, #0
}
 800570e:	0018      	movs	r0, r3
 8005710:	46bd      	mov	sp, r7
 8005712:	b002      	add	sp, #8
 8005714:	bd80      	pop	{r7, pc}

08005716 <_isatty>:

int _isatty(int file)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800571e:	2301      	movs	r3, #1
}
 8005720:	0018      	movs	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	b002      	add	sp, #8
 8005726:	bd80      	pop	{r7, pc}

08005728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005734:	2300      	movs	r3, #0
}
 8005736:	0018      	movs	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	b004      	add	sp, #16
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005748:	4a14      	ldr	r2, [pc, #80]	; (800579c <_sbrk+0x5c>)
 800574a:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <_sbrk+0x60>)
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005754:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <_sbrk+0x64>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800575c:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <_sbrk+0x64>)
 800575e:	4a12      	ldr	r2, [pc, #72]	; (80057a8 <_sbrk+0x68>)
 8005760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005762:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <_sbrk+0x64>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	18d3      	adds	r3, r2, r3
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	429a      	cmp	r2, r3
 800576e:	d207      	bcs.n	8005780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005770:	f00f fb50 	bl	8014e14 <__errno>
 8005774:	0003      	movs	r3, r0
 8005776:	220c      	movs	r2, #12
 8005778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800577a:	2301      	movs	r3, #1
 800577c:	425b      	negs	r3, r3
 800577e:	e009      	b.n	8005794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005780:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <_sbrk+0x64>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005786:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <_sbrk+0x64>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	18d2      	adds	r2, r2, r3
 800578e:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <_sbrk+0x64>)
 8005790:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005792:	68fb      	ldr	r3, [r7, #12]
}
 8005794:	0018      	movs	r0, r3
 8005796:	46bd      	mov	sp, r7
 8005798:	b006      	add	sp, #24
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20009000 	.word	0x20009000
 80057a0:	00000600 	.word	0x00000600
 80057a4:	20000eb8 	.word	0x20000eb8
 80057a8:	20005438 	.word	0x20005438

080057ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057b0:	46c0      	nop			; (mov r8, r8)
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b08d      	sub	sp, #52	; 0x34
 80057bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80057be:	240c      	movs	r4, #12
 80057c0:	193b      	adds	r3, r7, r4
 80057c2:	0018      	movs	r0, r3
 80057c4:	2324      	movs	r3, #36	; 0x24
 80057c6:	001a      	movs	r2, r3
 80057c8:	2100      	movs	r1, #0
 80057ca:	f00f fb6a 	bl	8014ea2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057ce:	003b      	movs	r3, r7
 80057d0:	0018      	movs	r0, r3
 80057d2:	230c      	movs	r3, #12
 80057d4:	001a      	movs	r2, r3
 80057d6:	2100      	movs	r1, #0
 80057d8:	f00f fb63 	bl	8014ea2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80057dc:	4b28      	ldr	r3, [pc, #160]	; (8005880 <MX_TIM1_Init+0xc8>)
 80057de:	4a29      	ldr	r2, [pc, #164]	; (8005884 <MX_TIM1_Init+0xcc>)
 80057e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80057e2:	4b27      	ldr	r3, [pc, #156]	; (8005880 <MX_TIM1_Init+0xc8>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057e8:	4b25      	ldr	r3, [pc, #148]	; (8005880 <MX_TIM1_Init+0xc8>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80057ee:	4b24      	ldr	r3, [pc, #144]	; (8005880 <MX_TIM1_Init+0xc8>)
 80057f0:	4a25      	ldr	r2, [pc, #148]	; (8005888 <MX_TIM1_Init+0xd0>)
 80057f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057f4:	4b22      	ldr	r3, [pc, #136]	; (8005880 <MX_TIM1_Init+0xc8>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80057fa:	4b21      	ldr	r3, [pc, #132]	; (8005880 <MX_TIM1_Init+0xc8>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005800:	4b1f      	ldr	r3, [pc, #124]	; (8005880 <MX_TIM1_Init+0xc8>)
 8005802:	2200      	movs	r2, #0
 8005804:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005806:	0021      	movs	r1, r4
 8005808:	187b      	adds	r3, r7, r1
 800580a:	2203      	movs	r2, #3
 800580c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800580e:	187b      	adds	r3, r7, r1
 8005810:	2200      	movs	r2, #0
 8005812:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005814:	187b      	adds	r3, r7, r1
 8005816:	2201      	movs	r2, #1
 8005818:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800581a:	187b      	adds	r3, r7, r1
 800581c:	2200      	movs	r2, #0
 800581e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8005820:	187b      	adds	r3, r7, r1
 8005822:	2200      	movs	r2, #0
 8005824:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005826:	187b      	adds	r3, r7, r1
 8005828:	2200      	movs	r2, #0
 800582a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800582c:	187b      	adds	r3, r7, r1
 800582e:	2201      	movs	r2, #1
 8005830:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005832:	187b      	adds	r3, r7, r1
 8005834:	2200      	movs	r2, #0
 8005836:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8005838:	187b      	adds	r3, r7, r1
 800583a:	2200      	movs	r2, #0
 800583c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800583e:	187a      	adds	r2, r7, r1
 8005840:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <MX_TIM1_Init+0xc8>)
 8005842:	0011      	movs	r1, r2
 8005844:	0018      	movs	r0, r3
 8005846:	f003 fda9 	bl	800939c <HAL_TIM_Encoder_Init>
 800584a:	1e03      	subs	r3, r0, #0
 800584c:	d001      	beq.n	8005852 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800584e:	f7ff f931 	bl	8004ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005852:	003b      	movs	r3, r7
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005858:	003b      	movs	r3, r7
 800585a:	2200      	movs	r2, #0
 800585c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800585e:	003b      	movs	r3, r7
 8005860:	2200      	movs	r2, #0
 8005862:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005864:	003a      	movs	r2, r7
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <MX_TIM1_Init+0xc8>)
 8005868:	0011      	movs	r1, r2
 800586a:	0018      	movs	r0, r3
 800586c:	f005 f8c2 	bl	800a9f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005870:	1e03      	subs	r3, r0, #0
 8005872:	d001      	beq.n	8005878 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8005874:	f7ff f91e 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	b00d      	add	sp, #52	; 0x34
 800587e:	bd90      	pop	{r4, r7, pc}
 8005880:	20000ebc 	.word	0x20000ebc
 8005884:	40012c00 	.word	0x40012c00
 8005888:	0000ffff 	.word	0x0000ffff

0800588c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b08d      	sub	sp, #52	; 0x34
 8005890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005892:	240c      	movs	r4, #12
 8005894:	193b      	adds	r3, r7, r4
 8005896:	0018      	movs	r0, r3
 8005898:	2324      	movs	r3, #36	; 0x24
 800589a:	001a      	movs	r2, r3
 800589c:	2100      	movs	r1, #0
 800589e:	f00f fb00 	bl	8014ea2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058a2:	003b      	movs	r3, r7
 80058a4:	0018      	movs	r0, r3
 80058a6:	230c      	movs	r3, #12
 80058a8:	001a      	movs	r2, r3
 80058aa:	2100      	movs	r1, #0
 80058ac:	f00f faf9 	bl	8014ea2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80058b0:	4b25      	ldr	r3, [pc, #148]	; (8005948 <MX_TIM3_Init+0xbc>)
 80058b2:	4a26      	ldr	r2, [pc, #152]	; (800594c <MX_TIM3_Init+0xc0>)
 80058b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <MX_TIM3_Init+0xbc>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058bc:	4b22      	ldr	r3, [pc, #136]	; (8005948 <MX_TIM3_Init+0xbc>)
 80058be:	2200      	movs	r2, #0
 80058c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80058c2:	4b21      	ldr	r3, [pc, #132]	; (8005948 <MX_TIM3_Init+0xbc>)
 80058c4:	4a22      	ldr	r2, [pc, #136]	; (8005950 <MX_TIM3_Init+0xc4>)
 80058c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058c8:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <MX_TIM3_Init+0xbc>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058ce:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <MX_TIM3_Init+0xbc>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80058d4:	0021      	movs	r1, r4
 80058d6:	187b      	adds	r3, r7, r1
 80058d8:	2203      	movs	r2, #3
 80058da:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80058dc:	187b      	adds	r3, r7, r1
 80058de:	2200      	movs	r2, #0
 80058e0:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80058e2:	187b      	adds	r3, r7, r1
 80058e4:	2201      	movs	r2, #1
 80058e6:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80058e8:	187b      	adds	r3, r7, r1
 80058ea:	2200      	movs	r2, #0
 80058ec:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80058ee:	187b      	adds	r3, r7, r1
 80058f0:	2200      	movs	r2, #0
 80058f2:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80058f4:	187b      	adds	r3, r7, r1
 80058f6:	2200      	movs	r2, #0
 80058f8:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80058fa:	187b      	adds	r3, r7, r1
 80058fc:	2201      	movs	r2, #1
 80058fe:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005900:	187b      	adds	r3, r7, r1
 8005902:	2200      	movs	r2, #0
 8005904:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8005906:	187b      	adds	r3, r7, r1
 8005908:	2200      	movs	r2, #0
 800590a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800590c:	187a      	adds	r2, r7, r1
 800590e:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <MX_TIM3_Init+0xbc>)
 8005910:	0011      	movs	r1, r2
 8005912:	0018      	movs	r0, r3
 8005914:	f003 fd42 	bl	800939c <HAL_TIM_Encoder_Init>
 8005918:	1e03      	subs	r3, r0, #0
 800591a:	d001      	beq.n	8005920 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800591c:	f7ff f8ca 	bl	8004ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005920:	003b      	movs	r3, r7
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005926:	003b      	movs	r3, r7
 8005928:	2200      	movs	r2, #0
 800592a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800592c:	003a      	movs	r2, r7
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <MX_TIM3_Init+0xbc>)
 8005930:	0011      	movs	r1, r2
 8005932:	0018      	movs	r0, r3
 8005934:	f005 f85e 	bl	800a9f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005938:	1e03      	subs	r3, r0, #0
 800593a:	d001      	beq.n	8005940 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800593c:	f7ff f8ba 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	46bd      	mov	sp, r7
 8005944:	b00d      	add	sp, #52	; 0x34
 8005946:	bd90      	pop	{r4, r7, pc}
 8005948:	20000f08 	.word	0x20000f08
 800594c:	40000400 	.word	0x40000400
 8005950:	0000ffff 	.word	0x0000ffff

08005954 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800595a:	1d3b      	adds	r3, r7, #4
 800595c:	0018      	movs	r0, r3
 800595e:	230c      	movs	r3, #12
 8005960:	001a      	movs	r2, r3
 8005962:	2100      	movs	r1, #0
 8005964:	f00f fa9d 	bl	8014ea2 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005968:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <MX_TIM7_Init+0x6c>)
 800596a:	4a16      	ldr	r2, [pc, #88]	; (80059c4 <MX_TIM7_Init+0x70>)
 800596c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64;
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <MX_TIM7_Init+0x6c>)
 8005970:	2240      	movs	r2, #64	; 0x40
 8005972:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005974:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <MX_TIM7_Init+0x6c>)
 8005976:	2200      	movs	r2, #0
 8005978:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 800597a:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <MX_TIM7_Init+0x6c>)
 800597c:	4a12      	ldr	r2, [pc, #72]	; (80059c8 <MX_TIM7_Init+0x74>)
 800597e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <MX_TIM7_Init+0x6c>)
 8005982:	2200      	movs	r2, #0
 8005984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005986:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <MX_TIM7_Init+0x6c>)
 8005988:	0018      	movs	r0, r3
 800598a:	f003 f80f 	bl	80089ac <HAL_TIM_Base_Init>
 800598e:	1e03      	subs	r3, r0, #0
 8005990:	d001      	beq.n	8005996 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005992:	f7ff f88f 	bl	8004ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800599c:	1d3b      	adds	r3, r7, #4
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80059a2:	1d3a      	adds	r2, r7, #4
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <MX_TIM7_Init+0x6c>)
 80059a6:	0011      	movs	r1, r2
 80059a8:	0018      	movs	r0, r3
 80059aa:	f005 f823 	bl	800a9f4 <HAL_TIMEx_MasterConfigSynchronization>
 80059ae:	1e03      	subs	r3, r0, #0
 80059b0:	d001      	beq.n	80059b6 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80059b2:	f7ff f87f 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b004      	add	sp, #16
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	20000f54 	.word	0x20000f54
 80059c4:	40001400 	.word	0x40001400
 80059c8:	00001388 	.word	0x00001388

080059cc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80059d2:	003b      	movs	r3, r7
 80059d4:	0018      	movs	r0, r3
 80059d6:	2310      	movs	r3, #16
 80059d8:	001a      	movs	r2, r3
 80059da:	2100      	movs	r1, #0
 80059dc:	f00f fa61 	bl	8014ea2 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <MX_TIM14_Init+0x8c>)
 80059e2:	4a1e      	ldr	r2, [pc, #120]	; (8005a5c <MX_TIM14_Init+0x90>)
 80059e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 100-1;
 80059e6:	4b1c      	ldr	r3, [pc, #112]	; (8005a58 <MX_TIM14_Init+0x8c>)
 80059e8:	2263      	movs	r2, #99	; 0x63
 80059ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059ec:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <MX_TIM14_Init+0x8c>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 64000-1;
 80059f2:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <MX_TIM14_Init+0x8c>)
 80059f4:	4a1a      	ldr	r2, [pc, #104]	; (8005a60 <MX_TIM14_Init+0x94>)
 80059f6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059f8:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <MX_TIM14_Init+0x8c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059fe:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <MX_TIM14_Init+0x8c>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005a04:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <MX_TIM14_Init+0x8c>)
 8005a06:	0018      	movs	r0, r3
 8005a08:	f002 ffd0 	bl	80089ac <HAL_TIM_Base_Init>
 8005a0c:	1e03      	subs	r3, r0, #0
 8005a0e:	d001      	beq.n	8005a14 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8005a10:	f7ff f850 	bl	8004ab4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <MX_TIM14_Init+0x8c>)
 8005a16:	0018      	movs	r0, r3
 8005a18:	f003 fa74 	bl	8008f04 <HAL_TIM_IC_Init>
 8005a1c:	1e03      	subs	r3, r0, #0
 8005a1e:	d001      	beq.n	8005a24 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8005a20:	f7ff f848 	bl	8004ab4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005a24:	003b      	movs	r3, r7
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005a2a:	003b      	movs	r3, r7
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005a30:	003b      	movs	r3, r7
 8005a32:	2200      	movs	r2, #0
 8005a34:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8005a36:	003b      	movs	r3, r7
 8005a38:	2200      	movs	r2, #0
 8005a3a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005a3c:	0039      	movs	r1, r7
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <MX_TIM14_Init+0x8c>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	0018      	movs	r0, r3
 8005a44:	f003 ff28 	bl	8009898 <HAL_TIM_IC_ConfigChannel>
 8005a48:	1e03      	subs	r3, r0, #0
 8005a4a:	d001      	beq.n	8005a50 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8005a4c:	f7ff f832 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b004      	add	sp, #16
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20000fa0 	.word	0x20000fa0
 8005a5c:	40002000 	.word	0x40002000
 8005a60:	0000f9ff 	.word	0x0000f9ff

08005a64 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b09c      	sub	sp, #112	; 0x70
 8005a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a6a:	2360      	movs	r3, #96	; 0x60
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	0018      	movs	r0, r3
 8005a70:	2310      	movs	r3, #16
 8005a72:	001a      	movs	r2, r3
 8005a74:	2100      	movs	r1, #0
 8005a76:	f00f fa14 	bl	8014ea2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a7a:	2354      	movs	r3, #84	; 0x54
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	0018      	movs	r0, r3
 8005a80:	230c      	movs	r3, #12
 8005a82:	001a      	movs	r2, r3
 8005a84:	2100      	movs	r1, #0
 8005a86:	f00f fa0c 	bl	8014ea2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a8a:	2338      	movs	r3, #56	; 0x38
 8005a8c:	18fb      	adds	r3, r7, r3
 8005a8e:	0018      	movs	r0, r3
 8005a90:	231c      	movs	r3, #28
 8005a92:	001a      	movs	r2, r3
 8005a94:	2100      	movs	r1, #0
 8005a96:	f00f fa04 	bl	8014ea2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	2334      	movs	r3, #52	; 0x34
 8005aa0:	001a      	movs	r2, r3
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	f00f f9fd 	bl	8014ea2 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005aa8:	4b47      	ldr	r3, [pc, #284]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005aaa:	4a48      	ldr	r2, [pc, #288]	; (8005bcc <MX_TIM15_Init+0x168>)
 8005aac:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 8005aae:	4b46      	ldr	r3, [pc, #280]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ab4:	4b44      	ldr	r3, [pc, #272]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1499;
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005abc:	4a44      	ldr	r2, [pc, #272]	; (8005bd0 <MX_TIM15_Init+0x16c>)
 8005abe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ac0:	4b41      	ldr	r3, [pc, #260]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005ac6:	4b40      	ldr	r3, [pc, #256]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005acc:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005ad2:	4b3d      	ldr	r3, [pc, #244]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f002 ff69 	bl	80089ac <HAL_TIM_Base_Init>
 8005ada:	1e03      	subs	r3, r0, #0
 8005adc:	d001      	beq.n	8005ae2 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8005ade:	f7fe ffe9 	bl	8004ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ae2:	2160      	movs	r1, #96	; 0x60
 8005ae4:	187b      	adds	r3, r7, r1
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	0152      	lsls	r2, r2, #5
 8005aea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005aec:	187a      	adds	r2, r7, r1
 8005aee:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005af0:	0011      	movs	r1, r2
 8005af2:	0018      	movs	r0, r3
 8005af4:	f004 f874 	bl	8009be0 <HAL_TIM_ConfigClockSource>
 8005af8:	1e03      	subs	r3, r0, #0
 8005afa:	d001      	beq.n	8005b00 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8005afc:	f7fe ffda 	bl	8004ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005b00:	4b31      	ldr	r3, [pc, #196]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005b02:	0018      	movs	r0, r3
 8005b04:	f003 f82e 	bl	8008b64 <HAL_TIM_PWM_Init>
 8005b08:	1e03      	subs	r3, r0, #0
 8005b0a:	d001      	beq.n	8005b10 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8005b0c:	f7fe ffd2 	bl	8004ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b10:	2154      	movs	r1, #84	; 0x54
 8005b12:	187b      	adds	r3, r7, r1
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b18:	187b      	adds	r3, r7, r1
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005b1e:	187a      	adds	r2, r7, r1
 8005b20:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005b22:	0011      	movs	r1, r2
 8005b24:	0018      	movs	r0, r3
 8005b26:	f004 ff65 	bl	800a9f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005b2a:	1e03      	subs	r3, r0, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8005b2e:	f7fe ffc1 	bl	8004ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b32:	2138      	movs	r1, #56	; 0x38
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	2260      	movs	r2, #96	; 0x60
 8005b38:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005b3a:	187b      	adds	r3, r7, r1
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b40:	187b      	adds	r3, r7, r1
 8005b42:	2200      	movs	r2, #0
 8005b44:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b46:	187b      	adds	r3, r7, r1
 8005b48:	2200      	movs	r2, #0
 8005b4a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	2200      	movs	r2, #0
 8005b50:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b52:	187b      	adds	r3, r7, r1
 8005b54:	2200      	movs	r2, #0
 8005b56:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b58:	187b      	adds	r3, r7, r1
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b5e:	1879      	adds	r1, r7, r1
 8005b60:	4b19      	ldr	r3, [pc, #100]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	0018      	movs	r0, r3
 8005b66:	f003 ff3b 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 8005b6a:	1e03      	subs	r3, r0, #0
 8005b6c:	d001      	beq.n	8005b72 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8005b6e:	f7fe ffa1 	bl	8004ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b78:	1d3b      	adds	r3, r7, #4
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b7e:	1d3b      	adds	r3, r7, #4
 8005b80:	2200      	movs	r2, #0
 8005b82:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b84:	1d3b      	adds	r3, r7, #4
 8005b86:	2200      	movs	r2, #0
 8005b88:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b8a:	1d3b      	adds	r3, r7, #4
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b90:	1d3b      	adds	r3, r7, #4
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	0192      	lsls	r2, r2, #6
 8005b96:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005b98:	1d3b      	adds	r3, r7, #4
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005ba4:	1d3a      	adds	r2, r7, #4
 8005ba6:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005ba8:	0011      	movs	r1, r2
 8005baa:	0018      	movs	r0, r3
 8005bac:	f004 ff8a 	bl	800aac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005bb0:	1e03      	subs	r3, r0, #0
 8005bb2:	d001      	beq.n	8005bb8 <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 8005bb4:	f7fe ff7e 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <MX_TIM15_Init+0x164>)
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 f9f6 	bl	8005fac <HAL_TIM_MspPostInit>

}
 8005bc0:	46c0      	nop			; (mov r8, r8)
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b01c      	add	sp, #112	; 0x70
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000fec 	.word	0x20000fec
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	000005db 	.word	0x000005db

08005bd4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b094      	sub	sp, #80	; 0x50
 8005bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005bda:	2334      	movs	r3, #52	; 0x34
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	0018      	movs	r0, r3
 8005be0:	231c      	movs	r3, #28
 8005be2:	001a      	movs	r2, r3
 8005be4:	2100      	movs	r1, #0
 8005be6:	f00f f95c 	bl	8014ea2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005bea:	003b      	movs	r3, r7
 8005bec:	0018      	movs	r0, r3
 8005bee:	2334      	movs	r3, #52	; 0x34
 8005bf0:	001a      	movs	r2, r3
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	f00f f955 	bl	8014ea2 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005bf8:	4b37      	ldr	r3, [pc, #220]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005bfa:	4a38      	ldr	r2, [pc, #224]	; (8005cdc <MX_TIM16_Init+0x108>)
 8005bfc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 8005bfe:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c04:	4b34      	ldr	r3, [pc, #208]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1499;
 8005c0a:	4b33      	ldr	r3, [pc, #204]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005c0c:	4a34      	ldr	r2, [pc, #208]	; (8005ce0 <MX_TIM16_Init+0x10c>)
 8005c0e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c10:	4b31      	ldr	r3, [pc, #196]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005c16:	4b30      	ldr	r3, [pc, #192]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c1c:	4b2e      	ldr	r3, [pc, #184]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005c1e:	2280      	movs	r2, #128	; 0x80
 8005c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005c22:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005c24:	0018      	movs	r0, r3
 8005c26:	f002 fec1 	bl	80089ac <HAL_TIM_Base_Init>
 8005c2a:	1e03      	subs	r3, r0, #0
 8005c2c:	d001      	beq.n	8005c32 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8005c2e:	f7fe ff41 	bl	8004ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8005c32:	4b29      	ldr	r3, [pc, #164]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005c34:	0018      	movs	r0, r3
 8005c36:	f002 ff95 	bl	8008b64 <HAL_TIM_PWM_Init>
 8005c3a:	1e03      	subs	r3, r0, #0
 8005c3c:	d001      	beq.n	8005c42 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8005c3e:	f7fe ff39 	bl	8004ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c42:	2134      	movs	r1, #52	; 0x34
 8005c44:	187b      	adds	r3, r7, r1
 8005c46:	2260      	movs	r2, #96	; 0x60
 8005c48:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005c4a:	187b      	adds	r3, r7, r1
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c50:	187b      	adds	r3, r7, r1
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c56:	187b      	adds	r3, r7, r1
 8005c58:	2200      	movs	r2, #0
 8005c5a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	2200      	movs	r2, #0
 8005c60:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c62:	187b      	adds	r3, r7, r1
 8005c64:	2200      	movs	r2, #0
 8005c66:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c68:	187b      	adds	r3, r7, r1
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c6e:	1879      	adds	r1, r7, r1
 8005c70:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	0018      	movs	r0, r3
 8005c76:	f003 feb3 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 8005c7a:	1e03      	subs	r3, r0, #0
 8005c7c:	d001      	beq.n	8005c82 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8005c7e:	f7fe ff19 	bl	8004ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005c82:	003b      	movs	r3, r7
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005c88:	003b      	movs	r3, r7
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005c8e:	003b      	movs	r3, r7
 8005c90:	2200      	movs	r2, #0
 8005c92:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005c94:	003b      	movs	r3, r7
 8005c96:	2200      	movs	r2, #0
 8005c98:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005c9a:	003b      	movs	r3, r7
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005ca0:	003b      	movs	r3, r7
 8005ca2:	2280      	movs	r2, #128	; 0x80
 8005ca4:	0192      	lsls	r2, r2, #6
 8005ca6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005ca8:	003b      	movs	r3, r7
 8005caa:	2200      	movs	r2, #0
 8005cac:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005cae:	003b      	movs	r3, r7
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005cb4:	003a      	movs	r2, r7
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005cb8:	0011      	movs	r1, r2
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f004 ff02 	bl	800aac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005cc0:	1e03      	subs	r3, r0, #0
 8005cc2:	d001      	beq.n	8005cc8 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8005cc4:	f7fe fef6 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8005cc8:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <MX_TIM16_Init+0x104>)
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f000 f96e 	bl	8005fac <HAL_TIM_MspPostInit>

}
 8005cd0:	46c0      	nop			; (mov r8, r8)
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b014      	add	sp, #80	; 0x50
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	20001038 	.word	0x20001038
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	000005db 	.word	0x000005db

08005ce4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005ce8:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <MX_TIM17_Init+0x48>)
 8005cea:	4a11      	ldr	r2, [pc, #68]	; (8005d30 <MX_TIM17_Init+0x4c>)
 8005cec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 8005cee:	4b0f      	ldr	r3, [pc, #60]	; (8005d2c <MX_TIM17_Init+0x48>)
 8005cf0:	22fa      	movs	r2, #250	; 0xfa
 8005cf2:	0092      	lsls	r2, r2, #2
 8005cf4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <MX_TIM17_Init+0x48>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000;
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <MX_TIM17_Init+0x48>)
 8005cfe:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <MX_TIM17_Init+0x50>)
 8005d00:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d02:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <MX_TIM17_Init+0x48>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005d08:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <MX_TIM17_Init+0x48>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d0e:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <MX_TIM17_Init+0x48>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <MX_TIM17_Init+0x48>)
 8005d16:	0018      	movs	r0, r3
 8005d18:	f002 fe48 	bl	80089ac <HAL_TIM_Base_Init>
 8005d1c:	1e03      	subs	r3, r0, #0
 8005d1e:	d001      	beq.n	8005d24 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8005d20:	f7fe fec8 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	20001084 	.word	0x20001084
 8005d30:	40014800 	.word	0x40014800
 8005d34:	00004e20 	.word	0x00004e20

08005d38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b08d      	sub	sp, #52	; 0x34
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d40:	241c      	movs	r4, #28
 8005d42:	193b      	adds	r3, r7, r4
 8005d44:	0018      	movs	r0, r3
 8005d46:	2314      	movs	r3, #20
 8005d48:	001a      	movs	r2, r3
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	f00f f8a9 	bl	8014ea2 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a36      	ldr	r2, [pc, #216]	; (8005e30 <HAL_TIM_Encoder_MspInit+0xf8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d132      	bne.n	8005dc0 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005d5a:	4b36      	ldr	r3, [pc, #216]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5e:	4b35      	ldr	r3, [pc, #212]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005d60:	2180      	movs	r1, #128	; 0x80
 8005d62:	0109      	lsls	r1, r1, #4
 8005d64:	430a      	orrs	r2, r1
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40
 8005d68:	4b32      	ldr	r3, [pc, #200]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	4013      	ands	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d76:	4b2f      	ldr	r3, [pc, #188]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d7a:	4b2e      	ldr	r3, [pc, #184]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	635a      	str	r2, [r3, #52]	; 0x34
 8005d82:	4b2c      	ldr	r3, [pc, #176]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	2201      	movs	r2, #1
 8005d88:	4013      	ands	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005d8e:	193b      	adds	r3, r7, r4
 8005d90:	22c0      	movs	r2, #192	; 0xc0
 8005d92:	0092      	lsls	r2, r2, #2
 8005d94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d96:	0021      	movs	r1, r4
 8005d98:	187b      	adds	r3, r7, r1
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d9e:	187b      	adds	r3, r7, r1
 8005da0:	2200      	movs	r2, #0
 8005da2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005da4:	187b      	adds	r3, r7, r1
 8005da6:	2200      	movs	r2, #0
 8005da8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005daa:	187b      	adds	r3, r7, r1
 8005dac:	2202      	movs	r2, #2
 8005dae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005db0:	187a      	adds	r2, r7, r1
 8005db2:	23a0      	movs	r3, #160	; 0xa0
 8005db4:	05db      	lsls	r3, r3, #23
 8005db6:	0011      	movs	r1, r2
 8005db8:	0018      	movs	r0, r3
 8005dba:	f001 f81b 	bl	8006df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005dbe:	e033      	b.n	8005e28 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM3)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1c      	ldr	r2, [pc, #112]	; (8005e38 <HAL_TIM_Encoder_MspInit+0x100>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d12e      	bne.n	8005e28 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005dca:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dce:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005dd0:	2102      	movs	r1, #2
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8005dd6:	4b17      	ldr	r3, [pc, #92]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	2202      	movs	r2, #2
 8005ddc:	4013      	ands	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005de2:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de6:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005de8:	2101      	movs	r1, #1
 8005dea:	430a      	orrs	r2, r1
 8005dec:	635a      	str	r2, [r3, #52]	; 0x34
 8005dee:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df2:	2201      	movs	r2, #1
 8005df4:	4013      	ands	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005dfa:	211c      	movs	r1, #28
 8005dfc:	187b      	adds	r3, r7, r1
 8005dfe:	22c0      	movs	r2, #192	; 0xc0
 8005e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e02:	187b      	adds	r3, r7, r1
 8005e04:	2202      	movs	r2, #2
 8005e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e08:	187b      	adds	r3, r7, r1
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e0e:	187b      	adds	r3, r7, r1
 8005e10:	2200      	movs	r2, #0
 8005e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8005e14:	187b      	adds	r3, r7, r1
 8005e16:	2201      	movs	r2, #1
 8005e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e1a:	187a      	adds	r2, r7, r1
 8005e1c:	23a0      	movs	r3, #160	; 0xa0
 8005e1e:	05db      	lsls	r3, r3, #23
 8005e20:	0011      	movs	r1, r2
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 ffe6 	bl	8006df4 <HAL_GPIO_Init>
}
 8005e28:	46c0      	nop			; (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b00d      	add	sp, #52	; 0x34
 8005e2e:	bd90      	pop	{r4, r7, pc}
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40021000 	.word	0x40021000
 8005e38:	40000400 	.word	0x40000400

08005e3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08e      	sub	sp, #56	; 0x38
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e44:	2324      	movs	r3, #36	; 0x24
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	0018      	movs	r0, r3
 8005e4a:	2314      	movs	r3, #20
 8005e4c:	001a      	movs	r2, r3
 8005e4e:	2100      	movs	r1, #0
 8005e50:	f00f f827 	bl	8014ea2 <memset>
  if(tim_baseHandle->Instance==TIM7)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a4e      	ldr	r2, [pc, #312]	; (8005f94 <HAL_TIM_Base_MspInit+0x158>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d114      	bne.n	8005e88 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005e5e:	4b4e      	ldr	r3, [pc, #312]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e62:	4b4d      	ldr	r3, [pc, #308]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005e64:	2120      	movs	r1, #32
 8005e66:	430a      	orrs	r2, r1
 8005e68:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e6a:	4b4b      	ldr	r3, [pc, #300]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6e:	2220      	movs	r2, #32
 8005e70:	4013      	ands	r3, r2
 8005e72:	623b      	str	r3, [r7, #32]
 8005e74:	6a3b      	ldr	r3, [r7, #32]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8005e76:	2200      	movs	r2, #0
 8005e78:	2103      	movs	r1, #3
 8005e7a:	2012      	movs	r0, #18
 8005e7c:	f000 fec8 	bl	8006c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e80:	2012      	movs	r0, #18
 8005e82:	f000 feda 	bl	8006c3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005e86:	e081      	b.n	8005f8c <HAL_TIM_Base_MspInit+0x150>
  else if(tim_baseHandle->Instance==TIM14)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a43      	ldr	r2, [pc, #268]	; (8005f9c <HAL_TIM_Base_MspInit+0x160>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d139      	bne.n	8005f06 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005e92:	4b41      	ldr	r3, [pc, #260]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e96:	4b40      	ldr	r3, [pc, #256]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005e98:	2180      	movs	r1, #128	; 0x80
 8005e9a:	0209      	lsls	r1, r1, #8
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40
 8005ea0:	4b3d      	ldr	r3, [pc, #244]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eae:	4b3a      	ldr	r3, [pc, #232]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb2:	4b39      	ldr	r3, [pc, #228]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8005eba:	4b37      	ldr	r3, [pc, #220]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005ec6:	2124      	movs	r1, #36	; 0x24
 8005ec8:	187b      	adds	r3, r7, r1
 8005eca:	2210      	movs	r2, #16
 8005ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ece:	187b      	adds	r3, r7, r1
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed4:	187b      	adds	r3, r7, r1
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	2200      	movs	r2, #0
 8005ede:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8005ee0:	187b      	adds	r3, r7, r1
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ee6:	187a      	adds	r2, r7, r1
 8005ee8:	23a0      	movs	r3, #160	; 0xa0
 8005eea:	05db      	lsls	r3, r3, #23
 8005eec:	0011      	movs	r1, r2
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 ff80 	bl	8006df4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2103      	movs	r1, #3
 8005ef8:	2013      	movs	r0, #19
 8005efa:	f000 fe89 	bl	8006c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8005efe:	2013      	movs	r0, #19
 8005f00:	f000 fe9b 	bl	8006c3a <HAL_NVIC_EnableIRQ>
}
 8005f04:	e042      	b.n	8005f8c <HAL_TIM_Base_MspInit+0x150>
  else if(tim_baseHandle->Instance==TIM15)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a25      	ldr	r2, [pc, #148]	; (8005fa0 <HAL_TIM_Base_MspInit+0x164>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10e      	bne.n	8005f2e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005f10:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f14:	4b20      	ldr	r3, [pc, #128]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	0249      	lsls	r1, r1, #9
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f22:	2380      	movs	r3, #128	; 0x80
 8005f24:	025b      	lsls	r3, r3, #9
 8005f26:	4013      	ands	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	697b      	ldr	r3, [r7, #20]
}
 8005f2c:	e02e      	b.n	8005f8c <HAL_TIM_Base_MspInit+0x150>
  else if(tim_baseHandle->Instance==TIM16)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1c      	ldr	r2, [pc, #112]	; (8005fa4 <HAL_TIM_Base_MspInit+0x168>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d10e      	bne.n	8005f56 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f3c:	4b16      	ldr	r3, [pc, #88]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005f3e:	2180      	movs	r1, #128	; 0x80
 8005f40:	0289      	lsls	r1, r1, #10
 8005f42:	430a      	orrs	r2, r1
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
 8005f46:	4b14      	ldr	r3, [pc, #80]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f4a:	2380      	movs	r3, #128	; 0x80
 8005f4c:	029b      	lsls	r3, r3, #10
 8005f4e:	4013      	ands	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	693b      	ldr	r3, [r7, #16]
}
 8005f54:	e01a      	b.n	8005f8c <HAL_TIM_Base_MspInit+0x150>
  else if(tim_baseHandle->Instance==TIM17)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <HAL_TIM_Base_MspInit+0x16c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d115      	bne.n	8005f8c <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005f66:	2180      	movs	r1, #128	; 0x80
 8005f68:	02c9      	lsls	r1, r1, #11
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40
 8005f6e:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <HAL_TIM_Base_MspInit+0x15c>)
 8005f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	02db      	lsls	r3, r3, #11
 8005f76:	4013      	ands	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2103      	movs	r1, #3
 8005f80:	2016      	movs	r0, #22
 8005f82:	f000 fe45 	bl	8006c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005f86:	2016      	movs	r0, #22
 8005f88:	f000 fe57 	bl	8006c3a <HAL_NVIC_EnableIRQ>
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b00e      	add	sp, #56	; 0x38
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40001400 	.word	0x40001400
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40002000 	.word	0x40002000
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800

08005fac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005fac:	b590      	push	{r4, r7, lr}
 8005fae:	b08b      	sub	sp, #44	; 0x2c
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb4:	2414      	movs	r4, #20
 8005fb6:	193b      	adds	r3, r7, r4
 8005fb8:	0018      	movs	r0, r3
 8005fba:	2314      	movs	r3, #20
 8005fbc:	001a      	movs	r2, r3
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	f00e ff6f 	bl	8014ea2 <memset>
  if(timHandle->Instance==TIM15)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a44      	ldr	r2, [pc, #272]	; (80060dc <HAL_TIM_MspPostInit+0x130>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d139      	bne.n	8006042 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fce:	4b44      	ldr	r3, [pc, #272]	; (80060e0 <HAL_TIM_MspPostInit+0x134>)
 8005fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd2:	4b43      	ldr	r3, [pc, #268]	; (80060e0 <HAL_TIM_MspPostInit+0x134>)
 8005fd4:	2102      	movs	r1, #2
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8005fda:	4b41      	ldr	r3, [pc, #260]	; (80060e0 <HAL_TIM_MspPostInit+0x134>)
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fde:	2202      	movs	r2, #2
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
 8005fe4:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005fe6:	193b      	adds	r3, r7, r4
 8005fe8:	2280      	movs	r2, #128	; 0x80
 8005fea:	01d2      	lsls	r2, r2, #7
 8005fec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fee:	193b      	adds	r3, r7, r4
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff4:	193b      	adds	r3, r7, r4
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ffa:	193b      	adds	r3, r7, r4
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8006000:	193b      	adds	r3, r7, r4
 8006002:	2205      	movs	r2, #5
 8006004:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006006:	193b      	adds	r3, r7, r4
 8006008:	4a36      	ldr	r2, [pc, #216]	; (80060e4 <HAL_TIM_MspPostInit+0x138>)
 800600a:	0019      	movs	r1, r3
 800600c:	0010      	movs	r0, r2
 800600e:	f000 fef1 	bl	8006df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006012:	0021      	movs	r1, r4
 8006014:	187b      	adds	r3, r7, r1
 8006016:	2280      	movs	r2, #128	; 0x80
 8006018:	0212      	lsls	r2, r2, #8
 800601a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601c:	187b      	adds	r3, r7, r1
 800601e:	2202      	movs	r2, #2
 8006020:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006022:	187b      	adds	r3, r7, r1
 8006024:	2200      	movs	r2, #0
 8006026:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006028:	187b      	adds	r3, r7, r1
 800602a:	2200      	movs	r2, #0
 800602c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800602e:	187b      	adds	r3, r7, r1
 8006030:	2204      	movs	r2, #4
 8006032:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006034:	187b      	adds	r3, r7, r1
 8006036:	4a2b      	ldr	r2, [pc, #172]	; (80060e4 <HAL_TIM_MspPostInit+0x138>)
 8006038:	0019      	movs	r1, r3
 800603a:	0010      	movs	r0, r2
 800603c:	f000 feda 	bl	8006df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8006040:	e048      	b.n	80060d4 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM16)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <HAL_TIM_MspPostInit+0x13c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d143      	bne.n	80060d4 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800604c:	4b24      	ldr	r3, [pc, #144]	; (80060e0 <HAL_TIM_MspPostInit+0x134>)
 800604e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006050:	4b23      	ldr	r3, [pc, #140]	; (80060e0 <HAL_TIM_MspPostInit+0x134>)
 8006052:	2108      	movs	r1, #8
 8006054:	430a      	orrs	r2, r1
 8006056:	635a      	str	r2, [r3, #52]	; 0x34
 8006058:	4b21      	ldr	r3, [pc, #132]	; (80060e0 <HAL_TIM_MspPostInit+0x134>)
 800605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605c:	2208      	movs	r2, #8
 800605e:	4013      	ands	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006064:	4b1e      	ldr	r3, [pc, #120]	; (80060e0 <HAL_TIM_MspPostInit+0x134>)
 8006066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006068:	4b1d      	ldr	r3, [pc, #116]	; (80060e0 <HAL_TIM_MspPostInit+0x134>)
 800606a:	2102      	movs	r1, #2
 800606c:	430a      	orrs	r2, r1
 800606e:	635a      	str	r2, [r3, #52]	; 0x34
 8006070:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <HAL_TIM_MspPostInit+0x134>)
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	2202      	movs	r2, #2
 8006076:	4013      	ands	r3, r2
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800607c:	2414      	movs	r4, #20
 800607e:	193b      	adds	r3, r7, r4
 8006080:	2201      	movs	r2, #1
 8006082:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006084:	193b      	adds	r3, r7, r4
 8006086:	2202      	movs	r2, #2
 8006088:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800608a:	193b      	adds	r3, r7, r4
 800608c:	2200      	movs	r2, #0
 800608e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006090:	193b      	adds	r3, r7, r4
 8006092:	2200      	movs	r2, #0
 8006094:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8006096:	193b      	adds	r3, r7, r4
 8006098:	2202      	movs	r2, #2
 800609a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800609c:	193b      	adds	r3, r7, r4
 800609e:	4a13      	ldr	r2, [pc, #76]	; (80060ec <HAL_TIM_MspPostInit+0x140>)
 80060a0:	0019      	movs	r1, r3
 80060a2:	0010      	movs	r0, r2
 80060a4:	f000 fea6 	bl	8006df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80060a8:	0021      	movs	r1, r4
 80060aa:	187b      	adds	r3, r7, r1
 80060ac:	2240      	movs	r2, #64	; 0x40
 80060ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b0:	187b      	adds	r3, r7, r1
 80060b2:	2202      	movs	r2, #2
 80060b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b6:	187b      	adds	r3, r7, r1
 80060b8:	2200      	movs	r2, #0
 80060ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060bc:	187b      	adds	r3, r7, r1
 80060be:	2200      	movs	r2, #0
 80060c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80060c2:	187b      	adds	r3, r7, r1
 80060c4:	2202      	movs	r2, #2
 80060c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060c8:	187b      	adds	r3, r7, r1
 80060ca:	4a06      	ldr	r2, [pc, #24]	; (80060e4 <HAL_TIM_MspPostInit+0x138>)
 80060cc:	0019      	movs	r1, r3
 80060ce:	0010      	movs	r0, r2
 80060d0:	f000 fe90 	bl	8006df4 <HAL_GPIO_Init>
}
 80060d4:	46c0      	nop			; (mov r8, r8)
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b00b      	add	sp, #44	; 0x2c
 80060da:	bd90      	pop	{r4, r7, pc}
 80060dc:	40014000 	.word	0x40014000
 80060e0:	40021000 	.word	0x40021000
 80060e4:	50000400 	.word	0x50000400
 80060e8:	40014400 	.word	0x40014400
 80060ec:	50000c00 	.word	0x50000c00

080060f0 <drv_uart_init>:

// crée le semaphore (fonction init)

SemaphoreHandle_t sem_usart1;

void drv_uart_init(){
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
	sem_usart1 = xSemaphoreCreateBinary();
 80060f4:	2203      	movs	r2, #3
 80060f6:	2100      	movs	r1, #0
 80060f8:	2001      	movs	r0, #1
 80060fa:	f00d f8b5 	bl	8013268 <xQueueGenericCreate>
 80060fe:	0002      	movs	r2, r0
 8006100:	4b02      	ldr	r3, [pc, #8]	; (800610c <drv_uart_init+0x1c>)
 8006102:	601a      	str	r2, [r3, #0]
	//xSemaphoreGive(sem_usart1);
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	200010d0 	.word	0x200010d0

08006110 <drv_uart_receive>:

// fonction callback que tu appelles dans l'interruption
// la fonction callback fait un sem give(fromISR)

uint8_t drv_uart_receive(char * pData, uint16_t size){
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	000a      	movs	r2, r1
 800611a:	1cbb      	adds	r3, r7, #2
 800611c:	801a      	strh	r2, [r3, #0]
	if(HAL_OK == HAL_UART_Receive_IT(&huart1, (uint8_t*) pData, size))
 800611e:	1cbb      	adds	r3, r7, #2
 8006120:	881a      	ldrh	r2, [r3, #0]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4b0a      	ldr	r3, [pc, #40]	; (8006150 <drv_uart_receive+0x40>)
 8006126:	0018      	movs	r0, r3
 8006128:	f004 ffe0 	bl	800b0ec <HAL_UART_Receive_IT>
 800612c:	1e03      	subs	r3, r0, #0
 800612e:	d109      	bne.n	8006144 <drv_uart_receive+0x34>
	{
		xSemaphoreTake(sem_usart1, portMAX_DELAY);
 8006130:	4b08      	ldr	r3, [pc, #32]	; (8006154 <drv_uart_receive+0x44>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2201      	movs	r2, #1
 8006136:	4252      	negs	r2, r2
 8006138:	0011      	movs	r1, r2
 800613a:	0018      	movs	r0, r3
 800613c:	f00d f94e 	bl	80133dc <xQueueSemaphoreTake>
		return 0;
 8006140:	2300      	movs	r3, #0
 8006142:	e000      	b.n	8006146 <drv_uart_receive+0x36>
	}
	return -1;
 8006144:	23ff      	movs	r3, #255	; 0xff
}
 8006146:	0018      	movs	r0, r3
 8006148:	46bd      	mov	sp, r7
 800614a:	b002      	add	sp, #8
 800614c:	bd80      	pop	{r7, pc}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	200010d4 	.word	0x200010d4
 8006154:	200010d0 	.word	0x200010d0

08006158 <drv_uart_transmit>:

uint8_t drv_uart_transmit(char * pData, uint16_t size){
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	000a      	movs	r2, r1
 8006162:	1cbb      	adds	r3, r7, #2
 8006164:	801a      	strh	r2, [r3, #0]
	if(HAL_OK == HAL_UART_Transmit(&huart1, (uint8_t*) pData, size, HAL_MAX_DELAY))
 8006166:	2301      	movs	r3, #1
 8006168:	425c      	negs	r4, r3
 800616a:	1cbb      	adds	r3, r7, #2
 800616c:	881a      	ldrh	r2, [r3, #0]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4806      	ldr	r0, [pc, #24]	; (800618c <drv_uart_transmit+0x34>)
 8006172:	0023      	movs	r3, r4
 8006174:	f004 fe3c 	bl	800adf0 <HAL_UART_Transmit>
 8006178:	1e03      	subs	r3, r0, #0
 800617a:	d101      	bne.n	8006180 <drv_uart_transmit+0x28>
		return 0;
 800617c:	2300      	movs	r3, #0
 800617e:	e000      	b.n	8006182 <drv_uart_transmit+0x2a>
	return 1;
 8006180:	2301      	movs	r3, #1
}
 8006182:	0018      	movs	r0, r3
 8006184:	46bd      	mov	sp, r7
 8006186:	b003      	add	sp, #12
 8006188:	bd90      	pop	{r4, r7, pc}
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	200010d4 	.word	0x200010d4

08006190 <uart_half_duplex_transmit>:
 *  Created on: Oct 27, 2022
 *      Author: lucas
 */
#include "uart_half_duplex_driver.h"

int uart_half_duplex_transmit(uint8_t *pData, uint16_t size, uint32_t timeout){
 8006190:	b5b0      	push	{r4, r5, r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	250a      	movs	r5, #10
 800619c:	197b      	adds	r3, r7, r5
 800619e:	1c0a      	adds	r2, r1, #0
 80061a0:	801a      	strh	r2, [r3, #0]
	HAL_HalfDuplex_EnableTransmitter(&USART_PORT);
 80061a2:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <uart_half_duplex_transmit+0x34>)
 80061a4:	0018      	movs	r0, r3
 80061a6:	f005 fb42 	bl	800b82e <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&USART_PORT, pData, size, timeout);
 80061aa:	687c      	ldr	r4, [r7, #4]
 80061ac:	197b      	adds	r3, r7, r5
 80061ae:	881a      	ldrh	r2, [r3, #0]
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	4804      	ldr	r0, [pc, #16]	; (80061c4 <uart_half_duplex_transmit+0x34>)
 80061b4:	0023      	movs	r3, r4
 80061b6:	f004 fe1b 	bl	800adf0 <HAL_UART_Transmit>

	return 0;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b004      	add	sp, #16
 80061c2:	bdb0      	pop	{r4, r5, r7, pc}
 80061c4:	20001168 	.word	0x20001168

080061c8 <uart_half_duplex_receive>:

int uart_half_duplex_receive(uint8_t *pData, uint16_t size, uint32_t timeout) {
 80061c8:	b5b0      	push	{r4, r5, r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	250a      	movs	r5, #10
 80061d4:	197b      	adds	r3, r7, r5
 80061d6:	1c0a      	adds	r2, r1, #0
 80061d8:	801a      	strh	r2, [r3, #0]
	HAL_HalfDuplex_EnableReceiver(&USART_PORT);
 80061da:	4b08      	ldr	r3, [pc, #32]	; (80061fc <uart_half_duplex_receive+0x34>)
 80061dc:	0018      	movs	r0, r3
 80061de:	f005 fb78 	bl	800b8d2 <HAL_HalfDuplex_EnableReceiver>
	HAL_UART_Receive(&USART_PORT, pData, size, timeout);
 80061e2:	687c      	ldr	r4, [r7, #4]
 80061e4:	197b      	adds	r3, r7, r5
 80061e6:	881a      	ldrh	r2, [r3, #0]
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	4804      	ldr	r0, [pc, #16]	; (80061fc <uart_half_duplex_receive+0x34>)
 80061ec:	0023      	movs	r3, r4
 80061ee:	f004 fe9b 	bl	800af28 <HAL_UART_Receive>

	return 0;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	0018      	movs	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	b004      	add	sp, #16
 80061fa:	bdb0      	pop	{r4, r5, r7, pc}
 80061fc:	20001168 	.word	0x20001168

08006200 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006206:	4a26      	ldr	r2, [pc, #152]	; (80062a0 <MX_USART1_UART_Init+0xa0>)
 8006208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800620a:	4b24      	ldr	r3, [pc, #144]	; (800629c <MX_USART1_UART_Init+0x9c>)
 800620c:	22e1      	movs	r2, #225	; 0xe1
 800620e:	0252      	lsls	r2, r2, #9
 8006210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006212:	4b22      	ldr	r3, [pc, #136]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006214:	2200      	movs	r2, #0
 8006216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006218:	4b20      	ldr	r3, [pc, #128]	; (800629c <MX_USART1_UART_Init+0x9c>)
 800621a:	2200      	movs	r2, #0
 800621c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800621e:	4b1f      	ldr	r3, [pc, #124]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006220:	2200      	movs	r2, #0
 8006222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006224:	4b1d      	ldr	r3, [pc, #116]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006226:	220c      	movs	r2, #12
 8006228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800622a:	4b1c      	ldr	r3, [pc, #112]	; (800629c <MX_USART1_UART_Init+0x9c>)
 800622c:	2200      	movs	r2, #0
 800622e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006230:	4b1a      	ldr	r3, [pc, #104]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006232:	2200      	movs	r2, #0
 8006234:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006236:	4b19      	ldr	r3, [pc, #100]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006238:	2200      	movs	r2, #0
 800623a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800623c:	4b17      	ldr	r3, [pc, #92]	; (800629c <MX_USART1_UART_Init+0x9c>)
 800623e:	2200      	movs	r2, #0
 8006240:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8006242:	4b16      	ldr	r3, [pc, #88]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006244:	2208      	movs	r2, #8
 8006246:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8006248:	4b14      	ldr	r3, [pc, #80]	; (800629c <MX_USART1_UART_Init+0x9c>)
 800624a:	2280      	movs	r2, #128	; 0x80
 800624c:	0212      	lsls	r2, r2, #8
 800624e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006250:	4b12      	ldr	r3, [pc, #72]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006252:	0018      	movs	r0, r3
 8006254:	f004 fd18 	bl	800ac88 <HAL_UART_Init>
 8006258:	1e03      	subs	r3, r0, #0
 800625a:	d001      	beq.n	8006260 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 800625c:	f7fe fc2a 	bl	8004ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006260:	4b0e      	ldr	r3, [pc, #56]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006262:	2100      	movs	r1, #0
 8006264:	0018      	movs	r0, r3
 8006266:	f006 fd75 	bl	800cd54 <HAL_UARTEx_SetTxFifoThreshold>
 800626a:	1e03      	subs	r3, r0, #0
 800626c:	d001      	beq.n	8006272 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 800626e:	f7fe fc21 	bl	8004ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006274:	2100      	movs	r1, #0
 8006276:	0018      	movs	r0, r3
 8006278:	f006 fdac 	bl	800cdd4 <HAL_UARTEx_SetRxFifoThreshold>
 800627c:	1e03      	subs	r3, r0, #0
 800627e:	d001      	beq.n	8006284 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8006280:	f7fe fc18 	bl	8004ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <MX_USART1_UART_Init+0x9c>)
 8006286:	0018      	movs	r0, r3
 8006288:	f006 fd2a 	bl	800cce0 <HAL_UARTEx_DisableFifoMode>
 800628c:	1e03      	subs	r3, r0, #0
 800628e:	d001      	beq.n	8006294 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8006290:	f7fe fc10 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006294:	46c0      	nop			; (mov r8, r8)
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	200010d4 	.word	0x200010d4
 80062a0:	40013800 	.word	0x40013800

080062a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062a8:	4b22      	ldr	r3, [pc, #136]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062aa:	4a23      	ldr	r2, [pc, #140]	; (8006338 <MX_USART2_UART_Init+0x94>)
 80062ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062b0:	4a22      	ldr	r2, [pc, #136]	; (800633c <MX_USART2_UART_Init+0x98>)
 80062b2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062b4:	4b1f      	ldr	r3, [pc, #124]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062ba:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062bc:	2200      	movs	r2, #0
 80062be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80062c0:	4b1c      	ldr	r3, [pc, #112]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062c6:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062c8:	220c      	movs	r2, #12
 80062ca:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062cc:	4b19      	ldr	r3, [pc, #100]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80062d2:	4b18      	ldr	r3, [pc, #96]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062d8:	4b16      	ldr	r3, [pc, #88]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062da:	2200      	movs	r2, #0
 80062dc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80062de:	4b15      	ldr	r3, [pc, #84]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80062e4:	4b13      	ldr	r3, [pc, #76]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80062ea:	4b12      	ldr	r3, [pc, #72]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062ec:	0018      	movs	r0, r3
 80062ee:	f004 fd21 	bl	800ad34 <HAL_HalfDuplex_Init>
 80062f2:	1e03      	subs	r3, r0, #0
 80062f4:	d001      	beq.n	80062fa <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80062f6:	f7fe fbdd 	bl	8004ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062fa:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <MX_USART2_UART_Init+0x90>)
 80062fc:	2100      	movs	r1, #0
 80062fe:	0018      	movs	r0, r3
 8006300:	f006 fd28 	bl	800cd54 <HAL_UARTEx_SetTxFifoThreshold>
 8006304:	1e03      	subs	r3, r0, #0
 8006306:	d001      	beq.n	800630c <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8006308:	f7fe fbd4 	bl	8004ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800630c:	4b09      	ldr	r3, [pc, #36]	; (8006334 <MX_USART2_UART_Init+0x90>)
 800630e:	2100      	movs	r1, #0
 8006310:	0018      	movs	r0, r3
 8006312:	f006 fd5f 	bl	800cdd4 <HAL_UARTEx_SetRxFifoThreshold>
 8006316:	1e03      	subs	r3, r0, #0
 8006318:	d001      	beq.n	800631e <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 800631a:	f7fe fbcb 	bl	8004ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800631e:	4b05      	ldr	r3, [pc, #20]	; (8006334 <MX_USART2_UART_Init+0x90>)
 8006320:	0018      	movs	r0, r3
 8006322:	f006 fcdd 	bl	800cce0 <HAL_UARTEx_DisableFifoMode>
 8006326:	1e03      	subs	r3, r0, #0
 8006328:	d001      	beq.n	800632e <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800632a:	f7fe fbc3 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20001168 	.word	0x20001168
 8006338:	40004400 	.word	0x40004400
 800633c:	000f4240 	.word	0x000f4240

08006340 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006344:	4b16      	ldr	r3, [pc, #88]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 8006346:	4a17      	ldr	r2, [pc, #92]	; (80063a4 <MX_USART3_UART_Init+0x64>)
 8006348:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800634a:	4b15      	ldr	r3, [pc, #84]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 800634c:	22e1      	movs	r2, #225	; 0xe1
 800634e:	0252      	lsls	r2, r2, #9
 8006350:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006352:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 8006354:	2200      	movs	r2, #0
 8006356:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006358:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 800635a:	2200      	movs	r2, #0
 800635c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800635e:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 8006360:	2200      	movs	r2, #0
 8006362:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006364:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 8006366:	220c      	movs	r2, #12
 8006368:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800636a:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 800636c:	2200      	movs	r2, #0
 800636e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 8006372:	2200      	movs	r2, #0
 8006374:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006376:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 8006378:	2200      	movs	r2, #0
 800637a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800637c:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 800637e:	2200      	movs	r2, #0
 8006380:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 8006384:	2200      	movs	r2, #0
 8006386:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <MX_USART3_UART_Init+0x60>)
 800638a:	0018      	movs	r0, r3
 800638c:	f004 fc7c 	bl	800ac88 <HAL_UART_Init>
 8006390:	1e03      	subs	r3, r0, #0
 8006392:	d001      	beq.n	8006398 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006394:	f7fe fb8e 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006398:	46c0      	nop			; (mov r8, r8)
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	200011fc 	.word	0x200011fc
 80063a4:	40004800 	.word	0x40004800

080063a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063a8:	b590      	push	{r4, r7, lr}
 80063aa:	b095      	sub	sp, #84	; 0x54
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063b0:	233c      	movs	r3, #60	; 0x3c
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	0018      	movs	r0, r3
 80063b6:	2314      	movs	r3, #20
 80063b8:	001a      	movs	r2, r3
 80063ba:	2100      	movs	r1, #0
 80063bc:	f00e fd71 	bl	8014ea2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80063c0:	2420      	movs	r4, #32
 80063c2:	193b      	adds	r3, r7, r4
 80063c4:	0018      	movs	r0, r3
 80063c6:	231c      	movs	r3, #28
 80063c8:	001a      	movs	r2, r3
 80063ca:	2100      	movs	r1, #0
 80063cc:	f00e fd69 	bl	8014ea2 <memset>
  if(uartHandle->Instance==USART1)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a68      	ldr	r2, [pc, #416]	; (8006578 <HAL_UART_MspInit+0x1d0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d146      	bne.n	8006468 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80063da:	193b      	adds	r3, r7, r4
 80063dc:	2201      	movs	r2, #1
 80063de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80063e0:	193b      	adds	r3, r7, r4
 80063e2:	2200      	movs	r2, #0
 80063e4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80063e6:	193b      	adds	r3, r7, r4
 80063e8:	0018      	movs	r0, r3
 80063ea:	f002 f9ab 	bl	8008744 <HAL_RCCEx_PeriphCLKConfig>
 80063ee:	1e03      	subs	r3, r0, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80063f2:	f7fe fb5f 	bl	8004ab4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063f6:	4b61      	ldr	r3, [pc, #388]	; (800657c <HAL_UART_MspInit+0x1d4>)
 80063f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063fa:	4b60      	ldr	r3, [pc, #384]	; (800657c <HAL_UART_MspInit+0x1d4>)
 80063fc:	2180      	movs	r1, #128	; 0x80
 80063fe:	01c9      	lsls	r1, r1, #7
 8006400:	430a      	orrs	r2, r1
 8006402:	641a      	str	r2, [r3, #64]	; 0x40
 8006404:	4b5d      	ldr	r3, [pc, #372]	; (800657c <HAL_UART_MspInit+0x1d4>)
 8006406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	01db      	lsls	r3, r3, #7
 800640c:	4013      	ands	r3, r2
 800640e:	61fb      	str	r3, [r7, #28]
 8006410:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006412:	4b5a      	ldr	r3, [pc, #360]	; (800657c <HAL_UART_MspInit+0x1d4>)
 8006414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006416:	4b59      	ldr	r3, [pc, #356]	; (800657c <HAL_UART_MspInit+0x1d4>)
 8006418:	2104      	movs	r1, #4
 800641a:	430a      	orrs	r2, r1
 800641c:	635a      	str	r2, [r3, #52]	; 0x34
 800641e:	4b57      	ldr	r3, [pc, #348]	; (800657c <HAL_UART_MspInit+0x1d4>)
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	2204      	movs	r2, #4
 8006424:	4013      	ands	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800642a:	213c      	movs	r1, #60	; 0x3c
 800642c:	187b      	adds	r3, r7, r1
 800642e:	2230      	movs	r2, #48	; 0x30
 8006430:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006432:	187b      	adds	r3, r7, r1
 8006434:	2202      	movs	r2, #2
 8006436:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006438:	187b      	adds	r3, r7, r1
 800643a:	2200      	movs	r2, #0
 800643c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800643e:	187b      	adds	r3, r7, r1
 8006440:	2200      	movs	r2, #0
 8006442:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006444:	187b      	adds	r3, r7, r1
 8006446:	2201      	movs	r2, #1
 8006448:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800644a:	187b      	adds	r3, r7, r1
 800644c:	4a4c      	ldr	r2, [pc, #304]	; (8006580 <HAL_UART_MspInit+0x1d8>)
 800644e:	0019      	movs	r1, r3
 8006450:	0010      	movs	r0, r2
 8006452:	f000 fccf 	bl	8006df4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8006456:	2200      	movs	r2, #0
 8006458:	2103      	movs	r1, #3
 800645a:	201b      	movs	r0, #27
 800645c:	f000 fbd8 	bl	8006c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006460:	201b      	movs	r0, #27
 8006462:	f000 fbea 	bl	8006c3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006466:	e083      	b.n	8006570 <HAL_UART_MspInit+0x1c8>
  else if(uartHandle->Instance==USART2)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a45      	ldr	r2, [pc, #276]	; (8006584 <HAL_UART_MspInit+0x1dc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d148      	bne.n	8006504 <HAL_UART_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006472:	2120      	movs	r1, #32
 8006474:	187b      	adds	r3, r7, r1
 8006476:	2202      	movs	r2, #2
 8006478:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800647a:	187b      	adds	r3, r7, r1
 800647c:	2200      	movs	r2, #0
 800647e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006480:	187b      	adds	r3, r7, r1
 8006482:	0018      	movs	r0, r3
 8006484:	f002 f95e 	bl	8008744 <HAL_RCCEx_PeriphCLKConfig>
 8006488:	1e03      	subs	r3, r0, #0
 800648a:	d001      	beq.n	8006490 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 800648c:	f7fe fb12 	bl	8004ab4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006490:	4b3a      	ldr	r3, [pc, #232]	; (800657c <HAL_UART_MspInit+0x1d4>)
 8006492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006494:	4b39      	ldr	r3, [pc, #228]	; (800657c <HAL_UART_MspInit+0x1d4>)
 8006496:	2180      	movs	r1, #128	; 0x80
 8006498:	0289      	lsls	r1, r1, #10
 800649a:	430a      	orrs	r2, r1
 800649c:	63da      	str	r2, [r3, #60]	; 0x3c
 800649e:	4b37      	ldr	r3, [pc, #220]	; (800657c <HAL_UART_MspInit+0x1d4>)
 80064a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064a2:	2380      	movs	r3, #128	; 0x80
 80064a4:	029b      	lsls	r3, r3, #10
 80064a6:	4013      	ands	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ac:	4b33      	ldr	r3, [pc, #204]	; (800657c <HAL_UART_MspInit+0x1d4>)
 80064ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b0:	4b32      	ldr	r3, [pc, #200]	; (800657c <HAL_UART_MspInit+0x1d4>)
 80064b2:	2101      	movs	r1, #1
 80064b4:	430a      	orrs	r2, r1
 80064b6:	635a      	str	r2, [r3, #52]	; 0x34
 80064b8:	4b30      	ldr	r3, [pc, #192]	; (800657c <HAL_UART_MspInit+0x1d4>)
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	2201      	movs	r2, #1
 80064be:	4013      	ands	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80064c4:	213c      	movs	r1, #60	; 0x3c
 80064c6:	187b      	adds	r3, r7, r1
 80064c8:	2204      	movs	r2, #4
 80064ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064cc:	187b      	adds	r3, r7, r1
 80064ce:	2212      	movs	r2, #18
 80064d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064d2:	187b      	adds	r3, r7, r1
 80064d4:	2201      	movs	r2, #1
 80064d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064d8:	187b      	adds	r3, r7, r1
 80064da:	2200      	movs	r2, #0
 80064dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80064de:	187b      	adds	r3, r7, r1
 80064e0:	2201      	movs	r2, #1
 80064e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064e4:	187a      	adds	r2, r7, r1
 80064e6:	23a0      	movs	r3, #160	; 0xa0
 80064e8:	05db      	lsls	r3, r3, #23
 80064ea:	0011      	movs	r1, r2
 80064ec:	0018      	movs	r0, r3
 80064ee:	f000 fc81 	bl	8006df4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80064f2:	2200      	movs	r2, #0
 80064f4:	2103      	movs	r1, #3
 80064f6:	201c      	movs	r0, #28
 80064f8:	f000 fb8a 	bl	8006c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80064fc:	201c      	movs	r0, #28
 80064fe:	f000 fb9c 	bl	8006c3a <HAL_NVIC_EnableIRQ>
}
 8006502:	e035      	b.n	8006570 <HAL_UART_MspInit+0x1c8>
  else if(uartHandle->Instance==USART3)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1f      	ldr	r2, [pc, #124]	; (8006588 <HAL_UART_MspInit+0x1e0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d130      	bne.n	8006570 <HAL_UART_MspInit+0x1c8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800650e:	4b1b      	ldr	r3, [pc, #108]	; (800657c <HAL_UART_MspInit+0x1d4>)
 8006510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006512:	4b1a      	ldr	r3, [pc, #104]	; (800657c <HAL_UART_MspInit+0x1d4>)
 8006514:	2180      	movs	r1, #128	; 0x80
 8006516:	02c9      	lsls	r1, r1, #11
 8006518:	430a      	orrs	r2, r1
 800651a:	63da      	str	r2, [r3, #60]	; 0x3c
 800651c:	4b17      	ldr	r3, [pc, #92]	; (800657c <HAL_UART_MspInit+0x1d4>)
 800651e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006520:	2380      	movs	r3, #128	; 0x80
 8006522:	02db      	lsls	r3, r3, #11
 8006524:	4013      	ands	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800652a:	4b14      	ldr	r3, [pc, #80]	; (800657c <HAL_UART_MspInit+0x1d4>)
 800652c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800652e:	4b13      	ldr	r3, [pc, #76]	; (800657c <HAL_UART_MspInit+0x1d4>)
 8006530:	2104      	movs	r1, #4
 8006532:	430a      	orrs	r2, r1
 8006534:	635a      	str	r2, [r3, #52]	; 0x34
 8006536:	4b11      	ldr	r3, [pc, #68]	; (800657c <HAL_UART_MspInit+0x1d4>)
 8006538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653a:	2204      	movs	r2, #4
 800653c:	4013      	ands	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8006542:	213c      	movs	r1, #60	; 0x3c
 8006544:	187b      	adds	r3, r7, r1
 8006546:	22c0      	movs	r2, #192	; 0xc0
 8006548:	0112      	lsls	r2, r2, #4
 800654a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800654c:	187b      	adds	r3, r7, r1
 800654e:	2202      	movs	r2, #2
 8006550:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006552:	187b      	adds	r3, r7, r1
 8006554:	2200      	movs	r2, #0
 8006556:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006558:	187b      	adds	r3, r7, r1
 800655a:	2200      	movs	r2, #0
 800655c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 800655e:	187b      	adds	r3, r7, r1
 8006560:	2200      	movs	r2, #0
 8006562:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006564:	187b      	adds	r3, r7, r1
 8006566:	4a06      	ldr	r2, [pc, #24]	; (8006580 <HAL_UART_MspInit+0x1d8>)
 8006568:	0019      	movs	r1, r3
 800656a:	0010      	movs	r0, r2
 800656c:	f000 fc42 	bl	8006df4 <HAL_GPIO_Init>
}
 8006570:	46c0      	nop			; (mov r8, r8)
 8006572:	46bd      	mov	sp, r7
 8006574:	b015      	add	sp, #84	; 0x54
 8006576:	bd90      	pop	{r4, r7, pc}
 8006578:	40013800 	.word	0x40013800
 800657c:	40021000 	.word	0x40021000
 8006580:	50000800 	.word	0x50000800
 8006584:	40004400 	.word	0x40004400
 8006588:	40004800 	.word	0x40004800

0800658c <xl320_init>:
 *	@author Lucas Vallery
 *
 */
#include "xl320_driver.h"

int xl320_init(XL320_t* xl320, uint8_t id, XL320_BaudRate_t br){
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	0008      	movs	r0, r1
 8006596:	0011      	movs	r1, r2
 8006598:	1cfb      	adds	r3, r7, #3
 800659a:	1c02      	adds	r2, r0, #0
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	1cbb      	adds	r3, r7, #2
 80065a0:	1c0a      	adds	r2, r1, #0
 80065a2:	701a      	strb	r2, [r3, #0]
	xl320->id 	= id;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	1cfa      	adds	r2, r7, #3
 80065a8:	7812      	ldrb	r2, [r2, #0]
 80065aa:	701a      	strb	r2, [r3, #0]
	xl320->br	= br;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	1cba      	adds	r2, r7, #2
 80065b0:	7812      	ldrb	r2, [r2, #0]
 80065b2:	705a      	strb	r2, [r3, #1]

	return 0;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	0018      	movs	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b002      	add	sp, #8
 80065bc:	bd80      	pop	{r7, pc}

080065be <xl320_addHeader2Buff>:

void xl320_addHeader2Buff(uint8_t* buff){
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
	buff[0] = 0xFF;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	22ff      	movs	r2, #255	; 0xff
 80065ca:	701a      	strb	r2, [r3, #0]
	buff[1] = 0xFF;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3301      	adds	r3, #1
 80065d0:	22ff      	movs	r2, #255	; 0xff
 80065d2:	701a      	strb	r2, [r3, #0]
	buff[2] = 0xFD;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3302      	adds	r3, #2
 80065d8:	22fd      	movs	r2, #253	; 0xfd
 80065da:	701a      	strb	r2, [r3, #0]
	buff[3] = 0x00;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3303      	adds	r3, #3
 80065e0:	2200      	movs	r2, #0
 80065e2:	701a      	strb	r2, [r3, #0]
}
 80065e4:	46c0      	nop			; (mov r8, r8)
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b002      	add	sp, #8
 80065ea:	bd80      	pop	{r7, pc}

080065ec <xl320_updateCrc>:

unsigned short xl320_updateCrc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size) {
 80065ec:	b5b0      	push	{r4, r5, r7, lr}
 80065ee:	4c33      	ldr	r4, [pc, #204]	; (80066bc <xl320_updateCrc+0xd0>)
 80065f0:	44a5      	add	sp, r4
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6039      	str	r1, [r7, #0]
 80065f6:	0011      	movs	r1, r2
 80065f8:	4b31      	ldr	r3, [pc, #196]	; (80066c0 <xl320_updateCrc+0xd4>)
 80065fa:	2484      	movs	r4, #132	; 0x84
 80065fc:	00a4      	lsls	r4, r4, #2
 80065fe:	191b      	adds	r3, r3, r4
 8006600:	19db      	adds	r3, r3, r7
 8006602:	1c02      	adds	r2, r0, #0
 8006604:	801a      	strh	r2, [r3, #0]
 8006606:	4b2f      	ldr	r3, [pc, #188]	; (80066c4 <xl320_updateCrc+0xd8>)
 8006608:	0020      	movs	r0, r4
 800660a:	181b      	adds	r3, r3, r0
 800660c:	19db      	adds	r3, r3, r7
 800660e:	1c0a      	adds	r2, r1, #0
 8006610:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8006612:	4b2d      	ldr	r3, [pc, #180]	; (80066c8 <xl320_updateCrc+0xdc>)
 8006614:	181b      	adds	r3, r3, r0
 8006616:	19da      	adds	r2, r3, r7
 8006618:	4b2c      	ldr	r3, [pc, #176]	; (80066cc <xl320_updateCrc+0xe0>)
 800661a:	0010      	movs	r0, r2
 800661c:	0019      	movs	r1, r3
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	001a      	movs	r2, r3
 8006624:	f00e fc34 	bl	8014e90 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++) {
 8006628:	4b29      	ldr	r3, [pc, #164]	; (80066d0 <xl320_updateCrc+0xe4>)
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	2200      	movs	r2, #0
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e02f      	b.n	8006692 <xl320_updateCrc+0xa6>
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8006632:	4b23      	ldr	r3, [pc, #140]	; (80066c0 <xl320_updateCrc+0xd4>)
 8006634:	2084      	movs	r0, #132	; 0x84
 8006636:	0080      	lsls	r0, r0, #2
 8006638:	181b      	adds	r3, r3, r0
 800663a:	19db      	adds	r3, r3, r7
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	0a1b      	lsrs	r3, r3, #8
 8006640:	b29a      	uxth	r2, r3
 8006642:	4c23      	ldr	r4, [pc, #140]	; (80066d0 <xl320_updateCrc+0xe4>)
 8006644:	193b      	adds	r3, r7, r4
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	18cb      	adds	r3, r1, r3
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	4053      	eors	r3, r2
 8006652:	b29a      	uxth	r2, r3
 8006654:	2583      	movs	r5, #131	; 0x83
 8006656:	00ad      	lsls	r5, r5, #2
 8006658:	197b      	adds	r3, r7, r5
 800665a:	21ff      	movs	r1, #255	; 0xff
 800665c:	400a      	ands	r2, r1
 800665e:	801a      	strh	r2, [r3, #0]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8006660:	4b17      	ldr	r3, [pc, #92]	; (80066c0 <xl320_updateCrc+0xd4>)
 8006662:	181b      	adds	r3, r3, r0
 8006664:	19db      	adds	r3, r3, r7
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	b21a      	sxth	r2, r3
 800666c:	197b      	adds	r3, r7, r5
 800666e:	8819      	ldrh	r1, [r3, #0]
 8006670:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <xl320_updateCrc+0xdc>)
 8006672:	181b      	adds	r3, r3, r0
 8006674:	19db      	adds	r3, r3, r7
 8006676:	0049      	lsls	r1, r1, #1
 8006678:	5acb      	ldrh	r3, [r1, r3]
 800667a:	b21b      	sxth	r3, r3
 800667c:	4053      	eors	r3, r2
 800667e:	b21a      	sxth	r2, r3
 8006680:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <xl320_updateCrc+0xd4>)
 8006682:	181b      	adds	r3, r3, r0
 8006684:	19db      	adds	r3, r3, r7
 8006686:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++) {
 8006688:	193b      	adds	r3, r7, r4
 800668a:	881a      	ldrh	r2, [r3, #0]
 800668c:	193b      	adds	r3, r7, r4
 800668e:	3201      	adds	r2, #1
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <xl320_updateCrc+0xe4>)
 8006694:	18fa      	adds	r2, r7, r3
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <xl320_updateCrc+0xd8>)
 8006698:	2184      	movs	r1, #132	; 0x84
 800669a:	0089      	lsls	r1, r1, #2
 800669c:	185b      	adds	r3, r3, r1
 800669e:	19db      	adds	r3, r3, r7
 80066a0:	8812      	ldrh	r2, [r2, #0]
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d3c4      	bcc.n	8006632 <xl320_updateCrc+0x46>
	}

	return crc_accum;
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <xl320_updateCrc+0xd4>)
 80066aa:	185b      	adds	r3, r3, r1
 80066ac:	19db      	adds	r3, r3, r7
 80066ae:	881b      	ldrh	r3, [r3, #0]
}
 80066b0:	0018      	movs	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	2384      	movs	r3, #132	; 0x84
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	449d      	add	sp, r3
 80066ba:	bdb0      	pop	{r4, r5, r7, pc}
 80066bc:	fffffdf0 	.word	0xfffffdf0
 80066c0:	fffffdf6 	.word	0xfffffdf6
 80066c4:	fffffdf4 	.word	0xfffffdf4
 80066c8:	fffffdfc 	.word	0xfffffdfc
 80066cc:	0801af88 	.word	0x0801af88
 80066d0:	0000020e 	.word	0x0000020e

080066d4 <xl320_copyParams2Buff>:

void xl320_copyParams2Buff(uint8_t buffStartIndex, uint8_t* buff, uint16_t nbParams, uint8_t* params){
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	0011      	movs	r1, r2
 80066de:	607b      	str	r3, [r7, #4]
 80066e0:	230f      	movs	r3, #15
 80066e2:	18fb      	adds	r3, r7, r3
 80066e4:	1c02      	adds	r2, r0, #0
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	230c      	movs	r3, #12
 80066ea:	18fb      	adds	r3, r7, r3
 80066ec:	1c0a      	adds	r2, r1, #0
 80066ee:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	e00f      	b.n	8006716 <xl320_copyParams2Buff+0x42>
		buff[i + buffStartIndex] = params[i];
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	18d2      	adds	r2, r2, r3
 80066fc:	230f      	movs	r3, #15
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	7819      	ldrb	r1, [r3, #0]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	18cb      	adds	r3, r1, r3
 8006706:	0019      	movs	r1, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	185b      	adds	r3, r3, r1
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	3301      	adds	r3, #1
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	230c      	movs	r3, #12
 8006718:	18fb      	adds	r3, r7, r3
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	429a      	cmp	r2, r3
 8006720:	dbe9      	blt.n	80066f6 <xl320_copyParams2Buff+0x22>
	}
}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	46c0      	nop			; (mov r8, r8)
 8006726:	46bd      	mov	sp, r7
 8006728:	b006      	add	sp, #24
 800672a:	bd80      	pop	{r7, pc}

0800672c <xl320_sendCommand>:

int xl320_sendCommand(XL320_t* xl320, XL320_Instruction_t inst, uint16_t nbParams, uint8_t* params){
 800672c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	0008      	movs	r0, r1
 8006736:	0011      	movs	r1, r2
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	230b      	movs	r3, #11
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	1c02      	adds	r2, r0, #0
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	2008      	movs	r0, #8
 8006744:	183b      	adds	r3, r7, r0
 8006746:	1c0a      	adds	r2, r1, #0
 8006748:	801a      	strh	r2, [r3, #0]
	uint8_t* txBuff = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
	txBuff = (uint8_t*) malloc((MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t));
 800674e:	183b      	adds	r3, r7, r0
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	330a      	adds	r3, #10
 8006754:	0018      	movs	r0, r3
 8006756:	f00e fb87 	bl	8014e68 <malloc>
 800675a:	0003      	movs	r3, r0
 800675c:	617b      	str	r3, [r7, #20]

	if(txBuff == NULL){
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <xl320_sendCommand+0x46>
		DEBUG_PRINTF("XL320 ERROT : Malloc failed\r\n");
 8006764:	4b34      	ldr	r3, [pc, #208]	; (8006838 <xl320_sendCommand+0x10c>)
 8006766:	0018      	movs	r0, r3
 8006768:	f00f fb88 	bl	8015e7c <puts>
		return -1;
 800676c:	2301      	movs	r3, #1
 800676e:	425b      	negs	r3, r3
 8006770:	e05d      	b.n	800682e <xl320_sendCommand+0x102>
	}

	uint16_t length = nbParams + 3;
 8006772:	2512      	movs	r5, #18
 8006774:	197b      	adds	r3, r7, r5
 8006776:	2408      	movs	r4, #8
 8006778:	193a      	adds	r2, r7, r4
 800677a:	8812      	ldrh	r2, [r2, #0]
 800677c:	3203      	adds	r2, #3
 800677e:	801a      	strh	r2, [r3, #0]

	xl320_addHeader2Buff(txBuff);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	0018      	movs	r0, r3
 8006784:	f7ff ff1b 	bl	80065be <xl320_addHeader2Buff>
	txBuff[4] = xl320->id;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	3304      	adds	r3, #4
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	7812      	ldrb	r2, [r2, #0]
 8006790:	701a      	strb	r2, [r3, #0]
	txBuff[5] = (uint8_t) (length & 0xFF);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	3305      	adds	r3, #5
 8006796:	197a      	adds	r2, r7, r5
 8006798:	8812      	ldrh	r2, [r2, #0]
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
	txBuff[6] = (uint8_t) (length >> 8);
 800679e:	197b      	adds	r3, r7, r5
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	0a1b      	lsrs	r3, r3, #8
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	3306      	adds	r3, #6
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]
	txBuff[7] = inst;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	3307      	adds	r3, #7
 80067b2:	220b      	movs	r2, #11
 80067b4:	18ba      	adds	r2, r7, r2
 80067b6:	7812      	ldrb	r2, [r2, #0]
 80067b8:	701a      	strb	r2, [r3, #0]
	xl320_copyParams2Buff(8, txBuff, nbParams, params);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	193b      	adds	r3, r7, r4
 80067be:	881a      	ldrh	r2, [r3, #0]
 80067c0:	6979      	ldr	r1, [r7, #20]
 80067c2:	0003      	movs	r3, r0
 80067c4:	2008      	movs	r0, #8
 80067c6:	f7ff ff85 	bl	80066d4 <xl320_copyParams2Buff>

	uint16_t crc = xl320_updateCrc(0, txBuff, MIN_FRAME_SIZE + nbParams - CRC_FIELD_SIZE);
 80067ca:	0025      	movs	r5, r4
 80067cc:	193b      	adds	r3, r7, r4
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	3308      	adds	r3, #8
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	2610      	movs	r6, #16
 80067d6:	19bc      	adds	r4, r7, r6
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	0019      	movs	r1, r3
 80067dc:	2000      	movs	r0, #0
 80067de:	f7ff ff05 	bl	80065ec <xl320_updateCrc>
 80067e2:	0003      	movs	r3, r0
 80067e4:	8023      	strh	r3, [r4, #0]

	txBuff[(MIN_FRAME_SIZE + nbParams) - 2] = (uint8_t) (crc & 0xFF);
 80067e6:	002c      	movs	r4, r5
 80067e8:	193b      	adds	r3, r7, r4
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	18d3      	adds	r3, r2, r3
 80067f2:	19ba      	adds	r2, r7, r6
 80067f4:	8812      	ldrh	r2, [r2, #0]
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
	txBuff[(MIN_FRAME_SIZE + nbParams) - 1] = (uint8_t) (crc >> 8);
 80067fa:	19bb      	adds	r3, r7, r6
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	b299      	uxth	r1, r3
 8006802:	193b      	adds	r3, r7, r4
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	3309      	adds	r3, #9
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	18d3      	adds	r3, r2, r3
 800680c:	b2ca      	uxtb	r2, r1
 800680e:	701a      	strb	r2, [r3, #0]

	xl320->serial.transmit(txBuff, (MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t), 0x1F4);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	193a      	adds	r2, r7, r4
 8006816:	8812      	ldrh	r2, [r2, #0]
 8006818:	320a      	adds	r2, #10
 800681a:	b291      	uxth	r1, r2
 800681c:	22fa      	movs	r2, #250	; 0xfa
 800681e:	0052      	lsls	r2, r2, #1
 8006820:	6978      	ldr	r0, [r7, #20]
 8006822:	4798      	blx	r3

	free(txBuff);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	0018      	movs	r0, r3
 8006828:	f00e fb28 	bl	8014e7c <free>
	return 0;
 800682c:	2300      	movs	r3, #0
}
 800682e:	0018      	movs	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	b007      	add	sp, #28
 8006834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	0801b188 	.word	0x0801b188

0800683c <xl320_setGoalPosition>:
	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);

	return 0;
}

int xl320_setGoalPosition(XL320_t* xl320, float goalPositionInDeg){
 800683c:	b5b0      	push	{r4, r5, r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	uint16_t position = (uint16_t)(goalPositionInDeg/BIT_RESOLUTION_IN_DEG);
 8006846:	6838      	ldr	r0, [r7, #0]
 8006848:	f7fc fa58 	bl	8002cfc <__aeabi_f2d>
 800684c:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <xl320_setGoalPosition+0x68>)
 800684e:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <xl320_setGoalPosition+0x6c>)
 8006850:	f7fa ffaa 	bl	80017a8 <__aeabi_ddiv>
 8006854:	0002      	movs	r2, r0
 8006856:	000b      	movs	r3, r1
 8006858:	250e      	movs	r5, #14
 800685a:	197c      	adds	r4, r7, r5
 800685c:	0010      	movs	r0, r2
 800685e:	0019      	movs	r1, r3
 8006860:	f7f9 fe66 	bl	8000530 <__aeabi_d2uiz>
 8006864:	0003      	movs	r3, r0
 8006866:	8023      	strh	r3, [r4, #0]
	uint8_t params[4] = {POSITION, 0, (uint8_t)(position & 0xFF) , (uint8_t)(position >> 8)};
 8006868:	2108      	movs	r1, #8
 800686a:	187b      	adds	r3, r7, r1
 800686c:	221e      	movs	r2, #30
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	187b      	adds	r3, r7, r1
 8006872:	2200      	movs	r2, #0
 8006874:	705a      	strb	r2, [r3, #1]
 8006876:	197b      	adds	r3, r7, r5
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b2da      	uxtb	r2, r3
 800687c:	187b      	adds	r3, r7, r1
 800687e:	709a      	strb	r2, [r3, #2]
 8006880:	197b      	adds	r3, r7, r5
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	b29b      	uxth	r3, r3
 8006888:	b2da      	uxtb	r2, r3
 800688a:	187b      	adds	r3, r7, r1
 800688c:	70da      	strb	r2, [r3, #3]

	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 800688e:	187b      	adds	r3, r7, r1
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	2204      	movs	r2, #4
 8006894:	2103      	movs	r1, #3
 8006896:	f7ff ff49 	bl	800672c <xl320_sendCommand>

	return 0;
 800689a:	2300      	movs	r3, #0
}
 800689c:	0018      	movs	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	b004      	add	sp, #16
 80068a2:	bdb0      	pop	{r4, r5, r7, pc}
 80068a4:	28f5c28f 	.word	0x28f5c28f
 80068a8:	3fd28f5c 	.word	0x3fd28f5c

080068ac <xl320_setSpeed>:

int xl320_setSpeed(XL320_t* xl320, float rpm){
 80068ac:	b5b0      	push	{r4, r5, r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
	uint16_t speedValue = (uint16_t)(rpm/RESOLUTION_SPEED);
 80068b6:	6838      	ldr	r0, [r7, #0]
 80068b8:	f7fc fa20 	bl	8002cfc <__aeabi_f2d>
 80068bc:	4a1a      	ldr	r2, [pc, #104]	; (8006928 <xl320_setSpeed+0x7c>)
 80068be:	4b1b      	ldr	r3, [pc, #108]	; (800692c <xl320_setSpeed+0x80>)
 80068c0:	f7fa ff72 	bl	80017a8 <__aeabi_ddiv>
 80068c4:	0002      	movs	r2, r0
 80068c6:	000b      	movs	r3, r1
 80068c8:	250e      	movs	r5, #14
 80068ca:	197c      	adds	r4, r7, r5
 80068cc:	0010      	movs	r0, r2
 80068ce:	0019      	movs	r1, r3
 80068d0:	f7f9 fe2e 	bl	8000530 <__aeabi_d2uiz>
 80068d4:	0003      	movs	r3, r0
 80068d6:	8023      	strh	r3, [r4, #0]
	uint8_t highByte = (uint8_t)((speedValue >> 8) & 0xFF);
 80068d8:	0029      	movs	r1, r5
 80068da:	187b      	adds	r3, r7, r1
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	0a1b      	lsrs	r3, r3, #8
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	200d      	movs	r0, #13
 80068e4:	183b      	adds	r3, r7, r0
 80068e6:	701a      	strb	r2, [r3, #0]
	uint8_t lowByte = (uint8_t)(speedValue & 0xFF);
 80068e8:	240c      	movs	r4, #12
 80068ea:	193b      	adds	r3, r7, r4
 80068ec:	187a      	adds	r2, r7, r1
 80068ee:	8812      	ldrh	r2, [r2, #0]
 80068f0:	701a      	strb	r2, [r3, #0]

	uint8_t params[4] = {SPEED, 0, lowByte, highByte};
 80068f2:	2108      	movs	r1, #8
 80068f4:	187b      	adds	r3, r7, r1
 80068f6:	2220      	movs	r2, #32
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	187b      	adds	r3, r7, r1
 80068fc:	2200      	movs	r2, #0
 80068fe:	705a      	strb	r2, [r3, #1]
 8006900:	187b      	adds	r3, r7, r1
 8006902:	193a      	adds	r2, r7, r4
 8006904:	7812      	ldrb	r2, [r2, #0]
 8006906:	709a      	strb	r2, [r3, #2]
 8006908:	187b      	adds	r3, r7, r1
 800690a:	183a      	adds	r2, r7, r0
 800690c:	7812      	ldrb	r2, [r2, #0]
 800690e:	70da      	strb	r2, [r3, #3]
	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 8006910:	187b      	adds	r3, r7, r1
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	2204      	movs	r2, #4
 8006916:	2103      	movs	r1, #3
 8006918:	f7ff ff08 	bl	800672c <xl320_sendCommand>

	return 0;
 800691c:	2300      	movs	r3, #0
}
 800691e:	0018      	movs	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	b004      	add	sp, #16
 8006924:	bdb0      	pop	{r4, r5, r7, pc}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	f9db22d1 	.word	0xf9db22d1
 800692c:	3fbc6a7e 	.word	0x3fbc6a7e

08006930 <xl320_torqueEnable>:
	xl320_sendCommand(xl320, ACTION, 0, NULL);

	return 0;
}

int xl320_torqueEnable(XL320_t* xl320){
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	uint8_t params[3] = {TORQUE_EN, 0, ENABLE};
 8006938:	200c      	movs	r0, #12
 800693a:	183b      	adds	r3, r7, r0
 800693c:	4a07      	ldr	r2, [pc, #28]	; (800695c <xl320_torqueEnable+0x2c>)
 800693e:	8811      	ldrh	r1, [r2, #0]
 8006940:	8019      	strh	r1, [r3, #0]
 8006942:	7892      	ldrb	r2, [r2, #2]
 8006944:	709a      	strb	r2, [r3, #2]

	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);
 8006946:	183b      	adds	r3, r7, r0
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	2203      	movs	r2, #3
 800694c:	2103      	movs	r1, #3
 800694e:	f7ff feed 	bl	800672c <xl320_sendCommand>

	return 0;
 8006952:	2300      	movs	r3, #0
}
 8006954:	0018      	movs	r0, r3
 8006956:	46bd      	mov	sp, r7
 8006958:	b004      	add	sp, #16
 800695a:	bd80      	pop	{r7, pc}
 800695c:	0801b538 	.word	0x0801b538

08006960 <zxbm_setDutyCycle>:
 *  Created on: Dec 1, 2022
 *      Author: lucas
 */
#include "zxbm_driver.h"

void zxbm_setDutyCycle(h_zxbm_t* driver, int dutyCycle){
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
	dutyCycle = (dutyCycle > 99)? 99 : dutyCycle;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b63      	cmp	r3, #99	; 0x63
 800696e:	dd00      	ble.n	8006972 <zxbm_setDutyCycle+0x12>
 8006970:	2363      	movs	r3, #99	; 0x63
 8006972:	603b      	str	r3, [r7, #0]
	dutyCycle = (dutyCycle <  0)?  0 : dutyCycle;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	da00      	bge.n	800697c <zxbm_setDutyCycle+0x1c>
 800697a:	2300      	movs	r3, #0
 800697c:	603b      	str	r3, [r7, #0]

	driver->timer.setDutyCycle(dutyCycle);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	0010      	movs	r0, r2
 8006986:	4798      	blx	r3
}
 8006988:	46c0      	nop			; (mov r8, r8)
 800698a:	46bd      	mov	sp, r7
 800698c:	b002      	add	sp, #8
 800698e:	bd80      	pop	{r7, pc}

08006990 <zxbm_run>:

void zxbm_run(h_zxbm_t* driver, h_zxbm_direction_t dir){
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	000a      	movs	r2, r1
 800699a:	1cfb      	adds	r3, r7, #3
 800699c:	701a      	strb	r2, [r3, #0]
	h_zxbm_direction_t newDir;
	newDir = (driver->isReversed) ^ dir;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	7d19      	ldrb	r1, [r3, #20]
 80069a2:	200f      	movs	r0, #15
 80069a4:	183b      	adds	r3, r7, r0
 80069a6:	1cfa      	adds	r2, r7, #3
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	404a      	eors	r2, r1
 80069ac:	701a      	strb	r2, [r3, #0]

	switch(newDir){
 80069ae:	183b      	adds	r3, r7, r0
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <zxbm_run+0x38>
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d10d      	bne.n	80069d6 <zxbm_run+0x46>
	case zxbm_backward :
		driver->timer.startPWM();
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4798      	blx	r3
		driver->timer.stopPWMN();
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4798      	blx	r3
		break;
 80069c6:	e00d      	b.n	80069e4 <zxbm_run+0x54>
	case zxbm_forward :
		driver->timer.stopPWM();
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	4798      	blx	r3
		driver->timer.startPWMN();
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	4798      	blx	r3
		break;
 80069d4:	e006      	b.n	80069e4 <zxbm_run+0x54>
		driver->timer.startPWMN();
		driver->timer.setDutyCycle(99);
		break;
		*/
	default :
		driver->timer.stopPWM();
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	4798      	blx	r3
		driver->timer.stopPWMN();
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	4798      	blx	r3
	}
}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b004      	add	sp, #16
 80069ea:	bd80      	pop	{r7, pc}

080069ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80069ec:	480d      	ldr	r0, [pc, #52]	; (8006a24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80069ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80069f0:	f7fe fedc 	bl	80057ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80069f4:	480c      	ldr	r0, [pc, #48]	; (8006a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80069f6:	490d      	ldr	r1, [pc, #52]	; (8006a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80069f8:	4a0d      	ldr	r2, [pc, #52]	; (8006a30 <LoopForever+0xe>)
  movs r3, #0
 80069fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069fc:	e002      	b.n	8006a04 <LoopCopyDataInit>

080069fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a02:	3304      	adds	r3, #4

08006a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a08:	d3f9      	bcc.n	80069fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006a0c:	4c0a      	ldr	r4, [pc, #40]	; (8006a38 <LoopForever+0x16>)
  movs r3, #0
 8006a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a10:	e001      	b.n	8006a16 <LoopFillZerobss>

08006a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a14:	3204      	adds	r2, #4

08006a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a18:	d3fb      	bcc.n	8006a12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006a1a:	f00e fa01 	bl	8014e20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006a1e:	f7fd fe81 	bl	8004724 <main>

08006a22 <LoopForever>:

LoopForever:
  b LoopForever
 8006a22:	e7fe      	b.n	8006a22 <LoopForever>
  ldr   r0, =_estack
 8006a24:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8006a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a2c:	200004ac 	.word	0x200004ac
  ldr r2, =_sidata
 8006a30:	0801c0ac 	.word	0x0801c0ac
  ldr r2, =_sbss
 8006a34:	200004ac 	.word	0x200004ac
  ldr r4, =_ebss
 8006a38:	20005438 	.word	0x20005438

08006a3c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a3c:	e7fe      	b.n	8006a3c <ADC1_IRQHandler>
	...

08006a40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006a46:	1dfb      	adds	r3, r7, #7
 8006a48:	2200      	movs	r2, #0
 8006a4a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <HAL_Init+0x3c>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <HAL_Init+0x3c>)
 8006a52:	2180      	movs	r1, #128	; 0x80
 8006a54:	0049      	lsls	r1, r1, #1
 8006a56:	430a      	orrs	r2, r1
 8006a58:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f7fe fcbc 	bl	80053d8 <HAL_InitTick>
 8006a60:	1e03      	subs	r3, r0, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006a64:	1dfb      	adds	r3, r7, #7
 8006a66:	2201      	movs	r2, #1
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	e001      	b.n	8006a70 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006a6c:	f7fe fc8a 	bl	8005384 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a70:	1dfb      	adds	r3, r7, #7
 8006a72:	781b      	ldrb	r3, [r3, #0]
}
 8006a74:	0018      	movs	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b002      	add	sp, #8
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40022000 	.word	0x40022000

08006a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <HAL_IncTick+0x1c>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	001a      	movs	r2, r3
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <HAL_IncTick+0x20>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	18d2      	adds	r2, r2, r3
 8006a90:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <HAL_IncTick+0x20>)
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	46c0      	nop			; (mov r8, r8)
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	20000014 	.word	0x20000014
 8006aa0:	20001290 	.word	0x20001290

08006aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8006aa8:	4b02      	ldr	r3, [pc, #8]	; (8006ab4 <HAL_GetTick+0x10>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
}
 8006aac:	0018      	movs	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	20001290 	.word	0x20001290

08006ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ac0:	f7ff fff0 	bl	8006aa4 <HAL_GetTick>
 8006ac4:	0003      	movs	r3, r0
 8006ac6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	d005      	beq.n	8006ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ad2:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <HAL_Delay+0x44>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	001a      	movs	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	189b      	adds	r3, r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	f7ff ffe0 	bl	8006aa4 <HAL_GetTick>
 8006ae4:	0002      	movs	r2, r0
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d8f7      	bhi.n	8006ae0 <HAL_Delay+0x28>
  {
  }
}
 8006af0:	46c0      	nop			; (mov r8, r8)
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	46bd      	mov	sp, r7
 8006af6:	b004      	add	sp, #16
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	46c0      	nop			; (mov r8, r8)
 8006afc:	20000014 	.word	0x20000014

08006b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	0002      	movs	r2, r0
 8006b08:	1dfb      	adds	r3, r7, #7
 8006b0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006b0c:	1dfb      	adds	r3, r7, #7
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b7f      	cmp	r3, #127	; 0x7f
 8006b12:	d809      	bhi.n	8006b28 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b14:	1dfb      	adds	r3, r7, #7
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	001a      	movs	r2, r3
 8006b1a:	231f      	movs	r3, #31
 8006b1c:	401a      	ands	r2, r3
 8006b1e:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <__NVIC_EnableIRQ+0x30>)
 8006b20:	2101      	movs	r1, #1
 8006b22:	4091      	lsls	r1, r2
 8006b24:	000a      	movs	r2, r1
 8006b26:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006b28:	46c0      	nop			; (mov r8, r8)
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	b002      	add	sp, #8
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	e000e100 	.word	0xe000e100

08006b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b34:	b590      	push	{r4, r7, lr}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	0002      	movs	r2, r0
 8006b3c:	6039      	str	r1, [r7, #0]
 8006b3e:	1dfb      	adds	r3, r7, #7
 8006b40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006b42:	1dfb      	adds	r3, r7, #7
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b7f      	cmp	r3, #127	; 0x7f
 8006b48:	d828      	bhi.n	8006b9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b4a:	4a2f      	ldr	r2, [pc, #188]	; (8006c08 <__NVIC_SetPriority+0xd4>)
 8006b4c:	1dfb      	adds	r3, r7, #7
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	b25b      	sxtb	r3, r3
 8006b52:	089b      	lsrs	r3, r3, #2
 8006b54:	33c0      	adds	r3, #192	; 0xc0
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	589b      	ldr	r3, [r3, r2]
 8006b5a:	1dfa      	adds	r2, r7, #7
 8006b5c:	7812      	ldrb	r2, [r2, #0]
 8006b5e:	0011      	movs	r1, r2
 8006b60:	2203      	movs	r2, #3
 8006b62:	400a      	ands	r2, r1
 8006b64:	00d2      	lsls	r2, r2, #3
 8006b66:	21ff      	movs	r1, #255	; 0xff
 8006b68:	4091      	lsls	r1, r2
 8006b6a:	000a      	movs	r2, r1
 8006b6c:	43d2      	mvns	r2, r2
 8006b6e:	401a      	ands	r2, r3
 8006b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	019b      	lsls	r3, r3, #6
 8006b76:	22ff      	movs	r2, #255	; 0xff
 8006b78:	401a      	ands	r2, r3
 8006b7a:	1dfb      	adds	r3, r7, #7
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	0018      	movs	r0, r3
 8006b80:	2303      	movs	r3, #3
 8006b82:	4003      	ands	r3, r0
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b88:	481f      	ldr	r0, [pc, #124]	; (8006c08 <__NVIC_SetPriority+0xd4>)
 8006b8a:	1dfb      	adds	r3, r7, #7
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	b25b      	sxtb	r3, r3
 8006b90:	089b      	lsrs	r3, r3, #2
 8006b92:	430a      	orrs	r2, r1
 8006b94:	33c0      	adds	r3, #192	; 0xc0
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006b9a:	e031      	b.n	8006c00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	; (8006c0c <__NVIC_SetPriority+0xd8>)
 8006b9e:	1dfb      	adds	r3, r7, #7
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	0019      	movs	r1, r3
 8006ba4:	230f      	movs	r3, #15
 8006ba6:	400b      	ands	r3, r1
 8006ba8:	3b08      	subs	r3, #8
 8006baa:	089b      	lsrs	r3, r3, #2
 8006bac:	3306      	adds	r3, #6
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	18d3      	adds	r3, r2, r3
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	1dfa      	adds	r2, r7, #7
 8006bb8:	7812      	ldrb	r2, [r2, #0]
 8006bba:	0011      	movs	r1, r2
 8006bbc:	2203      	movs	r2, #3
 8006bbe:	400a      	ands	r2, r1
 8006bc0:	00d2      	lsls	r2, r2, #3
 8006bc2:	21ff      	movs	r1, #255	; 0xff
 8006bc4:	4091      	lsls	r1, r2
 8006bc6:	000a      	movs	r2, r1
 8006bc8:	43d2      	mvns	r2, r2
 8006bca:	401a      	ands	r2, r3
 8006bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	019b      	lsls	r3, r3, #6
 8006bd2:	22ff      	movs	r2, #255	; 0xff
 8006bd4:	401a      	ands	r2, r3
 8006bd6:	1dfb      	adds	r3, r7, #7
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	2303      	movs	r3, #3
 8006bde:	4003      	ands	r3, r0
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006be4:	4809      	ldr	r0, [pc, #36]	; (8006c0c <__NVIC_SetPriority+0xd8>)
 8006be6:	1dfb      	adds	r3, r7, #7
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	001c      	movs	r4, r3
 8006bec:	230f      	movs	r3, #15
 8006bee:	4023      	ands	r3, r4
 8006bf0:	3b08      	subs	r3, #8
 8006bf2:	089b      	lsrs	r3, r3, #2
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	3306      	adds	r3, #6
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	18c3      	adds	r3, r0, r3
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	601a      	str	r2, [r3, #0]
}
 8006c00:	46c0      	nop			; (mov r8, r8)
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b003      	add	sp, #12
 8006c06:	bd90      	pop	{r4, r7, pc}
 8006c08:	e000e100 	.word	0xe000e100
 8006c0c:	e000ed00 	.word	0xe000ed00

08006c10 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	607a      	str	r2, [r7, #4]
 8006c1a:	210f      	movs	r1, #15
 8006c1c:	187b      	adds	r3, r7, r1
 8006c1e:	1c02      	adds	r2, r0, #0
 8006c20:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	187b      	adds	r3, r7, r1
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	b25b      	sxtb	r3, r3
 8006c2a:	0011      	movs	r1, r2
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f7ff ff81 	bl	8006b34 <__NVIC_SetPriority>
}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b004      	add	sp, #16
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	0002      	movs	r2, r0
 8006c42:	1dfb      	adds	r3, r7, #7
 8006c44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c46:	1dfb      	adds	r3, r7, #7
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	b25b      	sxtb	r3, r3
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7ff ff57 	bl	8006b00 <__NVIC_EnableIRQ>
}
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	46bd      	mov	sp, r7
 8006c56:	b002      	add	sp, #8
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e050      	b.n	8006d10 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2225      	movs	r2, #37	; 0x25
 8006c72:	5c9b      	ldrb	r3, [r3, r2]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d008      	beq.n	8006c8c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2224      	movs	r2, #36	; 0x24
 8006c84:	2100      	movs	r1, #0
 8006c86:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e041      	b.n	8006d10 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	210e      	movs	r1, #14
 8006c98:	438a      	bics	r2, r1
 8006c9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca6:	491c      	ldr	r1, [pc, #112]	; (8006d18 <HAL_DMA_Abort+0xbc>)
 8006ca8:	400a      	ands	r2, r1
 8006caa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	438a      	bics	r2, r1
 8006cba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006cbc:	4b17      	ldr	r3, [pc, #92]	; (8006d1c <HAL_DMA_Abort+0xc0>)
 8006cbe:	6859      	ldr	r1, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	221c      	movs	r2, #28
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2201      	movs	r2, #1
 8006cca:	409a      	lsls	r2, r3
 8006ccc:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <HAL_DMA_Abort+0xc0>)
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006cda:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00c      	beq.n	8006cfe <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cee:	490a      	ldr	r1, [pc, #40]	; (8006d18 <HAL_DMA_Abort+0xbc>)
 8006cf0:	400a      	ands	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006cfc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2225      	movs	r2, #37	; 0x25
 8006d02:	2101      	movs	r1, #1
 8006d04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2224      	movs	r2, #36	; 0x24
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	0018      	movs	r0, r3
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b002      	add	sp, #8
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	fffffeff 	.word	0xfffffeff
 8006d1c:	40020000 	.word	0x40020000

08006d20 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d28:	210f      	movs	r1, #15
 8006d2a:	187b      	adds	r3, r7, r1
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2225      	movs	r2, #37	; 0x25
 8006d34:	5c9b      	ldrb	r3, [r3, r2]
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d006      	beq.n	8006d4a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2204      	movs	r2, #4
 8006d40:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006d42:	187b      	adds	r3, r7, r1
 8006d44:	2201      	movs	r2, #1
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	e049      	b.n	8006dde <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	210e      	movs	r1, #14
 8006d56:	438a      	bics	r2, r1
 8006d58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2101      	movs	r1, #1
 8006d66:	438a      	bics	r2, r1
 8006d68:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	491d      	ldr	r1, [pc, #116]	; (8006dec <HAL_DMA_Abort_IT+0xcc>)
 8006d76:	400a      	ands	r2, r1
 8006d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8006d7a:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <HAL_DMA_Abort_IT+0xd0>)
 8006d7c:	6859      	ldr	r1, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	221c      	movs	r2, #28
 8006d84:	4013      	ands	r3, r2
 8006d86:	2201      	movs	r2, #1
 8006d88:	409a      	lsls	r2, r3
 8006d8a:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <HAL_DMA_Abort_IT+0xd0>)
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006d98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00c      	beq.n	8006dbc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	490f      	ldr	r1, [pc, #60]	; (8006dec <HAL_DMA_Abort_IT+0xcc>)
 8006dae:	400a      	ands	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006dba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2225      	movs	r2, #37	; 0x25
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2224      	movs	r2, #36	; 0x24
 8006dc8:	2100      	movs	r1, #0
 8006dca:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	0010      	movs	r0, r2
 8006ddc:	4798      	blx	r3
    }
  }
  return status;
 8006dde:	230f      	movs	r3, #15
 8006de0:	18fb      	adds	r3, r7, r3
 8006de2:	781b      	ldrb	r3, [r3, #0]
}
 8006de4:	0018      	movs	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b004      	add	sp, #16
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	fffffeff 	.word	0xfffffeff
 8006df0:	40020000 	.word	0x40020000

08006df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e02:	e147      	b.n	8007094 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2101      	movs	r1, #1
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4091      	lsls	r1, r2
 8006e0e:	000a      	movs	r2, r1
 8006e10:	4013      	ands	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d100      	bne.n	8006e1c <HAL_GPIO_Init+0x28>
 8006e1a:	e138      	b.n	800708e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2203      	movs	r2, #3
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d005      	beq.n	8006e34 <HAL_GPIO_Init+0x40>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d130      	bne.n	8006e96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	2203      	movs	r2, #3
 8006e40:	409a      	lsls	r2, r3
 8006e42:	0013      	movs	r3, r2
 8006e44:	43da      	mvns	r2, r3
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	409a      	lsls	r2, r3
 8006e56:	0013      	movs	r3, r2
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	0013      	movs	r3, r2
 8006e72:	43da      	mvns	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	4013      	ands	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	091b      	lsrs	r3, r3, #4
 8006e80:	2201      	movs	r2, #1
 8006e82:	401a      	ands	r2, r3
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	409a      	lsls	r2, r3
 8006e88:	0013      	movs	r3, r2
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d017      	beq.n	8006ed2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	2203      	movs	r2, #3
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	0013      	movs	r3, r2
 8006eb2:	43da      	mvns	r2, r3
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	409a      	lsls	r2, r3
 8006ec4:	0013      	movs	r3, r2
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	4013      	ands	r3, r2
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d123      	bne.n	8006f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	08da      	lsrs	r2, r3, #3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3208      	adds	r2, #8
 8006ee6:	0092      	lsls	r2, r2, #2
 8006ee8:	58d3      	ldr	r3, [r2, r3]
 8006eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2207      	movs	r2, #7
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	220f      	movs	r2, #15
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	0013      	movs	r3, r2
 8006efa:	43da      	mvns	r2, r3
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4013      	ands	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2107      	movs	r1, #7
 8006f0a:	400b      	ands	r3, r1
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	0013      	movs	r3, r2
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	08da      	lsrs	r2, r3, #3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3208      	adds	r2, #8
 8006f20:	0092      	lsls	r2, r2, #2
 8006f22:	6939      	ldr	r1, [r7, #16]
 8006f24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	2203      	movs	r2, #3
 8006f32:	409a      	lsls	r2, r3
 8006f34:	0013      	movs	r3, r2
 8006f36:	43da      	mvns	r2, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2203      	movs	r2, #3
 8006f44:	401a      	ands	r2, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	0013      	movs	r3, r2
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	23c0      	movs	r3, #192	; 0xc0
 8006f60:	029b      	lsls	r3, r3, #10
 8006f62:	4013      	ands	r3, r2
 8006f64:	d100      	bne.n	8006f68 <HAL_GPIO_Init+0x174>
 8006f66:	e092      	b.n	800708e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006f68:	4a50      	ldr	r2, [pc, #320]	; (80070ac <HAL_GPIO_Init+0x2b8>)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	089b      	lsrs	r3, r3, #2
 8006f6e:	3318      	adds	r3, #24
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	589b      	ldr	r3, [r3, r2]
 8006f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2203      	movs	r2, #3
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	220f      	movs	r2, #15
 8006f80:	409a      	lsls	r2, r3
 8006f82:	0013      	movs	r3, r2
 8006f84:	43da      	mvns	r2, r3
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	23a0      	movs	r3, #160	; 0xa0
 8006f90:	05db      	lsls	r3, r3, #23
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d013      	beq.n	8006fbe <HAL_GPIO_Init+0x1ca>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a45      	ldr	r2, [pc, #276]	; (80070b0 <HAL_GPIO_Init+0x2bc>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00d      	beq.n	8006fba <HAL_GPIO_Init+0x1c6>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a44      	ldr	r2, [pc, #272]	; (80070b4 <HAL_GPIO_Init+0x2c0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d007      	beq.n	8006fb6 <HAL_GPIO_Init+0x1c2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a43      	ldr	r2, [pc, #268]	; (80070b8 <HAL_GPIO_Init+0x2c4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d101      	bne.n	8006fb2 <HAL_GPIO_Init+0x1be>
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e006      	b.n	8006fc0 <HAL_GPIO_Init+0x1cc>
 8006fb2:	2305      	movs	r3, #5
 8006fb4:	e004      	b.n	8006fc0 <HAL_GPIO_Init+0x1cc>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e002      	b.n	8006fc0 <HAL_GPIO_Init+0x1cc>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e000      	b.n	8006fc0 <HAL_GPIO_Init+0x1cc>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	2103      	movs	r1, #3
 8006fc4:	400a      	ands	r2, r1
 8006fc6:	00d2      	lsls	r2, r2, #3
 8006fc8:	4093      	lsls	r3, r2
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006fd0:	4936      	ldr	r1, [pc, #216]	; (80070ac <HAL_GPIO_Init+0x2b8>)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	089b      	lsrs	r3, r3, #2
 8006fd6:	3318      	adds	r3, #24
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006fde:	4b33      	ldr	r3, [pc, #204]	; (80070ac <HAL_GPIO_Init+0x2b8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	43da      	mvns	r2, r3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	4013      	ands	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	2380      	movs	r3, #128	; 0x80
 8006ff4:	035b      	lsls	r3, r3, #13
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d003      	beq.n	8007002 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007002:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <HAL_GPIO_Init+0x2b8>)
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007008:	4b28      	ldr	r3, [pc, #160]	; (80070ac <HAL_GPIO_Init+0x2b8>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	43da      	mvns	r2, r3
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	4013      	ands	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	2380      	movs	r3, #128	; 0x80
 800701e:	039b      	lsls	r3, r3, #14
 8007020:	4013      	ands	r3, r2
 8007022:	d003      	beq.n	800702c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800702c:	4b1f      	ldr	r3, [pc, #124]	; (80070ac <HAL_GPIO_Init+0x2b8>)
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007032:	4a1e      	ldr	r2, [pc, #120]	; (80070ac <HAL_GPIO_Init+0x2b8>)
 8007034:	2384      	movs	r3, #132	; 0x84
 8007036:	58d3      	ldr	r3, [r2, r3]
 8007038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	43da      	mvns	r2, r3
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	4013      	ands	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	029b      	lsls	r3, r3, #10
 800704c:	4013      	ands	r3, r2
 800704e:	d003      	beq.n	8007058 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007058:	4914      	ldr	r1, [pc, #80]	; (80070ac <HAL_GPIO_Init+0x2b8>)
 800705a:	2284      	movs	r2, #132	; 0x84
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007060:	4a12      	ldr	r2, [pc, #72]	; (80070ac <HAL_GPIO_Init+0x2b8>)
 8007062:	2380      	movs	r3, #128	; 0x80
 8007064:	58d3      	ldr	r3, [r2, r3]
 8007066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	43da      	mvns	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4013      	ands	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	2380      	movs	r3, #128	; 0x80
 8007078:	025b      	lsls	r3, r3, #9
 800707a:	4013      	ands	r3, r2
 800707c:	d003      	beq.n	8007086 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007086:	4909      	ldr	r1, [pc, #36]	; (80070ac <HAL_GPIO_Init+0x2b8>)
 8007088:	2280      	movs	r2, #128	; 0x80
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	3301      	adds	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	40da      	lsrs	r2, r3
 800709c:	1e13      	subs	r3, r2, #0
 800709e:	d000      	beq.n	80070a2 <HAL_GPIO_Init+0x2ae>
 80070a0:	e6b0      	b.n	8006e04 <HAL_GPIO_Init+0x10>
  }
}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b006      	add	sp, #24
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40021800 	.word	0x40021800
 80070b0:	50000400 	.word	0x50000400
 80070b4:	50000800 	.word	0x50000800
 80070b8:	50000c00 	.word	0x50000c00

080070bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	0008      	movs	r0, r1
 80070c6:	0011      	movs	r1, r2
 80070c8:	1cbb      	adds	r3, r7, #2
 80070ca:	1c02      	adds	r2, r0, #0
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	1c7b      	adds	r3, r7, #1
 80070d0:	1c0a      	adds	r2, r1, #0
 80070d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070d4:	1c7b      	adds	r3, r7, #1
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070dc:	1cbb      	adds	r3, r7, #2
 80070de:	881a      	ldrh	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070e4:	e003      	b.n	80070ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070e6:	1cbb      	adds	r3, r7, #2
 80070e8:	881a      	ldrh	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b002      	add	sp, #8
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	0002      	movs	r2, r0
 8007100:	1dbb      	adds	r3, r7, #6
 8007102:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8007104:	4b10      	ldr	r3, [pc, #64]	; (8007148 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	1dba      	adds	r2, r7, #6
 800710a:	8812      	ldrh	r2, [r2, #0]
 800710c:	4013      	ands	r3, r2
 800710e:	d008      	beq.n	8007122 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007110:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007112:	1dba      	adds	r2, r7, #6
 8007114:	8812      	ldrh	r2, [r2, #0]
 8007116:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007118:	1dbb      	adds	r3, r7, #6
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	0018      	movs	r0, r3
 800711e:	f7fd faa7 	bl	8004670 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	1dba      	adds	r2, r7, #6
 8007128:	8812      	ldrh	r2, [r2, #0]
 800712a:	4013      	ands	r3, r2
 800712c:	d008      	beq.n	8007140 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800712e:	4b06      	ldr	r3, [pc, #24]	; (8007148 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007130:	1dba      	adds	r2, r7, #6
 8007132:	8812      	ldrh	r2, [r2, #0]
 8007134:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007136:	1dbb      	adds	r3, r7, #6
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	0018      	movs	r0, r3
 800713c:	f7fd faca 	bl	80046d4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007140:	46c0      	nop			; (mov r8, r8)
 8007142:	46bd      	mov	sp, r7
 8007144:	b002      	add	sp, #8
 8007146:	bd80      	pop	{r7, pc}
 8007148:	40021800 	.word	0x40021800

0800714c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e082      	b.n	8007264 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2241      	movs	r2, #65	; 0x41
 8007162:	5c9b      	ldrb	r3, [r3, r2]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d107      	bne.n	800717a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2240      	movs	r2, #64	; 0x40
 800716e:	2100      	movs	r1, #0
 8007170:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	0018      	movs	r0, r3
 8007176:	f7fd f85f 	bl	8004238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2241      	movs	r2, #65	; 0x41
 800717e:	2124      	movs	r1, #36	; 0x24
 8007180:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2101      	movs	r1, #1
 800718e:	438a      	bics	r2, r1
 8007190:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4934      	ldr	r1, [pc, #208]	; (800726c <HAL_I2C_Init+0x120>)
 800719c:	400a      	ands	r2, r1
 800719e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4931      	ldr	r1, [pc, #196]	; (8007270 <HAL_I2C_Init+0x124>)
 80071ac:	400a      	ands	r2, r1
 80071ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d108      	bne.n	80071ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2180      	movs	r1, #128	; 0x80
 80071c2:	0209      	lsls	r1, r1, #8
 80071c4:	430a      	orrs	r2, r1
 80071c6:	609a      	str	r2, [r3, #8]
 80071c8:	e007      	b.n	80071da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2184      	movs	r1, #132	; 0x84
 80071d4:	0209      	lsls	r1, r1, #8
 80071d6:	430a      	orrs	r2, r1
 80071d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d104      	bne.n	80071ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2280      	movs	r2, #128	; 0x80
 80071e8:	0112      	lsls	r2, r2, #4
 80071ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	491f      	ldr	r1, [pc, #124]	; (8007274 <HAL_I2C_Init+0x128>)
 80071f8:	430a      	orrs	r2, r1
 80071fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	491a      	ldr	r1, [pc, #104]	; (8007270 <HAL_I2C_Init+0x124>)
 8007208:	400a      	ands	r2, r1
 800720a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	431a      	orrs	r2, r3
 8007216:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69d9      	ldr	r1, [r3, #28]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1a      	ldr	r2, [r3, #32]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2101      	movs	r1, #1
 8007242:	430a      	orrs	r2, r1
 8007244:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2241      	movs	r2, #65	; 0x41
 8007250:	2120      	movs	r1, #32
 8007252:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2242      	movs	r2, #66	; 0x42
 800725e:	2100      	movs	r1, #0
 8007260:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	0018      	movs	r0, r3
 8007266:	46bd      	mov	sp, r7
 8007268:	b002      	add	sp, #8
 800726a:	bd80      	pop	{r7, pc}
 800726c:	f0ffffff 	.word	0xf0ffffff
 8007270:	ffff7fff 	.word	0xffff7fff
 8007274:	02008000 	.word	0x02008000

08007278 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007278:	b590      	push	{r4, r7, lr}
 800727a:	b089      	sub	sp, #36	; 0x24
 800727c:	af02      	add	r7, sp, #8
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	0008      	movs	r0, r1
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	0019      	movs	r1, r3
 8007286:	230a      	movs	r3, #10
 8007288:	18fb      	adds	r3, r7, r3
 800728a:	1c02      	adds	r2, r0, #0
 800728c:	801a      	strh	r2, [r3, #0]
 800728e:	2308      	movs	r3, #8
 8007290:	18fb      	adds	r3, r7, r3
 8007292:	1c0a      	adds	r2, r1, #0
 8007294:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2241      	movs	r2, #65	; 0x41
 800729a:	5c9b      	ldrb	r3, [r3, r2]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d000      	beq.n	80072a4 <HAL_I2C_Master_Transmit+0x2c>
 80072a2:	e0e7      	b.n	8007474 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2240      	movs	r2, #64	; 0x40
 80072a8:	5c9b      	ldrb	r3, [r3, r2]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_I2C_Master_Transmit+0x3a>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e0e1      	b.n	8007476 <HAL_I2C_Master_Transmit+0x1fe>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2240      	movs	r2, #64	; 0x40
 80072b6:	2101      	movs	r1, #1
 80072b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072ba:	f7ff fbf3 	bl	8006aa4 <HAL_GetTick>
 80072be:	0003      	movs	r3, r0
 80072c0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072c2:	2380      	movs	r3, #128	; 0x80
 80072c4:	0219      	lsls	r1, r3, #8
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	2319      	movs	r3, #25
 80072ce:	2201      	movs	r2, #1
 80072d0:	f000 fa04 	bl	80076dc <I2C_WaitOnFlagUntilTimeout>
 80072d4:	1e03      	subs	r3, r0, #0
 80072d6:	d001      	beq.n	80072dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0cc      	b.n	8007476 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2241      	movs	r2, #65	; 0x41
 80072e0:	2121      	movs	r1, #33	; 0x21
 80072e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2242      	movs	r2, #66	; 0x42
 80072e8:	2110      	movs	r1, #16
 80072ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2208      	movs	r2, #8
 80072fc:	18ba      	adds	r2, r7, r2
 80072fe:	8812      	ldrh	r2, [r2, #0]
 8007300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730c:	b29b      	uxth	r3, r3
 800730e:	2bff      	cmp	r3, #255	; 0xff
 8007310:	d911      	bls.n	8007336 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	22ff      	movs	r2, #255	; 0xff
 8007316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731c:	b2da      	uxtb	r2, r3
 800731e:	2380      	movs	r3, #128	; 0x80
 8007320:	045c      	lsls	r4, r3, #17
 8007322:	230a      	movs	r3, #10
 8007324:	18fb      	adds	r3, r7, r3
 8007326:	8819      	ldrh	r1, [r3, #0]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	4b55      	ldr	r3, [pc, #340]	; (8007480 <HAL_I2C_Master_Transmit+0x208>)
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	0023      	movs	r3, r4
 8007330:	f000 fc08 	bl	8007b44 <I2C_TransferConfig>
 8007334:	e075      	b.n	8007422 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007344:	b2da      	uxtb	r2, r3
 8007346:	2380      	movs	r3, #128	; 0x80
 8007348:	049c      	lsls	r4, r3, #18
 800734a:	230a      	movs	r3, #10
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	8819      	ldrh	r1, [r3, #0]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	4b4b      	ldr	r3, [pc, #300]	; (8007480 <HAL_I2C_Master_Transmit+0x208>)
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	0023      	movs	r3, r4
 8007358:	f000 fbf4 	bl	8007b44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800735c:	e061      	b.n	8007422 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	0018      	movs	r0, r3
 8007366:	f000 f9f8 	bl	800775a <I2C_WaitOnTXISFlagUntilTimeout>
 800736a:	1e03      	subs	r3, r0, #0
 800736c:	d001      	beq.n	8007372 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e081      	b.n	8007476 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738c:	b29b      	uxth	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d03a      	beq.n	8007422 <HAL_I2C_Master_Transmit+0x1aa>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d136      	bne.n	8007422 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	0013      	movs	r3, r2
 80073be:	2200      	movs	r2, #0
 80073c0:	2180      	movs	r1, #128	; 0x80
 80073c2:	f000 f98b 	bl	80076dc <I2C_WaitOnFlagUntilTimeout>
 80073c6:	1e03      	subs	r3, r0, #0
 80073c8:	d001      	beq.n	80073ce <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e053      	b.n	8007476 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2bff      	cmp	r3, #255	; 0xff
 80073d6:	d911      	bls.n	80073fc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	22ff      	movs	r2, #255	; 0xff
 80073dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	045c      	lsls	r4, r3, #17
 80073e8:	230a      	movs	r3, #10
 80073ea:	18fb      	adds	r3, r7, r3
 80073ec:	8819      	ldrh	r1, [r3, #0]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	2300      	movs	r3, #0
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	0023      	movs	r3, r4
 80073f6:	f000 fba5 	bl	8007b44 <I2C_TransferConfig>
 80073fa:	e012      	b.n	8007422 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740a:	b2da      	uxtb	r2, r3
 800740c:	2380      	movs	r3, #128	; 0x80
 800740e:	049c      	lsls	r4, r3, #18
 8007410:	230a      	movs	r3, #10
 8007412:	18fb      	adds	r3, r7, r3
 8007414:	8819      	ldrh	r1, [r3, #0]
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	2300      	movs	r3, #0
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	0023      	movs	r3, r4
 800741e:	f000 fb91 	bl	8007b44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d198      	bne.n	800735e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	0018      	movs	r0, r3
 8007434:	f000 f9d0 	bl	80077d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007438:	1e03      	subs	r3, r0, #0
 800743a:	d001      	beq.n	8007440 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e01a      	b.n	8007476 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2220      	movs	r2, #32
 8007446:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	490c      	ldr	r1, [pc, #48]	; (8007484 <HAL_I2C_Master_Transmit+0x20c>)
 8007454:	400a      	ands	r2, r1
 8007456:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2241      	movs	r2, #65	; 0x41
 800745c:	2120      	movs	r1, #32
 800745e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2242      	movs	r2, #66	; 0x42
 8007464:	2100      	movs	r1, #0
 8007466:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2240      	movs	r2, #64	; 0x40
 800746c:	2100      	movs	r1, #0
 800746e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	e000      	b.n	8007476 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8007474:	2302      	movs	r3, #2
  }
}
 8007476:	0018      	movs	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	b007      	add	sp, #28
 800747c:	bd90      	pop	{r4, r7, pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	80002000 	.word	0x80002000
 8007484:	fe00e800 	.word	0xfe00e800

08007488 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007488:	b590      	push	{r4, r7, lr}
 800748a:	b089      	sub	sp, #36	; 0x24
 800748c:	af02      	add	r7, sp, #8
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	0008      	movs	r0, r1
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	0019      	movs	r1, r3
 8007496:	230a      	movs	r3, #10
 8007498:	18fb      	adds	r3, r7, r3
 800749a:	1c02      	adds	r2, r0, #0
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	2308      	movs	r3, #8
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	1c0a      	adds	r2, r1, #0
 80074a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2241      	movs	r2, #65	; 0x41
 80074aa:	5c9b      	ldrb	r3, [r3, r2]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d000      	beq.n	80074b4 <HAL_I2C_Master_Receive+0x2c>
 80074b2:	e0e8      	b.n	8007686 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2240      	movs	r2, #64	; 0x40
 80074b8:	5c9b      	ldrb	r3, [r3, r2]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <HAL_I2C_Master_Receive+0x3a>
 80074be:	2302      	movs	r3, #2
 80074c0:	e0e2      	b.n	8007688 <HAL_I2C_Master_Receive+0x200>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2240      	movs	r2, #64	; 0x40
 80074c6:	2101      	movs	r1, #1
 80074c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074ca:	f7ff faeb 	bl	8006aa4 <HAL_GetTick>
 80074ce:	0003      	movs	r3, r0
 80074d0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074d2:	2380      	movs	r3, #128	; 0x80
 80074d4:	0219      	lsls	r1, r3, #8
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	2319      	movs	r3, #25
 80074de:	2201      	movs	r2, #1
 80074e0:	f000 f8fc 	bl	80076dc <I2C_WaitOnFlagUntilTimeout>
 80074e4:	1e03      	subs	r3, r0, #0
 80074e6:	d001      	beq.n	80074ec <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0cd      	b.n	8007688 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2241      	movs	r2, #65	; 0x41
 80074f0:	2122      	movs	r1, #34	; 0x22
 80074f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2242      	movs	r2, #66	; 0x42
 80074f8:	2110      	movs	r1, #16
 80074fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2208      	movs	r2, #8
 800750c:	18ba      	adds	r2, r7, r2
 800750e:	8812      	ldrh	r2, [r2, #0]
 8007510:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751c:	b29b      	uxth	r3, r3
 800751e:	2bff      	cmp	r3, #255	; 0xff
 8007520:	d911      	bls.n	8007546 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	22ff      	movs	r2, #255	; 0xff
 8007526:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752c:	b2da      	uxtb	r2, r3
 800752e:	2380      	movs	r3, #128	; 0x80
 8007530:	045c      	lsls	r4, r3, #17
 8007532:	230a      	movs	r3, #10
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	8819      	ldrh	r1, [r3, #0]
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	4b55      	ldr	r3, [pc, #340]	; (8007690 <HAL_I2C_Master_Receive+0x208>)
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	0023      	movs	r3, r4
 8007540:	f000 fb00 	bl	8007b44 <I2C_TransferConfig>
 8007544:	e076      	b.n	8007634 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007554:	b2da      	uxtb	r2, r3
 8007556:	2380      	movs	r3, #128	; 0x80
 8007558:	049c      	lsls	r4, r3, #18
 800755a:	230a      	movs	r3, #10
 800755c:	18fb      	adds	r3, r7, r3
 800755e:	8819      	ldrh	r1, [r3, #0]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	4b4b      	ldr	r3, [pc, #300]	; (8007690 <HAL_I2C_Master_Receive+0x208>)
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	0023      	movs	r3, r4
 8007568:	f000 faec 	bl	8007b44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800756c:	e062      	b.n	8007634 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	0018      	movs	r0, r3
 8007576:	f000 f96b 	bl	8007850 <I2C_WaitOnRXNEFlagUntilTimeout>
 800757a:	1e03      	subs	r3, r0, #0
 800757c:	d001      	beq.n	8007582 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e082      	b.n	8007688 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d03a      	beq.n	8007634 <HAL_I2C_Master_Receive+0x1ac>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d136      	bne.n	8007634 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	0013      	movs	r3, r2
 80075d0:	2200      	movs	r2, #0
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	f000 f882 	bl	80076dc <I2C_WaitOnFlagUntilTimeout>
 80075d8:	1e03      	subs	r3, r0, #0
 80075da:	d001      	beq.n	80075e0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e053      	b.n	8007688 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2bff      	cmp	r3, #255	; 0xff
 80075e8:	d911      	bls.n	800760e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	22ff      	movs	r2, #255	; 0xff
 80075ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	2380      	movs	r3, #128	; 0x80
 80075f8:	045c      	lsls	r4, r3, #17
 80075fa:	230a      	movs	r3, #10
 80075fc:	18fb      	adds	r3, r7, r3
 80075fe:	8819      	ldrh	r1, [r3, #0]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	2300      	movs	r3, #0
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	0023      	movs	r3, r4
 8007608:	f000 fa9c 	bl	8007b44 <I2C_TransferConfig>
 800760c:	e012      	b.n	8007634 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800761c:	b2da      	uxtb	r2, r3
 800761e:	2380      	movs	r3, #128	; 0x80
 8007620:	049c      	lsls	r4, r3, #18
 8007622:	230a      	movs	r3, #10
 8007624:	18fb      	adds	r3, r7, r3
 8007626:	8819      	ldrh	r1, [r3, #0]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	2300      	movs	r3, #0
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	0023      	movs	r3, r4
 8007630:	f000 fa88 	bl	8007b44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d197      	bne.n	800756e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	0018      	movs	r0, r3
 8007646:	f000 f8c7 	bl	80077d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800764a:	1e03      	subs	r3, r0, #0
 800764c:	d001      	beq.n	8007652 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e01a      	b.n	8007688 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2220      	movs	r2, #32
 8007658:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	490b      	ldr	r1, [pc, #44]	; (8007694 <HAL_I2C_Master_Receive+0x20c>)
 8007666:	400a      	ands	r2, r1
 8007668:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2241      	movs	r2, #65	; 0x41
 800766e:	2120      	movs	r1, #32
 8007670:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2242      	movs	r2, #66	; 0x42
 8007676:	2100      	movs	r1, #0
 8007678:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2240      	movs	r2, #64	; 0x40
 800767e:	2100      	movs	r1, #0
 8007680:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	e000      	b.n	8007688 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8007686:	2302      	movs	r3, #2
  }
}
 8007688:	0018      	movs	r0, r3
 800768a:	46bd      	mov	sp, r7
 800768c:	b007      	add	sp, #28
 800768e:	bd90      	pop	{r4, r7, pc}
 8007690:	80002400 	.word	0x80002400
 8007694:	fe00e800 	.word	0xfe00e800

08007698 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	2202      	movs	r2, #2
 80076a8:	4013      	ands	r3, r2
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d103      	bne.n	80076b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	2201      	movs	r2, #1
 80076be:	4013      	ands	r3, r2
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d007      	beq.n	80076d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699a      	ldr	r2, [r3, #24]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2101      	movs	r1, #1
 80076d0:	430a      	orrs	r2, r1
 80076d2:	619a      	str	r2, [r3, #24]
  }
}
 80076d4:	46c0      	nop			; (mov r8, r8)
 80076d6:	46bd      	mov	sp, r7
 80076d8:	b002      	add	sp, #8
 80076da:	bd80      	pop	{r7, pc}

080076dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	1dfb      	adds	r3, r7, #7
 80076ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076ec:	e021      	b.n	8007732 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	3301      	adds	r3, #1
 80076f2:	d01e      	beq.n	8007732 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f4:	f7ff f9d6 	bl	8006aa4 <HAL_GetTick>
 80076f8:	0002      	movs	r2, r0
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d302      	bcc.n	800770a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d113      	bne.n	8007732 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	2220      	movs	r2, #32
 8007710:	431a      	orrs	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2241      	movs	r2, #65	; 0x41
 800771a:	2120      	movs	r1, #32
 800771c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2242      	movs	r2, #66	; 0x42
 8007722:	2100      	movs	r1, #0
 8007724:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2240      	movs	r2, #64	; 0x40
 800772a:	2100      	movs	r1, #0
 800772c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e00f      	b.n	8007752 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	4013      	ands	r3, r2
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	425a      	negs	r2, r3
 8007742:	4153      	adcs	r3, r2
 8007744:	b2db      	uxtb	r3, r3
 8007746:	001a      	movs	r2, r3
 8007748:	1dfb      	adds	r3, r7, #7
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d0ce      	beq.n	80076ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	0018      	movs	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	b004      	add	sp, #16
 8007758:	bd80      	pop	{r7, pc}

0800775a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007766:	e02b      	b.n	80077c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	0018      	movs	r0, r3
 8007770:	f000 f8e8 	bl	8007944 <I2C_IsErrorOccurred>
 8007774:	1e03      	subs	r3, r0, #0
 8007776:	d001      	beq.n	800777c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e029      	b.n	80077d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	3301      	adds	r3, #1
 8007780:	d01e      	beq.n	80077c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007782:	f7ff f98f 	bl	8006aa4 <HAL_GetTick>
 8007786:	0002      	movs	r2, r0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	d302      	bcc.n	8007798 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d113      	bne.n	80077c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779c:	2220      	movs	r2, #32
 800779e:	431a      	orrs	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2241      	movs	r2, #65	; 0x41
 80077a8:	2120      	movs	r1, #32
 80077aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2242      	movs	r2, #66	; 0x42
 80077b0:	2100      	movs	r1, #0
 80077b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2240      	movs	r2, #64	; 0x40
 80077b8:	2100      	movs	r1, #0
 80077ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e007      	b.n	80077d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	2202      	movs	r2, #2
 80077c8:	4013      	ands	r3, r2
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d1cc      	bne.n	8007768 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	0018      	movs	r0, r3
 80077d2:	46bd      	mov	sp, r7
 80077d4:	b004      	add	sp, #16
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077e4:	e028      	b.n	8007838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	68b9      	ldr	r1, [r7, #8]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	0018      	movs	r0, r3
 80077ee:	f000 f8a9 	bl	8007944 <I2C_IsErrorOccurred>
 80077f2:	1e03      	subs	r3, r0, #0
 80077f4:	d001      	beq.n	80077fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e026      	b.n	8007848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077fa:	f7ff f953 	bl	8006aa4 <HAL_GetTick>
 80077fe:	0002      	movs	r2, r0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	429a      	cmp	r2, r3
 8007808:	d302      	bcc.n	8007810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d113      	bne.n	8007838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007814:	2220      	movs	r2, #32
 8007816:	431a      	orrs	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2241      	movs	r2, #65	; 0x41
 8007820:	2120      	movs	r1, #32
 8007822:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2242      	movs	r2, #66	; 0x42
 8007828:	2100      	movs	r1, #0
 800782a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2240      	movs	r2, #64	; 0x40
 8007830:	2100      	movs	r1, #0
 8007832:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e007      	b.n	8007848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	2220      	movs	r2, #32
 8007840:	4013      	ands	r3, r2
 8007842:	2b20      	cmp	r3, #32
 8007844:	d1cf      	bne.n	80077e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	0018      	movs	r0, r3
 800784a:	46bd      	mov	sp, r7
 800784c:	b004      	add	sp, #16
 800784e:	bd80      	pop	{r7, pc}

08007850 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800785c:	e064      	b.n	8007928 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	68b9      	ldr	r1, [r7, #8]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	0018      	movs	r0, r3
 8007866:	f000 f86d 	bl	8007944 <I2C_IsErrorOccurred>
 800786a:	1e03      	subs	r3, r0, #0
 800786c:	d001      	beq.n	8007872 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e062      	b.n	8007938 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	2220      	movs	r2, #32
 800787a:	4013      	ands	r3, r2
 800787c:	2b20      	cmp	r3, #32
 800787e:	d138      	bne.n	80078f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2204      	movs	r2, #4
 8007888:	4013      	ands	r3, r2
 800788a:	2b04      	cmp	r3, #4
 800788c:	d105      	bne.n	800789a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	e04e      	b.n	8007938 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	2210      	movs	r2, #16
 80078a2:	4013      	ands	r3, r2
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d107      	bne.n	80078b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2210      	movs	r2, #16
 80078ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2204      	movs	r2, #4
 80078b4:	645a      	str	r2, [r3, #68]	; 0x44
 80078b6:	e002      	b.n	80078be <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2220      	movs	r2, #32
 80078c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	491b      	ldr	r1, [pc, #108]	; (8007940 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80078d2:	400a      	ands	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2241      	movs	r2, #65	; 0x41
 80078da:	2120      	movs	r1, #32
 80078dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2242      	movs	r2, #66	; 0x42
 80078e2:	2100      	movs	r1, #0
 80078e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2240      	movs	r2, #64	; 0x40
 80078ea:	2100      	movs	r1, #0
 80078ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e022      	b.n	8007938 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f2:	f7ff f8d7 	bl	8006aa4 <HAL_GetTick>
 80078f6:	0002      	movs	r2, r0
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d302      	bcc.n	8007908 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10f      	bne.n	8007928 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790c:	2220      	movs	r2, #32
 800790e:	431a      	orrs	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2241      	movs	r2, #65	; 0x41
 8007918:	2120      	movs	r1, #32
 800791a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2240      	movs	r2, #64	; 0x40
 8007920:	2100      	movs	r1, #0
 8007922:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e007      	b.n	8007938 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	2204      	movs	r2, #4
 8007930:	4013      	ands	r3, r2
 8007932:	2b04      	cmp	r3, #4
 8007934:	d193      	bne.n	800785e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	0018      	movs	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	b004      	add	sp, #16
 800793e:	bd80      	pop	{r7, pc}
 8007940:	fe00e800 	.word	0xfe00e800

08007944 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b08b      	sub	sp, #44	; 0x2c
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007950:	2327      	movs	r3, #39	; 0x27
 8007952:	18fb      	adds	r3, r7, r3
 8007954:	2200      	movs	r2, #0
 8007956:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	2210      	movs	r2, #16
 800796c:	4013      	ands	r3, r2
 800796e:	d100      	bne.n	8007972 <I2C_IsErrorOccurred+0x2e>
 8007970:	e082      	b.n	8007a78 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2210      	movs	r2, #16
 8007978:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800797a:	e060      	b.n	8007a3e <I2C_IsErrorOccurred+0xfa>
 800797c:	2427      	movs	r4, #39	; 0x27
 800797e:	193b      	adds	r3, r7, r4
 8007980:	193a      	adds	r2, r7, r4
 8007982:	7812      	ldrb	r2, [r2, #0]
 8007984:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	3301      	adds	r3, #1
 800798a:	d058      	beq.n	8007a3e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800798c:	f7ff f88a 	bl	8006aa4 <HAL_GetTick>
 8007990:	0002      	movs	r2, r0
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	429a      	cmp	r2, r3
 800799a:	d306      	bcc.n	80079aa <I2C_IsErrorOccurred+0x66>
 800799c:	193b      	adds	r3, r7, r4
 800799e:	193a      	adds	r2, r7, r4
 80079a0:	7812      	ldrb	r2, [r2, #0]
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d149      	bne.n	8007a3e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	2380      	movs	r3, #128	; 0x80
 80079b2:	01db      	lsls	r3, r3, #7
 80079b4:	4013      	ands	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80079b8:	2013      	movs	r0, #19
 80079ba:	183b      	adds	r3, r7, r0
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	2142      	movs	r1, #66	; 0x42
 80079c0:	5c52      	ldrb	r2, [r2, r1]
 80079c2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699a      	ldr	r2, [r3, #24]
 80079ca:	2380      	movs	r3, #128	; 0x80
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	401a      	ands	r2, r3
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d126      	bne.n	8007a26 <I2C_IsErrorOccurred+0xe2>
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	2380      	movs	r3, #128	; 0x80
 80079dc:	01db      	lsls	r3, r3, #7
 80079de:	429a      	cmp	r2, r3
 80079e0:	d021      	beq.n	8007a26 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80079e2:	183b      	adds	r3, r7, r0
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d01d      	beq.n	8007a26 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2180      	movs	r1, #128	; 0x80
 80079f6:	01c9      	lsls	r1, r1, #7
 80079f8:	430a      	orrs	r2, r1
 80079fa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80079fc:	f7ff f852 	bl	8006aa4 <HAL_GetTick>
 8007a00:	0003      	movs	r3, r0
 8007a02:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a04:	e00f      	b.n	8007a26 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a06:	f7ff f84d 	bl	8006aa4 <HAL_GetTick>
 8007a0a:	0002      	movs	r2, r0
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b19      	cmp	r3, #25
 8007a12:	d908      	bls.n	8007a26 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	2220      	movs	r2, #32
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007a1c:	2327      	movs	r3, #39	; 0x27
 8007a1e:	18fb      	adds	r3, r7, r3
 8007a20:	2201      	movs	r2, #1
 8007a22:	701a      	strb	r2, [r3, #0]

              break;
 8007a24:	e00b      	b.n	8007a3e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2127      	movs	r1, #39	; 0x27
 8007a32:	187a      	adds	r2, r7, r1
 8007a34:	1879      	adds	r1, r7, r1
 8007a36:	7809      	ldrb	r1, [r1, #0]
 8007a38:	7011      	strb	r1, [r2, #0]
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d1e3      	bne.n	8007a06 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	2220      	movs	r2, #32
 8007a46:	4013      	ands	r3, r2
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d004      	beq.n	8007a56 <I2C_IsErrorOccurred+0x112>
 8007a4c:	2327      	movs	r3, #39	; 0x27
 8007a4e:	18fb      	adds	r3, r7, r3
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d092      	beq.n	800797c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007a56:	2327      	movs	r3, #39	; 0x27
 8007a58:	18fb      	adds	r3, r7, r3
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d103      	bne.n	8007a68 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2220      	movs	r2, #32
 8007a66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	2204      	movs	r2, #4
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007a70:	2327      	movs	r3, #39	; 0x27
 8007a72:	18fb      	adds	r3, r7, r3
 8007a74:	2201      	movs	r2, #1
 8007a76:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	2380      	movs	r3, #128	; 0x80
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	4013      	ands	r3, r2
 8007a88:	d00c      	beq.n	8007aa4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2280      	movs	r2, #128	; 0x80
 8007a98:	0052      	lsls	r2, r2, #1
 8007a9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a9c:	2327      	movs	r3, #39	; 0x27
 8007a9e:	18fb      	adds	r3, r7, r3
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	2380      	movs	r3, #128	; 0x80
 8007aa8:	00db      	lsls	r3, r3, #3
 8007aaa:	4013      	ands	r3, r2
 8007aac:	d00c      	beq.n	8007ac8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2280      	movs	r2, #128	; 0x80
 8007abc:	00d2      	lsls	r2, r2, #3
 8007abe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ac0:	2327      	movs	r3, #39	; 0x27
 8007ac2:	18fb      	adds	r3, r7, r3
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	2380      	movs	r3, #128	; 0x80
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4013      	ands	r3, r2
 8007ad0:	d00c      	beq.n	8007aec <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2280      	movs	r2, #128	; 0x80
 8007ae0:	0092      	lsls	r2, r2, #2
 8007ae2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ae4:	2327      	movs	r3, #39	; 0x27
 8007ae6:	18fb      	adds	r3, r7, r3
 8007ae8:	2201      	movs	r2, #1
 8007aea:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007aec:	2327      	movs	r3, #39	; 0x27
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d01d      	beq.n	8007b32 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	0018      	movs	r0, r3
 8007afa:	f7ff fdcd 	bl	8007698 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	490d      	ldr	r1, [pc, #52]	; (8007b40 <I2C_IsErrorOccurred+0x1fc>)
 8007b0a:	400a      	ands	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	431a      	orrs	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2241      	movs	r2, #65	; 0x41
 8007b1e:	2120      	movs	r1, #32
 8007b20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2242      	movs	r2, #66	; 0x42
 8007b26:	2100      	movs	r1, #0
 8007b28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2240      	movs	r2, #64	; 0x40
 8007b2e:	2100      	movs	r1, #0
 8007b30:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007b32:	2327      	movs	r3, #39	; 0x27
 8007b34:	18fb      	adds	r3, r7, r3
 8007b36:	781b      	ldrb	r3, [r3, #0]
}
 8007b38:	0018      	movs	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b00b      	add	sp, #44	; 0x2c
 8007b3e:	bd90      	pop	{r4, r7, pc}
 8007b40:	fe00e800 	.word	0xfe00e800

08007b44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b44:	b590      	push	{r4, r7, lr}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	0008      	movs	r0, r1
 8007b4e:	0011      	movs	r1, r2
 8007b50:	607b      	str	r3, [r7, #4]
 8007b52:	240a      	movs	r4, #10
 8007b54:	193b      	adds	r3, r7, r4
 8007b56:	1c02      	adds	r2, r0, #0
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	2009      	movs	r0, #9
 8007b5c:	183b      	adds	r3, r7, r0
 8007b5e:	1c0a      	adds	r2, r1, #0
 8007b60:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b62:	193b      	adds	r3, r7, r4
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	059b      	lsls	r3, r3, #22
 8007b68:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b6a:	183b      	adds	r3, r7, r0
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	0419      	lsls	r1, r3, #16
 8007b70:	23ff      	movs	r3, #255	; 0xff
 8007b72:	041b      	lsls	r3, r3, #16
 8007b74:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b76:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b8e:	0d51      	lsrs	r1, r2, #21
 8007b90:	2280      	movs	r2, #128	; 0x80
 8007b92:	00d2      	lsls	r2, r2, #3
 8007b94:	400a      	ands	r2, r1
 8007b96:	4907      	ldr	r1, [pc, #28]	; (8007bb4 <I2C_TransferConfig+0x70>)
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	43d2      	mvns	r2, r2
 8007b9c:	401a      	ands	r2, r3
 8007b9e:	0011      	movs	r1, r2
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b007      	add	sp, #28
 8007bb0:	bd90      	pop	{r4, r7, pc}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	03ff63ff 	.word	0x03ff63ff

08007bb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2241      	movs	r2, #65	; 0x41
 8007bc6:	5c9b      	ldrb	r3, [r3, r2]
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	d138      	bne.n	8007c40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2240      	movs	r2, #64	; 0x40
 8007bd2:	5c9b      	ldrb	r3, [r3, r2]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e032      	b.n	8007c42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2240      	movs	r2, #64	; 0x40
 8007be0:	2101      	movs	r1, #1
 8007be2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2241      	movs	r2, #65	; 0x41
 8007be8:	2124      	movs	r1, #36	; 0x24
 8007bea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	438a      	bics	r2, r1
 8007bfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4911      	ldr	r1, [pc, #68]	; (8007c4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007c08:	400a      	ands	r2, r1
 8007c0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6819      	ldr	r1, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2101      	movs	r1, #1
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2241      	movs	r2, #65	; 0x41
 8007c30:	2120      	movs	r1, #32
 8007c32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2240      	movs	r2, #64	; 0x40
 8007c38:	2100      	movs	r1, #0
 8007c3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e000      	b.n	8007c42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c40:	2302      	movs	r3, #2
  }
}
 8007c42:	0018      	movs	r0, r3
 8007c44:	46bd      	mov	sp, r7
 8007c46:	b002      	add	sp, #8
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	46c0      	nop			; (mov r8, r8)
 8007c4c:	ffffefff 	.word	0xffffefff

08007c50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2241      	movs	r2, #65	; 0x41
 8007c5e:	5c9b      	ldrb	r3, [r3, r2]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d139      	bne.n	8007cda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2240      	movs	r2, #64	; 0x40
 8007c6a:	5c9b      	ldrb	r3, [r3, r2]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e033      	b.n	8007cdc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2240      	movs	r2, #64	; 0x40
 8007c78:	2101      	movs	r1, #1
 8007c7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2241      	movs	r2, #65	; 0x41
 8007c80:	2124      	movs	r1, #36	; 0x24
 8007c82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2101      	movs	r1, #1
 8007c90:	438a      	bics	r2, r1
 8007c92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4a11      	ldr	r2, [pc, #68]	; (8007ce4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2241      	movs	r2, #65	; 0x41
 8007cca:	2120      	movs	r1, #32
 8007ccc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2240      	movs	r2, #64	; 0x40
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e000      	b.n	8007cdc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cda:	2302      	movs	r3, #2
  }
}
 8007cdc:	0018      	movs	r0, r3
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	b004      	add	sp, #16
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	fffff0ff 	.word	0xfffff0ff

08007ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007cf0:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a19      	ldr	r2, [pc, #100]	; (8007d5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	0019      	movs	r1, r3
 8007cfa:	4b17      	ldr	r3, [pc, #92]	; (8007d58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	2380      	movs	r3, #128	; 0x80
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d11f      	bne.n	8007d4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007d0c:	4b14      	ldr	r3, [pc, #80]	; (8007d60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	0013      	movs	r3, r2
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	189b      	adds	r3, r3, r2
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	4912      	ldr	r1, [pc, #72]	; (8007d64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f7f8 fa1a 	bl	8000154 <__udivsi3>
 8007d20:	0003      	movs	r3, r0
 8007d22:	3301      	adds	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d26:	e008      	b.n	8007d3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	e001      	b.n	8007d3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e009      	b.n	8007d4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007d3c:	695a      	ldr	r2, [r3, #20]
 8007d3e:	2380      	movs	r3, #128	; 0x80
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	401a      	ands	r2, r3
 8007d44:	2380      	movs	r3, #128	; 0x80
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d0ed      	beq.n	8007d28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	0018      	movs	r0, r3
 8007d50:	46bd      	mov	sp, r7
 8007d52:	b004      	add	sp, #16
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	40007000 	.word	0x40007000
 8007d5c:	fffff9ff 	.word	0xfffff9ff
 8007d60:	2000000c 	.word	0x2000000c
 8007d64:	000f4240 	.word	0x000f4240

08007d68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	23e0      	movs	r3, #224	; 0xe0
 8007d72:	01db      	lsls	r3, r3, #7
 8007d74:	4013      	ands	r3, r2
}
 8007d76:	0018      	movs	r0, r3
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	40021000 	.word	0x40021000

08007d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e2f3      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2201      	movs	r2, #1
 8007d98:	4013      	ands	r3, r2
 8007d9a:	d100      	bne.n	8007d9e <HAL_RCC_OscConfig+0x1e>
 8007d9c:	e07c      	b.n	8007e98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d9e:	4bc3      	ldr	r3, [pc, #780]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	2238      	movs	r2, #56	; 0x38
 8007da4:	4013      	ands	r3, r2
 8007da6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007da8:	4bc0      	ldr	r3, [pc, #768]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	2203      	movs	r2, #3
 8007dae:	4013      	ands	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b10      	cmp	r3, #16
 8007db6:	d102      	bne.n	8007dbe <HAL_RCC_OscConfig+0x3e>
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d002      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d10b      	bne.n	8007ddc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc4:	4bb9      	ldr	r3, [pc, #740]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	2380      	movs	r3, #128	; 0x80
 8007dca:	029b      	lsls	r3, r3, #10
 8007dcc:	4013      	ands	r3, r2
 8007dce:	d062      	beq.n	8007e96 <HAL_RCC_OscConfig+0x116>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d15e      	bne.n	8007e96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e2ce      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	2380      	movs	r3, #128	; 0x80
 8007de2:	025b      	lsls	r3, r3, #9
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d107      	bne.n	8007df8 <HAL_RCC_OscConfig+0x78>
 8007de8:	4bb0      	ldr	r3, [pc, #704]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	4baf      	ldr	r3, [pc, #700]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007dee:	2180      	movs	r1, #128	; 0x80
 8007df0:	0249      	lsls	r1, r1, #9
 8007df2:	430a      	orrs	r2, r1
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e020      	b.n	8007e3a <HAL_RCC_OscConfig+0xba>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	23a0      	movs	r3, #160	; 0xa0
 8007dfe:	02db      	lsls	r3, r3, #11
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d10e      	bne.n	8007e22 <HAL_RCC_OscConfig+0xa2>
 8007e04:	4ba9      	ldr	r3, [pc, #676]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	4ba8      	ldr	r3, [pc, #672]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007e0a:	2180      	movs	r1, #128	; 0x80
 8007e0c:	02c9      	lsls	r1, r1, #11
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	4ba6      	ldr	r3, [pc, #664]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	4ba5      	ldr	r3, [pc, #660]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007e18:	2180      	movs	r1, #128	; 0x80
 8007e1a:	0249      	lsls	r1, r1, #9
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	e00b      	b.n	8007e3a <HAL_RCC_OscConfig+0xba>
 8007e22:	4ba2      	ldr	r3, [pc, #648]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	4ba1      	ldr	r3, [pc, #644]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007e28:	49a1      	ldr	r1, [pc, #644]	; (80080b0 <HAL_RCC_OscConfig+0x330>)
 8007e2a:	400a      	ands	r2, r1
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	4b9f      	ldr	r3, [pc, #636]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4b9e      	ldr	r3, [pc, #632]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007e34:	499f      	ldr	r1, [pc, #636]	; (80080b4 <HAL_RCC_OscConfig+0x334>)
 8007e36:	400a      	ands	r2, r1
 8007e38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d014      	beq.n	8007e6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e42:	f7fe fe2f 	bl	8006aa4 <HAL_GetTick>
 8007e46:	0003      	movs	r3, r0
 8007e48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e4a:	e008      	b.n	8007e5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e4c:	f7fe fe2a 	bl	8006aa4 <HAL_GetTick>
 8007e50:	0002      	movs	r2, r0
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	2b64      	cmp	r3, #100	; 0x64
 8007e58:	d901      	bls.n	8007e5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e28d      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e5e:	4b93      	ldr	r3, [pc, #588]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	2380      	movs	r3, #128	; 0x80
 8007e64:	029b      	lsls	r3, r3, #10
 8007e66:	4013      	ands	r3, r2
 8007e68:	d0f0      	beq.n	8007e4c <HAL_RCC_OscConfig+0xcc>
 8007e6a:	e015      	b.n	8007e98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e6c:	f7fe fe1a 	bl	8006aa4 <HAL_GetTick>
 8007e70:	0003      	movs	r3, r0
 8007e72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e74:	e008      	b.n	8007e88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e76:	f7fe fe15 	bl	8006aa4 <HAL_GetTick>
 8007e7a:	0002      	movs	r2, r0
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2b64      	cmp	r3, #100	; 0x64
 8007e82:	d901      	bls.n	8007e88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e278      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e88:	4b88      	ldr	r3, [pc, #544]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	2380      	movs	r3, #128	; 0x80
 8007e8e:	029b      	lsls	r3, r3, #10
 8007e90:	4013      	ands	r3, r2
 8007e92:	d1f0      	bne.n	8007e76 <HAL_RCC_OscConfig+0xf6>
 8007e94:	e000      	b.n	8007e98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	d100      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x124>
 8007ea2:	e099      	b.n	8007fd8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ea4:	4b81      	ldr	r3, [pc, #516]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	2238      	movs	r2, #56	; 0x38
 8007eaa:	4013      	ands	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007eae:	4b7f      	ldr	r3, [pc, #508]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	2b10      	cmp	r3, #16
 8007ebc:	d102      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x144>
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d002      	beq.n	8007eca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d135      	bne.n	8007f36 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eca:	4b78      	ldr	r3, [pc, #480]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	2380      	movs	r3, #128	; 0x80
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	d005      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x162>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e24b      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ee2:	4b72      	ldr	r3, [pc, #456]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4a74      	ldr	r2, [pc, #464]	; (80080b8 <HAL_RCC_OscConfig+0x338>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	0019      	movs	r1, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	021a      	lsls	r2, r3, #8
 8007ef2:	4b6e      	ldr	r3, [pc, #440]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d112      	bne.n	8007f24 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007efe:	4b6b      	ldr	r3, [pc, #428]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a6e      	ldr	r2, [pc, #440]	; (80080bc <HAL_RCC_OscConfig+0x33c>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	0019      	movs	r1, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	4b67      	ldr	r3, [pc, #412]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007f12:	4b66      	ldr	r3, [pc, #408]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	0adb      	lsrs	r3, r3, #11
 8007f18:	2207      	movs	r2, #7
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	4a68      	ldr	r2, [pc, #416]	; (80080c0 <HAL_RCC_OscConfig+0x340>)
 8007f1e:	40da      	lsrs	r2, r3
 8007f20:	4b68      	ldr	r3, [pc, #416]	; (80080c4 <HAL_RCC_OscConfig+0x344>)
 8007f22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f24:	4b68      	ldr	r3, [pc, #416]	; (80080c8 <HAL_RCC_OscConfig+0x348>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f7fd fa55 	bl	80053d8 <HAL_InitTick>
 8007f2e:	1e03      	subs	r3, r0, #0
 8007f30:	d051      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e221      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d030      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f3e:	4b5b      	ldr	r3, [pc, #364]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a5e      	ldr	r2, [pc, #376]	; (80080bc <HAL_RCC_OscConfig+0x33c>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	0019      	movs	r1, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	4b57      	ldr	r3, [pc, #348]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007f52:	4b56      	ldr	r3, [pc, #344]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4b55      	ldr	r3, [pc, #340]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007f58:	2180      	movs	r1, #128	; 0x80
 8007f5a:	0049      	lsls	r1, r1, #1
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f60:	f7fe fda0 	bl	8006aa4 <HAL_GetTick>
 8007f64:	0003      	movs	r3, r0
 8007f66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f68:	e008      	b.n	8007f7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f6a:	f7fe fd9b 	bl	8006aa4 <HAL_GetTick>
 8007f6e:	0002      	movs	r2, r0
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d901      	bls.n	8007f7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e1fe      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f7c:	4b4b      	ldr	r3, [pc, #300]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	2380      	movs	r3, #128	; 0x80
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	4013      	ands	r3, r2
 8007f86:	d0f0      	beq.n	8007f6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f88:	4b48      	ldr	r3, [pc, #288]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	4a4a      	ldr	r2, [pc, #296]	; (80080b8 <HAL_RCC_OscConfig+0x338>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	0019      	movs	r1, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	021a      	lsls	r2, r3, #8
 8007f98:	4b44      	ldr	r3, [pc, #272]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
 8007f9e:	e01b      	b.n	8007fd8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007fa0:	4b42      	ldr	r3, [pc, #264]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b41      	ldr	r3, [pc, #260]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007fa6:	4949      	ldr	r1, [pc, #292]	; (80080cc <HAL_RCC_OscConfig+0x34c>)
 8007fa8:	400a      	ands	r2, r1
 8007faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fac:	f7fe fd7a 	bl	8006aa4 <HAL_GetTick>
 8007fb0:	0003      	movs	r3, r0
 8007fb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fb4:	e008      	b.n	8007fc8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fb6:	f7fe fd75 	bl	8006aa4 <HAL_GetTick>
 8007fba:	0002      	movs	r2, r0
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e1d8      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fc8:	4b38      	ldr	r3, [pc, #224]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	2380      	movs	r3, #128	; 0x80
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	d1f0      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x236>
 8007fd4:	e000      	b.n	8007fd8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fd6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2208      	movs	r2, #8
 8007fde:	4013      	ands	r3, r2
 8007fe0:	d047      	beq.n	8008072 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007fe2:	4b32      	ldr	r3, [pc, #200]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2238      	movs	r2, #56	; 0x38
 8007fe8:	4013      	ands	r3, r2
 8007fea:	2b18      	cmp	r3, #24
 8007fec:	d10a      	bne.n	8008004 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007fee:	4b2f      	ldr	r3, [pc, #188]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8007ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	d03c      	beq.n	8008072 <HAL_RCC_OscConfig+0x2f2>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d138      	bne.n	8008072 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e1ba      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d019      	beq.n	8008040 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800800c:	4b27      	ldr	r3, [pc, #156]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 800800e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008010:	4b26      	ldr	r3, [pc, #152]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8008012:	2101      	movs	r1, #1
 8008014:	430a      	orrs	r2, r1
 8008016:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008018:	f7fe fd44 	bl	8006aa4 <HAL_GetTick>
 800801c:	0003      	movs	r3, r0
 800801e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008020:	e008      	b.n	8008034 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008022:	f7fe fd3f 	bl	8006aa4 <HAL_GetTick>
 8008026:	0002      	movs	r2, r0
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e1a2      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008034:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8008036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008038:	2202      	movs	r2, #2
 800803a:	4013      	ands	r3, r2
 800803c:	d0f1      	beq.n	8008022 <HAL_RCC_OscConfig+0x2a2>
 800803e:	e018      	b.n	8008072 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008040:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8008042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008044:	4b19      	ldr	r3, [pc, #100]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8008046:	2101      	movs	r1, #1
 8008048:	438a      	bics	r2, r1
 800804a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804c:	f7fe fd2a 	bl	8006aa4 <HAL_GetTick>
 8008050:	0003      	movs	r3, r0
 8008052:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008054:	e008      	b.n	8008068 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008056:	f7fe fd25 	bl	8006aa4 <HAL_GetTick>
 800805a:	0002      	movs	r2, r0
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d901      	bls.n	8008068 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e188      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008068:	4b10      	ldr	r3, [pc, #64]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 800806a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806c:	2202      	movs	r2, #2
 800806e:	4013      	ands	r3, r2
 8008070:	d1f1      	bne.n	8008056 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2204      	movs	r2, #4
 8008078:	4013      	ands	r3, r2
 800807a:	d100      	bne.n	800807e <HAL_RCC_OscConfig+0x2fe>
 800807c:	e0c6      	b.n	800820c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800807e:	231f      	movs	r3, #31
 8008080:	18fb      	adds	r3, r7, r3
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008086:	4b09      	ldr	r3, [pc, #36]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2238      	movs	r2, #56	; 0x38
 800808c:	4013      	ands	r3, r2
 800808e:	2b20      	cmp	r3, #32
 8008090:	d11e      	bne.n	80080d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008092:	4b06      	ldr	r3, [pc, #24]	; (80080ac <HAL_RCC_OscConfig+0x32c>)
 8008094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008096:	2202      	movs	r2, #2
 8008098:	4013      	ands	r3, r2
 800809a:	d100      	bne.n	800809e <HAL_RCC_OscConfig+0x31e>
 800809c:	e0b6      	b.n	800820c <HAL_RCC_OscConfig+0x48c>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d000      	beq.n	80080a8 <HAL_RCC_OscConfig+0x328>
 80080a6:	e0b1      	b.n	800820c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e166      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
 80080ac:	40021000 	.word	0x40021000
 80080b0:	fffeffff 	.word	0xfffeffff
 80080b4:	fffbffff 	.word	0xfffbffff
 80080b8:	ffff80ff 	.word	0xffff80ff
 80080bc:	ffffc7ff 	.word	0xffffc7ff
 80080c0:	00f42400 	.word	0x00f42400
 80080c4:	2000000c 	.word	0x2000000c
 80080c8:	20000010 	.word	0x20000010
 80080cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80080d0:	4bac      	ldr	r3, [pc, #688]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80080d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080d4:	2380      	movs	r3, #128	; 0x80
 80080d6:	055b      	lsls	r3, r3, #21
 80080d8:	4013      	ands	r3, r2
 80080da:	d101      	bne.n	80080e0 <HAL_RCC_OscConfig+0x360>
 80080dc:	2301      	movs	r3, #1
 80080de:	e000      	b.n	80080e2 <HAL_RCC_OscConfig+0x362>
 80080e0:	2300      	movs	r3, #0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d011      	beq.n	800810a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80080e6:	4ba7      	ldr	r3, [pc, #668]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80080e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ea:	4ba6      	ldr	r3, [pc, #664]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80080ec:	2180      	movs	r1, #128	; 0x80
 80080ee:	0549      	lsls	r1, r1, #21
 80080f0:	430a      	orrs	r2, r1
 80080f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80080f4:	4ba3      	ldr	r3, [pc, #652]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80080f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080f8:	2380      	movs	r3, #128	; 0x80
 80080fa:	055b      	lsls	r3, r3, #21
 80080fc:	4013      	ands	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008102:	231f      	movs	r3, #31
 8008104:	18fb      	adds	r3, r7, r3
 8008106:	2201      	movs	r2, #1
 8008108:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800810a:	4b9f      	ldr	r3, [pc, #636]	; (8008388 <HAL_RCC_OscConfig+0x608>)
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	2380      	movs	r3, #128	; 0x80
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	4013      	ands	r3, r2
 8008114:	d11a      	bne.n	800814c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008116:	4b9c      	ldr	r3, [pc, #624]	; (8008388 <HAL_RCC_OscConfig+0x608>)
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4b9b      	ldr	r3, [pc, #620]	; (8008388 <HAL_RCC_OscConfig+0x608>)
 800811c:	2180      	movs	r1, #128	; 0x80
 800811e:	0049      	lsls	r1, r1, #1
 8008120:	430a      	orrs	r2, r1
 8008122:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008124:	f7fe fcbe 	bl	8006aa4 <HAL_GetTick>
 8008128:	0003      	movs	r3, r0
 800812a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800812c:	e008      	b.n	8008140 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800812e:	f7fe fcb9 	bl	8006aa4 <HAL_GetTick>
 8008132:	0002      	movs	r2, r0
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	2b02      	cmp	r3, #2
 800813a:	d901      	bls.n	8008140 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e11c      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008140:	4b91      	ldr	r3, [pc, #580]	; (8008388 <HAL_RCC_OscConfig+0x608>)
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	2380      	movs	r3, #128	; 0x80
 8008146:	005b      	lsls	r3, r3, #1
 8008148:	4013      	ands	r3, r2
 800814a:	d0f0      	beq.n	800812e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d106      	bne.n	8008162 <HAL_RCC_OscConfig+0x3e2>
 8008154:	4b8b      	ldr	r3, [pc, #556]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008158:	4b8a      	ldr	r3, [pc, #552]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 800815a:	2101      	movs	r1, #1
 800815c:	430a      	orrs	r2, r1
 800815e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008160:	e01c      	b.n	800819c <HAL_RCC_OscConfig+0x41c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	2b05      	cmp	r3, #5
 8008168:	d10c      	bne.n	8008184 <HAL_RCC_OscConfig+0x404>
 800816a:	4b86      	ldr	r3, [pc, #536]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 800816c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800816e:	4b85      	ldr	r3, [pc, #532]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008170:	2104      	movs	r1, #4
 8008172:	430a      	orrs	r2, r1
 8008174:	65da      	str	r2, [r3, #92]	; 0x5c
 8008176:	4b83      	ldr	r3, [pc, #524]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008178:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800817a:	4b82      	ldr	r3, [pc, #520]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 800817c:	2101      	movs	r1, #1
 800817e:	430a      	orrs	r2, r1
 8008180:	65da      	str	r2, [r3, #92]	; 0x5c
 8008182:	e00b      	b.n	800819c <HAL_RCC_OscConfig+0x41c>
 8008184:	4b7f      	ldr	r3, [pc, #508]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008186:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008188:	4b7e      	ldr	r3, [pc, #504]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 800818a:	2101      	movs	r1, #1
 800818c:	438a      	bics	r2, r1
 800818e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008190:	4b7c      	ldr	r3, [pc, #496]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008192:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008194:	4b7b      	ldr	r3, [pc, #492]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008196:	2104      	movs	r1, #4
 8008198:	438a      	bics	r2, r1
 800819a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d014      	beq.n	80081ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a4:	f7fe fc7e 	bl	8006aa4 <HAL_GetTick>
 80081a8:	0003      	movs	r3, r0
 80081aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081ac:	e009      	b.n	80081c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ae:	f7fe fc79 	bl	8006aa4 <HAL_GetTick>
 80081b2:	0002      	movs	r2, r0
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	4a74      	ldr	r2, [pc, #464]	; (800838c <HAL_RCC_OscConfig+0x60c>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e0db      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081c2:	4b70      	ldr	r3, [pc, #448]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80081c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c6:	2202      	movs	r2, #2
 80081c8:	4013      	ands	r3, r2
 80081ca:	d0f0      	beq.n	80081ae <HAL_RCC_OscConfig+0x42e>
 80081cc:	e013      	b.n	80081f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ce:	f7fe fc69 	bl	8006aa4 <HAL_GetTick>
 80081d2:	0003      	movs	r3, r0
 80081d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081d6:	e009      	b.n	80081ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081d8:	f7fe fc64 	bl	8006aa4 <HAL_GetTick>
 80081dc:	0002      	movs	r2, r0
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	4a6a      	ldr	r2, [pc, #424]	; (800838c <HAL_RCC_OscConfig+0x60c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d901      	bls.n	80081ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e0c6      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081ec:	4b65      	ldr	r3, [pc, #404]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80081ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f0:	2202      	movs	r2, #2
 80081f2:	4013      	ands	r3, r2
 80081f4:	d1f0      	bne.n	80081d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80081f6:	231f      	movs	r3, #31
 80081f8:	18fb      	adds	r3, r7, r3
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d105      	bne.n	800820c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008200:	4b60      	ldr	r3, [pc, #384]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008204:	4b5f      	ldr	r3, [pc, #380]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008206:	4962      	ldr	r1, [pc, #392]	; (8008390 <HAL_RCC_OscConfig+0x610>)
 8008208:	400a      	ands	r2, r1
 800820a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d100      	bne.n	8008216 <HAL_RCC_OscConfig+0x496>
 8008214:	e0b0      	b.n	8008378 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008216:	4b5b      	ldr	r3, [pc, #364]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	2238      	movs	r2, #56	; 0x38
 800821c:	4013      	ands	r3, r2
 800821e:	2b10      	cmp	r3, #16
 8008220:	d100      	bne.n	8008224 <HAL_RCC_OscConfig+0x4a4>
 8008222:	e078      	b.n	8008316 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d153      	bne.n	80082d4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800822c:	4b55      	ldr	r3, [pc, #340]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	4b54      	ldr	r3, [pc, #336]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008232:	4958      	ldr	r1, [pc, #352]	; (8008394 <HAL_RCC_OscConfig+0x614>)
 8008234:	400a      	ands	r2, r1
 8008236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008238:	f7fe fc34 	bl	8006aa4 <HAL_GetTick>
 800823c:	0003      	movs	r3, r0
 800823e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008240:	e008      	b.n	8008254 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008242:	f7fe fc2f 	bl	8006aa4 <HAL_GetTick>
 8008246:	0002      	movs	r2, r0
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	2b02      	cmp	r3, #2
 800824e:	d901      	bls.n	8008254 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e092      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008254:	4b4b      	ldr	r3, [pc, #300]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	2380      	movs	r3, #128	; 0x80
 800825a:	049b      	lsls	r3, r3, #18
 800825c:	4013      	ands	r3, r2
 800825e:	d1f0      	bne.n	8008242 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008260:	4b48      	ldr	r3, [pc, #288]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	4a4c      	ldr	r2, [pc, #304]	; (8008398 <HAL_RCC_OscConfig+0x618>)
 8008266:	4013      	ands	r3, r2
 8008268:	0019      	movs	r1, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1a      	ldr	r2, [r3, #32]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	431a      	orrs	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	431a      	orrs	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	431a      	orrs	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008286:	431a      	orrs	r2, r3
 8008288:	4b3e      	ldr	r3, [pc, #248]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 800828a:	430a      	orrs	r2, r1
 800828c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800828e:	4b3d      	ldr	r3, [pc, #244]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b3c      	ldr	r3, [pc, #240]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008294:	2180      	movs	r1, #128	; 0x80
 8008296:	0449      	lsls	r1, r1, #17
 8008298:	430a      	orrs	r2, r1
 800829a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800829c:	4b39      	ldr	r3, [pc, #228]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	4b38      	ldr	r3, [pc, #224]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80082a2:	2180      	movs	r1, #128	; 0x80
 80082a4:	0549      	lsls	r1, r1, #21
 80082a6:	430a      	orrs	r2, r1
 80082a8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082aa:	f7fe fbfb 	bl	8006aa4 <HAL_GetTick>
 80082ae:	0003      	movs	r3, r0
 80082b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082b4:	f7fe fbf6 	bl	8006aa4 <HAL_GetTick>
 80082b8:	0002      	movs	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e059      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082c6:	4b2f      	ldr	r3, [pc, #188]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	2380      	movs	r3, #128	; 0x80
 80082cc:	049b      	lsls	r3, r3, #18
 80082ce:	4013      	ands	r3, r2
 80082d0:	d0f0      	beq.n	80082b4 <HAL_RCC_OscConfig+0x534>
 80082d2:	e051      	b.n	8008378 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082d4:	4b2b      	ldr	r3, [pc, #172]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4b2a      	ldr	r3, [pc, #168]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80082da:	492e      	ldr	r1, [pc, #184]	; (8008394 <HAL_RCC_OscConfig+0x614>)
 80082dc:	400a      	ands	r2, r1
 80082de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e0:	f7fe fbe0 	bl	8006aa4 <HAL_GetTick>
 80082e4:	0003      	movs	r3, r0
 80082e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082e8:	e008      	b.n	80082fc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ea:	f7fe fbdb 	bl	8006aa4 <HAL_GetTick>
 80082ee:	0002      	movs	r2, r0
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d901      	bls.n	80082fc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e03e      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082fc:	4b21      	ldr	r3, [pc, #132]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	2380      	movs	r3, #128	; 0x80
 8008302:	049b      	lsls	r3, r3, #18
 8008304:	4013      	ands	r3, r2
 8008306:	d1f0      	bne.n	80082ea <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8008308:	4b1e      	ldr	r3, [pc, #120]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	4b1d      	ldr	r3, [pc, #116]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 800830e:	4923      	ldr	r1, [pc, #140]	; (800839c <HAL_RCC_OscConfig+0x61c>)
 8008310:	400a      	ands	r2, r1
 8008312:	60da      	str	r2, [r3, #12]
 8008314:	e030      	b.n	8008378 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d101      	bne.n	8008322 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e02b      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008322:	4b18      	ldr	r3, [pc, #96]	; (8008384 <HAL_RCC_OscConfig+0x604>)
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2203      	movs	r2, #3
 800832c:	401a      	ands	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	429a      	cmp	r2, r3
 8008334:	d11e      	bne.n	8008374 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2270      	movs	r2, #112	; 0x70
 800833a:	401a      	ands	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008340:	429a      	cmp	r2, r3
 8008342:	d117      	bne.n	8008374 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	23fe      	movs	r3, #254	; 0xfe
 8008348:	01db      	lsls	r3, r3, #7
 800834a:	401a      	ands	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008352:	429a      	cmp	r2, r3
 8008354:	d10e      	bne.n	8008374 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	23f8      	movs	r3, #248	; 0xf8
 800835a:	039b      	lsls	r3, r3, #14
 800835c:	401a      	ands	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008362:	429a      	cmp	r2, r3
 8008364:	d106      	bne.n	8008374 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	0f5b      	lsrs	r3, r3, #29
 800836a:	075a      	lsls	r2, r3, #29
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008370:	429a      	cmp	r2, r3
 8008372:	d001      	beq.n	8008378 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	0018      	movs	r0, r3
 800837c:	46bd      	mov	sp, r7
 800837e:	b008      	add	sp, #32
 8008380:	bd80      	pop	{r7, pc}
 8008382:	46c0      	nop			; (mov r8, r8)
 8008384:	40021000 	.word	0x40021000
 8008388:	40007000 	.word	0x40007000
 800838c:	00001388 	.word	0x00001388
 8008390:	efffffff 	.word	0xefffffff
 8008394:	feffffff 	.word	0xfeffffff
 8008398:	1fc1808c 	.word	0x1fc1808c
 800839c:	effefffc 	.word	0xeffefffc

080083a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e0e9      	b.n	8008588 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083b4:	4b76      	ldr	r3, [pc, #472]	; (8008590 <HAL_RCC_ClockConfig+0x1f0>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2207      	movs	r2, #7
 80083ba:	4013      	ands	r3, r2
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d91e      	bls.n	8008400 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083c2:	4b73      	ldr	r3, [pc, #460]	; (8008590 <HAL_RCC_ClockConfig+0x1f0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2207      	movs	r2, #7
 80083c8:	4393      	bics	r3, r2
 80083ca:	0019      	movs	r1, r3
 80083cc:	4b70      	ldr	r3, [pc, #448]	; (8008590 <HAL_RCC_ClockConfig+0x1f0>)
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80083d4:	f7fe fb66 	bl	8006aa4 <HAL_GetTick>
 80083d8:	0003      	movs	r3, r0
 80083da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80083dc:	e009      	b.n	80083f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083de:	f7fe fb61 	bl	8006aa4 <HAL_GetTick>
 80083e2:	0002      	movs	r2, r0
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	4a6a      	ldr	r2, [pc, #424]	; (8008594 <HAL_RCC_ClockConfig+0x1f4>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e0ca      	b.n	8008588 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80083f2:	4b67      	ldr	r3, [pc, #412]	; (8008590 <HAL_RCC_ClockConfig+0x1f0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2207      	movs	r2, #7
 80083f8:	4013      	ands	r3, r2
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d1ee      	bne.n	80083de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2202      	movs	r2, #2
 8008406:	4013      	ands	r3, r2
 8008408:	d015      	beq.n	8008436 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2204      	movs	r2, #4
 8008410:	4013      	ands	r3, r2
 8008412:	d006      	beq.n	8008422 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008414:	4b60      	ldr	r3, [pc, #384]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	4b5f      	ldr	r3, [pc, #380]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 800841a:	21e0      	movs	r1, #224	; 0xe0
 800841c:	01c9      	lsls	r1, r1, #7
 800841e:	430a      	orrs	r2, r1
 8008420:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008422:	4b5d      	ldr	r3, [pc, #372]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	4a5d      	ldr	r2, [pc, #372]	; (800859c <HAL_RCC_ClockConfig+0x1fc>)
 8008428:	4013      	ands	r3, r2
 800842a:	0019      	movs	r1, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	4b59      	ldr	r3, [pc, #356]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 8008432:	430a      	orrs	r2, r1
 8008434:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2201      	movs	r2, #1
 800843c:	4013      	ands	r3, r2
 800843e:	d057      	beq.n	80084f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d107      	bne.n	8008458 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008448:	4b53      	ldr	r3, [pc, #332]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	2380      	movs	r3, #128	; 0x80
 800844e:	029b      	lsls	r3, r3, #10
 8008450:	4013      	ands	r3, r2
 8008452:	d12b      	bne.n	80084ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e097      	b.n	8008588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	2b02      	cmp	r3, #2
 800845e:	d107      	bne.n	8008470 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008460:	4b4d      	ldr	r3, [pc, #308]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	2380      	movs	r3, #128	; 0x80
 8008466:	049b      	lsls	r3, r3, #18
 8008468:	4013      	ands	r3, r2
 800846a:	d11f      	bne.n	80084ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e08b      	b.n	8008588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d107      	bne.n	8008488 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008478:	4b47      	ldr	r3, [pc, #284]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	2380      	movs	r3, #128	; 0x80
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	4013      	ands	r3, r2
 8008482:	d113      	bne.n	80084ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e07f      	b.n	8008588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b03      	cmp	r3, #3
 800848e:	d106      	bne.n	800849e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008490:	4b41      	ldr	r3, [pc, #260]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 8008492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008494:	2202      	movs	r2, #2
 8008496:	4013      	ands	r3, r2
 8008498:	d108      	bne.n	80084ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e074      	b.n	8008588 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800849e:	4b3e      	ldr	r3, [pc, #248]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 80084a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a2:	2202      	movs	r2, #2
 80084a4:	4013      	ands	r3, r2
 80084a6:	d101      	bne.n	80084ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e06d      	b.n	8008588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084ac:	4b3a      	ldr	r3, [pc, #232]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2207      	movs	r2, #7
 80084b2:	4393      	bics	r3, r2
 80084b4:	0019      	movs	r1, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	4b37      	ldr	r3, [pc, #220]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 80084bc:	430a      	orrs	r2, r1
 80084be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084c0:	f7fe faf0 	bl	8006aa4 <HAL_GetTick>
 80084c4:	0003      	movs	r3, r0
 80084c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084c8:	e009      	b.n	80084de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084ca:	f7fe faeb 	bl	8006aa4 <HAL_GetTick>
 80084ce:	0002      	movs	r2, r0
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	4a2f      	ldr	r2, [pc, #188]	; (8008594 <HAL_RCC_ClockConfig+0x1f4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e054      	b.n	8008588 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084de:	4b2e      	ldr	r3, [pc, #184]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	2238      	movs	r2, #56	; 0x38
 80084e4:	401a      	ands	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d1ec      	bne.n	80084ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084f0:	4b27      	ldr	r3, [pc, #156]	; (8008590 <HAL_RCC_ClockConfig+0x1f0>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2207      	movs	r2, #7
 80084f6:	4013      	ands	r3, r2
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d21e      	bcs.n	800853c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084fe:	4b24      	ldr	r3, [pc, #144]	; (8008590 <HAL_RCC_ClockConfig+0x1f0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2207      	movs	r2, #7
 8008504:	4393      	bics	r3, r2
 8008506:	0019      	movs	r1, r3
 8008508:	4b21      	ldr	r3, [pc, #132]	; (8008590 <HAL_RCC_ClockConfig+0x1f0>)
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008510:	f7fe fac8 	bl	8006aa4 <HAL_GetTick>
 8008514:	0003      	movs	r3, r0
 8008516:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008518:	e009      	b.n	800852e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800851a:	f7fe fac3 	bl	8006aa4 <HAL_GetTick>
 800851e:	0002      	movs	r2, r0
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	4a1b      	ldr	r2, [pc, #108]	; (8008594 <HAL_RCC_ClockConfig+0x1f4>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d901      	bls.n	800852e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e02c      	b.n	8008588 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800852e:	4b18      	ldr	r3, [pc, #96]	; (8008590 <HAL_RCC_ClockConfig+0x1f0>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2207      	movs	r2, #7
 8008534:	4013      	ands	r3, r2
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d1ee      	bne.n	800851a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2204      	movs	r2, #4
 8008542:	4013      	ands	r3, r2
 8008544:	d009      	beq.n	800855a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	4a15      	ldr	r2, [pc, #84]	; (80085a0 <HAL_RCC_ClockConfig+0x200>)
 800854c:	4013      	ands	r3, r2
 800854e:	0019      	movs	r1, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68da      	ldr	r2, [r3, #12]
 8008554:	4b10      	ldr	r3, [pc, #64]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 8008556:	430a      	orrs	r2, r1
 8008558:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800855a:	f000 f829 	bl	80085b0 <HAL_RCC_GetSysClockFreq>
 800855e:	0001      	movs	r1, r0
 8008560:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <HAL_RCC_ClockConfig+0x1f8>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	220f      	movs	r2, #15
 8008568:	401a      	ands	r2, r3
 800856a:	4b0e      	ldr	r3, [pc, #56]	; (80085a4 <HAL_RCC_ClockConfig+0x204>)
 800856c:	0092      	lsls	r2, r2, #2
 800856e:	58d3      	ldr	r3, [r2, r3]
 8008570:	221f      	movs	r2, #31
 8008572:	4013      	ands	r3, r2
 8008574:	000a      	movs	r2, r1
 8008576:	40da      	lsrs	r2, r3
 8008578:	4b0b      	ldr	r3, [pc, #44]	; (80085a8 <HAL_RCC_ClockConfig+0x208>)
 800857a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800857c:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <HAL_RCC_ClockConfig+0x20c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	0018      	movs	r0, r3
 8008582:	f7fc ff29 	bl	80053d8 <HAL_InitTick>
 8008586:	0003      	movs	r3, r0
}
 8008588:	0018      	movs	r0, r3
 800858a:	46bd      	mov	sp, r7
 800858c:	b004      	add	sp, #16
 800858e:	bd80      	pop	{r7, pc}
 8008590:	40022000 	.word	0x40022000
 8008594:	00001388 	.word	0x00001388
 8008598:	40021000 	.word	0x40021000
 800859c:	fffff0ff 	.word	0xfffff0ff
 80085a0:	ffff8fff 	.word	0xffff8fff
 80085a4:	0801b6b0 	.word	0x0801b6b0
 80085a8:	2000000c 	.word	0x2000000c
 80085ac:	20000010 	.word	0x20000010

080085b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80085b6:	4b3c      	ldr	r3, [pc, #240]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2238      	movs	r2, #56	; 0x38
 80085bc:	4013      	ands	r3, r2
 80085be:	d10f      	bne.n	80085e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80085c0:	4b39      	ldr	r3, [pc, #228]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	0adb      	lsrs	r3, r3, #11
 80085c6:	2207      	movs	r2, #7
 80085c8:	4013      	ands	r3, r2
 80085ca:	2201      	movs	r2, #1
 80085cc:	409a      	lsls	r2, r3
 80085ce:	0013      	movs	r3, r2
 80085d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	4835      	ldr	r0, [pc, #212]	; (80086ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80085d6:	f7f7 fdbd 	bl	8000154 <__udivsi3>
 80085da:	0003      	movs	r3, r0
 80085dc:	613b      	str	r3, [r7, #16]
 80085de:	e05d      	b.n	800869c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80085e0:	4b31      	ldr	r3, [pc, #196]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2238      	movs	r2, #56	; 0x38
 80085e6:	4013      	ands	r3, r2
 80085e8:	2b08      	cmp	r3, #8
 80085ea:	d102      	bne.n	80085f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80085ec:	4b2f      	ldr	r3, [pc, #188]	; (80086ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	e054      	b.n	800869c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085f2:	4b2d      	ldr	r3, [pc, #180]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2238      	movs	r2, #56	; 0x38
 80085f8:	4013      	ands	r3, r2
 80085fa:	2b10      	cmp	r3, #16
 80085fc:	d138      	bne.n	8008670 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80085fe:	4b2a      	ldr	r3, [pc, #168]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	2203      	movs	r2, #3
 8008604:	4013      	ands	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008608:	4b27      	ldr	r3, [pc, #156]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	091b      	lsrs	r3, r3, #4
 800860e:	2207      	movs	r2, #7
 8008610:	4013      	ands	r3, r2
 8008612:	3301      	adds	r3, #1
 8008614:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b03      	cmp	r3, #3
 800861a:	d10d      	bne.n	8008638 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	4823      	ldr	r0, [pc, #140]	; (80086ac <HAL_RCC_GetSysClockFreq+0xfc>)
 8008620:	f7f7 fd98 	bl	8000154 <__udivsi3>
 8008624:	0003      	movs	r3, r0
 8008626:	0019      	movs	r1, r3
 8008628:	4b1f      	ldr	r3, [pc, #124]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	0a1b      	lsrs	r3, r3, #8
 800862e:	227f      	movs	r2, #127	; 0x7f
 8008630:	4013      	ands	r3, r2
 8008632:	434b      	muls	r3, r1
 8008634:	617b      	str	r3, [r7, #20]
        break;
 8008636:	e00d      	b.n	8008654 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008638:	68b9      	ldr	r1, [r7, #8]
 800863a:	481c      	ldr	r0, [pc, #112]	; (80086ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800863c:	f7f7 fd8a 	bl	8000154 <__udivsi3>
 8008640:	0003      	movs	r3, r0
 8008642:	0019      	movs	r1, r3
 8008644:	4b18      	ldr	r3, [pc, #96]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	0a1b      	lsrs	r3, r3, #8
 800864a:	227f      	movs	r2, #127	; 0x7f
 800864c:	4013      	ands	r3, r2
 800864e:	434b      	muls	r3, r1
 8008650:	617b      	str	r3, [r7, #20]
        break;
 8008652:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008654:	4b14      	ldr	r3, [pc, #80]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	0f5b      	lsrs	r3, r3, #29
 800865a:	2207      	movs	r2, #7
 800865c:	4013      	ands	r3, r2
 800865e:	3301      	adds	r3, #1
 8008660:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	6978      	ldr	r0, [r7, #20]
 8008666:	f7f7 fd75 	bl	8000154 <__udivsi3>
 800866a:	0003      	movs	r3, r0
 800866c:	613b      	str	r3, [r7, #16]
 800866e:	e015      	b.n	800869c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008670:	4b0d      	ldr	r3, [pc, #52]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	2238      	movs	r2, #56	; 0x38
 8008676:	4013      	ands	r3, r2
 8008678:	2b20      	cmp	r3, #32
 800867a:	d103      	bne.n	8008684 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800867c:	2380      	movs	r3, #128	; 0x80
 800867e:	021b      	lsls	r3, r3, #8
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	e00b      	b.n	800869c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008684:	4b08      	ldr	r3, [pc, #32]	; (80086a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	2238      	movs	r2, #56	; 0x38
 800868a:	4013      	ands	r3, r2
 800868c:	2b18      	cmp	r3, #24
 800868e:	d103      	bne.n	8008698 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008690:	23fa      	movs	r3, #250	; 0xfa
 8008692:	01db      	lsls	r3, r3, #7
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	e001      	b.n	800869c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800869c:	693b      	ldr	r3, [r7, #16]
}
 800869e:	0018      	movs	r0, r3
 80086a0:	46bd      	mov	sp, r7
 80086a2:	b006      	add	sp, #24
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	46c0      	nop			; (mov r8, r8)
 80086a8:	40021000 	.word	0x40021000
 80086ac:	00f42400 	.word	0x00f42400

080086b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80086b6:	681b      	ldr	r3, [r3, #0]
}
 80086b8:	0018      	movs	r0, r3
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	46c0      	nop			; (mov r8, r8)
 80086c0:	2000000c 	.word	0x2000000c

080086c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086c4:	b5b0      	push	{r4, r5, r7, lr}
 80086c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80086c8:	f7ff fff2 	bl	80086b0 <HAL_RCC_GetHCLKFreq>
 80086cc:	0004      	movs	r4, r0
 80086ce:	f7ff fb4b 	bl	8007d68 <LL_RCC_GetAPB1Prescaler>
 80086d2:	0003      	movs	r3, r0
 80086d4:	0b1a      	lsrs	r2, r3, #12
 80086d6:	4b05      	ldr	r3, [pc, #20]	; (80086ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80086d8:	0092      	lsls	r2, r2, #2
 80086da:	58d3      	ldr	r3, [r2, r3]
 80086dc:	221f      	movs	r2, #31
 80086de:	4013      	ands	r3, r2
 80086e0:	40dc      	lsrs	r4, r3
 80086e2:	0023      	movs	r3, r4
}
 80086e4:	0018      	movs	r0, r3
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bdb0      	pop	{r4, r5, r7, pc}
 80086ea:	46c0      	nop			; (mov r8, r8)
 80086ec:	0801b6f0 	.word	0x0801b6f0

080086f0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2207      	movs	r2, #7
 80086fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008700:	4b0e      	ldr	r3, [pc, #56]	; (800873c <HAL_RCC_GetClockConfig+0x4c>)
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	2207      	movs	r2, #7
 8008706:	401a      	ands	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800870c:	4b0b      	ldr	r3, [pc, #44]	; (800873c <HAL_RCC_GetClockConfig+0x4c>)
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	23f0      	movs	r3, #240	; 0xf0
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	401a      	ands	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800871a:	4b08      	ldr	r3, [pc, #32]	; (800873c <HAL_RCC_GetClockConfig+0x4c>)
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	23e0      	movs	r3, #224	; 0xe0
 8008720:	01db      	lsls	r3, r3, #7
 8008722:	401a      	ands	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008728:	4b05      	ldr	r3, [pc, #20]	; (8008740 <HAL_RCC_GetClockConfig+0x50>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2207      	movs	r2, #7
 800872e:	401a      	ands	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	601a      	str	r2, [r3, #0]
}
 8008734:	46c0      	nop			; (mov r8, r8)
 8008736:	46bd      	mov	sp, r7
 8008738:	b002      	add	sp, #8
 800873a:	bd80      	pop	{r7, pc}
 800873c:	40021000 	.word	0x40021000
 8008740:	40022000 	.word	0x40022000

08008744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800874c:	2313      	movs	r3, #19
 800874e:	18fb      	adds	r3, r7, r3
 8008750:	2200      	movs	r2, #0
 8008752:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008754:	2312      	movs	r3, #18
 8008756:	18fb      	adds	r3, r7, r3
 8008758:	2200      	movs	r2, #0
 800875a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	2380      	movs	r3, #128	; 0x80
 8008762:	029b      	lsls	r3, r3, #10
 8008764:	4013      	ands	r3, r2
 8008766:	d100      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008768:	e0a3      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800876a:	2011      	movs	r0, #17
 800876c:	183b      	adds	r3, r7, r0
 800876e:	2200      	movs	r2, #0
 8008770:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008772:	4b86      	ldr	r3, [pc, #536]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008776:	2380      	movs	r3, #128	; 0x80
 8008778:	055b      	lsls	r3, r3, #21
 800877a:	4013      	ands	r3, r2
 800877c:	d110      	bne.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800877e:	4b83      	ldr	r3, [pc, #524]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008782:	4b82      	ldr	r3, [pc, #520]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008784:	2180      	movs	r1, #128	; 0x80
 8008786:	0549      	lsls	r1, r1, #21
 8008788:	430a      	orrs	r2, r1
 800878a:	63da      	str	r2, [r3, #60]	; 0x3c
 800878c:	4b7f      	ldr	r3, [pc, #508]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800878e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008790:	2380      	movs	r3, #128	; 0x80
 8008792:	055b      	lsls	r3, r3, #21
 8008794:	4013      	ands	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]
 8008798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800879a:	183b      	adds	r3, r7, r0
 800879c:	2201      	movs	r2, #1
 800879e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087a0:	4b7b      	ldr	r3, [pc, #492]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	4b7a      	ldr	r3, [pc, #488]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80087a6:	2180      	movs	r1, #128	; 0x80
 80087a8:	0049      	lsls	r1, r1, #1
 80087aa:	430a      	orrs	r2, r1
 80087ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087ae:	f7fe f979 	bl	8006aa4 <HAL_GetTick>
 80087b2:	0003      	movs	r3, r0
 80087b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087b6:	e00b      	b.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087b8:	f7fe f974 	bl	8006aa4 <HAL_GetTick>
 80087bc:	0002      	movs	r2, r0
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d904      	bls.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80087c6:	2313      	movs	r3, #19
 80087c8:	18fb      	adds	r3, r7, r3
 80087ca:	2203      	movs	r2, #3
 80087cc:	701a      	strb	r2, [r3, #0]
        break;
 80087ce:	e005      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087d0:	4b6f      	ldr	r3, [pc, #444]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	2380      	movs	r3, #128	; 0x80
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	4013      	ands	r3, r2
 80087da:	d0ed      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80087dc:	2313      	movs	r3, #19
 80087de:	18fb      	adds	r3, r7, r3
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d154      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80087e6:	4b69      	ldr	r3, [pc, #420]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087ea:	23c0      	movs	r3, #192	; 0xc0
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4013      	ands	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d019      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d014      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008802:	4b62      	ldr	r3, [pc, #392]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008806:	4a63      	ldr	r2, [pc, #396]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008808:	4013      	ands	r3, r2
 800880a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800880c:	4b5f      	ldr	r3, [pc, #380]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800880e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008810:	4b5e      	ldr	r3, [pc, #376]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008812:	2180      	movs	r1, #128	; 0x80
 8008814:	0249      	lsls	r1, r1, #9
 8008816:	430a      	orrs	r2, r1
 8008818:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800881a:	4b5c      	ldr	r3, [pc, #368]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800881c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800881e:	4b5b      	ldr	r3, [pc, #364]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008820:	495d      	ldr	r1, [pc, #372]	; (8008998 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008822:	400a      	ands	r2, r1
 8008824:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008826:	4b59      	ldr	r3, [pc, #356]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2201      	movs	r2, #1
 8008830:	4013      	ands	r3, r2
 8008832:	d016      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008834:	f7fe f936 	bl	8006aa4 <HAL_GetTick>
 8008838:	0003      	movs	r3, r0
 800883a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800883c:	e00c      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800883e:	f7fe f931 	bl	8006aa4 <HAL_GetTick>
 8008842:	0002      	movs	r2, r0
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	4a54      	ldr	r2, [pc, #336]	; (800899c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d904      	bls.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800884e:	2313      	movs	r3, #19
 8008850:	18fb      	adds	r3, r7, r3
 8008852:	2203      	movs	r2, #3
 8008854:	701a      	strb	r2, [r3, #0]
            break;
 8008856:	e004      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008858:	4b4c      	ldr	r3, [pc, #304]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800885a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885c:	2202      	movs	r2, #2
 800885e:	4013      	ands	r3, r2
 8008860:	d0ed      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008862:	2313      	movs	r3, #19
 8008864:	18fb      	adds	r3, r7, r3
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800886c:	4b47      	ldr	r3, [pc, #284]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800886e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008870:	4a48      	ldr	r2, [pc, #288]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008872:	4013      	ands	r3, r2
 8008874:	0019      	movs	r1, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	4b44      	ldr	r3, [pc, #272]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800887c:	430a      	orrs	r2, r1
 800887e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008880:	e00c      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008882:	2312      	movs	r3, #18
 8008884:	18fb      	adds	r3, r7, r3
 8008886:	2213      	movs	r2, #19
 8008888:	18ba      	adds	r2, r7, r2
 800888a:	7812      	ldrb	r2, [r2, #0]
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	e005      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008890:	2312      	movs	r3, #18
 8008892:	18fb      	adds	r3, r7, r3
 8008894:	2213      	movs	r2, #19
 8008896:	18ba      	adds	r2, r7, r2
 8008898:	7812      	ldrb	r2, [r2, #0]
 800889a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800889c:	2311      	movs	r3, #17
 800889e:	18fb      	adds	r3, r7, r3
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d105      	bne.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088a6:	4b39      	ldr	r3, [pc, #228]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088aa:	4b38      	ldr	r3, [pc, #224]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088ac:	493c      	ldr	r1, [pc, #240]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80088ae:	400a      	ands	r2, r1
 80088b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2201      	movs	r2, #1
 80088b8:	4013      	ands	r3, r2
 80088ba:	d009      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088bc:	4b33      	ldr	r3, [pc, #204]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c0:	2203      	movs	r2, #3
 80088c2:	4393      	bics	r3, r2
 80088c4:	0019      	movs	r1, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	4b30      	ldr	r3, [pc, #192]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088cc:	430a      	orrs	r2, r1
 80088ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2202      	movs	r2, #2
 80088d6:	4013      	ands	r3, r2
 80088d8:	d009      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088da:	4b2c      	ldr	r3, [pc, #176]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088de:	220c      	movs	r2, #12
 80088e0:	4393      	bics	r3, r2
 80088e2:	0019      	movs	r1, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689a      	ldr	r2, [r3, #8]
 80088e8:	4b28      	ldr	r3, [pc, #160]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088ea:	430a      	orrs	r2, r1
 80088ec:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2220      	movs	r2, #32
 80088f4:	4013      	ands	r3, r2
 80088f6:	d009      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088f8:	4b24      	ldr	r3, [pc, #144]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fc:	4a29      	ldr	r2, [pc, #164]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088fe:	4013      	ands	r3, r2
 8008900:	0019      	movs	r1, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	4b21      	ldr	r3, [pc, #132]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008908:	430a      	orrs	r2, r1
 800890a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	2380      	movs	r3, #128	; 0x80
 8008912:	01db      	lsls	r3, r3, #7
 8008914:	4013      	ands	r3, r2
 8008916:	d015      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008918:	4b1c      	ldr	r3, [pc, #112]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800891a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	0899      	lsrs	r1, r3, #2
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	695a      	ldr	r2, [r3, #20]
 8008924:	4b19      	ldr	r3, [pc, #100]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008926:	430a      	orrs	r2, r1
 8008928:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	2380      	movs	r3, #128	; 0x80
 8008930:	05db      	lsls	r3, r3, #23
 8008932:	429a      	cmp	r2, r3
 8008934:	d106      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008936:	4b15      	ldr	r3, [pc, #84]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	4b14      	ldr	r3, [pc, #80]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800893c:	2180      	movs	r1, #128	; 0x80
 800893e:	0249      	lsls	r1, r1, #9
 8008940:	430a      	orrs	r2, r1
 8008942:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	2380      	movs	r3, #128	; 0x80
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	4013      	ands	r3, r2
 800894e:	d016      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008950:	4b0e      	ldr	r3, [pc, #56]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008954:	4a14      	ldr	r2, [pc, #80]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008956:	4013      	ands	r3, r2
 8008958:	0019      	movs	r1, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691a      	ldr	r2, [r3, #16]
 800895e:	4b0b      	ldr	r3, [pc, #44]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008960:	430a      	orrs	r2, r1
 8008962:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	691a      	ldr	r2, [r3, #16]
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	01db      	lsls	r3, r3, #7
 800896c:	429a      	cmp	r2, r3
 800896e:	d106      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	4b05      	ldr	r3, [pc, #20]	; (800898c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008976:	2180      	movs	r1, #128	; 0x80
 8008978:	0249      	lsls	r1, r1, #9
 800897a:	430a      	orrs	r2, r1
 800897c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800897e:	2312      	movs	r3, #18
 8008980:	18fb      	adds	r3, r7, r3
 8008982:	781b      	ldrb	r3, [r3, #0]
}
 8008984:	0018      	movs	r0, r3
 8008986:	46bd      	mov	sp, r7
 8008988:	b006      	add	sp, #24
 800898a:	bd80      	pop	{r7, pc}
 800898c:	40021000 	.word	0x40021000
 8008990:	40007000 	.word	0x40007000
 8008994:	fffffcff 	.word	0xfffffcff
 8008998:	fffeffff 	.word	0xfffeffff
 800899c:	00001388 	.word	0x00001388
 80089a0:	efffffff 	.word	0xefffffff
 80089a4:	ffffcfff 	.word	0xffffcfff
 80089a8:	ffff3fff 	.word	0xffff3fff

080089ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e04a      	b.n	8008a54 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	223d      	movs	r2, #61	; 0x3d
 80089c2:	5c9b      	ldrb	r3, [r3, r2]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d107      	bne.n	80089da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	223c      	movs	r2, #60	; 0x3c
 80089ce:	2100      	movs	r1, #0
 80089d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	0018      	movs	r0, r3
 80089d6:	f7fd fa31 	bl	8005e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	223d      	movs	r2, #61	; 0x3d
 80089de:	2102      	movs	r1, #2
 80089e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	0019      	movs	r1, r3
 80089ec:	0010      	movs	r0, r2
 80089ee:	f001 f9ed 	bl	8009dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2248      	movs	r2, #72	; 0x48
 80089f6:	2101      	movs	r1, #1
 80089f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	223e      	movs	r2, #62	; 0x3e
 80089fe:	2101      	movs	r1, #1
 8008a00:	5499      	strb	r1, [r3, r2]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	223f      	movs	r2, #63	; 0x3f
 8008a06:	2101      	movs	r1, #1
 8008a08:	5499      	strb	r1, [r3, r2]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2240      	movs	r2, #64	; 0x40
 8008a0e:	2101      	movs	r1, #1
 8008a10:	5499      	strb	r1, [r3, r2]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2241      	movs	r2, #65	; 0x41
 8008a16:	2101      	movs	r1, #1
 8008a18:	5499      	strb	r1, [r3, r2]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2242      	movs	r2, #66	; 0x42
 8008a1e:	2101      	movs	r1, #1
 8008a20:	5499      	strb	r1, [r3, r2]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2243      	movs	r2, #67	; 0x43
 8008a26:	2101      	movs	r1, #1
 8008a28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2244      	movs	r2, #68	; 0x44
 8008a2e:	2101      	movs	r1, #1
 8008a30:	5499      	strb	r1, [r3, r2]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2245      	movs	r2, #69	; 0x45
 8008a36:	2101      	movs	r1, #1
 8008a38:	5499      	strb	r1, [r3, r2]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2246      	movs	r2, #70	; 0x46
 8008a3e:	2101      	movs	r1, #1
 8008a40:	5499      	strb	r1, [r3, r2]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2247      	movs	r2, #71	; 0x47
 8008a46:	2101      	movs	r1, #1
 8008a48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	223d      	movs	r2, #61	; 0x3d
 8008a4e:	2101      	movs	r1, #1
 8008a50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	0018      	movs	r0, r3
 8008a56:	46bd      	mov	sp, r7
 8008a58:	b002      	add	sp, #8
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	223d      	movs	r2, #61	; 0x3d
 8008a68:	5c9b      	ldrb	r3, [r3, r2]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d001      	beq.n	8008a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e03c      	b.n	8008aee <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	223d      	movs	r2, #61	; 0x3d
 8008a78:	2102      	movs	r1, #2
 8008a7a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2101      	movs	r1, #1
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a19      	ldr	r2, [pc, #100]	; (8008af8 <HAL_TIM_Base_Start_IT+0x9c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d009      	beq.n	8008aaa <HAL_TIM_Base_Start_IT+0x4e>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a18      	ldr	r2, [pc, #96]	; (8008afc <HAL_TIM_Base_Start_IT+0xa0>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d004      	beq.n	8008aaa <HAL_TIM_Base_Start_IT+0x4e>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <HAL_TIM_Base_Start_IT+0xa4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d116      	bne.n	8008ad8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	4a14      	ldr	r2, [pc, #80]	; (8008b04 <HAL_TIM_Base_Start_IT+0xa8>)
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b06      	cmp	r3, #6
 8008aba:	d016      	beq.n	8008aea <HAL_TIM_Base_Start_IT+0x8e>
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	2380      	movs	r3, #128	; 0x80
 8008ac0:	025b      	lsls	r3, r3, #9
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d011      	beq.n	8008aea <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad6:	e008      	b.n	8008aea <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	e000      	b.n	8008aec <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aea:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	0018      	movs	r0, r3
 8008af0:	46bd      	mov	sp, r7
 8008af2:	b004      	add	sp, #16
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	40012c00 	.word	0x40012c00
 8008afc:	40000400 	.word	0x40000400
 8008b00:	40014000 	.word	0x40014000
 8008b04:	00010007 	.word	0x00010007

08008b08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	438a      	bics	r2, r1
 8008b1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	4a0d      	ldr	r2, [pc, #52]	; (8008b5c <HAL_TIM_Base_Stop_IT+0x54>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	d10d      	bne.n	8008b48 <HAL_TIM_Base_Stop_IT+0x40>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	4a0b      	ldr	r2, [pc, #44]	; (8008b60 <HAL_TIM_Base_Stop_IT+0x58>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	d107      	bne.n	8008b48 <HAL_TIM_Base_Stop_IT+0x40>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2101      	movs	r1, #1
 8008b44:	438a      	bics	r2, r1
 8008b46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	223d      	movs	r2, #61	; 0x3d
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	0018      	movs	r0, r3
 8008b54:	46bd      	mov	sp, r7
 8008b56:	b002      	add	sp, #8
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	00001111 	.word	0x00001111
 8008b60:	00000444 	.word	0x00000444

08008b64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e04a      	b.n	8008c0c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	223d      	movs	r2, #61	; 0x3d
 8008b7a:	5c9b      	ldrb	r3, [r3, r2]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d107      	bne.n	8008b92 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	223c      	movs	r2, #60	; 0x3c
 8008b86:	2100      	movs	r1, #0
 8008b88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f000 f841 	bl	8008c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	223d      	movs	r2, #61	; 0x3d
 8008b96:	2102      	movs	r1, #2
 8008b98:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	0019      	movs	r1, r3
 8008ba4:	0010      	movs	r0, r2
 8008ba6:	f001 f911 	bl	8009dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2248      	movs	r2, #72	; 0x48
 8008bae:	2101      	movs	r1, #1
 8008bb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	223e      	movs	r2, #62	; 0x3e
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	5499      	strb	r1, [r3, r2]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	223f      	movs	r2, #63	; 0x3f
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	5499      	strb	r1, [r3, r2]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2240      	movs	r2, #64	; 0x40
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	5499      	strb	r1, [r3, r2]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2241      	movs	r2, #65	; 0x41
 8008bce:	2101      	movs	r1, #1
 8008bd0:	5499      	strb	r1, [r3, r2]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2242      	movs	r2, #66	; 0x42
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	5499      	strb	r1, [r3, r2]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2243      	movs	r2, #67	; 0x43
 8008bde:	2101      	movs	r1, #1
 8008be0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2244      	movs	r2, #68	; 0x44
 8008be6:	2101      	movs	r1, #1
 8008be8:	5499      	strb	r1, [r3, r2]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2245      	movs	r2, #69	; 0x45
 8008bee:	2101      	movs	r1, #1
 8008bf0:	5499      	strb	r1, [r3, r2]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2246      	movs	r2, #70	; 0x46
 8008bf6:	2101      	movs	r1, #1
 8008bf8:	5499      	strb	r1, [r3, r2]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2247      	movs	r2, #71	; 0x47
 8008bfe:	2101      	movs	r1, #1
 8008c00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	223d      	movs	r2, #61	; 0x3d
 8008c06:	2101      	movs	r1, #1
 8008c08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	b002      	add	sp, #8
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c1c:	46c0      	nop			; (mov r8, r8)
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	b002      	add	sp, #8
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d108      	bne.n	8008c46 <HAL_TIM_PWM_Start+0x22>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	223e      	movs	r2, #62	; 0x3e
 8008c38:	5c9b      	ldrb	r3, [r3, r2]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	1e5a      	subs	r2, r3, #1
 8008c40:	4193      	sbcs	r3, r2
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	e037      	b.n	8008cb6 <HAL_TIM_PWM_Start+0x92>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	d108      	bne.n	8008c5e <HAL_TIM_PWM_Start+0x3a>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	223f      	movs	r2, #63	; 0x3f
 8008c50:	5c9b      	ldrb	r3, [r3, r2]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	1e5a      	subs	r2, r3, #1
 8008c58:	4193      	sbcs	r3, r2
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	e02b      	b.n	8008cb6 <HAL_TIM_PWM_Start+0x92>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d108      	bne.n	8008c76 <HAL_TIM_PWM_Start+0x52>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2240      	movs	r2, #64	; 0x40
 8008c68:	5c9b      	ldrb	r3, [r3, r2]
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	1e5a      	subs	r2, r3, #1
 8008c70:	4193      	sbcs	r3, r2
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	e01f      	b.n	8008cb6 <HAL_TIM_PWM_Start+0x92>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b0c      	cmp	r3, #12
 8008c7a:	d108      	bne.n	8008c8e <HAL_TIM_PWM_Start+0x6a>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2241      	movs	r2, #65	; 0x41
 8008c80:	5c9b      	ldrb	r3, [r3, r2]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	1e5a      	subs	r2, r3, #1
 8008c88:	4193      	sbcs	r3, r2
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	e013      	b.n	8008cb6 <HAL_TIM_PWM_Start+0x92>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b10      	cmp	r3, #16
 8008c92:	d108      	bne.n	8008ca6 <HAL_TIM_PWM_Start+0x82>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2242      	movs	r2, #66	; 0x42
 8008c98:	5c9b      	ldrb	r3, [r3, r2]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	1e5a      	subs	r2, r3, #1
 8008ca0:	4193      	sbcs	r3, r2
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	e007      	b.n	8008cb6 <HAL_TIM_PWM_Start+0x92>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2243      	movs	r2, #67	; 0x43
 8008caa:	5c9b      	ldrb	r3, [r3, r2]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	1e5a      	subs	r2, r3, #1
 8008cb2:	4193      	sbcs	r3, r2
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e085      	b.n	8008dca <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d104      	bne.n	8008cce <HAL_TIM_PWM_Start+0xaa>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	223e      	movs	r2, #62	; 0x3e
 8008cc8:	2102      	movs	r1, #2
 8008cca:	5499      	strb	r1, [r3, r2]
 8008ccc:	e023      	b.n	8008d16 <HAL_TIM_PWM_Start+0xf2>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	d104      	bne.n	8008cde <HAL_TIM_PWM_Start+0xba>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	223f      	movs	r2, #63	; 0x3f
 8008cd8:	2102      	movs	r1, #2
 8008cda:	5499      	strb	r1, [r3, r2]
 8008cdc:	e01b      	b.n	8008d16 <HAL_TIM_PWM_Start+0xf2>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d104      	bne.n	8008cee <HAL_TIM_PWM_Start+0xca>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2240      	movs	r2, #64	; 0x40
 8008ce8:	2102      	movs	r1, #2
 8008cea:	5499      	strb	r1, [r3, r2]
 8008cec:	e013      	b.n	8008d16 <HAL_TIM_PWM_Start+0xf2>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b0c      	cmp	r3, #12
 8008cf2:	d104      	bne.n	8008cfe <HAL_TIM_PWM_Start+0xda>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2241      	movs	r2, #65	; 0x41
 8008cf8:	2102      	movs	r1, #2
 8008cfa:	5499      	strb	r1, [r3, r2]
 8008cfc:	e00b      	b.n	8008d16 <HAL_TIM_PWM_Start+0xf2>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b10      	cmp	r3, #16
 8008d02:	d104      	bne.n	8008d0e <HAL_TIM_PWM_Start+0xea>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2242      	movs	r2, #66	; 0x42
 8008d08:	2102      	movs	r1, #2
 8008d0a:	5499      	strb	r1, [r3, r2]
 8008d0c:	e003      	b.n	8008d16 <HAL_TIM_PWM_Start+0xf2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2243      	movs	r2, #67	; 0x43
 8008d12:	2102      	movs	r1, #2
 8008d14:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	0018      	movs	r0, r3
 8008d20:	f001 fd4a 	bl	800a7b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2a      	ldr	r2, [pc, #168]	; (8008dd4 <HAL_TIM_PWM_Start+0x1b0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00e      	beq.n	8008d4c <HAL_TIM_PWM_Start+0x128>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a29      	ldr	r2, [pc, #164]	; (8008dd8 <HAL_TIM_PWM_Start+0x1b4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d009      	beq.n	8008d4c <HAL_TIM_PWM_Start+0x128>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a27      	ldr	r2, [pc, #156]	; (8008ddc <HAL_TIM_PWM_Start+0x1b8>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d004      	beq.n	8008d4c <HAL_TIM_PWM_Start+0x128>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a26      	ldr	r2, [pc, #152]	; (8008de0 <HAL_TIM_PWM_Start+0x1bc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d101      	bne.n	8008d50 <HAL_TIM_PWM_Start+0x12c>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e000      	b.n	8008d52 <HAL_TIM_PWM_Start+0x12e>
 8008d50:	2300      	movs	r3, #0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d008      	beq.n	8008d68 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2180      	movs	r1, #128	; 0x80
 8008d62:	0209      	lsls	r1, r1, #8
 8008d64:	430a      	orrs	r2, r1
 8008d66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a19      	ldr	r2, [pc, #100]	; (8008dd4 <HAL_TIM_PWM_Start+0x1b0>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d009      	beq.n	8008d86 <HAL_TIM_PWM_Start+0x162>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a1b      	ldr	r2, [pc, #108]	; (8008de4 <HAL_TIM_PWM_Start+0x1c0>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d004      	beq.n	8008d86 <HAL_TIM_PWM_Start+0x162>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <HAL_TIM_PWM_Start+0x1b4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d116      	bne.n	8008db4 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	4a16      	ldr	r2, [pc, #88]	; (8008de8 <HAL_TIM_PWM_Start+0x1c4>)
 8008d8e:	4013      	ands	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b06      	cmp	r3, #6
 8008d96:	d016      	beq.n	8008dc6 <HAL_TIM_PWM_Start+0x1a2>
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	2380      	movs	r3, #128	; 0x80
 8008d9c:	025b      	lsls	r3, r3, #9
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d011      	beq.n	8008dc6 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2101      	movs	r1, #1
 8008dae:	430a      	orrs	r2, r1
 8008db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db2:	e008      	b.n	8008dc6 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e000      	b.n	8008dc8 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	0018      	movs	r0, r3
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	b004      	add	sp, #16
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	40012c00 	.word	0x40012c00
 8008dd8:	40014000 	.word	0x40014000
 8008ddc:	40014400 	.word	0x40014400
 8008de0:	40014800 	.word	0x40014800
 8008de4:	40000400 	.word	0x40000400
 8008de8:	00010007 	.word	0x00010007

08008dec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f001 fcda 	bl	800a7b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a37      	ldr	r2, [pc, #220]	; (8008ee8 <HAL_TIM_PWM_Stop+0xfc>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00e      	beq.n	8008e2c <HAL_TIM_PWM_Stop+0x40>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a36      	ldr	r2, [pc, #216]	; (8008eec <HAL_TIM_PWM_Stop+0x100>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d009      	beq.n	8008e2c <HAL_TIM_PWM_Stop+0x40>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a34      	ldr	r2, [pc, #208]	; (8008ef0 <HAL_TIM_PWM_Stop+0x104>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d004      	beq.n	8008e2c <HAL_TIM_PWM_Stop+0x40>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a33      	ldr	r2, [pc, #204]	; (8008ef4 <HAL_TIM_PWM_Stop+0x108>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d101      	bne.n	8008e30 <HAL_TIM_PWM_Stop+0x44>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e000      	b.n	8008e32 <HAL_TIM_PWM_Stop+0x46>
 8008e30:	2300      	movs	r3, #0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d013      	beq.n	8008e5e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	4a2e      	ldr	r2, [pc, #184]	; (8008ef8 <HAL_TIM_PWM_Stop+0x10c>)
 8008e3e:	4013      	ands	r3, r2
 8008e40:	d10d      	bne.n	8008e5e <HAL_TIM_PWM_Stop+0x72>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6a1b      	ldr	r3, [r3, #32]
 8008e48:	4a2c      	ldr	r2, [pc, #176]	; (8008efc <HAL_TIM_PWM_Stop+0x110>)
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	d107      	bne.n	8008e5e <HAL_TIM_PWM_Stop+0x72>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4929      	ldr	r1, [pc, #164]	; (8008f00 <HAL_TIM_PWM_Stop+0x114>)
 8008e5a:	400a      	ands	r2, r1
 8008e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	4a24      	ldr	r2, [pc, #144]	; (8008ef8 <HAL_TIM_PWM_Stop+0x10c>)
 8008e66:	4013      	ands	r3, r2
 8008e68:	d10d      	bne.n	8008e86 <HAL_TIM_PWM_Stop+0x9a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	4a22      	ldr	r2, [pc, #136]	; (8008efc <HAL_TIM_PWM_Stop+0x110>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	d107      	bne.n	8008e86 <HAL_TIM_PWM_Stop+0x9a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2101      	movs	r1, #1
 8008e82:	438a      	bics	r2, r1
 8008e84:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d104      	bne.n	8008e96 <HAL_TIM_PWM_Stop+0xaa>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	223e      	movs	r2, #62	; 0x3e
 8008e90:	2101      	movs	r1, #1
 8008e92:	5499      	strb	r1, [r3, r2]
 8008e94:	e023      	b.n	8008ede <HAL_TIM_PWM_Stop+0xf2>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d104      	bne.n	8008ea6 <HAL_TIM_PWM_Stop+0xba>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	223f      	movs	r2, #63	; 0x3f
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	5499      	strb	r1, [r3, r2]
 8008ea4:	e01b      	b.n	8008ede <HAL_TIM_PWM_Stop+0xf2>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b08      	cmp	r3, #8
 8008eaa:	d104      	bne.n	8008eb6 <HAL_TIM_PWM_Stop+0xca>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2240      	movs	r2, #64	; 0x40
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	5499      	strb	r1, [r3, r2]
 8008eb4:	e013      	b.n	8008ede <HAL_TIM_PWM_Stop+0xf2>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b0c      	cmp	r3, #12
 8008eba:	d104      	bne.n	8008ec6 <HAL_TIM_PWM_Stop+0xda>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2241      	movs	r2, #65	; 0x41
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	5499      	strb	r1, [r3, r2]
 8008ec4:	e00b      	b.n	8008ede <HAL_TIM_PWM_Stop+0xf2>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b10      	cmp	r3, #16
 8008eca:	d104      	bne.n	8008ed6 <HAL_TIM_PWM_Stop+0xea>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2242      	movs	r2, #66	; 0x42
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	5499      	strb	r1, [r3, r2]
 8008ed4:	e003      	b.n	8008ede <HAL_TIM_PWM_Stop+0xf2>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2243      	movs	r2, #67	; 0x43
 8008eda:	2101      	movs	r1, #1
 8008edc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	b002      	add	sp, #8
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	40012c00 	.word	0x40012c00
 8008eec:	40014000 	.word	0x40014000
 8008ef0:	40014400 	.word	0x40014400
 8008ef4:	40014800 	.word	0x40014800
 8008ef8:	00001111 	.word	0x00001111
 8008efc:	00000444 	.word	0x00000444
 8008f00:	ffff7fff 	.word	0xffff7fff

08008f04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e04a      	b.n	8008fac <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	223d      	movs	r2, #61	; 0x3d
 8008f1a:	5c9b      	ldrb	r3, [r3, r2]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d107      	bne.n	8008f32 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	223c      	movs	r2, #60	; 0x3c
 8008f26:	2100      	movs	r1, #0
 8008f28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	f000 f841 	bl	8008fb4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	223d      	movs	r2, #61	; 0x3d
 8008f36:	2102      	movs	r1, #2
 8008f38:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	3304      	adds	r3, #4
 8008f42:	0019      	movs	r1, r3
 8008f44:	0010      	movs	r0, r2
 8008f46:	f000 ff41 	bl	8009dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2248      	movs	r2, #72	; 0x48
 8008f4e:	2101      	movs	r1, #1
 8008f50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	223e      	movs	r2, #62	; 0x3e
 8008f56:	2101      	movs	r1, #1
 8008f58:	5499      	strb	r1, [r3, r2]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	223f      	movs	r2, #63	; 0x3f
 8008f5e:	2101      	movs	r1, #1
 8008f60:	5499      	strb	r1, [r3, r2]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2240      	movs	r2, #64	; 0x40
 8008f66:	2101      	movs	r1, #1
 8008f68:	5499      	strb	r1, [r3, r2]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2241      	movs	r2, #65	; 0x41
 8008f6e:	2101      	movs	r1, #1
 8008f70:	5499      	strb	r1, [r3, r2]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2242      	movs	r2, #66	; 0x42
 8008f76:	2101      	movs	r1, #1
 8008f78:	5499      	strb	r1, [r3, r2]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2243      	movs	r2, #67	; 0x43
 8008f7e:	2101      	movs	r1, #1
 8008f80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2244      	movs	r2, #68	; 0x44
 8008f86:	2101      	movs	r1, #1
 8008f88:	5499      	strb	r1, [r3, r2]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2245      	movs	r2, #69	; 0x45
 8008f8e:	2101      	movs	r1, #1
 8008f90:	5499      	strb	r1, [r3, r2]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2246      	movs	r2, #70	; 0x46
 8008f96:	2101      	movs	r1, #1
 8008f98:	5499      	strb	r1, [r3, r2]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2247      	movs	r2, #71	; 0x47
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	223d      	movs	r2, #61	; 0x3d
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	0018      	movs	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	b002      	add	sp, #8
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008fbc:	46c0      	nop			; (mov r8, r8)
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	b002      	add	sp, #8
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fce:	230f      	movs	r3, #15
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d104      	bne.n	8008fe6 <HAL_TIM_IC_Start_IT+0x22>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	223e      	movs	r2, #62	; 0x3e
 8008fe0:	5c9b      	ldrb	r3, [r3, r2]
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	e023      	b.n	800902e <HAL_TIM_IC_Start_IT+0x6a>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	d104      	bne.n	8008ff6 <HAL_TIM_IC_Start_IT+0x32>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	223f      	movs	r2, #63	; 0x3f
 8008ff0:	5c9b      	ldrb	r3, [r3, r2]
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	e01b      	b.n	800902e <HAL_TIM_IC_Start_IT+0x6a>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b08      	cmp	r3, #8
 8008ffa:	d104      	bne.n	8009006 <HAL_TIM_IC_Start_IT+0x42>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2240      	movs	r2, #64	; 0x40
 8009000:	5c9b      	ldrb	r3, [r3, r2]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	e013      	b.n	800902e <HAL_TIM_IC_Start_IT+0x6a>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b0c      	cmp	r3, #12
 800900a:	d104      	bne.n	8009016 <HAL_TIM_IC_Start_IT+0x52>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2241      	movs	r2, #65	; 0x41
 8009010:	5c9b      	ldrb	r3, [r3, r2]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	e00b      	b.n	800902e <HAL_TIM_IC_Start_IT+0x6a>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b10      	cmp	r3, #16
 800901a:	d104      	bne.n	8009026 <HAL_TIM_IC_Start_IT+0x62>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2242      	movs	r2, #66	; 0x42
 8009020:	5c9b      	ldrb	r3, [r3, r2]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	e003      	b.n	800902e <HAL_TIM_IC_Start_IT+0x6a>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2243      	movs	r2, #67	; 0x43
 800902a:	5c9b      	ldrb	r3, [r3, r2]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	220e      	movs	r2, #14
 8009030:	18ba      	adds	r2, r7, r2
 8009032:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <HAL_TIM_IC_Start_IT+0x80>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2244      	movs	r2, #68	; 0x44
 800903e:	5c9b      	ldrb	r3, [r3, r2]
 8009040:	b2db      	uxtb	r3, r3
 8009042:	e013      	b.n	800906c <HAL_TIM_IC_Start_IT+0xa8>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b04      	cmp	r3, #4
 8009048:	d104      	bne.n	8009054 <HAL_TIM_IC_Start_IT+0x90>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2245      	movs	r2, #69	; 0x45
 800904e:	5c9b      	ldrb	r3, [r3, r2]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	e00b      	b.n	800906c <HAL_TIM_IC_Start_IT+0xa8>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b08      	cmp	r3, #8
 8009058:	d104      	bne.n	8009064 <HAL_TIM_IC_Start_IT+0xa0>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2246      	movs	r2, #70	; 0x46
 800905e:	5c9b      	ldrb	r3, [r3, r2]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	e003      	b.n	800906c <HAL_TIM_IC_Start_IT+0xa8>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2247      	movs	r2, #71	; 0x47
 8009068:	5c9b      	ldrb	r3, [r3, r2]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	210d      	movs	r1, #13
 800906e:	187a      	adds	r2, r7, r1
 8009070:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009072:	230e      	movs	r3, #14
 8009074:	18fb      	adds	r3, r7, r3
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d103      	bne.n	8009084 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800907c:	187b      	adds	r3, r7, r1
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d001      	beq.n	8009088 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e0c2      	b.n	800920e <HAL_TIM_IC_Start_IT+0x24a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <HAL_TIM_IC_Start_IT+0xd4>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	223e      	movs	r2, #62	; 0x3e
 8009092:	2102      	movs	r1, #2
 8009094:	5499      	strb	r1, [r3, r2]
 8009096:	e023      	b.n	80090e0 <HAL_TIM_IC_Start_IT+0x11c>
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2b04      	cmp	r3, #4
 800909c:	d104      	bne.n	80090a8 <HAL_TIM_IC_Start_IT+0xe4>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	223f      	movs	r2, #63	; 0x3f
 80090a2:	2102      	movs	r1, #2
 80090a4:	5499      	strb	r1, [r3, r2]
 80090a6:	e01b      	b.n	80090e0 <HAL_TIM_IC_Start_IT+0x11c>
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b08      	cmp	r3, #8
 80090ac:	d104      	bne.n	80090b8 <HAL_TIM_IC_Start_IT+0xf4>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2240      	movs	r2, #64	; 0x40
 80090b2:	2102      	movs	r1, #2
 80090b4:	5499      	strb	r1, [r3, r2]
 80090b6:	e013      	b.n	80090e0 <HAL_TIM_IC_Start_IT+0x11c>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2b0c      	cmp	r3, #12
 80090bc:	d104      	bne.n	80090c8 <HAL_TIM_IC_Start_IT+0x104>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2241      	movs	r2, #65	; 0x41
 80090c2:	2102      	movs	r1, #2
 80090c4:	5499      	strb	r1, [r3, r2]
 80090c6:	e00b      	b.n	80090e0 <HAL_TIM_IC_Start_IT+0x11c>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b10      	cmp	r3, #16
 80090cc:	d104      	bne.n	80090d8 <HAL_TIM_IC_Start_IT+0x114>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2242      	movs	r2, #66	; 0x42
 80090d2:	2102      	movs	r1, #2
 80090d4:	5499      	strb	r1, [r3, r2]
 80090d6:	e003      	b.n	80090e0 <HAL_TIM_IC_Start_IT+0x11c>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2243      	movs	r2, #67	; 0x43
 80090dc:	2102      	movs	r1, #2
 80090de:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <HAL_TIM_IC_Start_IT+0x12c>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2244      	movs	r2, #68	; 0x44
 80090ea:	2102      	movs	r1, #2
 80090ec:	5499      	strb	r1, [r3, r2]
 80090ee:	e013      	b.n	8009118 <HAL_TIM_IC_Start_IT+0x154>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d104      	bne.n	8009100 <HAL_TIM_IC_Start_IT+0x13c>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2245      	movs	r2, #69	; 0x45
 80090fa:	2102      	movs	r1, #2
 80090fc:	5499      	strb	r1, [r3, r2]
 80090fe:	e00b      	b.n	8009118 <HAL_TIM_IC_Start_IT+0x154>
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	2b08      	cmp	r3, #8
 8009104:	d104      	bne.n	8009110 <HAL_TIM_IC_Start_IT+0x14c>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2246      	movs	r2, #70	; 0x46
 800910a:	2102      	movs	r1, #2
 800910c:	5499      	strb	r1, [r3, r2]
 800910e:	e003      	b.n	8009118 <HAL_TIM_IC_Start_IT+0x154>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2247      	movs	r2, #71	; 0x47
 8009114:	2102      	movs	r1, #2
 8009116:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2b0c      	cmp	r3, #12
 800911c:	d02a      	beq.n	8009174 <HAL_TIM_IC_Start_IT+0x1b0>
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b0c      	cmp	r3, #12
 8009122:	d830      	bhi.n	8009186 <HAL_TIM_IC_Start_IT+0x1c2>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	2b08      	cmp	r3, #8
 8009128:	d01b      	beq.n	8009162 <HAL_TIM_IC_Start_IT+0x19e>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b08      	cmp	r3, #8
 800912e:	d82a      	bhi.n	8009186 <HAL_TIM_IC_Start_IT+0x1c2>
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <HAL_TIM_IC_Start_IT+0x17a>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2b04      	cmp	r3, #4
 800913a:	d009      	beq.n	8009150 <HAL_TIM_IC_Start_IT+0x18c>
 800913c:	e023      	b.n	8009186 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68da      	ldr	r2, [r3, #12]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2102      	movs	r1, #2
 800914a:	430a      	orrs	r2, r1
 800914c:	60da      	str	r2, [r3, #12]
      break;
 800914e:	e01f      	b.n	8009190 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2104      	movs	r1, #4
 800915c:	430a      	orrs	r2, r1
 800915e:	60da      	str	r2, [r3, #12]
      break;
 8009160:	e016      	b.n	8009190 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2108      	movs	r1, #8
 800916e:	430a      	orrs	r2, r1
 8009170:	60da      	str	r2, [r3, #12]
      break;
 8009172:	e00d      	b.n	8009190 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2110      	movs	r1, #16
 8009180:	430a      	orrs	r2, r1
 8009182:	60da      	str	r2, [r3, #12]
      break;
 8009184:	e004      	b.n	8009190 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8009186:	230f      	movs	r3, #15
 8009188:	18fb      	adds	r3, r7, r3
 800918a:	2201      	movs	r2, #1
 800918c:	701a      	strb	r2, [r3, #0]
      break;
 800918e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8009190:	230f      	movs	r3, #15
 8009192:	18fb      	adds	r3, r7, r3
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d136      	bne.n	8009208 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	2201      	movs	r2, #1
 80091a2:	0018      	movs	r0, r3
 80091a4:	f001 fb08 	bl	800a7b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a1a      	ldr	r2, [pc, #104]	; (8009218 <HAL_TIM_IC_Start_IT+0x254>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d009      	beq.n	80091c6 <HAL_TIM_IC_Start_IT+0x202>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a19      	ldr	r2, [pc, #100]	; (800921c <HAL_TIM_IC_Start_IT+0x258>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d004      	beq.n	80091c6 <HAL_TIM_IC_Start_IT+0x202>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a17      	ldr	r2, [pc, #92]	; (8009220 <HAL_TIM_IC_Start_IT+0x25c>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d116      	bne.n	80091f4 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	4a15      	ldr	r2, [pc, #84]	; (8009224 <HAL_TIM_IC_Start_IT+0x260>)
 80091ce:	4013      	ands	r3, r2
 80091d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b06      	cmp	r3, #6
 80091d6:	d016      	beq.n	8009206 <HAL_TIM_IC_Start_IT+0x242>
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	2380      	movs	r3, #128	; 0x80
 80091dc:	025b      	lsls	r3, r3, #9
 80091de:	429a      	cmp	r2, r3
 80091e0:	d011      	beq.n	8009206 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2101      	movs	r1, #1
 80091ee:	430a      	orrs	r2, r1
 80091f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f2:	e008      	b.n	8009206 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2101      	movs	r1, #1
 8009200:	430a      	orrs	r2, r1
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	e000      	b.n	8009208 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009206:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009208:	230f      	movs	r3, #15
 800920a:	18fb      	adds	r3, r7, r3
 800920c:	781b      	ldrb	r3, [r3, #0]
}
 800920e:	0018      	movs	r0, r3
 8009210:	46bd      	mov	sp, r7
 8009212:	b004      	add	sp, #16
 8009214:	bd80      	pop	{r7, pc}
 8009216:	46c0      	nop			; (mov r8, r8)
 8009218:	40012c00 	.word	0x40012c00
 800921c:	40000400 	.word	0x40000400
 8009220:	40014000 	.word	0x40014000
 8009224:	00010007 	.word	0x00010007

08009228 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009232:	230f      	movs	r3, #15
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	2200      	movs	r2, #0
 8009238:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b0c      	cmp	r3, #12
 800923e:	d02a      	beq.n	8009296 <HAL_TIM_IC_Stop_IT+0x6e>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b0c      	cmp	r3, #12
 8009244:	d830      	bhi.n	80092a8 <HAL_TIM_IC_Stop_IT+0x80>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b08      	cmp	r3, #8
 800924a:	d01b      	beq.n	8009284 <HAL_TIM_IC_Stop_IT+0x5c>
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b08      	cmp	r3, #8
 8009250:	d82a      	bhi.n	80092a8 <HAL_TIM_IC_Stop_IT+0x80>
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <HAL_TIM_IC_Stop_IT+0x38>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b04      	cmp	r3, #4
 800925c:	d009      	beq.n	8009272 <HAL_TIM_IC_Stop_IT+0x4a>
 800925e:	e023      	b.n	80092a8 <HAL_TIM_IC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68da      	ldr	r2, [r3, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2102      	movs	r1, #2
 800926c:	438a      	bics	r2, r1
 800926e:	60da      	str	r2, [r3, #12]
      break;
 8009270:	e01f      	b.n	80092b2 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68da      	ldr	r2, [r3, #12]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2104      	movs	r1, #4
 800927e:	438a      	bics	r2, r1
 8009280:	60da      	str	r2, [r3, #12]
      break;
 8009282:	e016      	b.n	80092b2 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2108      	movs	r1, #8
 8009290:	438a      	bics	r2, r1
 8009292:	60da      	str	r2, [r3, #12]
      break;
 8009294:	e00d      	b.n	80092b2 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68da      	ldr	r2, [r3, #12]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2110      	movs	r1, #16
 80092a2:	438a      	bics	r2, r1
 80092a4:	60da      	str	r2, [r3, #12]
      break;
 80092a6:	e004      	b.n	80092b2 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 80092a8:	230f      	movs	r3, #15
 80092aa:	18fb      	adds	r3, r7, r3
 80092ac:	2201      	movs	r2, #1
 80092ae:	701a      	strb	r2, [r3, #0]
      break;
 80092b0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80092b2:	230f      	movs	r3, #15
 80092b4:	18fb      	adds	r3, r7, r3
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d000      	beq.n	80092be <HAL_TIM_IC_Stop_IT+0x96>
 80092bc:	e062      	b.n	8009384 <HAL_TIM_IC_Stop_IT+0x15c>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	2200      	movs	r2, #0
 80092c6:	0018      	movs	r0, r3
 80092c8:	f001 fa76 	bl	800a7b8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	4a30      	ldr	r2, [pc, #192]	; (8009394 <HAL_TIM_IC_Stop_IT+0x16c>)
 80092d4:	4013      	ands	r3, r2
 80092d6:	d10d      	bne.n	80092f4 <HAL_TIM_IC_Stop_IT+0xcc>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	4a2e      	ldr	r2, [pc, #184]	; (8009398 <HAL_TIM_IC_Stop_IT+0x170>)
 80092e0:	4013      	ands	r3, r2
 80092e2:	d107      	bne.n	80092f4 <HAL_TIM_IC_Stop_IT+0xcc>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2101      	movs	r1, #1
 80092f0:	438a      	bics	r2, r1
 80092f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d104      	bne.n	8009304 <HAL_TIM_IC_Stop_IT+0xdc>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	223e      	movs	r2, #62	; 0x3e
 80092fe:	2101      	movs	r1, #1
 8009300:	5499      	strb	r1, [r3, r2]
 8009302:	e023      	b.n	800934c <HAL_TIM_IC_Stop_IT+0x124>
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b04      	cmp	r3, #4
 8009308:	d104      	bne.n	8009314 <HAL_TIM_IC_Stop_IT+0xec>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	223f      	movs	r2, #63	; 0x3f
 800930e:	2101      	movs	r1, #1
 8009310:	5499      	strb	r1, [r3, r2]
 8009312:	e01b      	b.n	800934c <HAL_TIM_IC_Stop_IT+0x124>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b08      	cmp	r3, #8
 8009318:	d104      	bne.n	8009324 <HAL_TIM_IC_Stop_IT+0xfc>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2240      	movs	r2, #64	; 0x40
 800931e:	2101      	movs	r1, #1
 8009320:	5499      	strb	r1, [r3, r2]
 8009322:	e013      	b.n	800934c <HAL_TIM_IC_Stop_IT+0x124>
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2b0c      	cmp	r3, #12
 8009328:	d104      	bne.n	8009334 <HAL_TIM_IC_Stop_IT+0x10c>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2241      	movs	r2, #65	; 0x41
 800932e:	2101      	movs	r1, #1
 8009330:	5499      	strb	r1, [r3, r2]
 8009332:	e00b      	b.n	800934c <HAL_TIM_IC_Stop_IT+0x124>
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2b10      	cmp	r3, #16
 8009338:	d104      	bne.n	8009344 <HAL_TIM_IC_Stop_IT+0x11c>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2242      	movs	r2, #66	; 0x42
 800933e:	2101      	movs	r1, #1
 8009340:	5499      	strb	r1, [r3, r2]
 8009342:	e003      	b.n	800934c <HAL_TIM_IC_Stop_IT+0x124>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2243      	movs	r2, #67	; 0x43
 8009348:	2101      	movs	r1, #1
 800934a:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d104      	bne.n	800935c <HAL_TIM_IC_Stop_IT+0x134>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2244      	movs	r2, #68	; 0x44
 8009356:	2101      	movs	r1, #1
 8009358:	5499      	strb	r1, [r3, r2]
 800935a:	e013      	b.n	8009384 <HAL_TIM_IC_Stop_IT+0x15c>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b04      	cmp	r3, #4
 8009360:	d104      	bne.n	800936c <HAL_TIM_IC_Stop_IT+0x144>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2245      	movs	r2, #69	; 0x45
 8009366:	2101      	movs	r1, #1
 8009368:	5499      	strb	r1, [r3, r2]
 800936a:	e00b      	b.n	8009384 <HAL_TIM_IC_Stop_IT+0x15c>
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2b08      	cmp	r3, #8
 8009370:	d104      	bne.n	800937c <HAL_TIM_IC_Stop_IT+0x154>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2246      	movs	r2, #70	; 0x46
 8009376:	2101      	movs	r1, #1
 8009378:	5499      	strb	r1, [r3, r2]
 800937a:	e003      	b.n	8009384 <HAL_TIM_IC_Stop_IT+0x15c>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2247      	movs	r2, #71	; 0x47
 8009380:	2101      	movs	r1, #1
 8009382:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8009384:	230f      	movs	r3, #15
 8009386:	18fb      	adds	r3, r7, r3
 8009388:	781b      	ldrb	r3, [r3, #0]
}
 800938a:	0018      	movs	r0, r3
 800938c:	46bd      	mov	sp, r7
 800938e:	b004      	add	sp, #16
 8009390:	bd80      	pop	{r7, pc}
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	00001111 	.word	0x00001111
 8009398:	00000444 	.word	0x00000444

0800939c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e090      	b.n	80094d2 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	223d      	movs	r2, #61	; 0x3d
 80093b4:	5c9b      	ldrb	r3, [r3, r2]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d107      	bne.n	80093cc <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	223c      	movs	r2, #60	; 0x3c
 80093c0:	2100      	movs	r1, #0
 80093c2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	0018      	movs	r0, r3
 80093c8:	f7fc fcb6 	bl	8005d38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	223d      	movs	r2, #61	; 0x3d
 80093d0:	2102      	movs	r1, #2
 80093d2:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	493f      	ldr	r1, [pc, #252]	; (80094dc <HAL_TIM_Encoder_Init+0x140>)
 80093e0:	400a      	ands	r2, r1
 80093e2:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3304      	adds	r3, #4
 80093ec:	0019      	movs	r1, r3
 80093ee:	0010      	movs	r0, r2
 80093f0:	f000 fcec 	bl	8009dcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	4313      	orrs	r3, r2
 8009414:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	4a31      	ldr	r2, [pc, #196]	; (80094e0 <HAL_TIM_Encoder_Init+0x144>)
 800941a:	4013      	ands	r3, r2
 800941c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	4313      	orrs	r3, r2
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	4313      	orrs	r3, r2
 800942e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	4a2c      	ldr	r2, [pc, #176]	; (80094e4 <HAL_TIM_Encoder_Init+0x148>)
 8009434:	4013      	ands	r3, r2
 8009436:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	4a2b      	ldr	r2, [pc, #172]	; (80094e8 <HAL_TIM_Encoder_Init+0x14c>)
 800943c:	4013      	ands	r3, r2
 800943e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	68da      	ldr	r2, [r3, #12]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	4313      	orrs	r3, r2
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	4313      	orrs	r3, r2
 8009450:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	011a      	lsls	r2, r3, #4
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	031b      	lsls	r3, r3, #12
 800945e:	4313      	orrs	r3, r2
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	4313      	orrs	r3, r2
 8009464:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2222      	movs	r2, #34	; 0x22
 800946a:	4393      	bics	r3, r2
 800946c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2288      	movs	r2, #136	; 0x88
 8009472:	4393      	bics	r3, r2
 8009474:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685a      	ldr	r2, [r3, #4]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	4313      	orrs	r3, r2
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	4313      	orrs	r3, r2
 8009486:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2248      	movs	r2, #72	; 0x48
 80094a4:	2101      	movs	r1, #1
 80094a6:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	223e      	movs	r2, #62	; 0x3e
 80094ac:	2101      	movs	r1, #1
 80094ae:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	223f      	movs	r2, #63	; 0x3f
 80094b4:	2101      	movs	r1, #1
 80094b6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2244      	movs	r2, #68	; 0x44
 80094bc:	2101      	movs	r1, #1
 80094be:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2245      	movs	r2, #69	; 0x45
 80094c4:	2101      	movs	r1, #1
 80094c6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	223d      	movs	r2, #61	; 0x3d
 80094cc:	2101      	movs	r1, #1
 80094ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	0018      	movs	r0, r3
 80094d4:	46bd      	mov	sp, r7
 80094d6:	b006      	add	sp, #24
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	fffebff8 	.word	0xfffebff8
 80094e0:	fffffcfc 	.word	0xfffffcfc
 80094e4:	fffff3f3 	.word	0xfffff3f3
 80094e8:	ffff0f0f 	.word	0xffff0f0f

080094ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094ec:	b590      	push	{r4, r7, lr}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80094f6:	200f      	movs	r0, #15
 80094f8:	183b      	adds	r3, r7, r0
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	213e      	movs	r1, #62	; 0x3e
 80094fe:	5c52      	ldrb	r2, [r2, r1]
 8009500:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009502:	230e      	movs	r3, #14
 8009504:	18fb      	adds	r3, r7, r3
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	213f      	movs	r1, #63	; 0x3f
 800950a:	5c52      	ldrb	r2, [r2, r1]
 800950c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800950e:	240d      	movs	r4, #13
 8009510:	193b      	adds	r3, r7, r4
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	2144      	movs	r1, #68	; 0x44
 8009516:	5c52      	ldrb	r2, [r2, r1]
 8009518:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800951a:	230c      	movs	r3, #12
 800951c:	18fb      	adds	r3, r7, r3
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	2145      	movs	r1, #69	; 0x45
 8009522:	5c52      	ldrb	r2, [r2, r1]
 8009524:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d112      	bne.n	8009552 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800952c:	183b      	adds	r3, r7, r0
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d103      	bne.n	800953c <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009534:	193b      	adds	r3, r7, r4
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d001      	beq.n	8009540 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e075      	b.n	800962c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	223e      	movs	r2, #62	; 0x3e
 8009544:	2102      	movs	r1, #2
 8009546:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2244      	movs	r2, #68	; 0x44
 800954c:	2102      	movs	r1, #2
 800954e:	5499      	strb	r1, [r3, r2]
 8009550:	e03d      	b.n	80095ce <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b04      	cmp	r3, #4
 8009556:	d114      	bne.n	8009582 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009558:	230e      	movs	r3, #14
 800955a:	18fb      	adds	r3, r7, r3
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d104      	bne.n	800956c <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009562:	230c      	movs	r3, #12
 8009564:	18fb      	adds	r3, r7, r3
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d001      	beq.n	8009570 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e05d      	b.n	800962c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	223f      	movs	r2, #63	; 0x3f
 8009574:	2102      	movs	r1, #2
 8009576:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2245      	movs	r2, #69	; 0x45
 800957c:	2102      	movs	r1, #2
 800957e:	5499      	strb	r1, [r3, r2]
 8009580:	e025      	b.n	80095ce <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009582:	230f      	movs	r3, #15
 8009584:	18fb      	adds	r3, r7, r3
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d10e      	bne.n	80095aa <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800958c:	230e      	movs	r3, #14
 800958e:	18fb      	adds	r3, r7, r3
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d109      	bne.n	80095aa <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009596:	230d      	movs	r3, #13
 8009598:	18fb      	adds	r3, r7, r3
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d104      	bne.n	80095aa <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80095a0:	230c      	movs	r3, #12
 80095a2:	18fb      	adds	r3, r7, r3
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d001      	beq.n	80095ae <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e03e      	b.n	800962c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	223e      	movs	r2, #62	; 0x3e
 80095b2:	2102      	movs	r1, #2
 80095b4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	223f      	movs	r2, #63	; 0x3f
 80095ba:	2102      	movs	r1, #2
 80095bc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2244      	movs	r2, #68	; 0x44
 80095c2:	2102      	movs	r1, #2
 80095c4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2245      	movs	r2, #69	; 0x45
 80095ca:	2102      	movs	r1, #2
 80095cc:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d003      	beq.n	80095dc <HAL_TIM_Encoder_Start+0xf0>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d008      	beq.n	80095ec <HAL_TIM_Encoder_Start+0x100>
 80095da:	e00f      	b.n	80095fc <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2201      	movs	r2, #1
 80095e2:	2100      	movs	r1, #0
 80095e4:	0018      	movs	r0, r3
 80095e6:	f001 f8e7 	bl	800a7b8 <TIM_CCxChannelCmd>
      break;
 80095ea:	e016      	b.n	800961a <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2201      	movs	r2, #1
 80095f2:	2104      	movs	r1, #4
 80095f4:	0018      	movs	r0, r3
 80095f6:	f001 f8df 	bl	800a7b8 <TIM_CCxChannelCmd>
      break;
 80095fa:	e00e      	b.n	800961a <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2201      	movs	r2, #1
 8009602:	2100      	movs	r1, #0
 8009604:	0018      	movs	r0, r3
 8009606:	f001 f8d7 	bl	800a7b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2201      	movs	r2, #1
 8009610:	2104      	movs	r1, #4
 8009612:	0018      	movs	r0, r3
 8009614:	f001 f8d0 	bl	800a7b8 <TIM_CCxChannelCmd>
      break;
 8009618:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2101      	movs	r1, #1
 8009626:	430a      	orrs	r2, r1
 8009628:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	0018      	movs	r0, r3
 800962e:	46bd      	mov	sp, r7
 8009630:	b005      	add	sp, #20
 8009632:	bd90      	pop	{r4, r7, pc}

08009634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	2202      	movs	r2, #2
 8009644:	4013      	ands	r3, r2
 8009646:	2b02      	cmp	r3, #2
 8009648:	d124      	bne.n	8009694 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	2202      	movs	r2, #2
 8009652:	4013      	ands	r3, r2
 8009654:	2b02      	cmp	r3, #2
 8009656:	d11d      	bne.n	8009694 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2203      	movs	r2, #3
 800965e:	4252      	negs	r2, r2
 8009660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	2203      	movs	r2, #3
 8009670:	4013      	ands	r3, r2
 8009672:	d004      	beq.n	800967e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	0018      	movs	r0, r3
 8009678:	f000 fb90 	bl	8009d9c <HAL_TIM_IC_CaptureCallback>
 800967c:	e007      	b.n	800968e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	0018      	movs	r0, r3
 8009682:	f000 fb83 	bl	8009d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	0018      	movs	r0, r3
 800968a:	f000 fb8f 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	2204      	movs	r2, #4
 800969c:	4013      	ands	r3, r2
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d125      	bne.n	80096ee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	2204      	movs	r2, #4
 80096aa:	4013      	ands	r3, r2
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d11e      	bne.n	80096ee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2205      	movs	r2, #5
 80096b6:	4252      	negs	r2, r2
 80096b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2202      	movs	r2, #2
 80096be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699a      	ldr	r2, [r3, #24]
 80096c6:	23c0      	movs	r3, #192	; 0xc0
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4013      	ands	r3, r2
 80096cc:	d004      	beq.n	80096d8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	0018      	movs	r0, r3
 80096d2:	f000 fb63 	bl	8009d9c <HAL_TIM_IC_CaptureCallback>
 80096d6:	e007      	b.n	80096e8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	0018      	movs	r0, r3
 80096dc:	f000 fb56 	bl	8009d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	0018      	movs	r0, r3
 80096e4:	f000 fb62 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	2208      	movs	r2, #8
 80096f6:	4013      	ands	r3, r2
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	d124      	bne.n	8009746 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	2208      	movs	r2, #8
 8009704:	4013      	ands	r3, r2
 8009706:	2b08      	cmp	r3, #8
 8009708:	d11d      	bne.n	8009746 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2209      	movs	r2, #9
 8009710:	4252      	negs	r2, r2
 8009712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2204      	movs	r2, #4
 8009718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	2203      	movs	r2, #3
 8009722:	4013      	ands	r3, r2
 8009724:	d004      	beq.n	8009730 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	0018      	movs	r0, r3
 800972a:	f000 fb37 	bl	8009d9c <HAL_TIM_IC_CaptureCallback>
 800972e:	e007      	b.n	8009740 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	0018      	movs	r0, r3
 8009734:	f000 fb2a 	bl	8009d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	0018      	movs	r0, r3
 800973c:	f000 fb36 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	2210      	movs	r2, #16
 800974e:	4013      	ands	r3, r2
 8009750:	2b10      	cmp	r3, #16
 8009752:	d125      	bne.n	80097a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	2210      	movs	r2, #16
 800975c:	4013      	ands	r3, r2
 800975e:	2b10      	cmp	r3, #16
 8009760:	d11e      	bne.n	80097a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2211      	movs	r2, #17
 8009768:	4252      	negs	r2, r2
 800976a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2208      	movs	r2, #8
 8009770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	69da      	ldr	r2, [r3, #28]
 8009778:	23c0      	movs	r3, #192	; 0xc0
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4013      	ands	r3, r2
 800977e:	d004      	beq.n	800978a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	0018      	movs	r0, r3
 8009784:	f000 fb0a 	bl	8009d9c <HAL_TIM_IC_CaptureCallback>
 8009788:	e007      	b.n	800979a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	0018      	movs	r0, r3
 800978e:	f000 fafd 	bl	8009d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	0018      	movs	r0, r3
 8009796:	f000 fb09 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	2201      	movs	r2, #1
 80097a8:	4013      	ands	r3, r2
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d10f      	bne.n	80097ce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	2201      	movs	r2, #1
 80097b6:	4013      	ands	r3, r2
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d108      	bne.n	80097ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2202      	movs	r2, #2
 80097c2:	4252      	negs	r2, r2
 80097c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	0018      	movs	r0, r3
 80097ca:	f7fb f961 	bl	8004a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	2280      	movs	r2, #128	; 0x80
 80097d6:	4013      	ands	r3, r2
 80097d8:	2b80      	cmp	r3, #128	; 0x80
 80097da:	d10f      	bne.n	80097fc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	2280      	movs	r2, #128	; 0x80
 80097e4:	4013      	ands	r3, r2
 80097e6:	2b80      	cmp	r3, #128	; 0x80
 80097e8:	d108      	bne.n	80097fc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2281      	movs	r2, #129	; 0x81
 80097f0:	4252      	negs	r2, r2
 80097f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	0018      	movs	r0, r3
 80097f8:	f001 fa12 	bl	800ac20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691a      	ldr	r2, [r3, #16]
 8009802:	2380      	movs	r3, #128	; 0x80
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	401a      	ands	r2, r3
 8009808:	2380      	movs	r3, #128	; 0x80
 800980a:	005b      	lsls	r3, r3, #1
 800980c:	429a      	cmp	r2, r3
 800980e:	d10e      	bne.n	800982e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	2280      	movs	r2, #128	; 0x80
 8009818:	4013      	ands	r3, r2
 800981a:	2b80      	cmp	r3, #128	; 0x80
 800981c:	d107      	bne.n	800982e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a1c      	ldr	r2, [pc, #112]	; (8009894 <HAL_TIM_IRQHandler+0x260>)
 8009824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	0018      	movs	r0, r3
 800982a:	f001 fa01 	bl	800ac30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2240      	movs	r2, #64	; 0x40
 8009836:	4013      	ands	r3, r2
 8009838:	2b40      	cmp	r3, #64	; 0x40
 800983a:	d10f      	bne.n	800985c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	2240      	movs	r2, #64	; 0x40
 8009844:	4013      	ands	r3, r2
 8009846:	2b40      	cmp	r3, #64	; 0x40
 8009848:	d108      	bne.n	800985c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2241      	movs	r2, #65	; 0x41
 8009850:	4252      	negs	r2, r2
 8009852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	0018      	movs	r0, r3
 8009858:	f000 fab0 	bl	8009dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2220      	movs	r2, #32
 8009864:	4013      	ands	r3, r2
 8009866:	2b20      	cmp	r3, #32
 8009868:	d10f      	bne.n	800988a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	2220      	movs	r2, #32
 8009872:	4013      	ands	r3, r2
 8009874:	2b20      	cmp	r3, #32
 8009876:	d108      	bne.n	800988a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2221      	movs	r2, #33	; 0x21
 800987e:	4252      	negs	r2, r2
 8009880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	0018      	movs	r0, r3
 8009886:	f001 f9c3 	bl	800ac10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800988a:	46c0      	nop			; (mov r8, r8)
 800988c:	46bd      	mov	sp, r7
 800988e:	b002      	add	sp, #8
 8009890:	bd80      	pop	{r7, pc}
 8009892:	46c0      	nop			; (mov r8, r8)
 8009894:	fffffeff 	.word	0xfffffeff

08009898 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098a4:	2317      	movs	r3, #23
 80098a6:	18fb      	adds	r3, r7, r3
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	223c      	movs	r2, #60	; 0x3c
 80098b0:	5c9b      	ldrb	r3, [r3, r2]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d101      	bne.n	80098ba <HAL_TIM_IC_ConfigChannel+0x22>
 80098b6:	2302      	movs	r3, #2
 80098b8:	e08c      	b.n	80099d4 <HAL_TIM_IC_ConfigChannel+0x13c>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	223c      	movs	r2, #60	; 0x3c
 80098be:	2101      	movs	r1, #1
 80098c0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d11b      	bne.n	8009900 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6818      	ldr	r0, [r3, #0]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	6819      	ldr	r1, [r3, #0]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f000 fdb2 	bl	800a440 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	699a      	ldr	r2, [r3, #24]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	210c      	movs	r1, #12
 80098e8:	438a      	bics	r2, r1
 80098ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6999      	ldr	r1, [r3, #24]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	689a      	ldr	r2, [r3, #8]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	619a      	str	r2, [r3, #24]
 80098fe:	e062      	b.n	80099c6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b04      	cmp	r3, #4
 8009904:	d11c      	bne.n	8009940 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6818      	ldr	r0, [r3, #0]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	6819      	ldr	r1, [r3, #0]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	f000 fe19 	bl	800a54c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699a      	ldr	r2, [r3, #24]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	492d      	ldr	r1, [pc, #180]	; (80099dc <HAL_TIM_IC_ConfigChannel+0x144>)
 8009926:	400a      	ands	r2, r1
 8009928:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6999      	ldr	r1, [r3, #24]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	021a      	lsls	r2, r3, #8
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	430a      	orrs	r2, r1
 800993c:	619a      	str	r2, [r3, #24]
 800993e:	e042      	b.n	80099c6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b08      	cmp	r3, #8
 8009944:	d11b      	bne.n	800997e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	6819      	ldr	r1, [r3, #0]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	f000 fe6d 	bl	800a634 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	69da      	ldr	r2, [r3, #28]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	210c      	movs	r1, #12
 8009966:	438a      	bics	r2, r1
 8009968:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	69d9      	ldr	r1, [r3, #28]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	689a      	ldr	r2, [r3, #8]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	61da      	str	r2, [r3, #28]
 800997c:	e023      	b.n	80099c6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b0c      	cmp	r3, #12
 8009982:	d11c      	bne.n	80099be <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6818      	ldr	r0, [r3, #0]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6819      	ldr	r1, [r3, #0]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f000 fe8e 	bl	800a6b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	69da      	ldr	r2, [r3, #28]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	490e      	ldr	r1, [pc, #56]	; (80099dc <HAL_TIM_IC_ConfigChannel+0x144>)
 80099a4:	400a      	ands	r2, r1
 80099a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	69d9      	ldr	r1, [r3, #28]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	021a      	lsls	r2, r3, #8
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	61da      	str	r2, [r3, #28]
 80099bc:	e003      	b.n	80099c6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80099be:	2317      	movs	r3, #23
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	2201      	movs	r2, #1
 80099c4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	223c      	movs	r2, #60	; 0x3c
 80099ca:	2100      	movs	r1, #0
 80099cc:	5499      	strb	r1, [r3, r2]

  return status;
 80099ce:	2317      	movs	r3, #23
 80099d0:	18fb      	adds	r3, r7, r3
 80099d2:	781b      	ldrb	r3, [r3, #0]
}
 80099d4:	0018      	movs	r0, r3
 80099d6:	46bd      	mov	sp, r7
 80099d8:	b006      	add	sp, #24
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	fffff3ff 	.word	0xfffff3ff

080099e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099ec:	2317      	movs	r3, #23
 80099ee:	18fb      	adds	r3, r7, r3
 80099f0:	2200      	movs	r2, #0
 80099f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	223c      	movs	r2, #60	; 0x3c
 80099f8:	5c9b      	ldrb	r3, [r3, r2]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d101      	bne.n	8009a02 <HAL_TIM_PWM_ConfigChannel+0x22>
 80099fe:	2302      	movs	r3, #2
 8009a00:	e0e5      	b.n	8009bce <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	223c      	movs	r2, #60	; 0x3c
 8009a06:	2101      	movs	r1, #1
 8009a08:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b14      	cmp	r3, #20
 8009a0e:	d900      	bls.n	8009a12 <HAL_TIM_PWM_ConfigChannel+0x32>
 8009a10:	e0d1      	b.n	8009bb6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	009a      	lsls	r2, r3, #2
 8009a16:	4b70      	ldr	r3, [pc, #448]	; (8009bd8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8009a18:	18d3      	adds	r3, r2, r3
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	0011      	movs	r1, r2
 8009a26:	0018      	movs	r0, r3
 8009a28:	f000 fa46 	bl	8009eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699a      	ldr	r2, [r3, #24]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2108      	movs	r1, #8
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	699a      	ldr	r2, [r3, #24]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2104      	movs	r1, #4
 8009a48:	438a      	bics	r2, r1
 8009a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6999      	ldr	r1, [r3, #24]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	691a      	ldr	r2, [r3, #16]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	619a      	str	r2, [r3, #24]
      break;
 8009a5e:	e0af      	b.n	8009bc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	0011      	movs	r1, r2
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f000 faaf 	bl	8009fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	699a      	ldr	r2, [r3, #24]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2180      	movs	r1, #128	; 0x80
 8009a7a:	0109      	lsls	r1, r1, #4
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699a      	ldr	r2, [r3, #24]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4954      	ldr	r1, [pc, #336]	; (8009bdc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009a8c:	400a      	ands	r2, r1
 8009a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6999      	ldr	r1, [r3, #24]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	021a      	lsls	r2, r3, #8
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	619a      	str	r2, [r3, #24]
      break;
 8009aa4:	e08c      	b.n	8009bc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	0011      	movs	r1, r2
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f000 fb10 	bl	800a0d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	69da      	ldr	r2, [r3, #28]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2108      	movs	r1, #8
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	69da      	ldr	r2, [r3, #28]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2104      	movs	r1, #4
 8009ad0:	438a      	bics	r2, r1
 8009ad2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	69d9      	ldr	r1, [r3, #28]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	691a      	ldr	r2, [r3, #16]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	61da      	str	r2, [r3, #28]
      break;
 8009ae6:	e06b      	b.n	8009bc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	0011      	movs	r1, r2
 8009af0:	0018      	movs	r0, r3
 8009af2:	f000 fb77 	bl	800a1e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69da      	ldr	r2, [r3, #28]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2180      	movs	r1, #128	; 0x80
 8009b02:	0109      	lsls	r1, r1, #4
 8009b04:	430a      	orrs	r2, r1
 8009b06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	69da      	ldr	r2, [r3, #28]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4932      	ldr	r1, [pc, #200]	; (8009bdc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009b14:	400a      	ands	r2, r1
 8009b16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	69d9      	ldr	r1, [r3, #28]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	021a      	lsls	r2, r3, #8
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	61da      	str	r2, [r3, #28]
      break;
 8009b2c:	e048      	b.n	8009bc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	0011      	movs	r1, r2
 8009b36:	0018      	movs	r0, r3
 8009b38:	f000 fbbe 	bl	800a2b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2108      	movs	r1, #8
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2104      	movs	r1, #4
 8009b58:	438a      	bics	r2, r1
 8009b5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	691a      	ldr	r2, [r3, #16]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b6e:	e027      	b.n	8009bc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	0011      	movs	r1, r2
 8009b78:	0018      	movs	r0, r3
 8009b7a:	f000 fbfd 	bl	800a378 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2180      	movs	r1, #128	; 0x80
 8009b8a:	0109      	lsls	r1, r1, #4
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4910      	ldr	r1, [pc, #64]	; (8009bdc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009b9c:	400a      	ands	r2, r1
 8009b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	021a      	lsls	r2, r3, #8
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009bb4:	e004      	b.n	8009bc0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8009bb6:	2317      	movs	r3, #23
 8009bb8:	18fb      	adds	r3, r7, r3
 8009bba:	2201      	movs	r2, #1
 8009bbc:	701a      	strb	r2, [r3, #0]
      break;
 8009bbe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	223c      	movs	r2, #60	; 0x3c
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	5499      	strb	r1, [r3, r2]

  return status;
 8009bc8:	2317      	movs	r3, #23
 8009bca:	18fb      	adds	r3, r7, r3
 8009bcc:	781b      	ldrb	r3, [r3, #0]
}
 8009bce:	0018      	movs	r0, r3
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	b006      	add	sp, #24
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	46c0      	nop			; (mov r8, r8)
 8009bd8:	0801b710 	.word	0x0801b710
 8009bdc:	fffffbff 	.word	0xfffffbff

08009be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bea:	230f      	movs	r3, #15
 8009bec:	18fb      	adds	r3, r7, r3
 8009bee:	2200      	movs	r2, #0
 8009bf0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	223c      	movs	r2, #60	; 0x3c
 8009bf6:	5c9b      	ldrb	r3, [r3, r2]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d101      	bne.n	8009c00 <HAL_TIM_ConfigClockSource+0x20>
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	e0bc      	b.n	8009d7a <HAL_TIM_ConfigClockSource+0x19a>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	223c      	movs	r2, #60	; 0x3c
 8009c04:	2101      	movs	r1, #1
 8009c06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	223d      	movs	r2, #61	; 0x3d
 8009c0c:	2102      	movs	r1, #2
 8009c0e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	4a5a      	ldr	r2, [pc, #360]	; (8009d84 <HAL_TIM_ConfigClockSource+0x1a4>)
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	4a59      	ldr	r2, [pc, #356]	; (8009d88 <HAL_TIM_ConfigClockSource+0x1a8>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2280      	movs	r2, #128	; 0x80
 8009c36:	0192      	lsls	r2, r2, #6
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d040      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0xde>
 8009c3c:	2280      	movs	r2, #128	; 0x80
 8009c3e:	0192      	lsls	r2, r2, #6
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d900      	bls.n	8009c46 <HAL_TIM_ConfigClockSource+0x66>
 8009c44:	e088      	b.n	8009d58 <HAL_TIM_ConfigClockSource+0x178>
 8009c46:	2280      	movs	r2, #128	; 0x80
 8009c48:	0152      	lsls	r2, r2, #5
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d100      	bne.n	8009c50 <HAL_TIM_ConfigClockSource+0x70>
 8009c4e:	e088      	b.n	8009d62 <HAL_TIM_ConfigClockSource+0x182>
 8009c50:	2280      	movs	r2, #128	; 0x80
 8009c52:	0152      	lsls	r2, r2, #5
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d900      	bls.n	8009c5a <HAL_TIM_ConfigClockSource+0x7a>
 8009c58:	e07e      	b.n	8009d58 <HAL_TIM_ConfigClockSource+0x178>
 8009c5a:	2b70      	cmp	r3, #112	; 0x70
 8009c5c:	d018      	beq.n	8009c90 <HAL_TIM_ConfigClockSource+0xb0>
 8009c5e:	d900      	bls.n	8009c62 <HAL_TIM_ConfigClockSource+0x82>
 8009c60:	e07a      	b.n	8009d58 <HAL_TIM_ConfigClockSource+0x178>
 8009c62:	2b60      	cmp	r3, #96	; 0x60
 8009c64:	d04f      	beq.n	8009d06 <HAL_TIM_ConfigClockSource+0x126>
 8009c66:	d900      	bls.n	8009c6a <HAL_TIM_ConfigClockSource+0x8a>
 8009c68:	e076      	b.n	8009d58 <HAL_TIM_ConfigClockSource+0x178>
 8009c6a:	2b50      	cmp	r3, #80	; 0x50
 8009c6c:	d03b      	beq.n	8009ce6 <HAL_TIM_ConfigClockSource+0x106>
 8009c6e:	d900      	bls.n	8009c72 <HAL_TIM_ConfigClockSource+0x92>
 8009c70:	e072      	b.n	8009d58 <HAL_TIM_ConfigClockSource+0x178>
 8009c72:	2b40      	cmp	r3, #64	; 0x40
 8009c74:	d057      	beq.n	8009d26 <HAL_TIM_ConfigClockSource+0x146>
 8009c76:	d900      	bls.n	8009c7a <HAL_TIM_ConfigClockSource+0x9a>
 8009c78:	e06e      	b.n	8009d58 <HAL_TIM_ConfigClockSource+0x178>
 8009c7a:	2b30      	cmp	r3, #48	; 0x30
 8009c7c:	d063      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x166>
 8009c7e:	d86b      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x178>
 8009c80:	2b20      	cmp	r3, #32
 8009c82:	d060      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x166>
 8009c84:	d868      	bhi.n	8009d58 <HAL_TIM_ConfigClockSource+0x178>
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d05d      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x166>
 8009c8a:	2b10      	cmp	r3, #16
 8009c8c:	d05b      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x166>
 8009c8e:	e063      	b.n	8009d58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6818      	ldr	r0, [r3, #0]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	6899      	ldr	r1, [r3, #8]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f000 fd6a 	bl	800a778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2277      	movs	r2, #119	; 0x77
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	609a      	str	r2, [r3, #8]
      break;
 8009cbc:	e052      	b.n	8009d64 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	6899      	ldr	r1, [r3, #8]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f000 fd53 	bl	800a778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2180      	movs	r1, #128	; 0x80
 8009cde:	01c9      	lsls	r1, r1, #7
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	609a      	str	r2, [r3, #8]
      break;
 8009ce4:	e03e      	b.n	8009d64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6818      	ldr	r0, [r3, #0]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	6859      	ldr	r1, [r3, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	001a      	movs	r2, r3
 8009cf4:	f000 fbfc 	bl	800a4f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2150      	movs	r1, #80	; 0x50
 8009cfe:	0018      	movs	r0, r3
 8009d00:	f000 fd1e 	bl	800a740 <TIM_ITRx_SetConfig>
      break;
 8009d04:	e02e      	b.n	8009d64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6818      	ldr	r0, [r3, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	6859      	ldr	r1, [r3, #4]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	001a      	movs	r2, r3
 8009d14:	f000 fc5c 	bl	800a5d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2160      	movs	r1, #96	; 0x60
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f000 fd0e 	bl	800a740 <TIM_ITRx_SetConfig>
      break;
 8009d24:	e01e      	b.n	8009d64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6818      	ldr	r0, [r3, #0]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	6859      	ldr	r1, [r3, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	001a      	movs	r2, r3
 8009d34:	f000 fbdc 	bl	800a4f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2140      	movs	r1, #64	; 0x40
 8009d3e:	0018      	movs	r0, r3
 8009d40:	f000 fcfe 	bl	800a740 <TIM_ITRx_SetConfig>
      break;
 8009d44:	e00e      	b.n	8009d64 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	0019      	movs	r1, r3
 8009d50:	0010      	movs	r0, r2
 8009d52:	f000 fcf5 	bl	800a740 <TIM_ITRx_SetConfig>
      break;
 8009d56:	e005      	b.n	8009d64 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8009d58:	230f      	movs	r3, #15
 8009d5a:	18fb      	adds	r3, r7, r3
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	701a      	strb	r2, [r3, #0]
      break;
 8009d60:	e000      	b.n	8009d64 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8009d62:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	223d      	movs	r2, #61	; 0x3d
 8009d68:	2101      	movs	r1, #1
 8009d6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	223c      	movs	r2, #60	; 0x3c
 8009d70:	2100      	movs	r1, #0
 8009d72:	5499      	strb	r1, [r3, r2]

  return status;
 8009d74:	230f      	movs	r3, #15
 8009d76:	18fb      	adds	r3, r7, r3
 8009d78:	781b      	ldrb	r3, [r3, #0]
}
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	b004      	add	sp, #16
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	46c0      	nop			; (mov r8, r8)
 8009d84:	ffceff88 	.word	0xffceff88
 8009d88:	ffff00ff 	.word	0xffff00ff

08009d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d94:	46c0      	nop			; (mov r8, r8)
 8009d96:	46bd      	mov	sp, r7
 8009d98:	b002      	add	sp, #8
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009da4:	46c0      	nop			; (mov r8, r8)
 8009da6:	46bd      	mov	sp, r7
 8009da8:	b002      	add	sp, #8
 8009daa:	bd80      	pop	{r7, pc}

08009dac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009db4:	46c0      	nop			; (mov r8, r8)
 8009db6:	46bd      	mov	sp, r7
 8009db8:	b002      	add	sp, #8
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dc4:	46c0      	nop			; (mov r8, r8)
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	b002      	add	sp, #8
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a2f      	ldr	r2, [pc, #188]	; (8009e9c <TIM_Base_SetConfig+0xd0>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d003      	beq.n	8009dec <TIM_Base_SetConfig+0x20>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a2e      	ldr	r2, [pc, #184]	; (8009ea0 <TIM_Base_SetConfig+0xd4>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d108      	bne.n	8009dfe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2270      	movs	r2, #112	; 0x70
 8009df0:	4393      	bics	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a26      	ldr	r2, [pc, #152]	; (8009e9c <TIM_Base_SetConfig+0xd0>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d013      	beq.n	8009e2e <TIM_Base_SetConfig+0x62>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a25      	ldr	r2, [pc, #148]	; (8009ea0 <TIM_Base_SetConfig+0xd4>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d00f      	beq.n	8009e2e <TIM_Base_SetConfig+0x62>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a24      	ldr	r2, [pc, #144]	; (8009ea4 <TIM_Base_SetConfig+0xd8>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00b      	beq.n	8009e2e <TIM_Base_SetConfig+0x62>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a23      	ldr	r2, [pc, #140]	; (8009ea8 <TIM_Base_SetConfig+0xdc>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d007      	beq.n	8009e2e <TIM_Base_SetConfig+0x62>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a22      	ldr	r2, [pc, #136]	; (8009eac <TIM_Base_SetConfig+0xe0>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d003      	beq.n	8009e2e <TIM_Base_SetConfig+0x62>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a21      	ldr	r2, [pc, #132]	; (8009eb0 <TIM_Base_SetConfig+0xe4>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d108      	bne.n	8009e40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4a20      	ldr	r2, [pc, #128]	; (8009eb4 <TIM_Base_SetConfig+0xe8>)
 8009e32:	4013      	ands	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2280      	movs	r2, #128	; 0x80
 8009e44:	4393      	bics	r3, r2
 8009e46:	001a      	movs	r2, r3
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	689a      	ldr	r2, [r3, #8]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a0c      	ldr	r2, [pc, #48]	; (8009e9c <TIM_Base_SetConfig+0xd0>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d00b      	beq.n	8009e86 <TIM_Base_SetConfig+0xba>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a0d      	ldr	r2, [pc, #52]	; (8009ea8 <TIM_Base_SetConfig+0xdc>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d007      	beq.n	8009e86 <TIM_Base_SetConfig+0xba>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a0c      	ldr	r2, [pc, #48]	; (8009eac <TIM_Base_SetConfig+0xe0>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d003      	beq.n	8009e86 <TIM_Base_SetConfig+0xba>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a0b      	ldr	r2, [pc, #44]	; (8009eb0 <TIM_Base_SetConfig+0xe4>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d103      	bne.n	8009e8e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	691a      	ldr	r2, [r3, #16]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	615a      	str	r2, [r3, #20]
}
 8009e94:	46c0      	nop			; (mov r8, r8)
 8009e96:	46bd      	mov	sp, r7
 8009e98:	b004      	add	sp, #16
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	40012c00 	.word	0x40012c00
 8009ea0:	40000400 	.word	0x40000400
 8009ea4:	40002000 	.word	0x40002000
 8009ea8:	40014000 	.word	0x40014000
 8009eac:	40014400 	.word	0x40014400
 8009eb0:	40014800 	.word	0x40014800
 8009eb4:	fffffcff 	.word	0xfffffcff

08009eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	4393      	bics	r3, r2
 8009eca:	001a      	movs	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a1b      	ldr	r3, [r3, #32]
 8009ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4a32      	ldr	r2, [pc, #200]	; (8009fb0 <TIM_OC1_SetConfig+0xf8>)
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2203      	movs	r2, #3
 8009eee:	4393      	bics	r3, r2
 8009ef0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	2202      	movs	r2, #2
 8009f00:	4393      	bics	r3, r2
 8009f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a28      	ldr	r2, [pc, #160]	; (8009fb4 <TIM_OC1_SetConfig+0xfc>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00b      	beq.n	8009f2e <TIM_OC1_SetConfig+0x76>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a27      	ldr	r2, [pc, #156]	; (8009fb8 <TIM_OC1_SetConfig+0x100>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d007      	beq.n	8009f2e <TIM_OC1_SetConfig+0x76>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a26      	ldr	r2, [pc, #152]	; (8009fbc <TIM_OC1_SetConfig+0x104>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d003      	beq.n	8009f2e <TIM_OC1_SetConfig+0x76>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a25      	ldr	r2, [pc, #148]	; (8009fc0 <TIM_OC1_SetConfig+0x108>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d10c      	bne.n	8009f48 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2208      	movs	r2, #8
 8009f32:	4393      	bics	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	2204      	movs	r2, #4
 8009f44:	4393      	bics	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a1a      	ldr	r2, [pc, #104]	; (8009fb4 <TIM_OC1_SetConfig+0xfc>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d00b      	beq.n	8009f68 <TIM_OC1_SetConfig+0xb0>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a19      	ldr	r2, [pc, #100]	; (8009fb8 <TIM_OC1_SetConfig+0x100>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d007      	beq.n	8009f68 <TIM_OC1_SetConfig+0xb0>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a18      	ldr	r2, [pc, #96]	; (8009fbc <TIM_OC1_SetConfig+0x104>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d003      	beq.n	8009f68 <TIM_OC1_SetConfig+0xb0>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a17      	ldr	r2, [pc, #92]	; (8009fc0 <TIM_OC1_SetConfig+0x108>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d111      	bne.n	8009f8c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4a16      	ldr	r2, [pc, #88]	; (8009fc4 <TIM_OC1_SetConfig+0x10c>)
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	4a15      	ldr	r2, [pc, #84]	; (8009fc8 <TIM_OC1_SetConfig+0x110>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	621a      	str	r2, [r3, #32]
}
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	b006      	add	sp, #24
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	46c0      	nop			; (mov r8, r8)
 8009fb0:	fffeff8f 	.word	0xfffeff8f
 8009fb4:	40012c00 	.word	0x40012c00
 8009fb8:	40014000 	.word	0x40014000
 8009fbc:	40014400 	.word	0x40014400
 8009fc0:	40014800 	.word	0x40014800
 8009fc4:	fffffeff 	.word	0xfffffeff
 8009fc8:	fffffdff 	.word	0xfffffdff

08009fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	2210      	movs	r2, #16
 8009fdc:	4393      	bics	r3, r2
 8009fde:	001a      	movs	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	4a2e      	ldr	r2, [pc, #184]	; (800a0b4 <TIM_OC2_SetConfig+0xe8>)
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	4a2d      	ldr	r2, [pc, #180]	; (800a0b8 <TIM_OC2_SetConfig+0xec>)
 800a002:	4013      	ands	r3, r2
 800a004:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	021b      	lsls	r3, r3, #8
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2220      	movs	r2, #32
 800a016:	4393      	bics	r3, r2
 800a018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	4313      	orrs	r3, r2
 800a024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a24      	ldr	r2, [pc, #144]	; (800a0bc <TIM_OC2_SetConfig+0xf0>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d10d      	bne.n	800a04a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2280      	movs	r2, #128	; 0x80
 800a032:	4393      	bics	r3, r2
 800a034:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	4313      	orrs	r3, r2
 800a040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2240      	movs	r2, #64	; 0x40
 800a046:	4393      	bics	r3, r2
 800a048:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a1b      	ldr	r2, [pc, #108]	; (800a0bc <TIM_OC2_SetConfig+0xf0>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d00b      	beq.n	800a06a <TIM_OC2_SetConfig+0x9e>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a1a      	ldr	r2, [pc, #104]	; (800a0c0 <TIM_OC2_SetConfig+0xf4>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d007      	beq.n	800a06a <TIM_OC2_SetConfig+0x9e>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a19      	ldr	r2, [pc, #100]	; (800a0c4 <TIM_OC2_SetConfig+0xf8>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d003      	beq.n	800a06a <TIM_OC2_SetConfig+0x9e>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a18      	ldr	r2, [pc, #96]	; (800a0c8 <TIM_OC2_SetConfig+0xfc>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d113      	bne.n	800a092 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	4a17      	ldr	r2, [pc, #92]	; (800a0cc <TIM_OC2_SetConfig+0x100>)
 800a06e:	4013      	ands	r3, r2
 800a070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	4a16      	ldr	r2, [pc, #88]	; (800a0d0 <TIM_OC2_SetConfig+0x104>)
 800a076:	4013      	ands	r3, r2
 800a078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	4313      	orrs	r3, r2
 800a084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	4313      	orrs	r3, r2
 800a090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	621a      	str	r2, [r3, #32]
}
 800a0ac:	46c0      	nop			; (mov r8, r8)
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	b006      	add	sp, #24
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	feff8fff 	.word	0xfeff8fff
 800a0b8:	fffffcff 	.word	0xfffffcff
 800a0bc:	40012c00 	.word	0x40012c00
 800a0c0:	40014000 	.word	0x40014000
 800a0c4:	40014400 	.word	0x40014400
 800a0c8:	40014800 	.word	0x40014800
 800a0cc:	fffffbff 	.word	0xfffffbff
 800a0d0:	fffff7ff 	.word	0xfffff7ff

0800a0d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	4a35      	ldr	r2, [pc, #212]	; (800a1b8 <TIM_OC3_SetConfig+0xe4>)
 800a0e4:	401a      	ands	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4a2f      	ldr	r2, [pc, #188]	; (800a1bc <TIM_OC3_SetConfig+0xe8>)
 800a100:	4013      	ands	r3, r2
 800a102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2203      	movs	r2, #3
 800a108:	4393      	bics	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	4a29      	ldr	r2, [pc, #164]	; (800a1c0 <TIM_OC3_SetConfig+0xec>)
 800a11a:	4013      	ands	r3, r2
 800a11c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	021b      	lsls	r3, r3, #8
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	4313      	orrs	r3, r2
 800a128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a25      	ldr	r2, [pc, #148]	; (800a1c4 <TIM_OC3_SetConfig+0xf0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d10d      	bne.n	800a14e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	4a24      	ldr	r2, [pc, #144]	; (800a1c8 <TIM_OC3_SetConfig+0xf4>)
 800a136:	4013      	ands	r3, r2
 800a138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	021b      	lsls	r3, r3, #8
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	4313      	orrs	r3, r2
 800a144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	4a20      	ldr	r2, [pc, #128]	; (800a1cc <TIM_OC3_SetConfig+0xf8>)
 800a14a:	4013      	ands	r3, r2
 800a14c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a1c      	ldr	r2, [pc, #112]	; (800a1c4 <TIM_OC3_SetConfig+0xf0>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d00b      	beq.n	800a16e <TIM_OC3_SetConfig+0x9a>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a1d      	ldr	r2, [pc, #116]	; (800a1d0 <TIM_OC3_SetConfig+0xfc>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d007      	beq.n	800a16e <TIM_OC3_SetConfig+0x9a>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a1c      	ldr	r2, [pc, #112]	; (800a1d4 <TIM_OC3_SetConfig+0x100>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d003      	beq.n	800a16e <TIM_OC3_SetConfig+0x9a>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a1b      	ldr	r2, [pc, #108]	; (800a1d8 <TIM_OC3_SetConfig+0x104>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d113      	bne.n	800a196 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	4a1a      	ldr	r2, [pc, #104]	; (800a1dc <TIM_OC3_SetConfig+0x108>)
 800a172:	4013      	ands	r3, r2
 800a174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	4a19      	ldr	r2, [pc, #100]	; (800a1e0 <TIM_OC3_SetConfig+0x10c>)
 800a17a:	4013      	ands	r3, r2
 800a17c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	011b      	lsls	r3, r3, #4
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	4313      	orrs	r3, r2
 800a188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	4313      	orrs	r3, r2
 800a194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	621a      	str	r2, [r3, #32]
}
 800a1b0:	46c0      	nop			; (mov r8, r8)
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	b006      	add	sp, #24
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	fffffeff 	.word	0xfffffeff
 800a1bc:	fffeff8f 	.word	0xfffeff8f
 800a1c0:	fffffdff 	.word	0xfffffdff
 800a1c4:	40012c00 	.word	0x40012c00
 800a1c8:	fffff7ff 	.word	0xfffff7ff
 800a1cc:	fffffbff 	.word	0xfffffbff
 800a1d0:	40014000 	.word	0x40014000
 800a1d4:	40014400 	.word	0x40014400
 800a1d8:	40014800 	.word	0x40014800
 800a1dc:	ffffefff 	.word	0xffffefff
 800a1e0:	ffffdfff 	.word	0xffffdfff

0800a1e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	4a28      	ldr	r2, [pc, #160]	; (800a294 <TIM_OC4_SetConfig+0xb0>)
 800a1f4:	401a      	ands	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4a22      	ldr	r2, [pc, #136]	; (800a298 <TIM_OC4_SetConfig+0xb4>)
 800a210:	4013      	ands	r3, r2
 800a212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	4a21      	ldr	r2, [pc, #132]	; (800a29c <TIM_OC4_SetConfig+0xb8>)
 800a218:	4013      	ands	r3, r2
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	021b      	lsls	r3, r3, #8
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	4313      	orrs	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	4a1d      	ldr	r2, [pc, #116]	; (800a2a0 <TIM_OC4_SetConfig+0xbc>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	031b      	lsls	r3, r3, #12
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	4313      	orrs	r3, r2
 800a23a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a19      	ldr	r2, [pc, #100]	; (800a2a4 <TIM_OC4_SetConfig+0xc0>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d00b      	beq.n	800a25c <TIM_OC4_SetConfig+0x78>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a18      	ldr	r2, [pc, #96]	; (800a2a8 <TIM_OC4_SetConfig+0xc4>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d007      	beq.n	800a25c <TIM_OC4_SetConfig+0x78>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a17      	ldr	r2, [pc, #92]	; (800a2ac <TIM_OC4_SetConfig+0xc8>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d003      	beq.n	800a25c <TIM_OC4_SetConfig+0x78>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a16      	ldr	r2, [pc, #88]	; (800a2b0 <TIM_OC4_SetConfig+0xcc>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d109      	bne.n	800a270 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	4a15      	ldr	r2, [pc, #84]	; (800a2b4 <TIM_OC4_SetConfig+0xd0>)
 800a260:	4013      	ands	r3, r2
 800a262:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	019b      	lsls	r3, r3, #6
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	621a      	str	r2, [r3, #32]
}
 800a28a:	46c0      	nop			; (mov r8, r8)
 800a28c:	46bd      	mov	sp, r7
 800a28e:	b006      	add	sp, #24
 800a290:	bd80      	pop	{r7, pc}
 800a292:	46c0      	nop			; (mov r8, r8)
 800a294:	ffffefff 	.word	0xffffefff
 800a298:	feff8fff 	.word	0xfeff8fff
 800a29c:	fffffcff 	.word	0xfffffcff
 800a2a0:	ffffdfff 	.word	0xffffdfff
 800a2a4:	40012c00 	.word	0x40012c00
 800a2a8:	40014000 	.word	0x40014000
 800a2ac:	40014400 	.word	0x40014400
 800a2b0:	40014800 	.word	0x40014800
 800a2b4:	ffffbfff 	.word	0xffffbfff

0800a2b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	4a25      	ldr	r2, [pc, #148]	; (800a35c <TIM_OC5_SetConfig+0xa4>)
 800a2c8:	401a      	ands	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4a1f      	ldr	r2, [pc, #124]	; (800a360 <TIM_OC5_SetConfig+0xa8>)
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	4a1b      	ldr	r2, [pc, #108]	; (800a364 <TIM_OC5_SetConfig+0xac>)
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	041b      	lsls	r3, r3, #16
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	4313      	orrs	r3, r2
 800a304:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a17      	ldr	r2, [pc, #92]	; (800a368 <TIM_OC5_SetConfig+0xb0>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d00b      	beq.n	800a326 <TIM_OC5_SetConfig+0x6e>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a16      	ldr	r2, [pc, #88]	; (800a36c <TIM_OC5_SetConfig+0xb4>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d007      	beq.n	800a326 <TIM_OC5_SetConfig+0x6e>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a15      	ldr	r2, [pc, #84]	; (800a370 <TIM_OC5_SetConfig+0xb8>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d003      	beq.n	800a326 <TIM_OC5_SetConfig+0x6e>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a14      	ldr	r2, [pc, #80]	; (800a374 <TIM_OC5_SetConfig+0xbc>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d109      	bne.n	800a33a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	4a0c      	ldr	r2, [pc, #48]	; (800a35c <TIM_OC5_SetConfig+0xa4>)
 800a32a:	4013      	ands	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	021b      	lsls	r3, r3, #8
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	4313      	orrs	r3, r2
 800a338:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	621a      	str	r2, [r3, #32]
}
 800a354:	46c0      	nop			; (mov r8, r8)
 800a356:	46bd      	mov	sp, r7
 800a358:	b006      	add	sp, #24
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	fffeffff 	.word	0xfffeffff
 800a360:	fffeff8f 	.word	0xfffeff8f
 800a364:	fffdffff 	.word	0xfffdffff
 800a368:	40012c00 	.word	0x40012c00
 800a36c:	40014000 	.word	0x40014000
 800a370:	40014400 	.word	0x40014400
 800a374:	40014800 	.word	0x40014800

0800a378 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	4a26      	ldr	r2, [pc, #152]	; (800a420 <TIM_OC6_SetConfig+0xa8>)
 800a388:	401a      	ands	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4a20      	ldr	r2, [pc, #128]	; (800a424 <TIM_OC6_SetConfig+0xac>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	4a1c      	ldr	r2, [pc, #112]	; (800a428 <TIM_OC6_SetConfig+0xb0>)
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	051b      	lsls	r3, r3, #20
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a18      	ldr	r2, [pc, #96]	; (800a42c <TIM_OC6_SetConfig+0xb4>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d00b      	beq.n	800a3e8 <TIM_OC6_SetConfig+0x70>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a17      	ldr	r2, [pc, #92]	; (800a430 <TIM_OC6_SetConfig+0xb8>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d007      	beq.n	800a3e8 <TIM_OC6_SetConfig+0x70>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a16      	ldr	r2, [pc, #88]	; (800a434 <TIM_OC6_SetConfig+0xbc>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d003      	beq.n	800a3e8 <TIM_OC6_SetConfig+0x70>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a15      	ldr	r2, [pc, #84]	; (800a438 <TIM_OC6_SetConfig+0xc0>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d109      	bne.n	800a3fc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	4a14      	ldr	r2, [pc, #80]	; (800a43c <TIM_OC6_SetConfig+0xc4>)
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	029b      	lsls	r3, r3, #10
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	621a      	str	r2, [r3, #32]
}
 800a416:	46c0      	nop			; (mov r8, r8)
 800a418:	46bd      	mov	sp, r7
 800a41a:	b006      	add	sp, #24
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	46c0      	nop			; (mov r8, r8)
 800a420:	ffefffff 	.word	0xffefffff
 800a424:	feff8fff 	.word	0xfeff8fff
 800a428:	ffdfffff 	.word	0xffdfffff
 800a42c:	40012c00 	.word	0x40012c00
 800a430:	40014000 	.word	0x40014000
 800a434:	40014400 	.word	0x40014400
 800a438:	40014800 	.word	0x40014800
 800a43c:	fffbffff 	.word	0xfffbffff

0800a440 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	2201      	movs	r2, #1
 800a454:	4393      	bics	r3, r2
 800a456:	001a      	movs	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4a1e      	ldr	r2, [pc, #120]	; (800a4e4 <TIM_TI1_SetConfig+0xa4>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d007      	beq.n	800a480 <TIM_TI1_SetConfig+0x40>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4a1d      	ldr	r2, [pc, #116]	; (800a4e8 <TIM_TI1_SetConfig+0xa8>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d003      	beq.n	800a480 <TIM_TI1_SetConfig+0x40>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	4a1c      	ldr	r2, [pc, #112]	; (800a4ec <TIM_TI1_SetConfig+0xac>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d101      	bne.n	800a484 <TIM_TI1_SetConfig+0x44>
 800a480:	2301      	movs	r3, #1
 800a482:	e000      	b.n	800a486 <TIM_TI1_SetConfig+0x46>
 800a484:	2300      	movs	r3, #0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d008      	beq.n	800a49c <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2203      	movs	r2, #3
 800a48e:	4393      	bics	r3, r2
 800a490:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4313      	orrs	r3, r2
 800a498:	617b      	str	r3, [r7, #20]
 800a49a:	e003      	b.n	800a4a4 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	22f0      	movs	r2, #240	; 0xf0
 800a4a8:	4393      	bics	r3, r2
 800a4aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	011b      	lsls	r3, r3, #4
 800a4b0:	22ff      	movs	r2, #255	; 0xff
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	220a      	movs	r2, #10
 800a4be:	4393      	bics	r3, r2
 800a4c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	220a      	movs	r2, #10
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	697a      	ldr	r2, [r7, #20]
 800a4d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	621a      	str	r2, [r3, #32]
}
 800a4da:	46c0      	nop			; (mov r8, r8)
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	b006      	add	sp, #24
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	46c0      	nop			; (mov r8, r8)
 800a4e4:	40012c00 	.word	0x40012c00
 800a4e8:	40000400 	.word	0x40000400
 800a4ec:	40014000 	.word	0x40014000

0800a4f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	2201      	movs	r2, #1
 800a508:	4393      	bics	r3, r2
 800a50a:	001a      	movs	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	22f0      	movs	r2, #240	; 0xf0
 800a51a:	4393      	bics	r3, r2
 800a51c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	011b      	lsls	r3, r3, #4
 800a522:	693a      	ldr	r2, [r7, #16]
 800a524:	4313      	orrs	r3, r2
 800a526:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	220a      	movs	r2, #10
 800a52c:	4393      	bics	r3, r2
 800a52e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	4313      	orrs	r3, r2
 800a536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	621a      	str	r2, [r3, #32]
}
 800a544:	46c0      	nop			; (mov r8, r8)
 800a546:	46bd      	mov	sp, r7
 800a548:	b006      	add	sp, #24
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	2210      	movs	r2, #16
 800a560:	4393      	bics	r3, r2
 800a562:	001a      	movs	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	4a14      	ldr	r2, [pc, #80]	; (800a5c8 <TIM_TI2_SetConfig+0x7c>)
 800a578:	4013      	ands	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	021b      	lsls	r3, r3, #8
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	4313      	orrs	r3, r2
 800a584:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	4a10      	ldr	r2, [pc, #64]	; (800a5cc <TIM_TI2_SetConfig+0x80>)
 800a58a:	4013      	ands	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	031b      	lsls	r3, r3, #12
 800a592:	041b      	lsls	r3, r3, #16
 800a594:	0c1b      	lsrs	r3, r3, #16
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	4313      	orrs	r3, r2
 800a59a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	22a0      	movs	r2, #160	; 0xa0
 800a5a0:	4393      	bics	r3, r2
 800a5a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	011b      	lsls	r3, r3, #4
 800a5a8:	22a0      	movs	r2, #160	; 0xa0
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	621a      	str	r2, [r3, #32]
}
 800a5be:	46c0      	nop			; (mov r8, r8)
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	b006      	add	sp, #24
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	fffffcff 	.word	0xfffffcff
 800a5cc:	ffff0fff 	.word	0xffff0fff

0800a5d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	2210      	movs	r2, #16
 800a5e2:	4393      	bics	r3, r2
 800a5e4:	001a      	movs	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6a1b      	ldr	r3, [r3, #32]
 800a5f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	4a0d      	ldr	r2, [pc, #52]	; (800a630 <TIM_TI2_ConfigInputStage+0x60>)
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	031b      	lsls	r3, r3, #12
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	4313      	orrs	r3, r2
 800a606:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	22a0      	movs	r2, #160	; 0xa0
 800a60c:	4393      	bics	r3, r2
 800a60e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	011b      	lsls	r3, r3, #4
 800a614:	693a      	ldr	r2, [r7, #16]
 800a616:	4313      	orrs	r3, r2
 800a618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	621a      	str	r2, [r3, #32]
}
 800a626:	46c0      	nop			; (mov r8, r8)
 800a628:	46bd      	mov	sp, r7
 800a62a:	b006      	add	sp, #24
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	46c0      	nop			; (mov r8, r8)
 800a630:	ffff0fff 	.word	0xffff0fff

0800a634 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
 800a640:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	4a19      	ldr	r2, [pc, #100]	; (800a6ac <TIM_TI3_SetConfig+0x78>)
 800a648:	401a      	ands	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	69db      	ldr	r3, [r3, #28]
 800a652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6a1b      	ldr	r3, [r3, #32]
 800a658:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2203      	movs	r2, #3
 800a65e:	4393      	bics	r3, r2
 800a660:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4313      	orrs	r3, r2
 800a668:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	22f0      	movs	r2, #240	; 0xf0
 800a66e:	4393      	bics	r3, r2
 800a670:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	011b      	lsls	r3, r3, #4
 800a676:	22ff      	movs	r2, #255	; 0xff
 800a678:	4013      	ands	r3, r2
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	4a0b      	ldr	r2, [pc, #44]	; (800a6b0 <TIM_TI3_SetConfig+0x7c>)
 800a684:	4013      	ands	r3, r2
 800a686:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	021a      	lsls	r2, r3, #8
 800a68c:	23a0      	movs	r3, #160	; 0xa0
 800a68e:	011b      	lsls	r3, r3, #4
 800a690:	4013      	ands	r3, r2
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	4313      	orrs	r3, r2
 800a696:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	621a      	str	r2, [r3, #32]
}
 800a6a4:	46c0      	nop			; (mov r8, r8)
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	b006      	add	sp, #24
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	fffffeff 	.word	0xfffffeff
 800a6b0:	fffff5ff 	.word	0xfffff5ff

0800a6b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	4a1a      	ldr	r2, [pc, #104]	; (800a730 <TIM_TI4_SetConfig+0x7c>)
 800a6c8:	401a      	ands	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	4a15      	ldr	r2, [pc, #84]	; (800a734 <TIM_TI4_SetConfig+0x80>)
 800a6de:	4013      	ands	r3, r2
 800a6e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	021b      	lsls	r3, r3, #8
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	4a12      	ldr	r2, [pc, #72]	; (800a738 <TIM_TI4_SetConfig+0x84>)
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	031b      	lsls	r3, r3, #12
 800a6f8:	041b      	lsls	r3, r3, #16
 800a6fa:	0c1b      	lsrs	r3, r3, #16
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	4a0d      	ldr	r2, [pc, #52]	; (800a73c <TIM_TI4_SetConfig+0x88>)
 800a706:	4013      	ands	r3, r2
 800a708:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	031a      	lsls	r2, r3, #12
 800a70e:	23a0      	movs	r3, #160	; 0xa0
 800a710:	021b      	lsls	r3, r3, #8
 800a712:	4013      	ands	r3, r2
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	4313      	orrs	r3, r2
 800a718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	621a      	str	r2, [r3, #32]
}
 800a726:	46c0      	nop			; (mov r8, r8)
 800a728:	46bd      	mov	sp, r7
 800a72a:	b006      	add	sp, #24
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	46c0      	nop			; (mov r8, r8)
 800a730:	ffffefff 	.word	0xffffefff
 800a734:	fffffcff 	.word	0xfffffcff
 800a738:	ffff0fff 	.word	0xffff0fff
 800a73c:	ffff5fff 	.word	0xffff5fff

0800a740 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4a08      	ldr	r2, [pc, #32]	; (800a774 <TIM_ITRx_SetConfig+0x34>)
 800a754:	4013      	ands	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	2207      	movs	r2, #7
 800a760:	4313      	orrs	r3, r2
 800a762:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	609a      	str	r2, [r3, #8]
}
 800a76a:	46c0      	nop			; (mov r8, r8)
 800a76c:	46bd      	mov	sp, r7
 800a76e:	b004      	add	sp, #16
 800a770:	bd80      	pop	{r7, pc}
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	ffcfff8f 	.word	0xffcfff8f

0800a778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	4a09      	ldr	r2, [pc, #36]	; (800a7b4 <TIM_ETR_SetConfig+0x3c>)
 800a790:	4013      	ands	r3, r2
 800a792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	021a      	lsls	r2, r3, #8
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	431a      	orrs	r2, r3
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	609a      	str	r2, [r3, #8]
}
 800a7ac:	46c0      	nop			; (mov r8, r8)
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	b006      	add	sp, #24
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	ffff00ff 	.word	0xffff00ff

0800a7b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	221f      	movs	r2, #31
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	409a      	lsls	r2, r3
 800a7ce:	0013      	movs	r3, r2
 800a7d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	43d2      	mvns	r2, r2
 800a7da:	401a      	ands	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6a1a      	ldr	r2, [r3, #32]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	211f      	movs	r1, #31
 800a7e8:	400b      	ands	r3, r1
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4099      	lsls	r1, r3
 800a7ee:	000b      	movs	r3, r1
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	621a      	str	r2, [r3, #32]
}
 800a7f6:	46c0      	nop			; (mov r8, r8)
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	b006      	add	sp, #24
 800a7fc:	bd80      	pop	{r7, pc}
	...

0800a800 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d108      	bne.n	800a822 <HAL_TIMEx_PWMN_Start+0x22>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2244      	movs	r2, #68	; 0x44
 800a814:	5c9b      	ldrb	r3, [r3, r2]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	3b01      	subs	r3, #1
 800a81a:	1e5a      	subs	r2, r3, #1
 800a81c:	4193      	sbcs	r3, r2
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	e01f      	b.n	800a862 <HAL_TIMEx_PWMN_Start+0x62>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b04      	cmp	r3, #4
 800a826:	d108      	bne.n	800a83a <HAL_TIMEx_PWMN_Start+0x3a>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2245      	movs	r2, #69	; 0x45
 800a82c:	5c9b      	ldrb	r3, [r3, r2]
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	3b01      	subs	r3, #1
 800a832:	1e5a      	subs	r2, r3, #1
 800a834:	4193      	sbcs	r3, r2
 800a836:	b2db      	uxtb	r3, r3
 800a838:	e013      	b.n	800a862 <HAL_TIMEx_PWMN_Start+0x62>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	2b08      	cmp	r3, #8
 800a83e:	d108      	bne.n	800a852 <HAL_TIMEx_PWMN_Start+0x52>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2246      	movs	r2, #70	; 0x46
 800a844:	5c9b      	ldrb	r3, [r3, r2]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	3b01      	subs	r3, #1
 800a84a:	1e5a      	subs	r2, r3, #1
 800a84c:	4193      	sbcs	r3, r2
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	e007      	b.n	800a862 <HAL_TIMEx_PWMN_Start+0x62>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2247      	movs	r2, #71	; 0x47
 800a856:	5c9b      	ldrb	r3, [r3, r2]
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	3b01      	subs	r3, #1
 800a85c:	1e5a      	subs	r2, r3, #1
 800a85e:	4193      	sbcs	r3, r2
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e05c      	b.n	800a924 <HAL_TIMEx_PWMN_Start+0x124>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d104      	bne.n	800a87a <HAL_TIMEx_PWMN_Start+0x7a>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2244      	movs	r2, #68	; 0x44
 800a874:	2102      	movs	r1, #2
 800a876:	5499      	strb	r1, [r3, r2]
 800a878:	e013      	b.n	800a8a2 <HAL_TIMEx_PWMN_Start+0xa2>
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	2b04      	cmp	r3, #4
 800a87e:	d104      	bne.n	800a88a <HAL_TIMEx_PWMN_Start+0x8a>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2245      	movs	r2, #69	; 0x45
 800a884:	2102      	movs	r1, #2
 800a886:	5499      	strb	r1, [r3, r2]
 800a888:	e00b      	b.n	800a8a2 <HAL_TIMEx_PWMN_Start+0xa2>
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	2b08      	cmp	r3, #8
 800a88e:	d104      	bne.n	800a89a <HAL_TIMEx_PWMN_Start+0x9a>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2246      	movs	r2, #70	; 0x46
 800a894:	2102      	movs	r1, #2
 800a896:	5499      	strb	r1, [r3, r2]
 800a898:	e003      	b.n	800a8a2 <HAL_TIMEx_PWMN_Start+0xa2>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2247      	movs	r2, #71	; 0x47
 800a89e:	2102      	movs	r1, #2
 800a8a0:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	2204      	movs	r2, #4
 800a8aa:	0018      	movs	r0, r3
 800a8ac:	f000 f9c8 	bl	800ac40 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2180      	movs	r1, #128	; 0x80
 800a8bc:	0209      	lsls	r1, r1, #8
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a19      	ldr	r2, [pc, #100]	; (800a92c <HAL_TIMEx_PWMN_Start+0x12c>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d009      	beq.n	800a8e0 <HAL_TIMEx_PWMN_Start+0xe0>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a17      	ldr	r2, [pc, #92]	; (800a930 <HAL_TIMEx_PWMN_Start+0x130>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d004      	beq.n	800a8e0 <HAL_TIMEx_PWMN_Start+0xe0>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a16      	ldr	r2, [pc, #88]	; (800a934 <HAL_TIMEx_PWMN_Start+0x134>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d116      	bne.n	800a90e <HAL_TIMEx_PWMN_Start+0x10e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	4a14      	ldr	r2, [pc, #80]	; (800a938 <HAL_TIMEx_PWMN_Start+0x138>)
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2b06      	cmp	r3, #6
 800a8f0:	d016      	beq.n	800a920 <HAL_TIMEx_PWMN_Start+0x120>
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	2380      	movs	r3, #128	; 0x80
 800a8f6:	025b      	lsls	r3, r3, #9
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d011      	beq.n	800a920 <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2101      	movs	r1, #1
 800a908:	430a      	orrs	r2, r1
 800a90a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a90c:	e008      	b.n	800a920 <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2101      	movs	r1, #1
 800a91a:	430a      	orrs	r2, r1
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	e000      	b.n	800a922 <HAL_TIMEx_PWMN_Start+0x122>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a920:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	0018      	movs	r0, r3
 800a926:	46bd      	mov	sp, r7
 800a928:	b004      	add	sp, #16
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	40012c00 	.word	0x40012c00
 800a930:	40000400 	.word	0x40000400
 800a934:	40014000 	.word	0x40014000
 800a938:	00010007 	.word	0x00010007

0800a93c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	2200      	movs	r2, #0
 800a94e:	0018      	movs	r0, r3
 800a950:	f000 f976 	bl	800ac40 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	4a23      	ldr	r2, [pc, #140]	; (800a9e8 <HAL_TIMEx_PWMN_Stop+0xac>)
 800a95c:	4013      	ands	r3, r2
 800a95e:	d10d      	bne.n	800a97c <HAL_TIMEx_PWMN_Stop+0x40>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	4a21      	ldr	r2, [pc, #132]	; (800a9ec <HAL_TIMEx_PWMN_Stop+0xb0>)
 800a968:	4013      	ands	r3, r2
 800a96a:	d107      	bne.n	800a97c <HAL_TIMEx_PWMN_Stop+0x40>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	491e      	ldr	r1, [pc, #120]	; (800a9f0 <HAL_TIMEx_PWMN_Stop+0xb4>)
 800a978:	400a      	ands	r2, r1
 800a97a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	4a19      	ldr	r2, [pc, #100]	; (800a9e8 <HAL_TIMEx_PWMN_Stop+0xac>)
 800a984:	4013      	ands	r3, r2
 800a986:	d10d      	bne.n	800a9a4 <HAL_TIMEx_PWMN_Stop+0x68>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	4a17      	ldr	r2, [pc, #92]	; (800a9ec <HAL_TIMEx_PWMN_Stop+0xb0>)
 800a990:	4013      	ands	r3, r2
 800a992:	d107      	bne.n	800a9a4 <HAL_TIMEx_PWMN_Stop+0x68>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2101      	movs	r1, #1
 800a9a0:	438a      	bics	r2, r1
 800a9a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d104      	bne.n	800a9b4 <HAL_TIMEx_PWMN_Stop+0x78>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2244      	movs	r2, #68	; 0x44
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	5499      	strb	r1, [r3, r2]
 800a9b2:	e013      	b.n	800a9dc <HAL_TIMEx_PWMN_Stop+0xa0>
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b04      	cmp	r3, #4
 800a9b8:	d104      	bne.n	800a9c4 <HAL_TIMEx_PWMN_Stop+0x88>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2245      	movs	r2, #69	; 0x45
 800a9be:	2101      	movs	r1, #1
 800a9c0:	5499      	strb	r1, [r3, r2]
 800a9c2:	e00b      	b.n	800a9dc <HAL_TIMEx_PWMN_Stop+0xa0>
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	2b08      	cmp	r3, #8
 800a9c8:	d104      	bne.n	800a9d4 <HAL_TIMEx_PWMN_Stop+0x98>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2246      	movs	r2, #70	; 0x46
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	5499      	strb	r1, [r3, r2]
 800a9d2:	e003      	b.n	800a9dc <HAL_TIMEx_PWMN_Stop+0xa0>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2247      	movs	r2, #71	; 0x47
 800a9d8:	2101      	movs	r1, #1
 800a9da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	0018      	movs	r0, r3
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	b002      	add	sp, #8
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	46c0      	nop			; (mov r8, r8)
 800a9e8:	00001111 	.word	0x00001111
 800a9ec:	00000444 	.word	0x00000444
 800a9f0:	ffff7fff 	.word	0xffff7fff

0800a9f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	223c      	movs	r2, #60	; 0x3c
 800aa02:	5c9b      	ldrb	r3, [r3, r2]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e04f      	b.n	800aaac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	223c      	movs	r2, #60	; 0x3c
 800aa10:	2101      	movs	r1, #1
 800aa12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	223d      	movs	r2, #61	; 0x3d
 800aa18:	2102      	movs	r1, #2
 800aa1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a20      	ldr	r2, [pc, #128]	; (800aab4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d108      	bne.n	800aa48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4a1f      	ldr	r2, [pc, #124]	; (800aab8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2270      	movs	r2, #112	; 0x70
 800aa4c:	4393      	bics	r3, r2
 800aa4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a13      	ldr	r2, [pc, #76]	; (800aab4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d009      	beq.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a12      	ldr	r2, [pc, #72]	; (800aabc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d004      	beq.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a11      	ldr	r2, [pc, #68]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10c      	bne.n	800aa9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2280      	movs	r2, #128	; 0x80
 800aa84:	4393      	bics	r3, r2
 800aa86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	223d      	movs	r2, #61	; 0x3d
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	223c      	movs	r2, #60	; 0x3c
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	0018      	movs	r0, r3
 800aaae:	46bd      	mov	sp, r7
 800aab0:	b004      	add	sp, #16
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	40012c00 	.word	0x40012c00
 800aab8:	ff0fffff 	.word	0xff0fffff
 800aabc:	40000400 	.word	0x40000400
 800aac0:	40014000 	.word	0x40014000

0800aac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aace:	2300      	movs	r3, #0
 800aad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	223c      	movs	r2, #60	; 0x3c
 800aad6:	5c9b      	ldrb	r3, [r3, r2]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d101      	bne.n	800aae0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aadc:	2302      	movs	r3, #2
 800aade:	e079      	b.n	800abd4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	223c      	movs	r2, #60	; 0x3c
 800aae4:	2101      	movs	r1, #1
 800aae6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	22ff      	movs	r2, #255	; 0xff
 800aaec:	4393      	bics	r3, r2
 800aaee:	001a      	movs	r2, r3
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4a38      	ldr	r2, [pc, #224]	; (800abdc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800aafc:	401a      	ands	r2, r3
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4a35      	ldr	r2, [pc, #212]	; (800abe0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ab0a:	401a      	ands	r2, r3
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4a33      	ldr	r2, [pc, #204]	; (800abe4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ab18:	401a      	ands	r2, r3
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	4a30      	ldr	r2, [pc, #192]	; (800abe8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ab26:	401a      	ands	r2, r3
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4a2e      	ldr	r2, [pc, #184]	; (800abec <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800ab34:	401a      	ands	r2, r3
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	4a2b      	ldr	r2, [pc, #172]	; (800abf0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800ab42:	401a      	ands	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	4a29      	ldr	r2, [pc, #164]	; (800abf4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800ab50:	401a      	ands	r2, r3
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	041b      	lsls	r3, r3, #16
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a25      	ldr	r2, [pc, #148]	; (800abf8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d106      	bne.n	800ab74 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4a24      	ldr	r2, [pc, #144]	; (800abfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ab6a:	401a      	ands	r2, r3
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	69db      	ldr	r3, [r3, #28]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a1f      	ldr	r2, [pc, #124]	; (800abf8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d121      	bne.n	800abc2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	4a1f      	ldr	r2, [pc, #124]	; (800ac00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ab82:	401a      	ands	r2, r3
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab88:	051b      	lsls	r3, r3, #20
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	4a1c      	ldr	r2, [pc, #112]	; (800ac04 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800ab92:	401a      	ands	r2, r3
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	4a1a      	ldr	r2, [pc, #104]	; (800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800aba0:	401a      	ands	r2, r3
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba6:	4313      	orrs	r3, r2
 800aba8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a12      	ldr	r2, [pc, #72]	; (800abf8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d106      	bne.n	800abc2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	4a15      	ldr	r2, [pc, #84]	; (800ac0c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800abb8:	401a      	ands	r2, r3
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	223c      	movs	r2, #60	; 0x3c
 800abce:	2100      	movs	r1, #0
 800abd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	0018      	movs	r0, r3
 800abd6:	46bd      	mov	sp, r7
 800abd8:	b004      	add	sp, #16
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	fffffcff 	.word	0xfffffcff
 800abe0:	fffffbff 	.word	0xfffffbff
 800abe4:	fffff7ff 	.word	0xfffff7ff
 800abe8:	ffffefff 	.word	0xffffefff
 800abec:	ffffdfff 	.word	0xffffdfff
 800abf0:	ffffbfff 	.word	0xffffbfff
 800abf4:	fff0ffff 	.word	0xfff0ffff
 800abf8:	40012c00 	.word	0x40012c00
 800abfc:	efffffff 	.word	0xefffffff
 800ac00:	ff0fffff 	.word	0xff0fffff
 800ac04:	feffffff 	.word	0xfeffffff
 800ac08:	fdffffff 	.word	0xfdffffff
 800ac0c:	dfffffff 	.word	0xdfffffff

0800ac10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac18:	46c0      	nop			; (mov r8, r8)
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	b002      	add	sp, #8
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac28:	46c0      	nop			; (mov r8, r8)
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	b002      	add	sp, #8
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac38:	46c0      	nop			; (mov r8, r8)
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	b002      	add	sp, #8
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	221f      	movs	r2, #31
 800ac50:	4013      	ands	r3, r2
 800ac52:	2204      	movs	r2, #4
 800ac54:	409a      	lsls	r2, r3
 800ac56:	0013      	movs	r3, r2
 800ac58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	43d2      	mvns	r2, r2
 800ac62:	401a      	ands	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6a1a      	ldr	r2, [r3, #32]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	211f      	movs	r1, #31
 800ac70:	400b      	ands	r3, r1
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	4099      	lsls	r1, r3
 800ac76:	000b      	movs	r3, r1
 800ac78:	431a      	orrs	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	621a      	str	r2, [r3, #32]
}
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	46bd      	mov	sp, r7
 800ac82:	b006      	add	sp, #24
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e046      	b.n	800ad28 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2288      	movs	r2, #136	; 0x88
 800ac9e:	589b      	ldr	r3, [r3, r2]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d107      	bne.n	800acb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2284      	movs	r2, #132	; 0x84
 800aca8:	2100      	movs	r1, #0
 800acaa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	0018      	movs	r0, r3
 800acb0:	f7fb fb7a 	bl	80063a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2288      	movs	r2, #136	; 0x88
 800acb8:	2124      	movs	r1, #36	; 0x24
 800acba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2101      	movs	r1, #1
 800acc8:	438a      	bics	r2, r1
 800acca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	0018      	movs	r0, r3
 800acd0:	f000 fe52 	bl	800b978 <UART_SetConfig>
 800acd4:	0003      	movs	r3, r0
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d101      	bne.n	800acde <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e024      	b.n	800ad28 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d003      	beq.n	800acee <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	0018      	movs	r0, r3
 800acea:	f000 ffe9 	bl	800bcc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	490d      	ldr	r1, [pc, #52]	; (800ad30 <HAL_UART_Init+0xa8>)
 800acfa:	400a      	ands	r2, r1
 800acfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	689a      	ldr	r2, [r3, #8]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	212a      	movs	r1, #42	; 0x2a
 800ad0a:	438a      	bics	r2, r1
 800ad0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2101      	movs	r1, #1
 800ad1a:	430a      	orrs	r2, r1
 800ad1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	0018      	movs	r0, r3
 800ad22:	f001 f881 	bl	800be28 <UART_CheckIdleState>
 800ad26:	0003      	movs	r3, r0
}
 800ad28:	0018      	movs	r0, r3
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	b002      	add	sp, #8
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	ffffb7ff 	.word	0xffffb7ff

0800ad34 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e04e      	b.n	800ade4 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2288      	movs	r2, #136	; 0x88
 800ad4a:	589b      	ldr	r3, [r3, r2]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d107      	bne.n	800ad60 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2284      	movs	r2, #132	; 0x84
 800ad54:	2100      	movs	r1, #0
 800ad56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	f7fb fb24 	bl	80063a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2288      	movs	r2, #136	; 0x88
 800ad64:	2124      	movs	r1, #36	; 0x24
 800ad66:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2101      	movs	r1, #1
 800ad74:	438a      	bics	r2, r1
 800ad76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	0018      	movs	r0, r3
 800ad7c:	f000 fdfc 	bl	800b978 <UART_SetConfig>
 800ad80:	0003      	movs	r3, r0
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d101      	bne.n	800ad8a <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e02c      	b.n	800ade4 <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	0018      	movs	r0, r3
 800ad96:	f000 ff93 	bl	800bcc0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4911      	ldr	r1, [pc, #68]	; (800adec <HAL_HalfDuplex_Init+0xb8>)
 800ada6:	400a      	ands	r2, r1
 800ada8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689a      	ldr	r2, [r3, #8]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2122      	movs	r1, #34	; 0x22
 800adb6:	438a      	bics	r2, r1
 800adb8:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2108      	movs	r1, #8
 800adc6:	430a      	orrs	r2, r1
 800adc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2101      	movs	r1, #1
 800add6:	430a      	orrs	r2, r1
 800add8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	0018      	movs	r0, r3
 800adde:	f001 f823 	bl	800be28 <UART_CheckIdleState>
 800ade2:	0003      	movs	r3, r0
}
 800ade4:	0018      	movs	r0, r3
 800ade6:	46bd      	mov	sp, r7
 800ade8:	b002      	add	sp, #8
 800adea:	bd80      	pop	{r7, pc}
 800adec:	ffffb7ff 	.word	0xffffb7ff

0800adf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b08a      	sub	sp, #40	; 0x28
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	603b      	str	r3, [r7, #0]
 800adfc:	1dbb      	adds	r3, r7, #6
 800adfe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2288      	movs	r2, #136	; 0x88
 800ae04:	589b      	ldr	r3, [r3, r2]
 800ae06:	2b20      	cmp	r3, #32
 800ae08:	d000      	beq.n	800ae0c <HAL_UART_Transmit+0x1c>
 800ae0a:	e088      	b.n	800af1e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <HAL_UART_Transmit+0x2a>
 800ae12:	1dbb      	adds	r3, r7, #6
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e080      	b.n	800af20 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	689a      	ldr	r2, [r3, #8]
 800ae22:	2380      	movs	r3, #128	; 0x80
 800ae24:	015b      	lsls	r3, r3, #5
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d109      	bne.n	800ae3e <HAL_UART_Transmit+0x4e>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d105      	bne.n	800ae3e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2201      	movs	r2, #1
 800ae36:	4013      	ands	r3, r2
 800ae38:	d001      	beq.n	800ae3e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e070      	b.n	800af20 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2290      	movs	r2, #144	; 0x90
 800ae42:	2100      	movs	r1, #0
 800ae44:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2288      	movs	r2, #136	; 0x88
 800ae4a:	2121      	movs	r1, #33	; 0x21
 800ae4c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae4e:	f7fb fe29 	bl	8006aa4 <HAL_GetTick>
 800ae52:	0003      	movs	r3, r0
 800ae54:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	1dba      	adds	r2, r7, #6
 800ae5a:	2154      	movs	r1, #84	; 0x54
 800ae5c:	8812      	ldrh	r2, [r2, #0]
 800ae5e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	1dba      	adds	r2, r7, #6
 800ae64:	2156      	movs	r1, #86	; 0x56
 800ae66:	8812      	ldrh	r2, [r2, #0]
 800ae68:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	689a      	ldr	r2, [r3, #8]
 800ae6e:	2380      	movs	r3, #128	; 0x80
 800ae70:	015b      	lsls	r3, r3, #5
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d108      	bne.n	800ae88 <HAL_UART_Transmit+0x98>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d104      	bne.n	800ae88 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	61bb      	str	r3, [r7, #24]
 800ae86:	e003      	b.n	800ae90 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae90:	e02c      	b.n	800aeec <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	0013      	movs	r3, r2
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	2180      	movs	r1, #128	; 0x80
 800aea0:	f001 f810 	bl	800bec4 <UART_WaitOnFlagUntilTimeout>
 800aea4:	1e03      	subs	r3, r0, #0
 800aea6:	d001      	beq.n	800aeac <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e039      	b.n	800af20 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10b      	bne.n	800aeca <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	001a      	movs	r2, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	05d2      	lsls	r2, r2, #23
 800aebe:	0dd2      	lsrs	r2, r2, #23
 800aec0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	3302      	adds	r3, #2
 800aec6:	61bb      	str	r3, [r7, #24]
 800aec8:	e007      	b.n	800aeda <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	781a      	ldrb	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	3301      	adds	r3, #1
 800aed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2256      	movs	r2, #86	; 0x56
 800aede:	5a9b      	ldrh	r3, [r3, r2]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	3b01      	subs	r3, #1
 800aee4:	b299      	uxth	r1, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2256      	movs	r2, #86	; 0x56
 800aeea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2256      	movs	r2, #86	; 0x56
 800aef0:	5a9b      	ldrh	r3, [r3, r2]
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1cc      	bne.n	800ae92 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	0013      	movs	r3, r2
 800af02:	2200      	movs	r2, #0
 800af04:	2140      	movs	r1, #64	; 0x40
 800af06:	f000 ffdd 	bl	800bec4 <UART_WaitOnFlagUntilTimeout>
 800af0a:	1e03      	subs	r3, r0, #0
 800af0c:	d001      	beq.n	800af12 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	e006      	b.n	800af20 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2288      	movs	r2, #136	; 0x88
 800af16:	2120      	movs	r1, #32
 800af18:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	e000      	b.n	800af20 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800af1e:	2302      	movs	r3, #2
  }
}
 800af20:	0018      	movs	r0, r3
 800af22:	46bd      	mov	sp, r7
 800af24:	b008      	add	sp, #32
 800af26:	bd80      	pop	{r7, pc}

0800af28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08a      	sub	sp, #40	; 0x28
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	1dbb      	adds	r3, r7, #6
 800af36:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	228c      	movs	r2, #140	; 0x8c
 800af3c:	589b      	ldr	r3, [r3, r2]
 800af3e:	2b20      	cmp	r3, #32
 800af40:	d000      	beq.n	800af44 <HAL_UART_Receive+0x1c>
 800af42:	e0cc      	b.n	800b0de <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d003      	beq.n	800af52 <HAL_UART_Receive+0x2a>
 800af4a:	1dbb      	adds	r3, r7, #6
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e0c4      	b.n	800b0e0 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	2380      	movs	r3, #128	; 0x80
 800af5c:	015b      	lsls	r3, r3, #5
 800af5e:	429a      	cmp	r2, r3
 800af60:	d109      	bne.n	800af76 <HAL_UART_Receive+0x4e>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d105      	bne.n	800af76 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	2201      	movs	r2, #1
 800af6e:	4013      	ands	r3, r2
 800af70:	d001      	beq.n	800af76 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e0b4      	b.n	800b0e0 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2290      	movs	r2, #144	; 0x90
 800af7a:	2100      	movs	r1, #0
 800af7c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	228c      	movs	r2, #140	; 0x8c
 800af82:	2122      	movs	r1, #34	; 0x22
 800af84:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af8c:	f7fb fd8a 	bl	8006aa4 <HAL_GetTick>
 800af90:	0003      	movs	r3, r0
 800af92:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	1dba      	adds	r2, r7, #6
 800af98:	215c      	movs	r1, #92	; 0x5c
 800af9a:	8812      	ldrh	r2, [r2, #0]
 800af9c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	1dba      	adds	r2, r7, #6
 800afa2:	215e      	movs	r1, #94	; 0x5e
 800afa4:	8812      	ldrh	r2, [r2, #0]
 800afa6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	689a      	ldr	r2, [r3, #8]
 800afac:	2380      	movs	r3, #128	; 0x80
 800afae:	015b      	lsls	r3, r3, #5
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d10d      	bne.n	800afd0 <HAL_UART_Receive+0xa8>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d104      	bne.n	800afc6 <HAL_UART_Receive+0x9e>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2260      	movs	r2, #96	; 0x60
 800afc0:	4949      	ldr	r1, [pc, #292]	; (800b0e8 <HAL_UART_Receive+0x1c0>)
 800afc2:	5299      	strh	r1, [r3, r2]
 800afc4:	e02e      	b.n	800b024 <HAL_UART_Receive+0xfc>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2260      	movs	r2, #96	; 0x60
 800afca:	21ff      	movs	r1, #255	; 0xff
 800afcc:	5299      	strh	r1, [r3, r2]
 800afce:	e029      	b.n	800b024 <HAL_UART_Receive+0xfc>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10d      	bne.n	800aff4 <HAL_UART_Receive+0xcc>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d104      	bne.n	800afea <HAL_UART_Receive+0xc2>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2260      	movs	r2, #96	; 0x60
 800afe4:	21ff      	movs	r1, #255	; 0xff
 800afe6:	5299      	strh	r1, [r3, r2]
 800afe8:	e01c      	b.n	800b024 <HAL_UART_Receive+0xfc>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2260      	movs	r2, #96	; 0x60
 800afee:	217f      	movs	r1, #127	; 0x7f
 800aff0:	5299      	strh	r1, [r3, r2]
 800aff2:	e017      	b.n	800b024 <HAL_UART_Receive+0xfc>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	689a      	ldr	r2, [r3, #8]
 800aff8:	2380      	movs	r3, #128	; 0x80
 800affa:	055b      	lsls	r3, r3, #21
 800affc:	429a      	cmp	r2, r3
 800affe:	d10d      	bne.n	800b01c <HAL_UART_Receive+0xf4>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d104      	bne.n	800b012 <HAL_UART_Receive+0xea>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2260      	movs	r2, #96	; 0x60
 800b00c:	217f      	movs	r1, #127	; 0x7f
 800b00e:	5299      	strh	r1, [r3, r2]
 800b010:	e008      	b.n	800b024 <HAL_UART_Receive+0xfc>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2260      	movs	r2, #96	; 0x60
 800b016:	213f      	movs	r1, #63	; 0x3f
 800b018:	5299      	strh	r1, [r3, r2]
 800b01a:	e003      	b.n	800b024 <HAL_UART_Receive+0xfc>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2260      	movs	r2, #96	; 0x60
 800b020:	2100      	movs	r1, #0
 800b022:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800b024:	2312      	movs	r3, #18
 800b026:	18fb      	adds	r3, r7, r3
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	2160      	movs	r1, #96	; 0x60
 800b02c:	5a52      	ldrh	r2, [r2, r1]
 800b02e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	689a      	ldr	r2, [r3, #8]
 800b034:	2380      	movs	r3, #128	; 0x80
 800b036:	015b      	lsls	r3, r3, #5
 800b038:	429a      	cmp	r2, r3
 800b03a:	d108      	bne.n	800b04e <HAL_UART_Receive+0x126>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d104      	bne.n	800b04e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800b044:	2300      	movs	r3, #0
 800b046:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	61bb      	str	r3, [r7, #24]
 800b04c:	e003      	b.n	800b056 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b052:	2300      	movs	r3, #0
 800b054:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b056:	e036      	b.n	800b0c6 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	0013      	movs	r3, r2
 800b062:	2200      	movs	r2, #0
 800b064:	2120      	movs	r1, #32
 800b066:	f000 ff2d 	bl	800bec4 <UART_WaitOnFlagUntilTimeout>
 800b06a:	1e03      	subs	r3, r0, #0
 800b06c:	d001      	beq.n	800b072 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e036      	b.n	800b0e0 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10e      	bne.n	800b096 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07e:	b29b      	uxth	r3, r3
 800b080:	2212      	movs	r2, #18
 800b082:	18ba      	adds	r2, r7, r2
 800b084:	8812      	ldrh	r2, [r2, #0]
 800b086:	4013      	ands	r3, r2
 800b088:	b29a      	uxth	r2, r3
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	3302      	adds	r3, #2
 800b092:	61bb      	str	r3, [r7, #24]
 800b094:	e00e      	b.n	800b0b4 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2212      	movs	r2, #18
 800b0a0:	18ba      	adds	r2, r7, r2
 800b0a2:	8812      	ldrh	r2, [r2, #0]
 800b0a4:	b2d2      	uxtb	r2, r2
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	225e      	movs	r2, #94	; 0x5e
 800b0b8:	5a9b      	ldrh	r3, [r3, r2]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	b299      	uxth	r1, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	225e      	movs	r2, #94	; 0x5e
 800b0c4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	225e      	movs	r2, #94	; 0x5e
 800b0ca:	5a9b      	ldrh	r3, [r3, r2]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1c2      	bne.n	800b058 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	228c      	movs	r2, #140	; 0x8c
 800b0d6:	2120      	movs	r1, #32
 800b0d8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e000      	b.n	800b0e0 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800b0de:	2302      	movs	r3, #2
  }
}
 800b0e0:	0018      	movs	r0, r3
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	b008      	add	sp, #32
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	000001ff 	.word	0x000001ff

0800b0ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	1dbb      	adds	r3, r7, #6
 800b0f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	228c      	movs	r2, #140	; 0x8c
 800b0fe:	589b      	ldr	r3, [r3, r2]
 800b100:	2b20      	cmp	r3, #32
 800b102:	d145      	bne.n	800b190 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <HAL_UART_Receive_IT+0x26>
 800b10a:	1dbb      	adds	r3, r7, #6
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	e03d      	b.n	800b192 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	689a      	ldr	r2, [r3, #8]
 800b11a:	2380      	movs	r3, #128	; 0x80
 800b11c:	015b      	lsls	r3, r3, #5
 800b11e:	429a      	cmp	r2, r3
 800b120:	d109      	bne.n	800b136 <HAL_UART_Receive_IT+0x4a>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d105      	bne.n	800b136 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2201      	movs	r2, #1
 800b12e:	4013      	ands	r3, r2
 800b130:	d001      	beq.n	800b136 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e02d      	b.n	800b192 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	2380      	movs	r3, #128	; 0x80
 800b144:	041b      	lsls	r3, r3, #16
 800b146:	4013      	ands	r3, r2
 800b148:	d019      	beq.n	800b17e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b14a:	f3ef 8310 	mrs	r3, PRIMASK
 800b14e:	613b      	str	r3, [r7, #16]
  return(result);
 800b150:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b152:	61fb      	str	r3, [r7, #28]
 800b154:	2301      	movs	r3, #1
 800b156:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f383 8810 	msr	PRIMASK, r3
}
 800b15e:	46c0      	nop			; (mov r8, r8)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2180      	movs	r1, #128	; 0x80
 800b16c:	04c9      	lsls	r1, r1, #19
 800b16e:	430a      	orrs	r2, r1
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	f383 8810 	msr	PRIMASK, r3
}
 800b17c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b17e:	1dbb      	adds	r3, r7, #6
 800b180:	881a      	ldrh	r2, [r3, #0]
 800b182:	68b9      	ldr	r1, [r7, #8]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	0018      	movs	r0, r3
 800b188:	f000 ff64 	bl	800c054 <UART_Start_Receive_IT>
 800b18c:	0003      	movs	r3, r0
 800b18e:	e000      	b.n	800b192 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800b190:	2302      	movs	r3, #2
  }
}
 800b192:	0018      	movs	r0, r3
 800b194:	46bd      	mov	sp, r7
 800b196:	b008      	add	sp, #32
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b19c:	b5b0      	push	{r4, r5, r7, lr}
 800b19e:	b0aa      	sub	sp, #168	; 0xa8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	69db      	ldr	r3, [r3, #28]
 800b1aa:	22a4      	movs	r2, #164	; 0xa4
 800b1ac:	18b9      	adds	r1, r7, r2
 800b1ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	20a0      	movs	r0, #160	; 0xa0
 800b1b8:	1839      	adds	r1, r7, r0
 800b1ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	249c      	movs	r4, #156	; 0x9c
 800b1c4:	1939      	adds	r1, r7, r4
 800b1c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1c8:	0011      	movs	r1, r2
 800b1ca:	18bb      	adds	r3, r7, r2
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4aa2      	ldr	r2, [pc, #648]	; (800b458 <HAL_UART_IRQHandler+0x2bc>)
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	2298      	movs	r2, #152	; 0x98
 800b1d4:	18bd      	adds	r5, r7, r2
 800b1d6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800b1d8:	18bb      	adds	r3, r7, r2
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d11a      	bne.n	800b216 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1e0:	187b      	adds	r3, r7, r1
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	d015      	beq.n	800b216 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1ea:	183b      	adds	r3, r7, r0
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2220      	movs	r2, #32
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	d105      	bne.n	800b200 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1f4:	193b      	adds	r3, r7, r4
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	2380      	movs	r3, #128	; 0x80
 800b1fa:	055b      	lsls	r3, r3, #21
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	d00a      	beq.n	800b216 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b204:	2b00      	cmp	r3, #0
 800b206:	d100      	bne.n	800b20a <HAL_UART_IRQHandler+0x6e>
 800b208:	e2dc      	b.n	800b7c4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	0010      	movs	r0, r2
 800b212:	4798      	blx	r3
      }
      return;
 800b214:	e2d6      	b.n	800b7c4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b216:	2398      	movs	r3, #152	; 0x98
 800b218:	18fb      	adds	r3, r7, r3
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d100      	bne.n	800b222 <HAL_UART_IRQHandler+0x86>
 800b220:	e122      	b.n	800b468 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b222:	239c      	movs	r3, #156	; 0x9c
 800b224:	18fb      	adds	r3, r7, r3
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a8c      	ldr	r2, [pc, #560]	; (800b45c <HAL_UART_IRQHandler+0x2c0>)
 800b22a:	4013      	ands	r3, r2
 800b22c:	d106      	bne.n	800b23c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b22e:	23a0      	movs	r3, #160	; 0xa0
 800b230:	18fb      	adds	r3, r7, r3
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a8a      	ldr	r2, [pc, #552]	; (800b460 <HAL_UART_IRQHandler+0x2c4>)
 800b236:	4013      	ands	r3, r2
 800b238:	d100      	bne.n	800b23c <HAL_UART_IRQHandler+0xa0>
 800b23a:	e115      	b.n	800b468 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b23c:	23a4      	movs	r3, #164	; 0xa4
 800b23e:	18fb      	adds	r3, r7, r3
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2201      	movs	r2, #1
 800b244:	4013      	ands	r3, r2
 800b246:	d012      	beq.n	800b26e <HAL_UART_IRQHandler+0xd2>
 800b248:	23a0      	movs	r3, #160	; 0xa0
 800b24a:	18fb      	adds	r3, r7, r3
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	2380      	movs	r3, #128	; 0x80
 800b250:	005b      	lsls	r3, r3, #1
 800b252:	4013      	ands	r3, r2
 800b254:	d00b      	beq.n	800b26e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2201      	movs	r2, #1
 800b25c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2290      	movs	r2, #144	; 0x90
 800b262:	589b      	ldr	r3, [r3, r2]
 800b264:	2201      	movs	r2, #1
 800b266:	431a      	orrs	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2190      	movs	r1, #144	; 0x90
 800b26c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b26e:	23a4      	movs	r3, #164	; 0xa4
 800b270:	18fb      	adds	r3, r7, r3
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2202      	movs	r2, #2
 800b276:	4013      	ands	r3, r2
 800b278:	d011      	beq.n	800b29e <HAL_UART_IRQHandler+0x102>
 800b27a:	239c      	movs	r3, #156	; 0x9c
 800b27c:	18fb      	adds	r3, r7, r3
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2201      	movs	r2, #1
 800b282:	4013      	ands	r3, r2
 800b284:	d00b      	beq.n	800b29e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2202      	movs	r2, #2
 800b28c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2290      	movs	r2, #144	; 0x90
 800b292:	589b      	ldr	r3, [r3, r2]
 800b294:	2204      	movs	r2, #4
 800b296:	431a      	orrs	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2190      	movs	r1, #144	; 0x90
 800b29c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b29e:	23a4      	movs	r3, #164	; 0xa4
 800b2a0:	18fb      	adds	r3, r7, r3
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2204      	movs	r2, #4
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	d011      	beq.n	800b2ce <HAL_UART_IRQHandler+0x132>
 800b2aa:	239c      	movs	r3, #156	; 0x9c
 800b2ac:	18fb      	adds	r3, r7, r3
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	d00b      	beq.n	800b2ce <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2204      	movs	r2, #4
 800b2bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2290      	movs	r2, #144	; 0x90
 800b2c2:	589b      	ldr	r3, [r3, r2]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2190      	movs	r1, #144	; 0x90
 800b2cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2ce:	23a4      	movs	r3, #164	; 0xa4
 800b2d0:	18fb      	adds	r3, r7, r3
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2208      	movs	r2, #8
 800b2d6:	4013      	ands	r3, r2
 800b2d8:	d017      	beq.n	800b30a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2da:	23a0      	movs	r3, #160	; 0xa0
 800b2dc:	18fb      	adds	r3, r7, r3
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2220      	movs	r2, #32
 800b2e2:	4013      	ands	r3, r2
 800b2e4:	d105      	bne.n	800b2f2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b2e6:	239c      	movs	r3, #156	; 0x9c
 800b2e8:	18fb      	adds	r3, r7, r3
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a5b      	ldr	r2, [pc, #364]	; (800b45c <HAL_UART_IRQHandler+0x2c0>)
 800b2ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2f0:	d00b      	beq.n	800b30a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2208      	movs	r2, #8
 800b2f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2290      	movs	r2, #144	; 0x90
 800b2fe:	589b      	ldr	r3, [r3, r2]
 800b300:	2208      	movs	r2, #8
 800b302:	431a      	orrs	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2190      	movs	r1, #144	; 0x90
 800b308:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b30a:	23a4      	movs	r3, #164	; 0xa4
 800b30c:	18fb      	adds	r3, r7, r3
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	2380      	movs	r3, #128	; 0x80
 800b312:	011b      	lsls	r3, r3, #4
 800b314:	4013      	ands	r3, r2
 800b316:	d013      	beq.n	800b340 <HAL_UART_IRQHandler+0x1a4>
 800b318:	23a0      	movs	r3, #160	; 0xa0
 800b31a:	18fb      	adds	r3, r7, r3
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	2380      	movs	r3, #128	; 0x80
 800b320:	04db      	lsls	r3, r3, #19
 800b322:	4013      	ands	r3, r2
 800b324:	d00c      	beq.n	800b340 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2280      	movs	r2, #128	; 0x80
 800b32c:	0112      	lsls	r2, r2, #4
 800b32e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2290      	movs	r2, #144	; 0x90
 800b334:	589b      	ldr	r3, [r3, r2]
 800b336:	2220      	movs	r2, #32
 800b338:	431a      	orrs	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2190      	movs	r1, #144	; 0x90
 800b33e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2290      	movs	r2, #144	; 0x90
 800b344:	589b      	ldr	r3, [r3, r2]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d100      	bne.n	800b34c <HAL_UART_IRQHandler+0x1b0>
 800b34a:	e23d      	b.n	800b7c8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b34c:	23a4      	movs	r3, #164	; 0xa4
 800b34e:	18fb      	adds	r3, r7, r3
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2220      	movs	r2, #32
 800b354:	4013      	ands	r3, r2
 800b356:	d015      	beq.n	800b384 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b358:	23a0      	movs	r3, #160	; 0xa0
 800b35a:	18fb      	adds	r3, r7, r3
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2220      	movs	r2, #32
 800b360:	4013      	ands	r3, r2
 800b362:	d106      	bne.n	800b372 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b364:	239c      	movs	r3, #156	; 0x9c
 800b366:	18fb      	adds	r3, r7, r3
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	2380      	movs	r3, #128	; 0x80
 800b36c:	055b      	lsls	r3, r3, #21
 800b36e:	4013      	ands	r3, r2
 800b370:	d008      	beq.n	800b384 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b376:	2b00      	cmp	r3, #0
 800b378:	d004      	beq.n	800b384 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	0010      	movs	r0, r2
 800b382:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2290      	movs	r2, #144	; 0x90
 800b388:	589b      	ldr	r3, [r3, r2]
 800b38a:	2194      	movs	r1, #148	; 0x94
 800b38c:	187a      	adds	r2, r7, r1
 800b38e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	2240      	movs	r2, #64	; 0x40
 800b398:	4013      	ands	r3, r2
 800b39a:	2b40      	cmp	r3, #64	; 0x40
 800b39c:	d004      	beq.n	800b3a8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b39e:	187b      	adds	r3, r7, r1
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2228      	movs	r2, #40	; 0x28
 800b3a4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3a6:	d04c      	beq.n	800b442 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	0018      	movs	r0, r3
 800b3ac:	f000 ff76 	bl	800c29c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	2240      	movs	r2, #64	; 0x40
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	2b40      	cmp	r3, #64	; 0x40
 800b3bc:	d13c      	bne.n	800b438 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3be:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800b3c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3c6:	2090      	movs	r0, #144	; 0x90
 800b3c8:	183a      	adds	r2, r7, r0
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3d2:	f383 8810 	msr	PRIMASK, r3
}
 800b3d6:	46c0      	nop			; (mov r8, r8)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	689a      	ldr	r2, [r3, #8]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2140      	movs	r1, #64	; 0x40
 800b3e4:	438a      	bics	r2, r1
 800b3e6:	609a      	str	r2, [r3, #8]
 800b3e8:	183b      	adds	r3, r7, r0
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3f0:	f383 8810 	msr	PRIMASK, r3
}
 800b3f4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2280      	movs	r2, #128	; 0x80
 800b3fa:	589b      	ldr	r3, [r3, r2]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d016      	beq.n	800b42e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2280      	movs	r2, #128	; 0x80
 800b404:	589b      	ldr	r3, [r3, r2]
 800b406:	4a17      	ldr	r2, [pc, #92]	; (800b464 <HAL_UART_IRQHandler+0x2c8>)
 800b408:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2280      	movs	r2, #128	; 0x80
 800b40e:	589b      	ldr	r3, [r3, r2]
 800b410:	0018      	movs	r0, r3
 800b412:	f7fb fc85 	bl	8006d20 <HAL_DMA_Abort_IT>
 800b416:	1e03      	subs	r3, r0, #0
 800b418:	d01c      	beq.n	800b454 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2280      	movs	r2, #128	; 0x80
 800b41e:	589b      	ldr	r3, [r3, r2]
 800b420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	2180      	movs	r1, #128	; 0x80
 800b426:	5852      	ldr	r2, [r2, r1]
 800b428:	0010      	movs	r0, r2
 800b42a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b42c:	e012      	b.n	800b454 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	0018      	movs	r0, r3
 800b432:	f000 f9e9 	bl	800b808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b436:	e00d      	b.n	800b454 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	0018      	movs	r0, r3
 800b43c:	f000 f9e4 	bl	800b808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b440:	e008      	b.n	800b454 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	0018      	movs	r0, r3
 800b446:	f000 f9df 	bl	800b808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2290      	movs	r2, #144	; 0x90
 800b44e:	2100      	movs	r1, #0
 800b450:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b452:	e1b9      	b.n	800b7c8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b454:	46c0      	nop			; (mov r8, r8)
    return;
 800b456:	e1b7      	b.n	800b7c8 <HAL_UART_IRQHandler+0x62c>
 800b458:	0000080f 	.word	0x0000080f
 800b45c:	10000001 	.word	0x10000001
 800b460:	04000120 	.word	0x04000120
 800b464:	0800c369 	.word	0x0800c369

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d000      	beq.n	800b472 <HAL_UART_IRQHandler+0x2d6>
 800b470:	e13e      	b.n	800b6f0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b472:	23a4      	movs	r3, #164	; 0xa4
 800b474:	18fb      	adds	r3, r7, r3
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2210      	movs	r2, #16
 800b47a:	4013      	ands	r3, r2
 800b47c:	d100      	bne.n	800b480 <HAL_UART_IRQHandler+0x2e4>
 800b47e:	e137      	b.n	800b6f0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b480:	23a0      	movs	r3, #160	; 0xa0
 800b482:	18fb      	adds	r3, r7, r3
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2210      	movs	r2, #16
 800b488:	4013      	ands	r3, r2
 800b48a:	d100      	bne.n	800b48e <HAL_UART_IRQHandler+0x2f2>
 800b48c:	e130      	b.n	800b6f0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2210      	movs	r2, #16
 800b494:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	2240      	movs	r2, #64	; 0x40
 800b49e:	4013      	ands	r3, r2
 800b4a0:	2b40      	cmp	r3, #64	; 0x40
 800b4a2:	d000      	beq.n	800b4a6 <HAL_UART_IRQHandler+0x30a>
 800b4a4:	e0a4      	b.n	800b5f0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2280      	movs	r2, #128	; 0x80
 800b4aa:	589b      	ldr	r3, [r3, r2]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	685a      	ldr	r2, [r3, #4]
 800b4b0:	217e      	movs	r1, #126	; 0x7e
 800b4b2:	187b      	adds	r3, r7, r1
 800b4b4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800b4b6:	187b      	adds	r3, r7, r1
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d100      	bne.n	800b4c0 <HAL_UART_IRQHandler+0x324>
 800b4be:	e185      	b.n	800b7cc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	225c      	movs	r2, #92	; 0x5c
 800b4c4:	5a9b      	ldrh	r3, [r3, r2]
 800b4c6:	187a      	adds	r2, r7, r1
 800b4c8:	8812      	ldrh	r2, [r2, #0]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d300      	bcc.n	800b4d0 <HAL_UART_IRQHandler+0x334>
 800b4ce:	e17d      	b.n	800b7cc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	187a      	adds	r2, r7, r1
 800b4d4:	215e      	movs	r1, #94	; 0x5e
 800b4d6:	8812      	ldrh	r2, [r2, #0]
 800b4d8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2280      	movs	r2, #128	; 0x80
 800b4de:	589b      	ldr	r3, [r3, r2]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2220      	movs	r2, #32
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	d170      	bne.n	800b5cc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4f2:	67bb      	str	r3, [r7, #120]	; 0x78
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fa:	f383 8810 	msr	PRIMASK, r3
}
 800b4fe:	46c0      	nop			; (mov r8, r8)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	49b4      	ldr	r1, [pc, #720]	; (800b7dc <HAL_UART_IRQHandler+0x640>)
 800b50c:	400a      	ands	r2, r1
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b512:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b516:	f383 8810 	msr	PRIMASK, r3
}
 800b51a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b51c:	f3ef 8310 	mrs	r3, PRIMASK
 800b520:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800b522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b524:	677b      	str	r3, [r7, #116]	; 0x74
 800b526:	2301      	movs	r3, #1
 800b528:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b52a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b52c:	f383 8810 	msr	PRIMASK, r3
}
 800b530:	46c0      	nop			; (mov r8, r8)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689a      	ldr	r2, [r3, #8]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2101      	movs	r1, #1
 800b53e:	438a      	bics	r2, r1
 800b540:	609a      	str	r2, [r3, #8]
 800b542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b544:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b548:	f383 8810 	msr	PRIMASK, r3
}
 800b54c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b54e:	f3ef 8310 	mrs	r3, PRIMASK
 800b552:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800b554:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b556:	673b      	str	r3, [r7, #112]	; 0x70
 800b558:	2301      	movs	r3, #1
 800b55a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b55e:	f383 8810 	msr	PRIMASK, r3
}
 800b562:	46c0      	nop			; (mov r8, r8)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	689a      	ldr	r2, [r3, #8]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2140      	movs	r1, #64	; 0x40
 800b570:	438a      	bics	r2, r1
 800b572:	609a      	str	r2, [r3, #8]
 800b574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b576:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b57a:	f383 8810 	msr	PRIMASK, r3
}
 800b57e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	228c      	movs	r2, #140	; 0x8c
 800b584:	2120      	movs	r1, #32
 800b586:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b58e:	f3ef 8310 	mrs	r3, PRIMASK
 800b592:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800b594:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b596:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b598:	2301      	movs	r3, #1
 800b59a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b59c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b59e:	f383 8810 	msr	PRIMASK, r3
}
 800b5a2:	46c0      	nop			; (mov r8, r8)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2110      	movs	r1, #16
 800b5b0:	438a      	bics	r2, r1
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5ba:	f383 8810 	msr	PRIMASK, r3
}
 800b5be:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2280      	movs	r2, #128	; 0x80
 800b5c4:	589b      	ldr	r3, [r3, r2]
 800b5c6:	0018      	movs	r0, r3
 800b5c8:	f7fb fb48 	bl	8006c5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	225c      	movs	r2, #92	; 0x5c
 800b5d6:	5a9a      	ldrh	r2, [r3, r2]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	215e      	movs	r1, #94	; 0x5e
 800b5dc:	5a5b      	ldrh	r3, [r3, r1]
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	0011      	movs	r1, r2
 800b5e8:	0018      	movs	r0, r3
 800b5ea:	f000 f915 	bl	800b818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5ee:	e0ed      	b.n	800b7cc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	225c      	movs	r2, #92	; 0x5c
 800b5f4:	5a99      	ldrh	r1, [r3, r2]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	225e      	movs	r2, #94	; 0x5e
 800b5fa:	5a9b      	ldrh	r3, [r3, r2]
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	208e      	movs	r0, #142	; 0x8e
 800b600:	183b      	adds	r3, r7, r0
 800b602:	1a8a      	subs	r2, r1, r2
 800b604:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	225e      	movs	r2, #94	; 0x5e
 800b60a:	5a9b      	ldrh	r3, [r3, r2]
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d100      	bne.n	800b614 <HAL_UART_IRQHandler+0x478>
 800b612:	e0dd      	b.n	800b7d0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800b614:	183b      	adds	r3, r7, r0
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d100      	bne.n	800b61e <HAL_UART_IRQHandler+0x482>
 800b61c:	e0d8      	b.n	800b7d0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b61e:	f3ef 8310 	mrs	r3, PRIMASK
 800b622:	60fb      	str	r3, [r7, #12]
  return(result);
 800b624:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b626:	2488      	movs	r4, #136	; 0x88
 800b628:	193a      	adds	r2, r7, r4
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	2301      	movs	r3, #1
 800b62e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	f383 8810 	msr	PRIMASK, r3
}
 800b636:	46c0      	nop			; (mov r8, r8)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4967      	ldr	r1, [pc, #412]	; (800b7e0 <HAL_UART_IRQHandler+0x644>)
 800b644:	400a      	ands	r2, r1
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	193b      	adds	r3, r7, r4
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f383 8810 	msr	PRIMASK, r3
}
 800b654:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b656:	f3ef 8310 	mrs	r3, PRIMASK
 800b65a:	61bb      	str	r3, [r7, #24]
  return(result);
 800b65c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b65e:	2484      	movs	r4, #132	; 0x84
 800b660:	193a      	adds	r2, r7, r4
 800b662:	6013      	str	r3, [r2, #0]
 800b664:	2301      	movs	r3, #1
 800b666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	f383 8810 	msr	PRIMASK, r3
}
 800b66e:	46c0      	nop			; (mov r8, r8)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	689a      	ldr	r2, [r3, #8]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	495a      	ldr	r1, [pc, #360]	; (800b7e4 <HAL_UART_IRQHandler+0x648>)
 800b67c:	400a      	ands	r2, r1
 800b67e:	609a      	str	r2, [r3, #8]
 800b680:	193b      	adds	r3, r7, r4
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	f383 8810 	msr	PRIMASK, r3
}
 800b68c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	228c      	movs	r2, #140	; 0x8c
 800b692:	2120      	movs	r1, #32
 800b694:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6aa:	2480      	movs	r4, #128	; 0x80
 800b6ac:	193a      	adds	r2, r7, r4
 800b6ae:	6013      	str	r3, [r2, #0]
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	f383 8810 	msr	PRIMASK, r3
}
 800b6ba:	46c0      	nop			; (mov r8, r8)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2110      	movs	r1, #16
 800b6c8:	438a      	bics	r2, r1
 800b6ca:	601a      	str	r2, [r3, #0]
 800b6cc:	193b      	adds	r3, r7, r4
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d4:	f383 8810 	msr	PRIMASK, r3
}
 800b6d8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2202      	movs	r2, #2
 800b6de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6e0:	183b      	adds	r3, r7, r0
 800b6e2:	881a      	ldrh	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	0011      	movs	r1, r2
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	f000 f895 	bl	800b818 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6ee:	e06f      	b.n	800b7d0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b6f0:	23a4      	movs	r3, #164	; 0xa4
 800b6f2:	18fb      	adds	r3, r7, r3
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	2380      	movs	r3, #128	; 0x80
 800b6f8:	035b      	lsls	r3, r3, #13
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	d010      	beq.n	800b720 <HAL_UART_IRQHandler+0x584>
 800b6fe:	239c      	movs	r3, #156	; 0x9c
 800b700:	18fb      	adds	r3, r7, r3
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	2380      	movs	r3, #128	; 0x80
 800b706:	03db      	lsls	r3, r3, #15
 800b708:	4013      	ands	r3, r2
 800b70a:	d009      	beq.n	800b720 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2280      	movs	r2, #128	; 0x80
 800b712:	0352      	lsls	r2, r2, #13
 800b714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	0018      	movs	r0, r3
 800b71a:	f001 fac9 	bl	800ccb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b71e:	e05a      	b.n	800b7d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b720:	23a4      	movs	r3, #164	; 0xa4
 800b722:	18fb      	adds	r3, r7, r3
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2280      	movs	r2, #128	; 0x80
 800b728:	4013      	ands	r3, r2
 800b72a:	d016      	beq.n	800b75a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b72c:	23a0      	movs	r3, #160	; 0xa0
 800b72e:	18fb      	adds	r3, r7, r3
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2280      	movs	r2, #128	; 0x80
 800b734:	4013      	ands	r3, r2
 800b736:	d106      	bne.n	800b746 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b738:	239c      	movs	r3, #156	; 0x9c
 800b73a:	18fb      	adds	r3, r7, r3
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	2380      	movs	r3, #128	; 0x80
 800b740:	041b      	lsls	r3, r3, #16
 800b742:	4013      	ands	r3, r2
 800b744:	d009      	beq.n	800b75a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d042      	beq.n	800b7d4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	0010      	movs	r0, r2
 800b756:	4798      	blx	r3
    }
    return;
 800b758:	e03c      	b.n	800b7d4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b75a:	23a4      	movs	r3, #164	; 0xa4
 800b75c:	18fb      	adds	r3, r7, r3
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2240      	movs	r2, #64	; 0x40
 800b762:	4013      	ands	r3, r2
 800b764:	d00a      	beq.n	800b77c <HAL_UART_IRQHandler+0x5e0>
 800b766:	23a0      	movs	r3, #160	; 0xa0
 800b768:	18fb      	adds	r3, r7, r3
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2240      	movs	r2, #64	; 0x40
 800b76e:	4013      	ands	r3, r2
 800b770:	d004      	beq.n	800b77c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	0018      	movs	r0, r3
 800b776:	f000 fe0e 	bl	800c396 <UART_EndTransmit_IT>
    return;
 800b77a:	e02c      	b.n	800b7d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b77c:	23a4      	movs	r3, #164	; 0xa4
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	2380      	movs	r3, #128	; 0x80
 800b784:	041b      	lsls	r3, r3, #16
 800b786:	4013      	ands	r3, r2
 800b788:	d00b      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x606>
 800b78a:	23a0      	movs	r3, #160	; 0xa0
 800b78c:	18fb      	adds	r3, r7, r3
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	2380      	movs	r3, #128	; 0x80
 800b792:	05db      	lsls	r3, r3, #23
 800b794:	4013      	ands	r3, r2
 800b796:	d004      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	0018      	movs	r0, r3
 800b79c:	f001 fa98 	bl	800ccd0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7a0:	e019      	b.n	800b7d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7a2:	23a4      	movs	r3, #164	; 0xa4
 800b7a4:	18fb      	adds	r3, r7, r3
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	2380      	movs	r3, #128	; 0x80
 800b7aa:	045b      	lsls	r3, r3, #17
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	d012      	beq.n	800b7d6 <HAL_UART_IRQHandler+0x63a>
 800b7b0:	23a0      	movs	r3, #160	; 0xa0
 800b7b2:	18fb      	adds	r3, r7, r3
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	da0d      	bge.n	800b7d6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	0018      	movs	r0, r3
 800b7be:	f001 fa7f 	bl	800ccc0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7c2:	e008      	b.n	800b7d6 <HAL_UART_IRQHandler+0x63a>
      return;
 800b7c4:	46c0      	nop			; (mov r8, r8)
 800b7c6:	e006      	b.n	800b7d6 <HAL_UART_IRQHandler+0x63a>
    return;
 800b7c8:	46c0      	nop			; (mov r8, r8)
 800b7ca:	e004      	b.n	800b7d6 <HAL_UART_IRQHandler+0x63a>
      return;
 800b7cc:	46c0      	nop			; (mov r8, r8)
 800b7ce:	e002      	b.n	800b7d6 <HAL_UART_IRQHandler+0x63a>
      return;
 800b7d0:	46c0      	nop			; (mov r8, r8)
 800b7d2:	e000      	b.n	800b7d6 <HAL_UART_IRQHandler+0x63a>
    return;
 800b7d4:	46c0      	nop			; (mov r8, r8)
  }
}
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	b02a      	add	sp, #168	; 0xa8
 800b7da:	bdb0      	pop	{r4, r5, r7, pc}
 800b7dc:	fffffeff 	.word	0xfffffeff
 800b7e0:	fffffedf 	.word	0xfffffedf
 800b7e4:	effffffe 	.word	0xeffffffe

0800b7e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b7f0:	46c0      	nop			; (mov r8, r8)
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	b002      	add	sp, #8
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b800:	46c0      	nop			; (mov r8, r8)
 800b802:	46bd      	mov	sp, r7
 800b804:	b002      	add	sp, #8
 800b806:	bd80      	pop	{r7, pc}

0800b808 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b810:	46c0      	nop			; (mov r8, r8)
 800b812:	46bd      	mov	sp, r7
 800b814:	b002      	add	sp, #8
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	000a      	movs	r2, r1
 800b822:	1cbb      	adds	r3, r7, #2
 800b824:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b826:	46c0      	nop			; (mov r8, r8)
 800b828:	46bd      	mov	sp, r7
 800b82a:	b002      	add	sp, #8
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b08a      	sub	sp, #40	; 0x28
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2284      	movs	r2, #132	; 0x84
 800b83a:	5c9b      	ldrb	r3, [r3, r2]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d101      	bne.n	800b844 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800b840:	2302      	movs	r3, #2
 800b842:	e042      	b.n	800b8ca <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2284      	movs	r2, #132	; 0x84
 800b848:	2101      	movs	r1, #1
 800b84a:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2288      	movs	r2, #136	; 0x88
 800b850:	2124      	movs	r1, #36	; 0x24
 800b852:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b854:	f3ef 8310 	mrs	r3, PRIMASK
 800b858:	60bb      	str	r3, [r7, #8]
  return(result);
 800b85a:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800b85c:	627b      	str	r3, [r7, #36]	; 0x24
 800b85e:	2301      	movs	r3, #1
 800b860:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f383 8810 	msr	PRIMASK, r3
}
 800b868:	46c0      	nop			; (mov r8, r8)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	210c      	movs	r1, #12
 800b876:	438a      	bics	r2, r1
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	f383 8810 	msr	PRIMASK, r3
}
 800b884:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b886:	f3ef 8310 	mrs	r3, PRIMASK
 800b88a:	617b      	str	r3, [r7, #20]
  return(result);
 800b88c:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800b88e:	623b      	str	r3, [r7, #32]
 800b890:	2301      	movs	r3, #1
 800b892:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	f383 8810 	msr	PRIMASK, r3
}
 800b89a:	46c0      	nop			; (mov r8, r8)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2108      	movs	r1, #8
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	f383 8810 	msr	PRIMASK, r3
}
 800b8b6:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2288      	movs	r2, #136	; 0x88
 800b8bc:	2120      	movs	r1, #32
 800b8be:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2284      	movs	r2, #132	; 0x84
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	0018      	movs	r0, r3
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	b00a      	add	sp, #40	; 0x28
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b08a      	sub	sp, #40	; 0x28
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2284      	movs	r2, #132	; 0x84
 800b8de:	5c9b      	ldrb	r3, [r3, r2]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d101      	bne.n	800b8e8 <HAL_HalfDuplex_EnableReceiver+0x16>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	e042      	b.n	800b96e <HAL_HalfDuplex_EnableReceiver+0x9c>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2284      	movs	r2, #132	; 0x84
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2288      	movs	r2, #136	; 0x88
 800b8f4:	2124      	movs	r1, #36	; 0x24
 800b8f6:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b8fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8fe:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800b900:	627b      	str	r3, [r7, #36]	; 0x24
 800b902:	2301      	movs	r3, #1
 800b904:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f383 8810 	msr	PRIMASK, r3
}
 800b90c:	46c0      	nop			; (mov r8, r8)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	210c      	movs	r1, #12
 800b91a:	438a      	bics	r2, r1
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	f383 8810 	msr	PRIMASK, r3
}
 800b928:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b92a:	f3ef 8310 	mrs	r3, PRIMASK
 800b92e:	617b      	str	r3, [r7, #20]
  return(result);
 800b930:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800b932:	623b      	str	r3, [r7, #32]
 800b934:	2301      	movs	r3, #1
 800b936:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	f383 8810 	msr	PRIMASK, r3
}
 800b93e:	46c0      	nop			; (mov r8, r8)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2104      	movs	r1, #4
 800b94c:	430a      	orrs	r2, r1
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	6a3b      	ldr	r3, [r7, #32]
 800b952:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	f383 8810 	msr	PRIMASK, r3
}
 800b95a:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2288      	movs	r2, #136	; 0x88
 800b960:	2120      	movs	r1, #32
 800b962:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2284      	movs	r2, #132	; 0x84
 800b968:	2100      	movs	r1, #0
 800b96a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	0018      	movs	r0, r3
 800b970:	46bd      	mov	sp, r7
 800b972:	b00a      	add	sp, #40	; 0x28
 800b974:	bd80      	pop	{r7, pc}
	...

0800b978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b088      	sub	sp, #32
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b980:	231a      	movs	r3, #26
 800b982:	18fb      	adds	r3, r7, r3
 800b984:	2200      	movs	r2, #0
 800b986:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689a      	ldr	r2, [r3, #8]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	431a      	orrs	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	695b      	ldr	r3, [r3, #20]
 800b996:	431a      	orrs	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	69db      	ldr	r3, [r3, #28]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4abc      	ldr	r2, [pc, #752]	; (800bc98 <UART_SetConfig+0x320>)
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	0019      	movs	r1, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	69fa      	ldr	r2, [r7, #28]
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	4ab7      	ldr	r2, [pc, #732]	; (800bc9c <UART_SetConfig+0x324>)
 800b9be:	4013      	ands	r3, r2
 800b9c0:	0019      	movs	r1, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68da      	ldr	r2, [r3, #12]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a1b      	ldr	r3, [r3, #32]
 800b9d8:	69fa      	ldr	r2, [r7, #28]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	4aae      	ldr	r2, [pc, #696]	; (800bca0 <UART_SetConfig+0x328>)
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	0019      	movs	r1, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	69fa      	ldr	r2, [r7, #28]
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fa:	220f      	movs	r2, #15
 800b9fc:	4393      	bics	r3, r2
 800b9fe:	0019      	movs	r1, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	430a      	orrs	r2, r1
 800ba0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4aa4      	ldr	r2, [pc, #656]	; (800bca4 <UART_SetConfig+0x32c>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d127      	bne.n	800ba66 <UART_SetConfig+0xee>
 800ba16:	4ba4      	ldr	r3, [pc, #656]	; (800bca8 <UART_SetConfig+0x330>)
 800ba18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba1a:	2203      	movs	r2, #3
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d017      	beq.n	800ba52 <UART_SetConfig+0xda>
 800ba22:	d81b      	bhi.n	800ba5c <UART_SetConfig+0xe4>
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	d00a      	beq.n	800ba3e <UART_SetConfig+0xc6>
 800ba28:	d818      	bhi.n	800ba5c <UART_SetConfig+0xe4>
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <UART_SetConfig+0xbc>
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d00a      	beq.n	800ba48 <UART_SetConfig+0xd0>
 800ba32:	e013      	b.n	800ba5c <UART_SetConfig+0xe4>
 800ba34:	231b      	movs	r3, #27
 800ba36:	18fb      	adds	r3, r7, r3
 800ba38:	2200      	movs	r2, #0
 800ba3a:	701a      	strb	r2, [r3, #0]
 800ba3c:	e058      	b.n	800baf0 <UART_SetConfig+0x178>
 800ba3e:	231b      	movs	r3, #27
 800ba40:	18fb      	adds	r3, r7, r3
 800ba42:	2202      	movs	r2, #2
 800ba44:	701a      	strb	r2, [r3, #0]
 800ba46:	e053      	b.n	800baf0 <UART_SetConfig+0x178>
 800ba48:	231b      	movs	r3, #27
 800ba4a:	18fb      	adds	r3, r7, r3
 800ba4c:	2204      	movs	r2, #4
 800ba4e:	701a      	strb	r2, [r3, #0]
 800ba50:	e04e      	b.n	800baf0 <UART_SetConfig+0x178>
 800ba52:	231b      	movs	r3, #27
 800ba54:	18fb      	adds	r3, r7, r3
 800ba56:	2208      	movs	r2, #8
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	e049      	b.n	800baf0 <UART_SetConfig+0x178>
 800ba5c:	231b      	movs	r3, #27
 800ba5e:	18fb      	adds	r3, r7, r3
 800ba60:	2210      	movs	r2, #16
 800ba62:	701a      	strb	r2, [r3, #0]
 800ba64:	e044      	b.n	800baf0 <UART_SetConfig+0x178>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a90      	ldr	r2, [pc, #576]	; (800bcac <UART_SetConfig+0x334>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d127      	bne.n	800bac0 <UART_SetConfig+0x148>
 800ba70:	4b8d      	ldr	r3, [pc, #564]	; (800bca8 <UART_SetConfig+0x330>)
 800ba72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba74:	220c      	movs	r2, #12
 800ba76:	4013      	ands	r3, r2
 800ba78:	2b0c      	cmp	r3, #12
 800ba7a:	d017      	beq.n	800baac <UART_SetConfig+0x134>
 800ba7c:	d81b      	bhi.n	800bab6 <UART_SetConfig+0x13e>
 800ba7e:	2b08      	cmp	r3, #8
 800ba80:	d00a      	beq.n	800ba98 <UART_SetConfig+0x120>
 800ba82:	d818      	bhi.n	800bab6 <UART_SetConfig+0x13e>
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <UART_SetConfig+0x116>
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	d00a      	beq.n	800baa2 <UART_SetConfig+0x12a>
 800ba8c:	e013      	b.n	800bab6 <UART_SetConfig+0x13e>
 800ba8e:	231b      	movs	r3, #27
 800ba90:	18fb      	adds	r3, r7, r3
 800ba92:	2200      	movs	r2, #0
 800ba94:	701a      	strb	r2, [r3, #0]
 800ba96:	e02b      	b.n	800baf0 <UART_SetConfig+0x178>
 800ba98:	231b      	movs	r3, #27
 800ba9a:	18fb      	adds	r3, r7, r3
 800ba9c:	2202      	movs	r2, #2
 800ba9e:	701a      	strb	r2, [r3, #0]
 800baa0:	e026      	b.n	800baf0 <UART_SetConfig+0x178>
 800baa2:	231b      	movs	r3, #27
 800baa4:	18fb      	adds	r3, r7, r3
 800baa6:	2204      	movs	r2, #4
 800baa8:	701a      	strb	r2, [r3, #0]
 800baaa:	e021      	b.n	800baf0 <UART_SetConfig+0x178>
 800baac:	231b      	movs	r3, #27
 800baae:	18fb      	adds	r3, r7, r3
 800bab0:	2208      	movs	r2, #8
 800bab2:	701a      	strb	r2, [r3, #0]
 800bab4:	e01c      	b.n	800baf0 <UART_SetConfig+0x178>
 800bab6:	231b      	movs	r3, #27
 800bab8:	18fb      	adds	r3, r7, r3
 800baba:	2210      	movs	r2, #16
 800babc:	701a      	strb	r2, [r3, #0]
 800babe:	e017      	b.n	800baf0 <UART_SetConfig+0x178>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a7a      	ldr	r2, [pc, #488]	; (800bcb0 <UART_SetConfig+0x338>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d104      	bne.n	800bad4 <UART_SetConfig+0x15c>
 800baca:	231b      	movs	r3, #27
 800bacc:	18fb      	adds	r3, r7, r3
 800bace:	2200      	movs	r2, #0
 800bad0:	701a      	strb	r2, [r3, #0]
 800bad2:	e00d      	b.n	800baf0 <UART_SetConfig+0x178>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a76      	ldr	r2, [pc, #472]	; (800bcb4 <UART_SetConfig+0x33c>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d104      	bne.n	800bae8 <UART_SetConfig+0x170>
 800bade:	231b      	movs	r3, #27
 800bae0:	18fb      	adds	r3, r7, r3
 800bae2:	2200      	movs	r2, #0
 800bae4:	701a      	strb	r2, [r3, #0]
 800bae6:	e003      	b.n	800baf0 <UART_SetConfig+0x178>
 800bae8:	231b      	movs	r3, #27
 800baea:	18fb      	adds	r3, r7, r3
 800baec:	2210      	movs	r2, #16
 800baee:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	69da      	ldr	r2, [r3, #28]
 800baf4:	2380      	movs	r3, #128	; 0x80
 800baf6:	021b      	lsls	r3, r3, #8
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d000      	beq.n	800bafe <UART_SetConfig+0x186>
 800bafc:	e065      	b.n	800bbca <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800bafe:	231b      	movs	r3, #27
 800bb00:	18fb      	adds	r3, r7, r3
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b08      	cmp	r3, #8
 800bb06:	d015      	beq.n	800bb34 <UART_SetConfig+0x1bc>
 800bb08:	dc18      	bgt.n	800bb3c <UART_SetConfig+0x1c4>
 800bb0a:	2b04      	cmp	r3, #4
 800bb0c:	d00d      	beq.n	800bb2a <UART_SetConfig+0x1b2>
 800bb0e:	dc15      	bgt.n	800bb3c <UART_SetConfig+0x1c4>
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <UART_SetConfig+0x1a2>
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d005      	beq.n	800bb24 <UART_SetConfig+0x1ac>
 800bb18:	e010      	b.n	800bb3c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb1a:	f7fc fdd3 	bl	80086c4 <HAL_RCC_GetPCLK1Freq>
 800bb1e:	0003      	movs	r3, r0
 800bb20:	617b      	str	r3, [r7, #20]
        break;
 800bb22:	e012      	b.n	800bb4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb24:	4b64      	ldr	r3, [pc, #400]	; (800bcb8 <UART_SetConfig+0x340>)
 800bb26:	617b      	str	r3, [r7, #20]
        break;
 800bb28:	e00f      	b.n	800bb4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb2a:	f7fc fd41 	bl	80085b0 <HAL_RCC_GetSysClockFreq>
 800bb2e:	0003      	movs	r3, r0
 800bb30:	617b      	str	r3, [r7, #20]
        break;
 800bb32:	e00a      	b.n	800bb4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb34:	2380      	movs	r3, #128	; 0x80
 800bb36:	021b      	lsls	r3, r3, #8
 800bb38:	617b      	str	r3, [r7, #20]
        break;
 800bb3a:	e006      	b.n	800bb4a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bb40:	231a      	movs	r3, #26
 800bb42:	18fb      	adds	r3, r7, r3
 800bb44:	2201      	movs	r2, #1
 800bb46:	701a      	strb	r2, [r3, #0]
        break;
 800bb48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d100      	bne.n	800bb52 <UART_SetConfig+0x1da>
 800bb50:	e08d      	b.n	800bc6e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb56:	4b59      	ldr	r3, [pc, #356]	; (800bcbc <UART_SetConfig+0x344>)
 800bb58:	0052      	lsls	r2, r2, #1
 800bb5a:	5ad3      	ldrh	r3, [r2, r3]
 800bb5c:	0019      	movs	r1, r3
 800bb5e:	6978      	ldr	r0, [r7, #20]
 800bb60:	f7f4 faf8 	bl	8000154 <__udivsi3>
 800bb64:	0003      	movs	r3, r0
 800bb66:	005a      	lsls	r2, r3, #1
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	085b      	lsrs	r3, r3, #1
 800bb6e:	18d2      	adds	r2, r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	0019      	movs	r1, r3
 800bb76:	0010      	movs	r0, r2
 800bb78:	f7f4 faec 	bl	8000154 <__udivsi3>
 800bb7c:	0003      	movs	r3, r0
 800bb7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	2b0f      	cmp	r3, #15
 800bb84:	d91c      	bls.n	800bbc0 <UART_SetConfig+0x248>
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	2380      	movs	r3, #128	; 0x80
 800bb8a:	025b      	lsls	r3, r3, #9
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d217      	bcs.n	800bbc0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	200e      	movs	r0, #14
 800bb96:	183b      	adds	r3, r7, r0
 800bb98:	210f      	movs	r1, #15
 800bb9a:	438a      	bics	r2, r1
 800bb9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	085b      	lsrs	r3, r3, #1
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	2207      	movs	r2, #7
 800bba6:	4013      	ands	r3, r2
 800bba8:	b299      	uxth	r1, r3
 800bbaa:	183b      	adds	r3, r7, r0
 800bbac:	183a      	adds	r2, r7, r0
 800bbae:	8812      	ldrh	r2, [r2, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	183a      	adds	r2, r7, r0
 800bbba:	8812      	ldrh	r2, [r2, #0]
 800bbbc:	60da      	str	r2, [r3, #12]
 800bbbe:	e056      	b.n	800bc6e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800bbc0:	231a      	movs	r3, #26
 800bbc2:	18fb      	adds	r3, r7, r3
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	e051      	b.n	800bc6e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbca:	231b      	movs	r3, #27
 800bbcc:	18fb      	adds	r3, r7, r3
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b08      	cmp	r3, #8
 800bbd2:	d015      	beq.n	800bc00 <UART_SetConfig+0x288>
 800bbd4:	dc18      	bgt.n	800bc08 <UART_SetConfig+0x290>
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d00d      	beq.n	800bbf6 <UART_SetConfig+0x27e>
 800bbda:	dc15      	bgt.n	800bc08 <UART_SetConfig+0x290>
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <UART_SetConfig+0x26e>
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d005      	beq.n	800bbf0 <UART_SetConfig+0x278>
 800bbe4:	e010      	b.n	800bc08 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbe6:	f7fc fd6d 	bl	80086c4 <HAL_RCC_GetPCLK1Freq>
 800bbea:	0003      	movs	r3, r0
 800bbec:	617b      	str	r3, [r7, #20]
        break;
 800bbee:	e012      	b.n	800bc16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbf0:	4b31      	ldr	r3, [pc, #196]	; (800bcb8 <UART_SetConfig+0x340>)
 800bbf2:	617b      	str	r3, [r7, #20]
        break;
 800bbf4:	e00f      	b.n	800bc16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbf6:	f7fc fcdb 	bl	80085b0 <HAL_RCC_GetSysClockFreq>
 800bbfa:	0003      	movs	r3, r0
 800bbfc:	617b      	str	r3, [r7, #20]
        break;
 800bbfe:	e00a      	b.n	800bc16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc00:	2380      	movs	r3, #128	; 0x80
 800bc02:	021b      	lsls	r3, r3, #8
 800bc04:	617b      	str	r3, [r7, #20]
        break;
 800bc06:	e006      	b.n	800bc16 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bc0c:	231a      	movs	r3, #26
 800bc0e:	18fb      	adds	r3, r7, r3
 800bc10:	2201      	movs	r2, #1
 800bc12:	701a      	strb	r2, [r3, #0]
        break;
 800bc14:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d028      	beq.n	800bc6e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc20:	4b26      	ldr	r3, [pc, #152]	; (800bcbc <UART_SetConfig+0x344>)
 800bc22:	0052      	lsls	r2, r2, #1
 800bc24:	5ad3      	ldrh	r3, [r2, r3]
 800bc26:	0019      	movs	r1, r3
 800bc28:	6978      	ldr	r0, [r7, #20]
 800bc2a:	f7f4 fa93 	bl	8000154 <__udivsi3>
 800bc2e:	0003      	movs	r3, r0
 800bc30:	001a      	movs	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	085b      	lsrs	r3, r3, #1
 800bc38:	18d2      	adds	r2, r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	0019      	movs	r1, r3
 800bc40:	0010      	movs	r0, r2
 800bc42:	f7f4 fa87 	bl	8000154 <__udivsi3>
 800bc46:	0003      	movs	r3, r0
 800bc48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	2b0f      	cmp	r3, #15
 800bc4e:	d90a      	bls.n	800bc66 <UART_SetConfig+0x2ee>
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	2380      	movs	r3, #128	; 0x80
 800bc54:	025b      	lsls	r3, r3, #9
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d205      	bcs.n	800bc66 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	60da      	str	r2, [r3, #12]
 800bc64:	e003      	b.n	800bc6e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800bc66:	231a      	movs	r3, #26
 800bc68:	18fb      	adds	r3, r7, r3
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	226a      	movs	r2, #106	; 0x6a
 800bc72:	2101      	movs	r1, #1
 800bc74:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2268      	movs	r2, #104	; 0x68
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bc8a:	231a      	movs	r3, #26
 800bc8c:	18fb      	adds	r3, r7, r3
 800bc8e:	781b      	ldrb	r3, [r3, #0]
}
 800bc90:	0018      	movs	r0, r3
 800bc92:	46bd      	mov	sp, r7
 800bc94:	b008      	add	sp, #32
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	cfff69f3 	.word	0xcfff69f3
 800bc9c:	ffffcfff 	.word	0xffffcfff
 800bca0:	11fff4ff 	.word	0x11fff4ff
 800bca4:	40013800 	.word	0x40013800
 800bca8:	40021000 	.word	0x40021000
 800bcac:	40004400 	.word	0x40004400
 800bcb0:	40004800 	.word	0x40004800
 800bcb4:	40004c00 	.word	0x40004c00
 800bcb8:	00f42400 	.word	0x00f42400
 800bcbc:	0801b764 	.word	0x0801b764

0800bcc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bccc:	2201      	movs	r2, #1
 800bcce:	4013      	ands	r3, r2
 800bcd0:	d00b      	beq.n	800bcea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	4a4a      	ldr	r2, [pc, #296]	; (800be04 <UART_AdvFeatureConfig+0x144>)
 800bcda:	4013      	ands	r3, r2
 800bcdc:	0019      	movs	r1, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcee:	2202      	movs	r2, #2
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	d00b      	beq.n	800bd0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	4a43      	ldr	r2, [pc, #268]	; (800be08 <UART_AdvFeatureConfig+0x148>)
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	0019      	movs	r1, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd10:	2204      	movs	r2, #4
 800bd12:	4013      	ands	r3, r2
 800bd14:	d00b      	beq.n	800bd2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	4a3b      	ldr	r2, [pc, #236]	; (800be0c <UART_AdvFeatureConfig+0x14c>)
 800bd1e:	4013      	ands	r3, r2
 800bd20:	0019      	movs	r1, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	430a      	orrs	r2, r1
 800bd2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd32:	2208      	movs	r2, #8
 800bd34:	4013      	ands	r3, r2
 800bd36:	d00b      	beq.n	800bd50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	4a34      	ldr	r2, [pc, #208]	; (800be10 <UART_AdvFeatureConfig+0x150>)
 800bd40:	4013      	ands	r3, r2
 800bd42:	0019      	movs	r1, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	430a      	orrs	r2, r1
 800bd4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd54:	2210      	movs	r2, #16
 800bd56:	4013      	ands	r3, r2
 800bd58:	d00b      	beq.n	800bd72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	4a2c      	ldr	r2, [pc, #176]	; (800be14 <UART_AdvFeatureConfig+0x154>)
 800bd62:	4013      	ands	r3, r2
 800bd64:	0019      	movs	r1, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd76:	2220      	movs	r2, #32
 800bd78:	4013      	ands	r3, r2
 800bd7a:	d00b      	beq.n	800bd94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	4a25      	ldr	r2, [pc, #148]	; (800be18 <UART_AdvFeatureConfig+0x158>)
 800bd84:	4013      	ands	r3, r2
 800bd86:	0019      	movs	r1, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	430a      	orrs	r2, r1
 800bd92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd98:	2240      	movs	r2, #64	; 0x40
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	d01d      	beq.n	800bdda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	4a1d      	ldr	r2, [pc, #116]	; (800be1c <UART_AdvFeatureConfig+0x15c>)
 800bda6:	4013      	ands	r3, r2
 800bda8:	0019      	movs	r1, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdba:	2380      	movs	r3, #128	; 0x80
 800bdbc:	035b      	lsls	r3, r3, #13
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d10b      	bne.n	800bdda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	4a15      	ldr	r2, [pc, #84]	; (800be20 <UART_AdvFeatureConfig+0x160>)
 800bdca:	4013      	ands	r3, r2
 800bdcc:	0019      	movs	r1, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdde:	2280      	movs	r2, #128	; 0x80
 800bde0:	4013      	ands	r3, r2
 800bde2:	d00b      	beq.n	800bdfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	4a0e      	ldr	r2, [pc, #56]	; (800be24 <UART_AdvFeatureConfig+0x164>)
 800bdec:	4013      	ands	r3, r2
 800bdee:	0019      	movs	r1, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	605a      	str	r2, [r3, #4]
  }
}
 800bdfc:	46c0      	nop			; (mov r8, r8)
 800bdfe:	46bd      	mov	sp, r7
 800be00:	b002      	add	sp, #8
 800be02:	bd80      	pop	{r7, pc}
 800be04:	fffdffff 	.word	0xfffdffff
 800be08:	fffeffff 	.word	0xfffeffff
 800be0c:	fffbffff 	.word	0xfffbffff
 800be10:	ffff7fff 	.word	0xffff7fff
 800be14:	ffffefff 	.word	0xffffefff
 800be18:	ffffdfff 	.word	0xffffdfff
 800be1c:	ffefffff 	.word	0xffefffff
 800be20:	ff9fffff 	.word	0xff9fffff
 800be24:	fff7ffff 	.word	0xfff7ffff

0800be28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af02      	add	r7, sp, #8
 800be2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2290      	movs	r2, #144	; 0x90
 800be34:	2100      	movs	r1, #0
 800be36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be38:	f7fa fe34 	bl	8006aa4 <HAL_GetTick>
 800be3c:	0003      	movs	r3, r0
 800be3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2208      	movs	r2, #8
 800be48:	4013      	ands	r3, r2
 800be4a:	2b08      	cmp	r3, #8
 800be4c:	d10c      	bne.n	800be68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2280      	movs	r2, #128	; 0x80
 800be52:	0391      	lsls	r1, r2, #14
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	4a1a      	ldr	r2, [pc, #104]	; (800bec0 <UART_CheckIdleState+0x98>)
 800be58:	9200      	str	r2, [sp, #0]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f000 f832 	bl	800bec4 <UART_WaitOnFlagUntilTimeout>
 800be60:	1e03      	subs	r3, r0, #0
 800be62:	d001      	beq.n	800be68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	e026      	b.n	800beb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2204      	movs	r2, #4
 800be70:	4013      	ands	r3, r2
 800be72:	2b04      	cmp	r3, #4
 800be74:	d10c      	bne.n	800be90 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2280      	movs	r2, #128	; 0x80
 800be7a:	03d1      	lsls	r1, r2, #15
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	4a10      	ldr	r2, [pc, #64]	; (800bec0 <UART_CheckIdleState+0x98>)
 800be80:	9200      	str	r2, [sp, #0]
 800be82:	2200      	movs	r2, #0
 800be84:	f000 f81e 	bl	800bec4 <UART_WaitOnFlagUntilTimeout>
 800be88:	1e03      	subs	r3, r0, #0
 800be8a:	d001      	beq.n	800be90 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e012      	b.n	800beb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2288      	movs	r2, #136	; 0x88
 800be94:	2120      	movs	r1, #32
 800be96:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	228c      	movs	r2, #140	; 0x8c
 800be9c:	2120      	movs	r1, #32
 800be9e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2284      	movs	r2, #132	; 0x84
 800beb0:	2100      	movs	r1, #0
 800beb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	0018      	movs	r0, r3
 800beb8:	46bd      	mov	sp, r7
 800beba:	b004      	add	sp, #16
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	46c0      	nop			; (mov r8, r8)
 800bec0:	01ffffff 	.word	0x01ffffff

0800bec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b094      	sub	sp, #80	; 0x50
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	1dfb      	adds	r3, r7, #7
 800bed2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bed4:	e0a7      	b.n	800c026 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bed8:	3301      	adds	r3, #1
 800beda:	d100      	bne.n	800bede <UART_WaitOnFlagUntilTimeout+0x1a>
 800bedc:	e0a3      	b.n	800c026 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bede:	f7fa fde1 	bl	8006aa4 <HAL_GetTick>
 800bee2:	0002      	movs	r2, r0
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800beea:	429a      	cmp	r2, r3
 800beec:	d302      	bcc.n	800bef4 <UART_WaitOnFlagUntilTimeout+0x30>
 800beee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d13f      	bne.n	800bf74 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bef4:	f3ef 8310 	mrs	r3, PRIMASK
 800bef8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800befc:	647b      	str	r3, [r7, #68]	; 0x44
 800befe:	2301      	movs	r3, #1
 800bf00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	f383 8810 	msr	PRIMASK, r3
}
 800bf08:	46c0      	nop			; (mov r8, r8)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	494e      	ldr	r1, [pc, #312]	; (800c050 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800bf16:	400a      	ands	r2, r1
 800bf18:	601a      	str	r2, [r3, #0]
 800bf1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf1c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	f383 8810 	msr	PRIMASK, r3
}
 800bf24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf26:	f3ef 8310 	mrs	r3, PRIMASK
 800bf2a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800bf2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf2e:	643b      	str	r3, [r7, #64]	; 0x40
 800bf30:	2301      	movs	r3, #1
 800bf32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf36:	f383 8810 	msr	PRIMASK, r3
}
 800bf3a:	46c0      	nop			; (mov r8, r8)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	689a      	ldr	r2, [r3, #8]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2101      	movs	r1, #1
 800bf48:	438a      	bics	r2, r1
 800bf4a:	609a      	str	r2, [r3, #8]
 800bf4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf52:	f383 8810 	msr	PRIMASK, r3
}
 800bf56:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2288      	movs	r2, #136	; 0x88
 800bf5c:	2120      	movs	r1, #32
 800bf5e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	228c      	movs	r2, #140	; 0x8c
 800bf64:	2120      	movs	r1, #32
 800bf66:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2284      	movs	r2, #132	; 0x84
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e069      	b.n	800c048 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2204      	movs	r2, #4
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	d052      	beq.n	800c026 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	69da      	ldr	r2, [r3, #28]
 800bf86:	2380      	movs	r3, #128	; 0x80
 800bf88:	011b      	lsls	r3, r3, #4
 800bf8a:	401a      	ands	r2, r3
 800bf8c:	2380      	movs	r3, #128	; 0x80
 800bf8e:	011b      	lsls	r3, r3, #4
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d148      	bne.n	800c026 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2280      	movs	r2, #128	; 0x80
 800bf9a:	0112      	lsls	r2, r2, #4
 800bf9c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf9e:	f3ef 8310 	mrs	r3, PRIMASK
 800bfa2:	613b      	str	r3, [r7, #16]
  return(result);
 800bfa4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bfa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	f383 8810 	msr	PRIMASK, r3
}
 800bfb2:	46c0      	nop			; (mov r8, r8)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4924      	ldr	r1, [pc, #144]	; (800c050 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800bfc0:	400a      	ands	r2, r1
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	f383 8810 	msr	PRIMASK, r3
}
 800bfce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfd0:	f3ef 8310 	mrs	r3, PRIMASK
 800bfd4:	61fb      	str	r3, [r7, #28]
  return(result);
 800bfd6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfda:	2301      	movs	r3, #1
 800bfdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	f383 8810 	msr	PRIMASK, r3
}
 800bfe4:	46c0      	nop			; (mov r8, r8)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2101      	movs	r1, #1
 800bff2:	438a      	bics	r2, r1
 800bff4:	609a      	str	r2, [r3, #8]
 800bff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bff8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	f383 8810 	msr	PRIMASK, r3
}
 800c000:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2288      	movs	r2, #136	; 0x88
 800c006:	2120      	movs	r1, #32
 800c008:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	228c      	movs	r2, #140	; 0x8c
 800c00e:	2120      	movs	r1, #32
 800c010:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2290      	movs	r2, #144	; 0x90
 800c016:	2120      	movs	r1, #32
 800c018:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2284      	movs	r2, #132	; 0x84
 800c01e:	2100      	movs	r1, #0
 800c020:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e010      	b.n	800c048 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	69db      	ldr	r3, [r3, #28]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	4013      	ands	r3, r2
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	425a      	negs	r2, r3
 800c036:	4153      	adcs	r3, r2
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	001a      	movs	r2, r3
 800c03c:	1dfb      	adds	r3, r7, #7
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d100      	bne.n	800c046 <UART_WaitOnFlagUntilTimeout+0x182>
 800c044:	e747      	b.n	800bed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	0018      	movs	r0, r3
 800c04a:	46bd      	mov	sp, r7
 800c04c:	b014      	add	sp, #80	; 0x50
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	fffffe5f 	.word	0xfffffe5f

0800c054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b098      	sub	sp, #96	; 0x60
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	1dbb      	adds	r3, r7, #6
 800c060:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	1dba      	adds	r2, r7, #6
 800c06c:	215c      	movs	r1, #92	; 0x5c
 800c06e:	8812      	ldrh	r2, [r2, #0]
 800c070:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	1dba      	adds	r2, r7, #6
 800c076:	215e      	movs	r1, #94	; 0x5e
 800c078:	8812      	ldrh	r2, [r2, #0]
 800c07a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2200      	movs	r2, #0
 800c080:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	689a      	ldr	r2, [r3, #8]
 800c086:	2380      	movs	r3, #128	; 0x80
 800c088:	015b      	lsls	r3, r3, #5
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d10d      	bne.n	800c0aa <UART_Start_Receive_IT+0x56>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d104      	bne.n	800c0a0 <UART_Start_Receive_IT+0x4c>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2260      	movs	r2, #96	; 0x60
 800c09a:	497b      	ldr	r1, [pc, #492]	; (800c288 <UART_Start_Receive_IT+0x234>)
 800c09c:	5299      	strh	r1, [r3, r2]
 800c09e:	e02e      	b.n	800c0fe <UART_Start_Receive_IT+0xaa>
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2260      	movs	r2, #96	; 0x60
 800c0a4:	21ff      	movs	r1, #255	; 0xff
 800c0a6:	5299      	strh	r1, [r3, r2]
 800c0a8:	e029      	b.n	800c0fe <UART_Start_Receive_IT+0xaa>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d10d      	bne.n	800c0ce <UART_Start_Receive_IT+0x7a>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d104      	bne.n	800c0c4 <UART_Start_Receive_IT+0x70>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2260      	movs	r2, #96	; 0x60
 800c0be:	21ff      	movs	r1, #255	; 0xff
 800c0c0:	5299      	strh	r1, [r3, r2]
 800c0c2:	e01c      	b.n	800c0fe <UART_Start_Receive_IT+0xaa>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2260      	movs	r2, #96	; 0x60
 800c0c8:	217f      	movs	r1, #127	; 0x7f
 800c0ca:	5299      	strh	r1, [r3, r2]
 800c0cc:	e017      	b.n	800c0fe <UART_Start_Receive_IT+0xaa>
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	689a      	ldr	r2, [r3, #8]
 800c0d2:	2380      	movs	r3, #128	; 0x80
 800c0d4:	055b      	lsls	r3, r3, #21
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d10d      	bne.n	800c0f6 <UART_Start_Receive_IT+0xa2>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d104      	bne.n	800c0ec <UART_Start_Receive_IT+0x98>
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2260      	movs	r2, #96	; 0x60
 800c0e6:	217f      	movs	r1, #127	; 0x7f
 800c0e8:	5299      	strh	r1, [r3, r2]
 800c0ea:	e008      	b.n	800c0fe <UART_Start_Receive_IT+0xaa>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2260      	movs	r2, #96	; 0x60
 800c0f0:	213f      	movs	r1, #63	; 0x3f
 800c0f2:	5299      	strh	r1, [r3, r2]
 800c0f4:	e003      	b.n	800c0fe <UART_Start_Receive_IT+0xaa>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2260      	movs	r2, #96	; 0x60
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2290      	movs	r2, #144	; 0x90
 800c102:	2100      	movs	r1, #0
 800c104:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	228c      	movs	r2, #140	; 0x8c
 800c10a:	2122      	movs	r1, #34	; 0x22
 800c10c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c10e:	f3ef 8310 	mrs	r3, PRIMASK
 800c112:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800c114:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c116:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c118:	2301      	movs	r3, #1
 800c11a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c11c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c11e:	f383 8810 	msr	PRIMASK, r3
}
 800c122:	46c0      	nop			; (mov r8, r8)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689a      	ldr	r2, [r3, #8]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2101      	movs	r1, #1
 800c130:	430a      	orrs	r2, r1
 800c132:	609a      	str	r2, [r3, #8]
 800c134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c136:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c13a:	f383 8810 	msr	PRIMASK, r3
}
 800c13e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c144:	2380      	movs	r3, #128	; 0x80
 800c146:	059b      	lsls	r3, r3, #22
 800c148:	429a      	cmp	r2, r3
 800c14a:	d150      	bne.n	800c1ee <UART_Start_Receive_IT+0x19a>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2268      	movs	r2, #104	; 0x68
 800c150:	5a9b      	ldrh	r3, [r3, r2]
 800c152:	1dba      	adds	r2, r7, #6
 800c154:	8812      	ldrh	r2, [r2, #0]
 800c156:	429a      	cmp	r2, r3
 800c158:	d349      	bcc.n	800c1ee <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	689a      	ldr	r2, [r3, #8]
 800c15e:	2380      	movs	r3, #128	; 0x80
 800c160:	015b      	lsls	r3, r3, #5
 800c162:	429a      	cmp	r2, r3
 800c164:	d107      	bne.n	800c176 <UART_Start_Receive_IT+0x122>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d103      	bne.n	800c176 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	4a46      	ldr	r2, [pc, #280]	; (800c28c <UART_Start_Receive_IT+0x238>)
 800c172:	675a      	str	r2, [r3, #116]	; 0x74
 800c174:	e002      	b.n	800c17c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	4a45      	ldr	r2, [pc, #276]	; (800c290 <UART_Start_Receive_IT+0x23c>)
 800c17a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d019      	beq.n	800c1b8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c184:	f3ef 8310 	mrs	r3, PRIMASK
 800c188:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800c18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c18c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c18e:	2301      	movs	r3, #1
 800c190:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	f383 8810 	msr	PRIMASK, r3
}
 800c198:	46c0      	nop			; (mov r8, r8)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2180      	movs	r1, #128	; 0x80
 800c1a6:	0049      	lsls	r1, r1, #1
 800c1a8:	430a      	orrs	r2, r1
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b2:	f383 8810 	msr	PRIMASK, r3
}
 800c1b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800c1bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c1c0:	657b      	str	r3, [r7, #84]	; 0x54
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c8:	f383 8810 	msr	PRIMASK, r3
}
 800c1cc:	46c0      	nop			; (mov r8, r8)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2180      	movs	r1, #128	; 0x80
 800c1da:	0549      	lsls	r1, r1, #21
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	609a      	str	r2, [r3, #8]
 800c1e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1e2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e6:	f383 8810 	msr	PRIMASK, r3
}
 800c1ea:	46c0      	nop			; (mov r8, r8)
 800c1ec:	e047      	b.n	800c27e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	689a      	ldr	r2, [r3, #8]
 800c1f2:	2380      	movs	r3, #128	; 0x80
 800c1f4:	015b      	lsls	r3, r3, #5
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d107      	bne.n	800c20a <UART_Start_Receive_IT+0x1b6>
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d103      	bne.n	800c20a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	4a23      	ldr	r2, [pc, #140]	; (800c294 <UART_Start_Receive_IT+0x240>)
 800c206:	675a      	str	r2, [r3, #116]	; 0x74
 800c208:	e002      	b.n	800c210 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	4a22      	ldr	r2, [pc, #136]	; (800c298 <UART_Start_Receive_IT+0x244>)
 800c20e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d019      	beq.n	800c24c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c218:	f3ef 8310 	mrs	r3, PRIMASK
 800c21c:	61fb      	str	r3, [r7, #28]
  return(result);
 800c21e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c220:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c222:	2301      	movs	r3, #1
 800c224:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c226:	6a3b      	ldr	r3, [r7, #32]
 800c228:	f383 8810 	msr	PRIMASK, r3
}
 800c22c:	46c0      	nop			; (mov r8, r8)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2190      	movs	r1, #144	; 0x90
 800c23a:	0049      	lsls	r1, r1, #1
 800c23c:	430a      	orrs	r2, r1
 800c23e:	601a      	str	r2, [r3, #0]
 800c240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c242:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c246:	f383 8810 	msr	PRIMASK, r3
}
 800c24a:	e018      	b.n	800c27e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c24c:	f3ef 8310 	mrs	r3, PRIMASK
 800c250:	613b      	str	r3, [r7, #16]
  return(result);
 800c252:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c254:	653b      	str	r3, [r7, #80]	; 0x50
 800c256:	2301      	movs	r3, #1
 800c258:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f383 8810 	msr	PRIMASK, r3
}
 800c260:	46c0      	nop			; (mov r8, r8)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2120      	movs	r1, #32
 800c26e:	430a      	orrs	r2, r1
 800c270:	601a      	str	r2, [r3, #0]
 800c272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c274:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	f383 8810 	msr	PRIMASK, r3
}
 800c27c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	0018      	movs	r0, r3
 800c282:	46bd      	mov	sp, r7
 800c284:	b018      	add	sp, #96	; 0x60
 800c286:	bd80      	pop	{r7, pc}
 800c288:	000001ff 	.word	0x000001ff
 800c28c:	0800c9c5 	.word	0x0800c9c5
 800c290:	0800c6d9 	.word	0x0800c6d9
 800c294:	0800c565 	.word	0x0800c565
 800c298:	0800c3f1 	.word	0x0800c3f1

0800c29c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08e      	sub	sp, #56	; 0x38
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800c2a8:	617b      	str	r3, [r7, #20]
  return(result);
 800c2aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	f383 8810 	msr	PRIMASK, r3
}
 800c2b8:	46c0      	nop			; (mov r8, r8)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4926      	ldr	r1, [pc, #152]	; (800c360 <UART_EndRxTransfer+0xc4>)
 800c2c6:	400a      	ands	r2, r1
 800c2c8:	601a      	str	r2, [r3, #0]
 800c2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	f383 8810 	msr	PRIMASK, r3
}
 800c2d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2d6:	f3ef 8310 	mrs	r3, PRIMASK
 800c2da:	623b      	str	r3, [r7, #32]
  return(result);
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2de:	633b      	str	r3, [r7, #48]	; 0x30
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	f383 8810 	msr	PRIMASK, r3
}
 800c2ea:	46c0      	nop			; (mov r8, r8)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	689a      	ldr	r2, [r3, #8]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	491b      	ldr	r1, [pc, #108]	; (800c364 <UART_EndRxTransfer+0xc8>)
 800c2f8:	400a      	ands	r2, r1
 800c2fa:	609a      	str	r2, [r3, #8]
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c302:	f383 8810 	msr	PRIMASK, r3
}
 800c306:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d118      	bne.n	800c342 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c310:	f3ef 8310 	mrs	r3, PRIMASK
 800c314:	60bb      	str	r3, [r7, #8]
  return(result);
 800c316:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c31a:	2301      	movs	r3, #1
 800c31c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f383 8810 	msr	PRIMASK, r3
}
 800c324:	46c0      	nop			; (mov r8, r8)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2110      	movs	r1, #16
 800c332:	438a      	bics	r2, r1
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c338:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	f383 8810 	msr	PRIMASK, r3
}
 800c340:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	228c      	movs	r2, #140	; 0x8c
 800c346:	2120      	movs	r1, #32
 800c348:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c356:	46c0      	nop			; (mov r8, r8)
 800c358:	46bd      	mov	sp, r7
 800c35a:	b00e      	add	sp, #56	; 0x38
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	46c0      	nop			; (mov r8, r8)
 800c360:	fffffedf 	.word	0xfffffedf
 800c364:	effffffe 	.word	0xeffffffe

0800c368 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	225e      	movs	r2, #94	; 0x5e
 800c37a:	2100      	movs	r1, #0
 800c37c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2256      	movs	r2, #86	; 0x56
 800c382:	2100      	movs	r1, #0
 800c384:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	0018      	movs	r0, r3
 800c38a:	f7ff fa3d 	bl	800b808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c38e:	46c0      	nop			; (mov r8, r8)
 800c390:	46bd      	mov	sp, r7
 800c392:	b004      	add	sp, #16
 800c394:	bd80      	pop	{r7, pc}

0800c396 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b086      	sub	sp, #24
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c39e:	f3ef 8310 	mrs	r3, PRIMASK
 800c3a2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c3a4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3a6:	617b      	str	r3, [r7, #20]
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f383 8810 	msr	PRIMASK, r3
}
 800c3b2:	46c0      	nop			; (mov r8, r8)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2140      	movs	r1, #64	; 0x40
 800c3c0:	438a      	bics	r2, r1
 800c3c2:	601a      	str	r2, [r3, #0]
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	f383 8810 	msr	PRIMASK, r3
}
 800c3ce:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2288      	movs	r2, #136	; 0x88
 800c3d4:	2120      	movs	r1, #32
 800c3d6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	0018      	movs	r0, r3
 800c3e2:	f7ff fa01 	bl	800b7e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3e6:	46c0      	nop			; (mov r8, r8)
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	b006      	add	sp, #24
 800c3ec:	bd80      	pop	{r7, pc}
	...

0800c3f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b090      	sub	sp, #64	; 0x40
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c3f8:	203e      	movs	r0, #62	; 0x3e
 800c3fa:	183b      	adds	r3, r7, r0
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	2160      	movs	r1, #96	; 0x60
 800c400:	5a52      	ldrh	r2, [r2, r1]
 800c402:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	228c      	movs	r2, #140	; 0x8c
 800c408:	589b      	ldr	r3, [r3, r2]
 800c40a:	2b22      	cmp	r3, #34	; 0x22
 800c40c:	d000      	beq.n	800c410 <UART_RxISR_8BIT+0x20>
 800c40e:	e09a      	b.n	800c546 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c416:	213c      	movs	r1, #60	; 0x3c
 800c418:	187b      	adds	r3, r7, r1
 800c41a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c41c:	187b      	adds	r3, r7, r1
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	b2da      	uxtb	r2, r3
 800c422:	183b      	adds	r3, r7, r0
 800c424:	881b      	ldrh	r3, [r3, #0]
 800c426:	b2d9      	uxtb	r1, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c42c:	400a      	ands	r2, r1
 800c42e:	b2d2      	uxtb	r2, r2
 800c430:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c436:	1c5a      	adds	r2, r3, #1
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	225e      	movs	r2, #94	; 0x5e
 800c440:	5a9b      	ldrh	r3, [r3, r2]
 800c442:	b29b      	uxth	r3, r3
 800c444:	3b01      	subs	r3, #1
 800c446:	b299      	uxth	r1, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	225e      	movs	r2, #94	; 0x5e
 800c44c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	225e      	movs	r2, #94	; 0x5e
 800c452:	5a9b      	ldrh	r3, [r3, r2]
 800c454:	b29b      	uxth	r3, r3
 800c456:	2b00      	cmp	r3, #0
 800c458:	d000      	beq.n	800c45c <UART_RxISR_8BIT+0x6c>
 800c45a:	e07c      	b.n	800c556 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c45c:	f3ef 8310 	mrs	r3, PRIMASK
 800c460:	61bb      	str	r3, [r7, #24]
  return(result);
 800c462:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c464:	63bb      	str	r3, [r7, #56]	; 0x38
 800c466:	2301      	movs	r3, #1
 800c468:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	f383 8810 	msr	PRIMASK, r3
}
 800c470:	46c0      	nop			; (mov r8, r8)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4938      	ldr	r1, [pc, #224]	; (800c560 <UART_RxISR_8BIT+0x170>)
 800c47e:	400a      	ands	r2, r1
 800c480:	601a      	str	r2, [r3, #0]
 800c482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c484:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c486:	6a3b      	ldr	r3, [r7, #32]
 800c488:	f383 8810 	msr	PRIMASK, r3
}
 800c48c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c48e:	f3ef 8310 	mrs	r3, PRIMASK
 800c492:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c496:	637b      	str	r3, [r7, #52]	; 0x34
 800c498:	2301      	movs	r3, #1
 800c49a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	f383 8810 	msr	PRIMASK, r3
}
 800c4a2:	46c0      	nop			; (mov r8, r8)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	689a      	ldr	r2, [r3, #8]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	438a      	bics	r2, r1
 800c4b2:	609a      	str	r2, [r3, #8]
 800c4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	f383 8810 	msr	PRIMASK, r3
}
 800c4be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	228c      	movs	r2, #140	; 0x8c
 800c4c4:	2120      	movs	r1, #32
 800c4c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d12f      	bne.n	800c53c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c4e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4e8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4ea:	633b      	str	r3, [r7, #48]	; 0x30
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	f383 8810 	msr	PRIMASK, r3
}
 800c4f6:	46c0      	nop			; (mov r8, r8)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2110      	movs	r1, #16
 800c504:	438a      	bics	r2, r1
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	f383 8810 	msr	PRIMASK, r3
}
 800c512:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	69db      	ldr	r3, [r3, #28]
 800c51a:	2210      	movs	r2, #16
 800c51c:	4013      	ands	r3, r2
 800c51e:	2b10      	cmp	r3, #16
 800c520:	d103      	bne.n	800c52a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2210      	movs	r2, #16
 800c528:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	225c      	movs	r2, #92	; 0x5c
 800c52e:	5a9a      	ldrh	r2, [r3, r2]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	0011      	movs	r1, r2
 800c534:	0018      	movs	r0, r3
 800c536:	f7ff f96f 	bl	800b818 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c53a:	e00c      	b.n	800c556 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	0018      	movs	r0, r3
 800c540:	f7ff f95a 	bl	800b7f8 <HAL_UART_RxCpltCallback>
}
 800c544:	e007      	b.n	800c556 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	699a      	ldr	r2, [r3, #24]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2108      	movs	r1, #8
 800c552:	430a      	orrs	r2, r1
 800c554:	619a      	str	r2, [r3, #24]
}
 800c556:	46c0      	nop			; (mov r8, r8)
 800c558:	46bd      	mov	sp, r7
 800c55a:	b010      	add	sp, #64	; 0x40
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	46c0      	nop			; (mov r8, r8)
 800c560:	fffffedf 	.word	0xfffffedf

0800c564 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b090      	sub	sp, #64	; 0x40
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c56c:	203e      	movs	r0, #62	; 0x3e
 800c56e:	183b      	adds	r3, r7, r0
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	2160      	movs	r1, #96	; 0x60
 800c574:	5a52      	ldrh	r2, [r2, r1]
 800c576:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	228c      	movs	r2, #140	; 0x8c
 800c57c:	589b      	ldr	r3, [r3, r2]
 800c57e:	2b22      	cmp	r3, #34	; 0x22
 800c580:	d000      	beq.n	800c584 <UART_RxISR_16BIT+0x20>
 800c582:	e09a      	b.n	800c6ba <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c58a:	213c      	movs	r1, #60	; 0x3c
 800c58c:	187b      	adds	r3, r7, r1
 800c58e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c594:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800c596:	187b      	adds	r3, r7, r1
 800c598:	183a      	adds	r2, r7, r0
 800c59a:	881b      	ldrh	r3, [r3, #0]
 800c59c:	8812      	ldrh	r2, [r2, #0]
 800c59e:	4013      	ands	r3, r2
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5aa:	1c9a      	adds	r2, r3, #2
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	225e      	movs	r2, #94	; 0x5e
 800c5b4:	5a9b      	ldrh	r3, [r3, r2]
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	b299      	uxth	r1, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	225e      	movs	r2, #94	; 0x5e
 800c5c0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	225e      	movs	r2, #94	; 0x5e
 800c5c6:	5a9b      	ldrh	r3, [r3, r2]
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d000      	beq.n	800c5d0 <UART_RxISR_16BIT+0x6c>
 800c5ce:	e07c      	b.n	800c6ca <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5d0:	f3ef 8310 	mrs	r3, PRIMASK
 800c5d4:	617b      	str	r3, [r7, #20]
  return(result);
 800c5d6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5d8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5da:	2301      	movs	r3, #1
 800c5dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	f383 8810 	msr	PRIMASK, r3
}
 800c5e4:	46c0      	nop			; (mov r8, r8)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4938      	ldr	r1, [pc, #224]	; (800c6d4 <UART_RxISR_16BIT+0x170>)
 800c5f2:	400a      	ands	r2, r1
 800c5f4:	601a      	str	r2, [r3, #0]
 800c5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	f383 8810 	msr	PRIMASK, r3
}
 800c600:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c602:	f3ef 8310 	mrs	r3, PRIMASK
 800c606:	623b      	str	r3, [r7, #32]
  return(result);
 800c608:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c60a:	633b      	str	r3, [r7, #48]	; 0x30
 800c60c:	2301      	movs	r3, #1
 800c60e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	f383 8810 	msr	PRIMASK, r3
}
 800c616:	46c0      	nop			; (mov r8, r8)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	689a      	ldr	r2, [r3, #8]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2101      	movs	r1, #1
 800c624:	438a      	bics	r2, r1
 800c626:	609a      	str	r2, [r3, #8]
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62e:	f383 8810 	msr	PRIMASK, r3
}
 800c632:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	228c      	movs	r2, #140	; 0x8c
 800c638:	2120      	movs	r1, #32
 800c63a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d12f      	bne.n	800c6b0 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c656:	f3ef 8310 	mrs	r3, PRIMASK
 800c65a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c65c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c65e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c660:	2301      	movs	r3, #1
 800c662:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f383 8810 	msr	PRIMASK, r3
}
 800c66a:	46c0      	nop			; (mov r8, r8)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2110      	movs	r1, #16
 800c678:	438a      	bics	r2, r1
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f383 8810 	msr	PRIMASK, r3
}
 800c686:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	69db      	ldr	r3, [r3, #28]
 800c68e:	2210      	movs	r2, #16
 800c690:	4013      	ands	r3, r2
 800c692:	2b10      	cmp	r3, #16
 800c694:	d103      	bne.n	800c69e <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2210      	movs	r2, #16
 800c69c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	225c      	movs	r2, #92	; 0x5c
 800c6a2:	5a9a      	ldrh	r2, [r3, r2]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	0011      	movs	r1, r2
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	f7ff f8b5 	bl	800b818 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6ae:	e00c      	b.n	800c6ca <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	0018      	movs	r0, r3
 800c6b4:	f7ff f8a0 	bl	800b7f8 <HAL_UART_RxCpltCallback>
}
 800c6b8:	e007      	b.n	800c6ca <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	699a      	ldr	r2, [r3, #24]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2108      	movs	r1, #8
 800c6c6:	430a      	orrs	r2, r1
 800c6c8:	619a      	str	r2, [r3, #24]
}
 800c6ca:	46c0      	nop			; (mov r8, r8)
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	b010      	add	sp, #64	; 0x40
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	46c0      	nop			; (mov r8, r8)
 800c6d4:	fffffedf 	.word	0xfffffedf

0800c6d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b09c      	sub	sp, #112	; 0x70
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c6e0:	236a      	movs	r3, #106	; 0x6a
 800c6e2:	18fb      	adds	r3, r7, r3
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	2160      	movs	r1, #96	; 0x60
 800c6e8:	5a52      	ldrh	r2, [r2, r1]
 800c6ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	69db      	ldr	r3, [r3, #28]
 800c6f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	228c      	movs	r2, #140	; 0x8c
 800c708:	589b      	ldr	r3, [r3, r2]
 800c70a:	2b22      	cmp	r3, #34	; 0x22
 800c70c:	d000      	beq.n	800c710 <UART_RxISR_8BIT_FIFOEN+0x38>
 800c70e:	e144      	b.n	800c99a <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c710:	235e      	movs	r3, #94	; 0x5e
 800c712:	18fb      	adds	r3, r7, r3
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	2168      	movs	r1, #104	; 0x68
 800c718:	5a52      	ldrh	r2, [r2, r1]
 800c71a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c71c:	e0eb      	b.n	800c8f6 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c724:	215c      	movs	r1, #92	; 0x5c
 800c726:	187b      	adds	r3, r7, r1
 800c728:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c72a:	187b      	adds	r3, r7, r1
 800c72c:	881b      	ldrh	r3, [r3, #0]
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	236a      	movs	r3, #106	; 0x6a
 800c732:	18fb      	adds	r3, r7, r3
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	b2d9      	uxtb	r1, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c73c:	400a      	ands	r2, r1
 800c73e:	b2d2      	uxtb	r2, r2
 800c740:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c746:	1c5a      	adds	r2, r3, #1
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	225e      	movs	r2, #94	; 0x5e
 800c750:	5a9b      	ldrh	r3, [r3, r2]
 800c752:	b29b      	uxth	r3, r3
 800c754:	3b01      	subs	r3, #1
 800c756:	b299      	uxth	r1, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	225e      	movs	r2, #94	; 0x5e
 800c75c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	69db      	ldr	r3, [r3, #28]
 800c764:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c768:	2207      	movs	r2, #7
 800c76a:	4013      	ands	r3, r2
 800c76c:	d049      	beq.n	800c802 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c770:	2201      	movs	r2, #1
 800c772:	4013      	ands	r3, r2
 800c774:	d010      	beq.n	800c798 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800c776:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c778:	2380      	movs	r3, #128	; 0x80
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	4013      	ands	r3, r2
 800c77e:	d00b      	beq.n	800c798 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2201      	movs	r2, #1
 800c786:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2290      	movs	r2, #144	; 0x90
 800c78c:	589b      	ldr	r3, [r3, r2]
 800c78e:	2201      	movs	r2, #1
 800c790:	431a      	orrs	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2190      	movs	r1, #144	; 0x90
 800c796:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c79a:	2202      	movs	r2, #2
 800c79c:	4013      	ands	r3, r2
 800c79e:	d00f      	beq.n	800c7c0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800c7a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	4013      	ands	r3, r2
 800c7a6:	d00b      	beq.n	800c7c0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2290      	movs	r2, #144	; 0x90
 800c7b4:	589b      	ldr	r3, [r3, r2]
 800c7b6:	2204      	movs	r2, #4
 800c7b8:	431a      	orrs	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2190      	movs	r1, #144	; 0x90
 800c7be:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7c2:	2204      	movs	r2, #4
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	d00f      	beq.n	800c7e8 <UART_RxISR_8BIT_FIFOEN+0x110>
 800c7c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	4013      	ands	r3, r2
 800c7ce:	d00b      	beq.n	800c7e8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2204      	movs	r2, #4
 800c7d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2290      	movs	r2, #144	; 0x90
 800c7dc:	589b      	ldr	r3, [r3, r2]
 800c7de:	2202      	movs	r2, #2
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2190      	movs	r1, #144	; 0x90
 800c7e6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2290      	movs	r2, #144	; 0x90
 800c7ec:	589b      	ldr	r3, [r3, r2]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d007      	beq.n	800c802 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	0018      	movs	r0, r3
 800c7f6:	f7ff f807 	bl	800b808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2290      	movs	r2, #144	; 0x90
 800c7fe:	2100      	movs	r1, #0
 800c800:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	225e      	movs	r2, #94	; 0x5e
 800c806:	5a9b      	ldrh	r3, [r3, r2]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d173      	bne.n	800c8f6 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c80e:	f3ef 8310 	mrs	r3, PRIMASK
 800c812:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c816:	65bb      	str	r3, [r7, #88]	; 0x58
 800c818:	2301      	movs	r3, #1
 800c81a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	f383 8810 	msr	PRIMASK, r3
}
 800c822:	46c0      	nop			; (mov r8, r8)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4961      	ldr	r1, [pc, #388]	; (800c9b4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800c830:	400a      	ands	r2, r1
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c836:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c83a:	f383 8810 	msr	PRIMASK, r3
}
 800c83e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c840:	f3ef 8310 	mrs	r3, PRIMASK
 800c844:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c848:	657b      	str	r3, [r7, #84]	; 0x54
 800c84a:	2301      	movs	r3, #1
 800c84c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c850:	f383 8810 	msr	PRIMASK, r3
}
 800c854:	46c0      	nop			; (mov r8, r8)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	689a      	ldr	r2, [r3, #8]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4955      	ldr	r1, [pc, #340]	; (800c9b8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800c862:	400a      	ands	r2, r1
 800c864:	609a      	str	r2, [r3, #8]
 800c866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c868:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c86c:	f383 8810 	msr	PRIMASK, r3
}
 800c870:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	228c      	movs	r2, #140	; 0x8c
 800c876:	2120      	movs	r1, #32
 800c878:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d12f      	bne.n	800c8ee <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c894:	f3ef 8310 	mrs	r3, PRIMASK
 800c898:	623b      	str	r3, [r7, #32]
  return(result);
 800c89a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c89c:	653b      	str	r3, [r7, #80]	; 0x50
 800c89e:	2301      	movs	r3, #1
 800c8a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	f383 8810 	msr	PRIMASK, r3
}
 800c8a8:	46c0      	nop			; (mov r8, r8)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2110      	movs	r1, #16
 800c8b6:	438a      	bics	r2, r1
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c0:	f383 8810 	msr	PRIMASK, r3
}
 800c8c4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	69db      	ldr	r3, [r3, #28]
 800c8cc:	2210      	movs	r2, #16
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	2b10      	cmp	r3, #16
 800c8d2:	d103      	bne.n	800c8dc <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2210      	movs	r2, #16
 800c8da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	225c      	movs	r2, #92	; 0x5c
 800c8e0:	5a9a      	ldrh	r2, [r3, r2]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	0011      	movs	r1, r2
 800c8e6:	0018      	movs	r0, r3
 800c8e8:	f7fe ff96 	bl	800b818 <HAL_UARTEx_RxEventCallback>
 800c8ec:	e003      	b.n	800c8f6 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	0018      	movs	r0, r3
 800c8f2:	f7fe ff81 	bl	800b7f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8f6:	235e      	movs	r3, #94	; 0x5e
 800c8f8:	18fb      	adds	r3, r7, r3
 800c8fa:	881b      	ldrh	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d004      	beq.n	800c90a <UART_RxISR_8BIT_FIFOEN+0x232>
 800c900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c902:	2220      	movs	r2, #32
 800c904:	4013      	ands	r3, r2
 800c906:	d000      	beq.n	800c90a <UART_RxISR_8BIT_FIFOEN+0x232>
 800c908:	e709      	b.n	800c71e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c90a:	204e      	movs	r0, #78	; 0x4e
 800c90c:	183b      	adds	r3, r7, r0
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	215e      	movs	r1, #94	; 0x5e
 800c912:	5a52      	ldrh	r2, [r2, r1]
 800c914:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c916:	0001      	movs	r1, r0
 800c918:	187b      	adds	r3, r7, r1
 800c91a:	881b      	ldrh	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d044      	beq.n	800c9aa <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2268      	movs	r2, #104	; 0x68
 800c924:	5a9b      	ldrh	r3, [r3, r2]
 800c926:	187a      	adds	r2, r7, r1
 800c928:	8812      	ldrh	r2, [r2, #0]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d23d      	bcs.n	800c9aa <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c92e:	f3ef 8310 	mrs	r3, PRIMASK
 800c932:	60bb      	str	r3, [r7, #8]
  return(result);
 800c934:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c936:	64bb      	str	r3, [r7, #72]	; 0x48
 800c938:	2301      	movs	r3, #1
 800c93a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f383 8810 	msr	PRIMASK, r3
}
 800c942:	46c0      	nop			; (mov r8, r8)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	689a      	ldr	r2, [r3, #8]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	491b      	ldr	r1, [pc, #108]	; (800c9bc <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800c950:	400a      	ands	r2, r1
 800c952:	609a      	str	r2, [r3, #8]
 800c954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	f383 8810 	msr	PRIMASK, r3
}
 800c95e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a17      	ldr	r2, [pc, #92]	; (800c9c0 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800c964:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c966:	f3ef 8310 	mrs	r3, PRIMASK
 800c96a:	617b      	str	r3, [r7, #20]
  return(result);
 800c96c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c96e:	647b      	str	r3, [r7, #68]	; 0x44
 800c970:	2301      	movs	r3, #1
 800c972:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	f383 8810 	msr	PRIMASK, r3
}
 800c97a:	46c0      	nop			; (mov r8, r8)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2120      	movs	r1, #32
 800c988:	430a      	orrs	r2, r1
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c98e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	f383 8810 	msr	PRIMASK, r3
}
 800c996:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c998:	e007      	b.n	800c9aa <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	699a      	ldr	r2, [r3, #24]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2108      	movs	r1, #8
 800c9a6:	430a      	orrs	r2, r1
 800c9a8:	619a      	str	r2, [r3, #24]
}
 800c9aa:	46c0      	nop			; (mov r8, r8)
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	b01c      	add	sp, #112	; 0x70
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	46c0      	nop			; (mov r8, r8)
 800c9b4:	fffffeff 	.word	0xfffffeff
 800c9b8:	effffffe 	.word	0xeffffffe
 800c9bc:	efffffff 	.word	0xefffffff
 800c9c0:	0800c3f1 	.word	0x0800c3f1

0800c9c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b09e      	sub	sp, #120	; 0x78
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c9cc:	2372      	movs	r3, #114	; 0x72
 800c9ce:	18fb      	adds	r3, r7, r3
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	2160      	movs	r1, #96	; 0x60
 800c9d4:	5a52      	ldrh	r2, [r2, r1]
 800c9d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	69db      	ldr	r3, [r3, #28]
 800c9de:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	228c      	movs	r2, #140	; 0x8c
 800c9f4:	589b      	ldr	r3, [r3, r2]
 800c9f6:	2b22      	cmp	r3, #34	; 0x22
 800c9f8:	d000      	beq.n	800c9fc <UART_RxISR_16BIT_FIFOEN+0x38>
 800c9fa:	e144      	b.n	800cc86 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c9fc:	2366      	movs	r3, #102	; 0x66
 800c9fe:	18fb      	adds	r3, r7, r3
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	2168      	movs	r1, #104	; 0x68
 800ca04:	5a52      	ldrh	r2, [r2, r1]
 800ca06:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca08:	e0eb      	b.n	800cbe2 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca10:	2164      	movs	r1, #100	; 0x64
 800ca12:	187b      	adds	r3, r7, r1
 800ca14:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca1a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800ca1c:	187b      	adds	r3, r7, r1
 800ca1e:	2272      	movs	r2, #114	; 0x72
 800ca20:	18ba      	adds	r2, r7, r2
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	8812      	ldrh	r2, [r2, #0]
 800ca26:	4013      	ands	r3, r2
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca32:	1c9a      	adds	r2, r3, #2
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	225e      	movs	r2, #94	; 0x5e
 800ca3c:	5a9b      	ldrh	r3, [r3, r2]
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	3b01      	subs	r3, #1
 800ca42:	b299      	uxth	r1, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	225e      	movs	r2, #94	; 0x5e
 800ca48:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	69db      	ldr	r3, [r3, #28]
 800ca50:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ca52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca54:	2207      	movs	r2, #7
 800ca56:	4013      	ands	r3, r2
 800ca58:	d049      	beq.n	800caee <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	4013      	ands	r3, r2
 800ca60:	d010      	beq.n	800ca84 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800ca62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca64:	2380      	movs	r3, #128	; 0x80
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	4013      	ands	r3, r2
 800ca6a:	d00b      	beq.n	800ca84 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2201      	movs	r2, #1
 800ca72:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2290      	movs	r2, #144	; 0x90
 800ca78:	589b      	ldr	r3, [r3, r2]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	431a      	orrs	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2190      	movs	r1, #144	; 0x90
 800ca82:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca86:	2202      	movs	r2, #2
 800ca88:	4013      	ands	r3, r2
 800ca8a:	d00f      	beq.n	800caac <UART_RxISR_16BIT_FIFOEN+0xe8>
 800ca8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca8e:	2201      	movs	r2, #1
 800ca90:	4013      	ands	r3, r2
 800ca92:	d00b      	beq.n	800caac <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2202      	movs	r2, #2
 800ca9a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2290      	movs	r2, #144	; 0x90
 800caa0:	589b      	ldr	r3, [r3, r2]
 800caa2:	2204      	movs	r2, #4
 800caa4:	431a      	orrs	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2190      	movs	r1, #144	; 0x90
 800caaa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800caae:	2204      	movs	r2, #4
 800cab0:	4013      	ands	r3, r2
 800cab2:	d00f      	beq.n	800cad4 <UART_RxISR_16BIT_FIFOEN+0x110>
 800cab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cab6:	2201      	movs	r2, #1
 800cab8:	4013      	ands	r3, r2
 800caba:	d00b      	beq.n	800cad4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2204      	movs	r2, #4
 800cac2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2290      	movs	r2, #144	; 0x90
 800cac8:	589b      	ldr	r3, [r3, r2]
 800caca:	2202      	movs	r2, #2
 800cacc:	431a      	orrs	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2190      	movs	r1, #144	; 0x90
 800cad2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2290      	movs	r2, #144	; 0x90
 800cad8:	589b      	ldr	r3, [r3, r2]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d007      	beq.n	800caee <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	0018      	movs	r0, r3
 800cae2:	f7fe fe91 	bl	800b808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2290      	movs	r2, #144	; 0x90
 800caea:	2100      	movs	r1, #0
 800caec:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	225e      	movs	r2, #94	; 0x5e
 800caf2:	5a9b      	ldrh	r3, [r3, r2]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d173      	bne.n	800cbe2 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cafa:	f3ef 8310 	mrs	r3, PRIMASK
 800cafe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb04:	2301      	movs	r3, #1
 800cb06:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0a:	f383 8810 	msr	PRIMASK, r3
}
 800cb0e:	46c0      	nop			; (mov r8, r8)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4961      	ldr	r1, [pc, #388]	; (800cca0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800cb1c:	400a      	ands	r2, r1
 800cb1e:	601a      	str	r2, [r3, #0]
 800cb20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	f383 8810 	msr	PRIMASK, r3
}
 800cb2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb2c:	f3ef 8310 	mrs	r3, PRIMASK
 800cb30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800cb32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb34:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb36:	2301      	movs	r3, #1
 800cb38:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb3c:	f383 8810 	msr	PRIMASK, r3
}
 800cb40:	46c0      	nop			; (mov r8, r8)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	689a      	ldr	r2, [r3, #8]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4955      	ldr	r1, [pc, #340]	; (800cca4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800cb4e:	400a      	ands	r2, r1
 800cb50:	609a      	str	r2, [r3, #8]
 800cb52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb54:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb58:	f383 8810 	msr	PRIMASK, r3
}
 800cb5c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	228c      	movs	r2, #140	; 0x8c
 800cb62:	2120      	movs	r1, #32
 800cb64:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d12f      	bne.n	800cbda <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb80:	f3ef 8310 	mrs	r3, PRIMASK
 800cb84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800cb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb88:	657b      	str	r3, [r7, #84]	; 0x54
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb90:	f383 8810 	msr	PRIMASK, r3
}
 800cb94:	46c0      	nop			; (mov r8, r8)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2110      	movs	r1, #16
 800cba2:	438a      	bics	r2, r1
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	f383 8810 	msr	PRIMASK, r3
}
 800cbb0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	69db      	ldr	r3, [r3, #28]
 800cbb8:	2210      	movs	r2, #16
 800cbba:	4013      	ands	r3, r2
 800cbbc:	2b10      	cmp	r3, #16
 800cbbe:	d103      	bne.n	800cbc8 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2210      	movs	r2, #16
 800cbc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	225c      	movs	r2, #92	; 0x5c
 800cbcc:	5a9a      	ldrh	r2, [r3, r2]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	0011      	movs	r1, r2
 800cbd2:	0018      	movs	r0, r3
 800cbd4:	f7fe fe20 	bl	800b818 <HAL_UARTEx_RxEventCallback>
 800cbd8:	e003      	b.n	800cbe2 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f7fe fe0b 	bl	800b7f8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cbe2:	2366      	movs	r3, #102	; 0x66
 800cbe4:	18fb      	adds	r3, r7, r3
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d004      	beq.n	800cbf6 <UART_RxISR_16BIT_FIFOEN+0x232>
 800cbec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbee:	2220      	movs	r2, #32
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	d000      	beq.n	800cbf6 <UART_RxISR_16BIT_FIFOEN+0x232>
 800cbf4:	e709      	b.n	800ca0a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cbf6:	2052      	movs	r0, #82	; 0x52
 800cbf8:	183b      	adds	r3, r7, r0
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	215e      	movs	r1, #94	; 0x5e
 800cbfe:	5a52      	ldrh	r2, [r2, r1]
 800cc00:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc02:	0001      	movs	r1, r0
 800cc04:	187b      	adds	r3, r7, r1
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d044      	beq.n	800cc96 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2268      	movs	r2, #104	; 0x68
 800cc10:	5a9b      	ldrh	r3, [r3, r2]
 800cc12:	187a      	adds	r2, r7, r1
 800cc14:	8812      	ldrh	r2, [r2, #0]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d23d      	bcs.n	800cc96 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc1a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc1e:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc20:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc24:	2301      	movs	r3, #1
 800cc26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	f383 8810 	msr	PRIMASK, r3
}
 800cc2e:	46c0      	nop			; (mov r8, r8)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	689a      	ldr	r2, [r3, #8]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	491b      	ldr	r1, [pc, #108]	; (800cca8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800cc3c:	400a      	ands	r2, r1
 800cc3e:	609a      	str	r2, [r3, #8]
 800cc40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	f383 8810 	msr	PRIMASK, r3
}
 800cc4a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4a17      	ldr	r2, [pc, #92]	; (800ccac <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800cc50:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc52:	f3ef 8310 	mrs	r3, PRIMASK
 800cc56:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc58:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	f383 8810 	msr	PRIMASK, r3
}
 800cc66:	46c0      	nop			; (mov r8, r8)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2120      	movs	r1, #32
 800cc74:	430a      	orrs	r2, r1
 800cc76:	601a      	str	r2, [r3, #0]
 800cc78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	f383 8810 	msr	PRIMASK, r3
}
 800cc82:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc84:	e007      	b.n	800cc96 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	699a      	ldr	r2, [r3, #24]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2108      	movs	r1, #8
 800cc92:	430a      	orrs	r2, r1
 800cc94:	619a      	str	r2, [r3, #24]
}
 800cc96:	46c0      	nop			; (mov r8, r8)
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	b01e      	add	sp, #120	; 0x78
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	46c0      	nop			; (mov r8, r8)
 800cca0:	fffffeff 	.word	0xfffffeff
 800cca4:	effffffe 	.word	0xeffffffe
 800cca8:	efffffff 	.word	0xefffffff
 800ccac:	0800c565 	.word	0x0800c565

0800ccb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ccb8:	46c0      	nop			; (mov r8, r8)
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	b002      	add	sp, #8
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ccc8:	46c0      	nop			; (mov r8, r8)
 800ccca:	46bd      	mov	sp, r7
 800cccc:	b002      	add	sp, #8
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ccd8:	46c0      	nop			; (mov r8, r8)
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	b002      	add	sp, #8
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2284      	movs	r2, #132	; 0x84
 800ccec:	5c9b      	ldrb	r3, [r3, r2]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d101      	bne.n	800ccf6 <HAL_UARTEx_DisableFifoMode+0x16>
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	e027      	b.n	800cd46 <HAL_UARTEx_DisableFifoMode+0x66>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2284      	movs	r2, #132	; 0x84
 800ccfa:	2101      	movs	r1, #1
 800ccfc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2288      	movs	r2, #136	; 0x88
 800cd02:	2124      	movs	r1, #36	; 0x24
 800cd04:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2101      	movs	r1, #1
 800cd1a:	438a      	bics	r2, r1
 800cd1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	4a0b      	ldr	r2, [pc, #44]	; (800cd50 <HAL_UARTEx_DisableFifoMode+0x70>)
 800cd22:	4013      	ands	r3, r2
 800cd24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2288      	movs	r2, #136	; 0x88
 800cd38:	2120      	movs	r1, #32
 800cd3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2284      	movs	r2, #132	; 0x84
 800cd40:	2100      	movs	r1, #0
 800cd42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	0018      	movs	r0, r3
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	b004      	add	sp, #16
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	46c0      	nop			; (mov r8, r8)
 800cd50:	dfffffff 	.word	0xdfffffff

0800cd54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2284      	movs	r2, #132	; 0x84
 800cd62:	5c9b      	ldrb	r3, [r3, r2]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d101      	bne.n	800cd6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd68:	2302      	movs	r3, #2
 800cd6a:	e02e      	b.n	800cdca <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2284      	movs	r2, #132	; 0x84
 800cd70:	2101      	movs	r1, #1
 800cd72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2288      	movs	r2, #136	; 0x88
 800cd78:	2124      	movs	r1, #36	; 0x24
 800cd7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2101      	movs	r1, #1
 800cd90:	438a      	bics	r2, r1
 800cd92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	00db      	lsls	r3, r3, #3
 800cd9c:	08d9      	lsrs	r1, r3, #3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	430a      	orrs	r2, r1
 800cda6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	0018      	movs	r0, r3
 800cdac:	f000 f854 	bl	800ce58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2288      	movs	r2, #136	; 0x88
 800cdbc:	2120      	movs	r1, #32
 800cdbe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2284      	movs	r2, #132	; 0x84
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	0018      	movs	r0, r3
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	b004      	add	sp, #16
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2284      	movs	r2, #132	; 0x84
 800cde2:	5c9b      	ldrb	r3, [r3, r2]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d101      	bne.n	800cdec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cde8:	2302      	movs	r3, #2
 800cdea:	e02f      	b.n	800ce4c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2284      	movs	r2, #132	; 0x84
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2288      	movs	r2, #136	; 0x88
 800cdf8:	2124      	movs	r1, #36	; 0x24
 800cdfa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2101      	movs	r1, #1
 800ce10:	438a      	bics	r2, r1
 800ce12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	4a0e      	ldr	r2, [pc, #56]	; (800ce54 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	0019      	movs	r1, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	430a      	orrs	r2, r1
 800ce28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	0018      	movs	r0, r3
 800ce2e:	f000 f813 	bl	800ce58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2288      	movs	r2, #136	; 0x88
 800ce3e:	2120      	movs	r1, #32
 800ce40:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2284      	movs	r2, #132	; 0x84
 800ce46:	2100      	movs	r1, #0
 800ce48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	0018      	movs	r0, r3
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	b004      	add	sp, #16
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	f1ffffff 	.word	0xf1ffffff

0800ce58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d108      	bne.n	800ce7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	226a      	movs	r2, #106	; 0x6a
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2268      	movs	r2, #104	; 0x68
 800ce74:	2101      	movs	r1, #1
 800ce76:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce78:	e043      	b.n	800cf02 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce7a:	260f      	movs	r6, #15
 800ce7c:	19bb      	adds	r3, r7, r6
 800ce7e:	2208      	movs	r2, #8
 800ce80:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce82:	200e      	movs	r0, #14
 800ce84:	183b      	adds	r3, r7, r0
 800ce86:	2208      	movs	r2, #8
 800ce88:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	0e5b      	lsrs	r3, r3, #25
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	240d      	movs	r4, #13
 800ce96:	193b      	adds	r3, r7, r4
 800ce98:	2107      	movs	r1, #7
 800ce9a:	400a      	ands	r2, r1
 800ce9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	0f5b      	lsrs	r3, r3, #29
 800cea6:	b2da      	uxtb	r2, r3
 800cea8:	250c      	movs	r5, #12
 800ceaa:	197b      	adds	r3, r7, r5
 800ceac:	2107      	movs	r1, #7
 800ceae:	400a      	ands	r2, r1
 800ceb0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ceb2:	183b      	adds	r3, r7, r0
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	197a      	adds	r2, r7, r5
 800ceb8:	7812      	ldrb	r2, [r2, #0]
 800ceba:	4914      	ldr	r1, [pc, #80]	; (800cf0c <UARTEx_SetNbDataToProcess+0xb4>)
 800cebc:	5c8a      	ldrb	r2, [r1, r2]
 800cebe:	435a      	muls	r2, r3
 800cec0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800cec2:	197b      	adds	r3, r7, r5
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	4a12      	ldr	r2, [pc, #72]	; (800cf10 <UARTEx_SetNbDataToProcess+0xb8>)
 800cec8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ceca:	0019      	movs	r1, r3
 800cecc:	f7f3 f9cc 	bl	8000268 <__divsi3>
 800ced0:	0003      	movs	r3, r0
 800ced2:	b299      	uxth	r1, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	226a      	movs	r2, #106	; 0x6a
 800ced8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ceda:	19bb      	adds	r3, r7, r6
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	193a      	adds	r2, r7, r4
 800cee0:	7812      	ldrb	r2, [r2, #0]
 800cee2:	490a      	ldr	r1, [pc, #40]	; (800cf0c <UARTEx_SetNbDataToProcess+0xb4>)
 800cee4:	5c8a      	ldrb	r2, [r1, r2]
 800cee6:	435a      	muls	r2, r3
 800cee8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ceea:	193b      	adds	r3, r7, r4
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	4a08      	ldr	r2, [pc, #32]	; (800cf10 <UARTEx_SetNbDataToProcess+0xb8>)
 800cef0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cef2:	0019      	movs	r1, r3
 800cef4:	f7f3 f9b8 	bl	8000268 <__divsi3>
 800cef8:	0003      	movs	r3, r0
 800cefa:	b299      	uxth	r1, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2268      	movs	r2, #104	; 0x68
 800cf00:	5299      	strh	r1, [r3, r2]
}
 800cf02:	46c0      	nop			; (mov r8, r8)
 800cf04:	46bd      	mov	sp, r7
 800cf06:	b005      	add	sp, #20
 800cf08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf0a:	46c0      	nop			; (mov r8, r8)
 800cf0c:	0801b77c 	.word	0x0801b77c
 800cf10:	0801b784 	.word	0x0801b784

0800cf14 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800cf14:	b5b0      	push	{r4, r5, r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf1e:	250f      	movs	r5, #15
 800cf20:	197b      	adds	r3, r7, r5
 800cf22:	2200      	movs	r2, #0
 800cf24:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800cf26:	197c      	adds	r4, r7, r5
 800cf28:	683a      	ldr	r2, [r7, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	0011      	movs	r1, r2
 800cf2e:	0018      	movs	r0, r3
 800cf30:	f001 fffc 	bl	800ef2c <VL53L0X_get_offset_calibration_data_micro_meter>
 800cf34:	0003      	movs	r3, r0
 800cf36:	7023      	strb	r3, [r4, #0]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800cf38:	197b      	adds	r3, r7, r5
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	b25b      	sxtb	r3, r3
}
 800cf3e:	0018      	movs	r0, r3
 800cf40:	46bd      	mov	sp, r7
 800cf42:	b004      	add	sp, #16
 800cf44:	bdb0      	pop	{r4, r5, r7, pc}

0800cf46 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 800cf46:	b5b0      	push	{r4, r5, r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	000a      	movs	r2, r1
 800cf50:	1cfb      	adds	r3, r7, #3
 800cf52:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf54:	210f      	movs	r1, #15
 800cf56:	187b      	adds	r3, r7, r1
 800cf58:	2200      	movs	r2, #0
 800cf5a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 800cf5c:	1cfb      	adds	r3, r7, #3
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	085b      	lsrs	r3, r3, #1
 800cf62:	b2da      	uxtb	r2, r3
 800cf64:	000d      	movs	r5, r1
 800cf66:	187c      	adds	r4, r7, r1
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	218a      	movs	r1, #138	; 0x8a
 800cf6c:	0018      	movs	r0, r3
 800cf6e:	f005 fea3 	bl	8012cb8 <VL53L0X_WrByte>
 800cf72:	0003      	movs	r3, r0
 800cf74:	7023      	strb	r3, [r4, #0]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800cf76:	197b      	adds	r3, r7, r5
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	b25b      	sxtb	r3, r3
}
 800cf7c:	0018      	movs	r0, r3
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	b004      	add	sp, #16
 800cf82:	bdb0      	pop	{r4, r5, r7, pc}

0800cf84 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800cf84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf86:	b097      	sub	sp, #92	; 0x5c
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf8c:	2157      	movs	r1, #87	; 0x57
 800cf8e:	187b      	adds	r3, r7, r1
 800cf90:	2200      	movs	r2, #0
 800cf92:	701a      	strb	r2, [r3, #0]
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800cf94:	000a      	movs	r2, r1
 800cf96:	18bb      	adds	r3, r7, r2
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	b25b      	sxtb	r3, r3
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d108      	bne.n	800cfb2 <VL53L0X_DataInit+0x2e>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800cfa0:	18bc      	adds	r4, r7, r2
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	2188      	movs	r1, #136	; 0x88
 800cfa8:	0018      	movs	r0, r3
 800cfaa:	f005 fe85 	bl	8012cb8 <VL53L0X_WrByte>
 800cfae:	0003      	movs	r3, r0
 800cfb0:	7023      	strb	r3, [r4, #0]

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	22f0      	movs	r2, #240	; 0xf0
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	5499      	strb	r1, [r3, r2]
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	23a9      	movs	r3, #169	; 0xa9
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	21fa      	movs	r1, #250	; 0xfa
 800cfc2:	0089      	lsls	r1, r1, #2
 800cfc4:	52d1      	strh	r1, [r2, r3]

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	23aa      	movs	r3, #170	; 0xaa
 800cfca:	005b      	lsls	r3, r3, #1
 800cfcc:	21c8      	movs	r1, #200	; 0xc8
 800cfce:	0049      	lsls	r1, r1, #1
 800cfd0:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	23ac      	movs	r3, #172	; 0xac
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	49b5      	ldr	r1, [pc, #724]	; (800d2b0 <VL53L0X_DataInit+0x32c>)
 800cfda:	50d1      	str	r1, [r2, r3]
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	22d4      	movs	r2, #212	; 0xd4
 800cfe0:	49b4      	ldr	r1, [pc, #720]	; (800d2b4 <VL53L0X_DataInit+0x330>)
 800cfe2:	5099      	str	r1, [r3, r2]

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800cfea:	2657      	movs	r6, #87	; 0x57
 800cfec:	19bc      	adds	r4, r7, r6
 800cfee:	2510      	movs	r5, #16
 800cff0:	197a      	adds	r2, r7, r5
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	0011      	movs	r1, r2
 800cff6:	0018      	movs	r0, r3
 800cff8:	f000 fb2c 	bl	800d654 <VL53L0X_GetDeviceParameters>
 800cffc:	0003      	movs	r3, r0
 800cffe:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800d000:	19bb      	adds	r3, r7, r6
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	b25b      	sxtb	r3, r3
 800d006:	2b00      	cmp	r3, #0
 800d008:	d10d      	bne.n	800d026 <VL53L0X_DataInit+0xa2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800d00a:	197b      	adds	r3, r7, r5
 800d00c:	2200      	movs	r2, #0
 800d00e:	701a      	strb	r2, [r3, #0]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800d010:	197b      	adds	r3, r7, r5
 800d012:	2200      	movs	r2, #0
 800d014:	705a      	strb	r2, [r3, #1]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	197a      	adds	r2, r7, r5
 800d01a:	3310      	adds	r3, #16
 800d01c:	0011      	movs	r1, r2
 800d01e:	2240      	movs	r2, #64	; 0x40
 800d020:	0018      	movs	r0, r3
 800d022:	f007 ff35 	bl	8014e90 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	239a      	movs	r3, #154	; 0x9a
 800d02a:	005b      	lsls	r3, r3, #1
 800d02c:	2164      	movs	r1, #100	; 0x64
 800d02e:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	239b      	movs	r3, #155	; 0x9b
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	21e1      	movs	r1, #225	; 0xe1
 800d038:	0089      	lsls	r1, r1, #2
 800d03a:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	239c      	movs	r3, #156	; 0x9c
 800d040:	005b      	lsls	r3, r3, #1
 800d042:	21fa      	movs	r1, #250	; 0xfa
 800d044:	0049      	lsls	r1, r1, #1
 800d046:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	239e      	movs	r3, #158	; 0x9e
 800d04c:	005b      	lsls	r3, r3, #1
 800d04e:	21a0      	movs	r1, #160	; 0xa0
 800d050:	0109      	lsls	r1, r1, #4
 800d052:	52d1      	strh	r1, [r2, r3]

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	23a8      	movs	r3, #168	; 0xa8
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	2101      	movs	r1, #1
 800d05c:	54d1      	strb	r1, [r2, r3]

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	2180      	movs	r1, #128	; 0x80
 800d064:	0018      	movs	r0, r3
 800d066:	f005 fe27 	bl	8012cb8 <VL53L0X_WrByte>
 800d06a:	0003      	movs	r3, r0
 800d06c:	0019      	movs	r1, r3
 800d06e:	2457      	movs	r4, #87	; 0x57
 800d070:	193b      	adds	r3, r7, r4
 800d072:	193a      	adds	r2, r7, r4
 800d074:	7812      	ldrb	r2, [r2, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	21ff      	movs	r1, #255	; 0xff
 800d080:	0018      	movs	r0, r3
 800d082:	f005 fe19 	bl	8012cb8 <VL53L0X_WrByte>
 800d086:	0003      	movs	r3, r0
 800d088:	0019      	movs	r1, r3
 800d08a:	193b      	adds	r3, r7, r4
 800d08c:	193a      	adds	r2, r7, r4
 800d08e:	7812      	ldrb	r2, [r2, #0]
 800d090:	430a      	orrs	r2, r1
 800d092:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	2100      	movs	r1, #0
 800d09a:	0018      	movs	r0, r3
 800d09c:	f005 fe0c 	bl	8012cb8 <VL53L0X_WrByte>
 800d0a0:	0003      	movs	r3, r0
 800d0a2:	0019      	movs	r1, r3
 800d0a4:	193b      	adds	r3, r7, r4
 800d0a6:	193a      	adds	r2, r7, r4
 800d0a8:	7812      	ldrb	r2, [r2, #0]
 800d0aa:	430a      	orrs	r2, r1
 800d0ac:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800d0ae:	250f      	movs	r5, #15
 800d0b0:	197a      	adds	r2, r7, r5
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2191      	movs	r1, #145	; 0x91
 800d0b6:	0018      	movs	r0, r3
 800d0b8:	f005 fead 	bl	8012e16 <VL53L0X_RdByte>
 800d0bc:	0003      	movs	r3, r0
 800d0be:	0019      	movs	r1, r3
 800d0c0:	193b      	adds	r3, r7, r4
 800d0c2:	193a      	adds	r2, r7, r4
 800d0c4:	7812      	ldrb	r2, [r2, #0]
 800d0c6:	430a      	orrs	r2, r1
 800d0c8:	701a      	strb	r2, [r3, #0]
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800d0ca:	197b      	adds	r3, r7, r5
 800d0cc:	7819      	ldrb	r1, [r3, #0]
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	239d      	movs	r3, #157	; 0x9d
 800d0d2:	005b      	lsls	r3, r3, #1
 800d0d4:	54d1      	strb	r1, [r2, r3]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	2100      	movs	r1, #0
 800d0dc:	0018      	movs	r0, r3
 800d0de:	f005 fdeb 	bl	8012cb8 <VL53L0X_WrByte>
 800d0e2:	0003      	movs	r3, r0
 800d0e4:	0019      	movs	r1, r3
 800d0e6:	193b      	adds	r3, r7, r4
 800d0e8:	193a      	adds	r2, r7, r4
 800d0ea:	7812      	ldrb	r2, [r2, #0]
 800d0ec:	430a      	orrs	r2, r1
 800d0ee:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	21ff      	movs	r1, #255	; 0xff
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	f005 fdde 	bl	8012cb8 <VL53L0X_WrByte>
 800d0fc:	0003      	movs	r3, r0
 800d0fe:	0019      	movs	r1, r3
 800d100:	193b      	adds	r3, r7, r4
 800d102:	193a      	adds	r2, r7, r4
 800d104:	7812      	ldrb	r2, [r2, #0]
 800d106:	430a      	orrs	r2, r1
 800d108:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	2180      	movs	r1, #128	; 0x80
 800d110:	0018      	movs	r0, r3
 800d112:	f005 fdd1 	bl	8012cb8 <VL53L0X_WrByte>
 800d116:	0003      	movs	r3, r0
 800d118:	0019      	movs	r1, r3
 800d11a:	193b      	adds	r3, r7, r4
 800d11c:	193a      	adds	r2, r7, r4
 800d11e:	7812      	ldrb	r2, [r2, #0]
 800d120:	430a      	orrs	r2, r1
 800d122:	701a      	strb	r2, [r3, #0]

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800d124:	2300      	movs	r3, #0
 800d126:	653b      	str	r3, [r7, #80]	; 0x50
 800d128:	e016      	b.n	800d158 <VL53L0X_DataInit+0x1d4>
		if (Status == VL53L0X_ERROR_NONE)
 800d12a:	2457      	movs	r4, #87	; 0x57
 800d12c:	193b      	adds	r3, r7, r4
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	b25b      	sxtb	r3, r3
 800d132:	2b00      	cmp	r3, #0
 800d134:	d114      	bne.n	800d160 <VL53L0X_DataInit+0x1dc>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800d136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d138:	b299      	uxth	r1, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2201      	movs	r2, #1
 800d13e:	0018      	movs	r0, r3
 800d140:	f000 fe70 	bl	800de24 <VL53L0X_SetLimitCheckEnable>
 800d144:	0003      	movs	r3, r0
 800d146:	0019      	movs	r1, r3
 800d148:	193b      	adds	r3, r7, r4
 800d14a:	193a      	adds	r2, r7, r4
 800d14c:	7812      	ldrb	r2, [r2, #0]
 800d14e:	430a      	orrs	r2, r1
 800d150:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800d152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d154:	3301      	adds	r3, #1
 800d156:	653b      	str	r3, [r7, #80]	; 0x50
 800d158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d15a:	2b05      	cmp	r3, #5
 800d15c:	dde5      	ble.n	800d12a <VL53L0X_DataInit+0x1a6>
 800d15e:	e000      	b.n	800d162 <VL53L0X_DataInit+0x1de>
		else
			break;
 800d160:	46c0      	nop			; (mov r8, r8)

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800d162:	2257      	movs	r2, #87	; 0x57
 800d164:	18bb      	adds	r3, r7, r2
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	b25b      	sxtb	r3, r3
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d108      	bne.n	800d180 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800d16e:	18bc      	adds	r4, r7, r2
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	2102      	movs	r1, #2
 800d176:	0018      	movs	r0, r3
 800d178:	f000 fe54 	bl	800de24 <VL53L0X_SetLimitCheckEnable>
 800d17c:	0003      	movs	r3, r0
 800d17e:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800d180:	2257      	movs	r2, #87	; 0x57
 800d182:	18bb      	adds	r3, r7, r2
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	b25b      	sxtb	r3, r3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d108      	bne.n	800d19e <VL53L0X_DataInit+0x21a>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800d18c:	18bc      	adds	r4, r7, r2
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	2103      	movs	r1, #3
 800d194:	0018      	movs	r0, r3
 800d196:	f000 fe45 	bl	800de24 <VL53L0X_SetLimitCheckEnable>
 800d19a:	0003      	movs	r3, r0
 800d19c:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800d19e:	2257      	movs	r2, #87	; 0x57
 800d1a0:	18bb      	adds	r3, r7, r2
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	b25b      	sxtb	r3, r3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d108      	bne.n	800d1bc <VL53L0X_DataInit+0x238>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800d1aa:	18bc      	adds	r4, r7, r2
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	2104      	movs	r1, #4
 800d1b2:	0018      	movs	r0, r3
 800d1b4:	f000 fe36 	bl	800de24 <VL53L0X_SetLimitCheckEnable>
 800d1b8:	0003      	movs	r3, r0
 800d1ba:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800d1bc:	2257      	movs	r2, #87	; 0x57
 800d1be:	18bb      	adds	r3, r7, r2
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	b25b      	sxtb	r3, r3
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d108      	bne.n	800d1da <VL53L0X_DataInit+0x256>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800d1c8:	18bc      	adds	r4, r7, r2
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2105      	movs	r1, #5
 800d1d0:	0018      	movs	r0, r3
 800d1d2:	f000 fe27 	bl	800de24 <VL53L0X_SetLimitCheckEnable>
 800d1d6:	0003      	movs	r3, r0
 800d1d8:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800d1da:	2257      	movs	r2, #87	; 0x57
 800d1dc:	18bb      	adds	r3, r7, r2
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	b25b      	sxtb	r3, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d109      	bne.n	800d1fa <VL53L0X_DataInit+0x276>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800d1e6:	18bc      	adds	r4, r7, r2
 800d1e8:	2390      	movs	r3, #144	; 0x90
 800d1ea:	035a      	lsls	r2, r3, #13
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	0018      	movs	r0, r3
 800d1f2:	f000 ff03 	bl	800dffc <VL53L0X_SetLimitCheckValue>
 800d1f6:	0003      	movs	r3, r0
 800d1f8:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800d1fa:	2257      	movs	r2, #87	; 0x57
 800d1fc:	18bb      	adds	r3, r7, r2
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	b25b      	sxtb	r3, r3
 800d202:	2b00      	cmp	r3, #0
 800d204:	d109      	bne.n	800d21a <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800d206:	18bc      	adds	r4, r7, r2
 800d208:	2380      	movs	r3, #128	; 0x80
 800d20a:	01da      	lsls	r2, r3, #7
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2101      	movs	r1, #1
 800d210:	0018      	movs	r0, r3
 800d212:	f000 fef3 	bl	800dffc <VL53L0X_SetLimitCheckValue>
 800d216:	0003      	movs	r3, r0
 800d218:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d21a:	2257      	movs	r2, #87	; 0x57
 800d21c:	18bb      	adds	r3, r7, r2
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	b25b      	sxtb	r3, r3
 800d222:	2b00      	cmp	r3, #0
 800d224:	d109      	bne.n	800d23a <VL53L0X_DataInit+0x2b6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800d226:	18bc      	adds	r4, r7, r2
 800d228:	238c      	movs	r3, #140	; 0x8c
 800d22a:	039a      	lsls	r2, r3, #14
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2102      	movs	r1, #2
 800d230:	0018      	movs	r0, r3
 800d232:	f000 fee3 	bl	800dffc <VL53L0X_SetLimitCheckValue>
 800d236:	0003      	movs	r3, r0
 800d238:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d23a:	2257      	movs	r2, #87	; 0x57
 800d23c:	18bb      	adds	r3, r7, r2
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	b25b      	sxtb	r3, r3
 800d242:	2b00      	cmp	r3, #0
 800d244:	d108      	bne.n	800d258 <VL53L0X_DataInit+0x2d4>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800d246:	18bc      	adds	r4, r7, r2
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	2103      	movs	r1, #3
 800d24e:	0018      	movs	r0, r3
 800d250:	f000 fed4 	bl	800dffc <VL53L0X_SetLimitCheckValue>
 800d254:	0003      	movs	r3, r0
 800d256:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d258:	2057      	movs	r0, #87	; 0x57
 800d25a:	183b      	adds	r3, r7, r0
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	b25b      	sxtb	r3, r3
 800d260:	2b00      	cmp	r3, #0
 800d262:	d112      	bne.n	800d28a <VL53L0X_DataInit+0x306>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	2398      	movs	r3, #152	; 0x98
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	21ff      	movs	r1, #255	; 0xff
 800d26c:	54d1      	strb	r1, [r2, r3]
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d26e:	183c      	adds	r4, r7, r0
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	22ff      	movs	r2, #255	; 0xff
 800d274:	2101      	movs	r1, #1
 800d276:	0018      	movs	r0, r3
 800d278:	f005 fd1e 	bl	8012cb8 <VL53L0X_WrByte>
 800d27c:	0003      	movs	r3, r0
 800d27e:	7023      	strb	r3, [r4, #0]
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	2399      	movs	r3, #153	; 0x99
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	2101      	movs	r1, #1
 800d288:	54d1      	strb	r1, [r2, r3]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800d28a:	2357      	movs	r3, #87	; 0x57
 800d28c:	18fb      	adds	r3, r7, r3
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	b25b      	sxtb	r3, r3
 800d292:	2b00      	cmp	r3, #0
 800d294:	d104      	bne.n	800d2a0 <VL53L0X_DataInit+0x31c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	2316      	movs	r3, #22
 800d29a:	33ff      	adds	r3, #255	; 0xff
 800d29c:	2100      	movs	r1, #0
 800d29e:	54d1      	strb	r1, [r2, r3]


	LOG_FUNCTION_END(Status);
	return Status;
 800d2a0:	2357      	movs	r3, #87	; 0x57
 800d2a2:	18fb      	adds	r3, r7, r3
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	b25b      	sxtb	r3, r3
}
 800d2a8:	0018      	movs	r0, r3
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	b017      	add	sp, #92	; 0x5c
 800d2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2b0:	00016b85 	.word	0x00016b85
 800d2b4:	000970a4 	.word	0x000970a4

0800d2b8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800d2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ba:	b09f      	sub	sp, #124	; 0x7c
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2c0:	246f      	movs	r4, #111	; 0x6f
 800d2c2:	193b      	adds	r3, r7, r4
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800d2c8:	231c      	movs	r3, #28
 800d2ca:	18fb      	adds	r3, r7, r3
 800d2cc:	0018      	movs	r0, r3
 800d2ce:	2340      	movs	r3, #64	; 0x40
 800d2d0:	001a      	movs	r2, r3
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	f007 fde5 	bl	8014ea2 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800d2d8:	231a      	movs	r3, #26
 800d2da:	18fb      	adds	r3, r7, r3
 800d2dc:	2200      	movs	r2, #0
 800d2de:	801a      	strh	r2, [r3, #0]
	uint8_t tempbyte = 0;
 800d2e0:	2319      	movs	r3, #25
 800d2e2:	18fb      	adds	r3, r7, r3
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	701a      	strb	r2, [r3, #0]
	uint8_t UseInternalTuningSettings = 0;
 800d2e8:	2367      	movs	r3, #103	; 0x67
 800d2ea:	18fb      	adds	r3, r7, r3
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	701a      	strb	r2, [r3, #0]
	uint32_t count = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800d2f4:	2318      	movs	r3, #24
 800d2f6:	18fb      	adds	r3, r7, r3
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	701a      	strb	r2, [r3, #0]
	uint32_t refSpadCount = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800d300:	255f      	movs	r5, #95	; 0x5f
 800d302:	197b      	adds	r3, r7, r5
 800d304:	2200      	movs	r2, #0
 800d306:	701a      	strb	r2, [r3, #0]
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800d308:	193c      	adds	r4, r7, r4
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2101      	movs	r1, #1
 800d30e:	0018      	movs	r0, r3
 800d310:	f002 ff06 	bl	8010120 <VL53L0X_get_info_from_device>
 800d314:	0003      	movs	r3, r0
 800d316:	7023      	strb	r3, [r4, #0]

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	2314      	movs	r3, #20
 800d31c:	33ff      	adds	r3, #255	; 0xff
 800d31e:	5cd3      	ldrb	r3, [r2, r3]
 800d320:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d322:	197b      	adds	r3, r7, r5
 800d324:	6879      	ldr	r1, [r7, #4]
 800d326:	228a      	movs	r2, #138	; 0x8a
 800d328:	0052      	lsls	r2, r2, #1
 800d32a:	5c8a      	ldrb	r2, [r1, r2]
 800d32c:	701a      	strb	r2, [r3, #0]
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800d32e:	197b      	adds	r3, r7, r5
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	2b01      	cmp	r3, #1
 800d334:	d80e      	bhi.n	800d354 <VL53L0X_StaticInit+0x9c>
 800d336:	197b      	adds	r3, r7, r5
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d102      	bne.n	800d344 <VL53L0X_StaticInit+0x8c>
		((ApertureSpads == 1) && (count > 32)) ||
 800d33e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d340:	2b20      	cmp	r3, #32
 800d342:	d807      	bhi.n	800d354 <VL53L0X_StaticInit+0x9c>
 800d344:	235f      	movs	r3, #95	; 0x5f
 800d346:	18fb      	adds	r3, r7, r3
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10f      	bne.n	800d36e <VL53L0X_StaticInit+0xb6>
		((ApertureSpads == 0) && (count > 12)))
 800d34e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d350:	2b0c      	cmp	r3, #12
 800d352:	d90c      	bls.n	800d36e <VL53L0X_StaticInit+0xb6>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800d354:	236f      	movs	r3, #111	; 0x6f
 800d356:	18fc      	adds	r4, r7, r3
 800d358:	2318      	movs	r3, #24
 800d35a:	18fa      	adds	r2, r7, r3
 800d35c:	2314      	movs	r3, #20
 800d35e:	18f9      	adds	r1, r7, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	0018      	movs	r0, r3
 800d364:	f002 f831 	bl	800f3ca <VL53L0X_perform_ref_spad_management>
 800d368:	0003      	movs	r3, r0
 800d36a:	7023      	strb	r3, [r4, #0]
 800d36c:	e00b      	b.n	800d386 <VL53L0X_StaticInit+0xce>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800d36e:	236f      	movs	r3, #111	; 0x6f
 800d370:	18fc      	adds	r4, r7, r3
 800d372:	235f      	movs	r3, #95	; 0x5f
 800d374:	18fb      	adds	r3, r7, r3
 800d376:	781a      	ldrb	r2, [r3, #0]
 800d378:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	0018      	movs	r0, r3
 800d37e:	f002 fa93 	bl	800f8a8 <VL53L0X_set_reference_spads>
 800d382:	0003      	movs	r3, r0
 800d384:	7023      	strb	r3, [r4, #0]


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800d386:	4bb2      	ldr	r3, [pc, #712]	; (800d650 <VL53L0X_StaticInit+0x398>)
 800d388:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800d38a:	236f      	movs	r3, #111	; 0x6f
 800d38c:	18fb      	adds	r3, r7, r3
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	b25b      	sxtb	r3, r3
 800d392:	2b00      	cmp	r3, #0
 800d394:	d112      	bne.n	800d3bc <VL53L0X_StaticInit+0x104>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800d396:	2067      	movs	r0, #103	; 0x67
 800d398:	183b      	adds	r3, r7, r0
 800d39a:	6879      	ldr	r1, [r7, #4]
 800d39c:	22a8      	movs	r2, #168	; 0xa8
 800d39e:	0052      	lsls	r2, r2, #1
 800d3a0:	5c8a      	ldrb	r2, [r1, r2]
 800d3a2:	701a      	strb	r2, [r3, #0]
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800d3a4:	183b      	adds	r3, r7, r0
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d105      	bne.n	800d3b8 <VL53L0X_StaticInit+0x100>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	23a6      	movs	r3, #166	; 0xa6
 800d3b0:	005b      	lsls	r3, r3, #1
 800d3b2:	58d3      	ldr	r3, [r2, r3]
 800d3b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d3b6:	e001      	b.n	800d3bc <VL53L0X_StaticInit+0x104>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800d3b8:	4ba5      	ldr	r3, [pc, #660]	; (800d650 <VL53L0X_StaticInit+0x398>)
 800d3ba:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800d3bc:	226f      	movs	r2, #111	; 0x6f
 800d3be:	18bb      	adds	r3, r7, r2
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	b25b      	sxtb	r3, r3
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d108      	bne.n	800d3da <VL53L0X_StaticInit+0x122>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800d3c8:	18bc      	adds	r4, r7, r2
 800d3ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	0011      	movs	r1, r2
 800d3d0:	0018      	movs	r0, r3
 800d3d2:	f004 fc1f 	bl	8011c14 <VL53L0X_load_tuning_settings>
 800d3d6:	0003      	movs	r3, r0
 800d3d8:	7023      	strb	r3, [r4, #0]


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800d3da:	226f      	movs	r2, #111	; 0x6f
 800d3dc:	18bb      	adds	r3, r7, r2
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	b25b      	sxtb	r3, r3
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10a      	bne.n	800d3fc <VL53L0X_StaticInit+0x144>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800d3e6:	18bc      	adds	r4, r7, r2
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	9300      	str	r3, [sp, #0]
 800d3ee:	2304      	movs	r3, #4
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	f001 fb30 	bl	800ea58 <VL53L0X_SetGpioConfig>
 800d3f8:	0003      	movs	r3, r0
 800d3fa:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d3fc:	256f      	movs	r5, #111	; 0x6f
 800d3fe:	197b      	adds	r3, r7, r5
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	b25b      	sxtb	r3, r3
 800d404:	2b00      	cmp	r3, #0
 800d406:	d123      	bne.n	800d450 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d408:	197c      	adds	r4, r7, r5
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	21ff      	movs	r1, #255	; 0xff
 800d410:	0018      	movs	r0, r3
 800d412:	f005 fc51 	bl	8012cb8 <VL53L0X_WrByte>
 800d416:	0003      	movs	r3, r0
 800d418:	7023      	strb	r3, [r4, #0]
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800d41a:	231a      	movs	r3, #26
 800d41c:	18fa      	adds	r2, r7, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2184      	movs	r1, #132	; 0x84
 800d422:	0018      	movs	r0, r3
 800d424:	f005 fd2c 	bl	8012e80 <VL53L0X_RdWord>
 800d428:	0003      	movs	r3, r0
 800d42a:	0019      	movs	r1, r3
 800d42c:	197b      	adds	r3, r7, r5
 800d42e:	197a      	adds	r2, r7, r5
 800d430:	7812      	ldrb	r2, [r2, #0]
 800d432:	430a      	orrs	r2, r1
 800d434:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	21ff      	movs	r1, #255	; 0xff
 800d43c:	0018      	movs	r0, r3
 800d43e:	f005 fc3b 	bl	8012cb8 <VL53L0X_WrByte>
 800d442:	0003      	movs	r3, r0
 800d444:	0019      	movs	r1, r3
 800d446:	197b      	adds	r3, r7, r5
 800d448:	197a      	adds	r2, r7, r5
 800d44a:	7812      	ldrb	r2, [r2, #0]
 800d44c:	430a      	orrs	r2, r1
 800d44e:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d450:	236f      	movs	r3, #111	; 0x6f
 800d452:	18fb      	adds	r3, r7, r3
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	b25b      	sxtb	r3, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d107      	bne.n	800d46c <VL53L0X_StaticInit+0x1b4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800d45c:	231a      	movs	r3, #26
 800d45e:	18fb      	adds	r3, r7, r3
 800d460:	881b      	ldrh	r3, [r3, #0]
 800d462:	011b      	lsls	r3, r3, #4
 800d464:	0019      	movs	r1, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	22d4      	movs	r2, #212	; 0xd4
 800d46a:	5099      	str	r1, [r3, r2]
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800d46c:	226f      	movs	r2, #111	; 0x6f
 800d46e:	18bb      	adds	r3, r7, r2
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	b25b      	sxtb	r3, r3
 800d474:	2b00      	cmp	r3, #0
 800d476:	d109      	bne.n	800d48c <VL53L0X_StaticInit+0x1d4>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800d478:	18bc      	adds	r4, r7, r2
 800d47a:	231c      	movs	r3, #28
 800d47c:	18fa      	adds	r2, r7, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	0011      	movs	r1, r2
 800d482:	0018      	movs	r0, r3
 800d484:	f000 f8e6 	bl	800d654 <VL53L0X_GetDeviceParameters>
 800d488:	0003      	movs	r3, r0
 800d48a:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE) {
 800d48c:	256f      	movs	r5, #111	; 0x6f
 800d48e:	197b      	adds	r3, r7, r5
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	b25b      	sxtb	r3, r3
 800d494:	2b00      	cmp	r3, #0
 800d496:	d114      	bne.n	800d4c2 <VL53L0X_StaticInit+0x20a>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800d498:	197c      	adds	r4, r7, r5
 800d49a:	2619      	movs	r6, #25
 800d49c:	19ba      	adds	r2, r7, r6
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	0011      	movs	r1, r2
 800d4a2:	0018      	movs	r0, r3
 800d4a4:	f000 f9d6 	bl	800d854 <VL53L0X_GetFractionEnable>
 800d4a8:	0003      	movs	r3, r0
 800d4aa:	7023      	strb	r3, [r4, #0]
		if (Status == VL53L0X_ERROR_NONE)
 800d4ac:	197b      	adds	r3, r7, r5
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	b25b      	sxtb	r3, r3
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d105      	bne.n	800d4c2 <VL53L0X_StaticInit+0x20a>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800d4b6:	19bb      	adds	r3, r7, r6
 800d4b8:	7819      	ldrb	r1, [r3, #0]
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	2332      	movs	r3, #50	; 0x32
 800d4be:	33ff      	adds	r3, #255	; 0xff
 800d4c0:	54d1      	strb	r1, [r2, r3]

	}

	if (Status == VL53L0X_ERROR_NONE)
 800d4c2:	236f      	movs	r3, #111	; 0x6f
 800d4c4:	18fb      	adds	r3, r7, r3
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	b25b      	sxtb	r3, r3
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d108      	bne.n	800d4e0 <VL53L0X_StaticInit+0x228>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	221c      	movs	r2, #28
 800d4d2:	18ba      	adds	r2, r7, r2
 800d4d4:	3310      	adds	r3, #16
 800d4d6:	0011      	movs	r1, r2
 800d4d8:	2240      	movs	r2, #64	; 0x40
 800d4da:	0018      	movs	r0, r3
 800d4dc:	f007 fcd8 	bl	8014e90 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800d4e0:	256f      	movs	r5, #111	; 0x6f
 800d4e2:	197b      	adds	r3, r7, r5
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	b25b      	sxtb	r3, r3
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d114      	bne.n	800d516 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_RdByte(Dev,
 800d4ec:	197c      	adds	r4, r7, r5
 800d4ee:	2619      	movs	r6, #25
 800d4f0:	19ba      	adds	r2, r7, r6
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2101      	movs	r1, #1
 800d4f6:	0018      	movs	r0, r3
 800d4f8:	f005 fc8d 	bl	8012e16 <VL53L0X_RdByte>
 800d4fc:	0003      	movs	r3, r0
 800d4fe:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800d500:	197b      	adds	r3, r7, r5
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	b25b      	sxtb	r3, r3
 800d506:	2b00      	cmp	r3, #0
 800d508:	d105      	bne.n	800d516 <VL53L0X_StaticInit+0x25e>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800d50a:	19bb      	adds	r3, r7, r6
 800d50c:	7819      	ldrb	r1, [r3, #0]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	2398      	movs	r3, #152	; 0x98
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	54d1      	strb	r1, [r2, r3]

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800d516:	226f      	movs	r2, #111	; 0x6f
 800d518:	18bb      	adds	r3, r7, r2
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	b25b      	sxtb	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d108      	bne.n	800d534 <VL53L0X_StaticInit+0x27c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800d522:	18bc      	adds	r4, r7, r2
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	2100      	movs	r1, #0
 800d52a:	0018      	movs	r0, r3
 800d52c:	f000 fa2a 	bl	800d984 <VL53L0X_SetSequenceStepEnable>
 800d530:	0003      	movs	r3, r0
 800d532:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d534:	226f      	movs	r2, #111	; 0x6f
 800d536:	18bb      	adds	r3, r7, r2
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	b25b      	sxtb	r3, r3
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d108      	bne.n	800d552 <VL53L0X_StaticInit+0x29a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800d540:	18bc      	adds	r4, r7, r2
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	2102      	movs	r1, #2
 800d548:	0018      	movs	r0, r3
 800d54a:	f000 fa1b 	bl	800d984 <VL53L0X_SetSequenceStepEnable>
 800d54e:	0003      	movs	r3, r0
 800d550:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800d552:	236f      	movs	r3, #111	; 0x6f
 800d554:	18fb      	adds	r3, r7, r3
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	b25b      	sxtb	r3, r3
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d104      	bne.n	800d568 <VL53L0X_StaticInit+0x2b0>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	2399      	movs	r3, #153	; 0x99
 800d562:	005b      	lsls	r3, r3, #1
 800d564:	2103      	movs	r1, #3
 800d566:	54d1      	strb	r1, [r2, r3]



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800d568:	226f      	movs	r2, #111	; 0x6f
 800d56a:	18bb      	adds	r3, r7, r2
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	b25b      	sxtb	r3, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	d109      	bne.n	800d588 <VL53L0X_StaticInit+0x2d0>
		Status = VL53L0X_GetVcselPulsePeriod(
 800d574:	18bc      	adds	r4, r7, r2
 800d576:	2313      	movs	r3, #19
 800d578:	18fa      	adds	r2, r7, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2100      	movs	r1, #0
 800d57e:	0018      	movs	r0, r3
 800d580:	f000 f9e2 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 800d584:	0003      	movs	r3, r0
 800d586:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d588:	236f      	movs	r3, #111	; 0x6f
 800d58a:	18fb      	adds	r3, r7, r3
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	b25b      	sxtb	r3, r3
 800d590:	2b00      	cmp	r3, #0
 800d592:	d105      	bne.n	800d5a0 <VL53L0X_StaticInit+0x2e8>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d594:	2313      	movs	r3, #19
 800d596:	18fb      	adds	r3, r7, r3
 800d598:	7819      	ldrb	r1, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	22e8      	movs	r2, #232	; 0xe8
 800d59e:	5499      	strb	r1, [r3, r2]
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800d5a0:	226f      	movs	r2, #111	; 0x6f
 800d5a2:	18bb      	adds	r3, r7, r2
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	b25b      	sxtb	r3, r3
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d109      	bne.n	800d5c0 <VL53L0X_StaticInit+0x308>
		Status = VL53L0X_GetVcselPulsePeriod(
 800d5ac:	18bc      	adds	r4, r7, r2
 800d5ae:	2313      	movs	r3, #19
 800d5b0:	18fa      	adds	r2, r7, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	0018      	movs	r0, r3
 800d5b8:	f000 f9c6 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 800d5bc:	0003      	movs	r3, r0
 800d5be:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d5c0:	236f      	movs	r3, #111	; 0x6f
 800d5c2:	18fb      	adds	r3, r7, r3
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	b25b      	sxtb	r3, r3
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d105      	bne.n	800d5d8 <VL53L0X_StaticInit+0x320>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d5cc:	2313      	movs	r3, #19
 800d5ce:	18fb      	adds	r3, r7, r3
 800d5d0:	7819      	ldrb	r1, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	22e0      	movs	r2, #224	; 0xe0
 800d5d6:	5499      	strb	r1, [r3, r2]
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800d5d8:	226f      	movs	r2, #111	; 0x6f
 800d5da:	18bb      	adds	r3, r7, r2
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	b25b      	sxtb	r3, r3
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d109      	bne.n	800d5f8 <VL53L0X_StaticInit+0x340>
		Status = get_sequence_step_timeout(
 800d5e4:	18bc      	adds	r4, r7, r2
 800d5e6:	230c      	movs	r3, #12
 800d5e8:	18fa      	adds	r2, r7, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2103      	movs	r1, #3
 800d5ee:	0018      	movs	r0, r3
 800d5f0:	f003 fb9a 	bl	8010d28 <get_sequence_step_timeout>
 800d5f4:	0003      	movs	r3, r0
 800d5f6:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d5f8:	236f      	movs	r3, #111	; 0x6f
 800d5fa:	18fb      	adds	r3, r7, r3
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	b25b      	sxtb	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	d103      	bne.n	800d60c <VL53L0X_StaticInit+0x354>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	21e4      	movs	r1, #228	; 0xe4
 800d60a:	505a      	str	r2, [r3, r1]
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800d60c:	226f      	movs	r2, #111	; 0x6f
 800d60e:	18bb      	adds	r3, r7, r2
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	b25b      	sxtb	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	d109      	bne.n	800d62c <VL53L0X_StaticInit+0x374>
		Status = get_sequence_step_timeout(
 800d618:	18bc      	adds	r4, r7, r2
 800d61a:	230c      	movs	r3, #12
 800d61c:	18fa      	adds	r2, r7, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2104      	movs	r1, #4
 800d622:	0018      	movs	r0, r3
 800d624:	f003 fb80 	bl	8010d28 <get_sequence_step_timeout>
 800d628:	0003      	movs	r3, r0
 800d62a:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d62c:	236f      	movs	r3, #111	; 0x6f
 800d62e:	18fb      	adds	r3, r7, r3
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	b25b      	sxtb	r3, r3
 800d634:	2b00      	cmp	r3, #0
 800d636:	d103      	bne.n	800d640 <VL53L0X_StaticInit+0x388>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	21dc      	movs	r1, #220	; 0xdc
 800d63e:	505a      	str	r2, [r3, r1]
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d640:	236f      	movs	r3, #111	; 0x6f
 800d642:	18fb      	adds	r3, r7, r3
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	b25b      	sxtb	r3, r3
}
 800d648:	0018      	movs	r0, r3
 800d64a:	46bd      	mov	sp, r7
 800d64c:	b01d      	add	sp, #116	; 0x74
 800d64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d650:	20000018 	.word	0x20000018

0800d654 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800d654:	b5b0      	push	{r4, r5, r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d65e:	250f      	movs	r5, #15
 800d660:	197b      	adds	r3, r7, r5
 800d662:	2200      	movs	r2, #0
 800d664:	701a      	strb	r2, [r3, #0]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	197c      	adds	r4, r7, r5
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	0011      	movs	r1, r2
 800d66e:	0018      	movs	r0, r3
 800d670:	f000 f8dc 	bl	800d82c <VL53L0X_GetDeviceMode>
 800d674:	0003      	movs	r3, r0
 800d676:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800d678:	0029      	movs	r1, r5
 800d67a:	187b      	adds	r3, r7, r1
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	b25b      	sxtb	r3, r3
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10a      	bne.n	800d69a <VL53L0X_GetDeviceParameters+0x46>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	3308      	adds	r3, #8
 800d688:	001a      	movs	r2, r3
 800d68a:	187c      	adds	r4, r7, r1
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	0011      	movs	r1, r2
 800d690:	0018      	movs	r0, r3
 800d692:	f000 fb2e 	bl	800dcf2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800d696:	0003      	movs	r3, r0
 800d698:	7023      	strb	r3, [r4, #0]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800d69a:	230f      	movs	r3, #15
 800d69c:	18fb      	adds	r3, r7, r3
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	b25b      	sxtb	r3, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d102      	bne.n	800d6ac <VL53L0X_GetDeviceParameters+0x58>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800d6ac:	210f      	movs	r1, #15
 800d6ae:	187b      	adds	r3, r7, r1
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	b25b      	sxtb	r3, r3
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10a      	bne.n	800d6ce <VL53L0X_GetDeviceParameters+0x7a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	3310      	adds	r3, #16
 800d6bc:	001a      	movs	r2, r3
 800d6be:	187c      	adds	r4, r7, r1
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	0011      	movs	r1, r2
 800d6c4:	0018      	movs	r0, r3
 800d6c6:	f000 fb71 	bl	800ddac <VL53L0X_GetXTalkCompensationRateMegaCps>
 800d6ca:	0003      	movs	r3, r0
 800d6cc:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800d6ce:	210f      	movs	r1, #15
 800d6d0:	187b      	adds	r3, r7, r1
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	b25b      	sxtb	r3, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d10a      	bne.n	800d6f0 <VL53L0X_GetDeviceParameters+0x9c>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	3314      	adds	r3, #20
 800d6de:	001a      	movs	r2, r3
 800d6e0:	187c      	adds	r4, r7, r1
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	0011      	movs	r1, r2
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	f7ff fc14 	bl	800cf14 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800d6ec:	0003      	movs	r3, r0
 800d6ee:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800d6f0:	230f      	movs	r3, #15
 800d6f2:	18fb      	adds	r3, r7, r3
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	b25b      	sxtb	r3, r3
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d13b      	bne.n	800d774 <VL53L0X_GetDeviceParameters+0x120>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	60bb      	str	r3, [r7, #8]
 800d700:	e031      	b.n	800d766 <VL53L0X_GetDeviceParameters+0x112>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800d702:	240f      	movs	r4, #15
 800d704:	193b      	adds	r3, r7, r4
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	b25b      	sxtb	r3, r3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d12f      	bne.n	800d76e <VL53L0X_GetDeviceParameters+0x11a>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	b299      	uxth	r1, r3
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	3308      	adds	r3, #8
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	683a      	ldr	r2, [r7, #0]
 800d71a:	18d3      	adds	r3, r2, r3
 800d71c:	1d1a      	adds	r2, r3, #4
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	0018      	movs	r0, r3
 800d722:	f000 fcdf 	bl	800e0e4 <VL53L0X_GetLimitCheckValue>
 800d726:	0003      	movs	r3, r0
 800d728:	0019      	movs	r1, r3
 800d72a:	193b      	adds	r3, r7, r4
 800d72c:	193a      	adds	r2, r7, r4
 800d72e:	7812      	ldrb	r2, [r2, #0]
 800d730:	430a      	orrs	r2, r1
 800d732:	701a      	strb	r2, [r3, #0]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800d734:	193b      	adds	r3, r7, r4
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	b25b      	sxtb	r3, r3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d119      	bne.n	800d772 <VL53L0X_GetDeviceParameters+0x11e>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	b299      	uxth	r1, r3
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	3318      	adds	r3, #24
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	18d2      	adds	r2, r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	0018      	movs	r0, r3
 800d74e:	f000 fc25 	bl	800df9c <VL53L0X_GetLimitCheckEnable>
 800d752:	0003      	movs	r3, r0
 800d754:	0019      	movs	r1, r3
 800d756:	193b      	adds	r3, r7, r4
 800d758:	193a      	adds	r2, r7, r4
 800d75a:	7812      	ldrb	r2, [r2, #0]
 800d75c:	430a      	orrs	r2, r1
 800d75e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	3301      	adds	r3, #1
 800d764:	60bb      	str	r3, [r7, #8]
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	2b05      	cmp	r3, #5
 800d76a:	ddca      	ble.n	800d702 <VL53L0X_GetDeviceParameters+0xae>
 800d76c:	e002      	b.n	800d774 <VL53L0X_GetDeviceParameters+0x120>
				break;
 800d76e:	46c0      	nop			; (mov r8, r8)
 800d770:	e000      	b.n	800d774 <VL53L0X_GetDeviceParameters+0x120>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800d772:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d774:	210f      	movs	r1, #15
 800d776:	187b      	adds	r3, r7, r1
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	b25b      	sxtb	r3, r3
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10a      	bne.n	800d796 <VL53L0X_GetDeviceParameters+0x142>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	333c      	adds	r3, #60	; 0x3c
 800d784:	001a      	movs	r2, r3
 800d786:	187c      	adds	r4, r7, r1
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	0011      	movs	r1, r2
 800d78c:	0018      	movs	r0, r3
 800d78e:	f000 fd59 	bl	800e244 <VL53L0X_GetWrapAroundCheckEnable>
 800d792:	0003      	movs	r3, r0
 800d794:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800d796:	210f      	movs	r1, #15
 800d798:	187b      	adds	r3, r7, r1
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	b25b      	sxtb	r3, r3
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d109      	bne.n	800d7b6 <VL53L0X_GetDeviceParameters+0x162>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	1d1a      	adds	r2, r3, #4
 800d7a6:	187c      	adds	r4, r7, r1
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	0011      	movs	r1, r2
 800d7ac:	0018      	movs	r0, r3
 800d7ae:	f000 f890 	bl	800d8d2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800d7b2:	0003      	movs	r3, r0
 800d7b4:	7023      	strb	r3, [r4, #0]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d7b6:	230f      	movs	r3, #15
 800d7b8:	18fb      	adds	r3, r7, r3
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	b25b      	sxtb	r3, r3
}
 800d7be:	0018      	movs	r0, r3
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	b004      	add	sp, #16
 800d7c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d7c8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	000a      	movs	r2, r1
 800d7d2:	1cfb      	adds	r3, r7, #3
 800d7d4:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d7d6:	230f      	movs	r3, #15
 800d7d8:	18fb      	adds	r3, r7, r3
 800d7da:	2200      	movs	r2, #0
 800d7dc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800d7de:	1cfb      	adds	r3, r7, #3
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	2215      	movs	r2, #21
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	4192      	sbcs	r2, r2
 800d7e8:	4252      	negs	r2, r2
 800d7ea:	b2d2      	uxtb	r2, r2
 800d7ec:	2a00      	cmp	r2, #0
 800d7ee:	d10e      	bne.n	800d80e <VL53L0X_SetDeviceMode+0x46>
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	409a      	lsls	r2, r3
 800d7f4:	0013      	movs	r3, r2
 800d7f6:	4a0c      	ldr	r2, [pc, #48]	; (800d828 <VL53L0X_SetDeviceMode+0x60>)
 800d7f8:	4013      	ands	r3, r2
 800d7fa:	1e5a      	subs	r2, r3, #1
 800d7fc:	4193      	sbcs	r3, r2
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	d004      	beq.n	800d80e <VL53L0X_SetDeviceMode+0x46>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	1cfa      	adds	r2, r7, #3
 800d808:	7812      	ldrb	r2, [r2, #0]
 800d80a:	741a      	strb	r2, [r3, #16]
		break;
 800d80c:	e003      	b.n	800d816 <VL53L0X_SetDeviceMode+0x4e>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800d80e:	230f      	movs	r3, #15
 800d810:	18fb      	adds	r3, r7, r3
 800d812:	22f8      	movs	r2, #248	; 0xf8
 800d814:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d816:	230f      	movs	r3, #15
 800d818:	18fb      	adds	r3, r7, r3
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	b25b      	sxtb	r3, r3
}
 800d81e:	0018      	movs	r0, r3
 800d820:	46bd      	mov	sp, r7
 800d822:	b004      	add	sp, #16
 800d824:	bd80      	pop	{r7, pc}
 800d826:	46c0      	nop			; (mov r8, r8)
 800d828:	0030000b 	.word	0x0030000b

0800d82c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d836:	210f      	movs	r1, #15
 800d838:	187b      	adds	r3, r7, r1
 800d83a:	2200      	movs	r2, #0
 800d83c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	7c1a      	ldrb	r2, [r3, #16]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800d846:	187b      	adds	r3, r7, r1
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	b25b      	sxtb	r3, r3
}
 800d84c:	0018      	movs	r0, r3
 800d84e:	46bd      	mov	sp, r7
 800d850:	b004      	add	sp, #16
 800d852:	bd80      	pop	{r7, pc}

0800d854 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800d854:	b5b0      	push	{r4, r5, r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d85e:	250f      	movs	r5, #15
 800d860:	197b      	adds	r3, r7, r5
 800d862:	2200      	movs	r2, #0
 800d864:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800d866:	197c      	adds	r4, r7, r5
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2109      	movs	r1, #9
 800d86e:	0018      	movs	r0, r3
 800d870:	f005 fad1 	bl	8012e16 <VL53L0X_RdByte>
 800d874:	0003      	movs	r3, r0
 800d876:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800d878:	197b      	adds	r3, r7, r5
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	b25b      	sxtb	r3, r3
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d106      	bne.n	800d890 <VL53L0X_GetFractionEnable+0x3c>
		*pEnabled = (*pEnabled & 1);
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	2201      	movs	r2, #1
 800d888:	4013      	ands	r3, r2
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800d890:	230f      	movs	r3, #15
 800d892:	18fb      	adds	r3, r7, r3
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	b25b      	sxtb	r3, r3
}
 800d898:	0018      	movs	r0, r3
 800d89a:	46bd      	mov	sp, r7
 800d89c:	b004      	add	sp, #16
 800d89e:	bdb0      	pop	{r4, r5, r7, pc}

0800d8a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800d8a0:	b5b0      	push	{r4, r5, r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d8aa:	250f      	movs	r5, #15
 800d8ac:	197b      	adds	r3, r7, r5
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800d8b2:	197c      	adds	r4, r7, r5
 800d8b4:	683a      	ldr	r2, [r7, #0]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	0011      	movs	r1, r2
 800d8ba:	0018      	movs	r0, r3
 800d8bc:	f003 ffcc 	bl	8011858 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800d8c0:	0003      	movs	r3, r0
 800d8c2:	7023      	strb	r3, [r4, #0]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800d8c4:	197b      	adds	r3, r7, r5
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	b25b      	sxtb	r3, r3
}
 800d8ca:	0018      	movs	r0, r3
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	b004      	add	sp, #16
 800d8d0:	bdb0      	pop	{r4, r5, r7, pc}

0800d8d2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800d8d2:	b5b0      	push	{r4, r5, r7, lr}
 800d8d4:	b084      	sub	sp, #16
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d8dc:	250f      	movs	r5, #15
 800d8de:	197b      	adds	r3, r7, r5
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800d8e4:	197c      	adds	r4, r7, r5
 800d8e6:	683a      	ldr	r2, [r7, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	0011      	movs	r1, r2
 800d8ec:	0018      	movs	r0, r3
 800d8ee:	f004 f8bf 	bl	8011a70 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800d8f2:	0003      	movs	r3, r0
 800d8f4:	7023      	strb	r3, [r4, #0]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800d8f6:	197b      	adds	r3, r7, r5
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	b25b      	sxtb	r3, r3
}
 800d8fc:	0018      	movs	r0, r3
 800d8fe:	46bd      	mov	sp, r7
 800d900:	b004      	add	sp, #16
 800d902:	bdb0      	pop	{r4, r5, r7, pc}

0800d904 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800d904:	b5b0      	push	{r4, r5, r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	0008      	movs	r0, r1
 800d90e:	0011      	movs	r1, r2
 800d910:	1cfb      	adds	r3, r7, #3
 800d912:	1c02      	adds	r2, r0, #0
 800d914:	701a      	strb	r2, [r3, #0]
 800d916:	1cbb      	adds	r3, r7, #2
 800d918:	1c0a      	adds	r2, r1, #0
 800d91a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d91c:	250f      	movs	r5, #15
 800d91e:	197b      	adds	r3, r7, r5
 800d920:	2200      	movs	r2, #0
 800d922:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800d924:	197c      	adds	r4, r7, r5
 800d926:	1cbb      	adds	r3, r7, #2
 800d928:	781a      	ldrb	r2, [r3, #0]
 800d92a:	1cfb      	adds	r3, r7, #3
 800d92c:	7819      	ldrb	r1, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	0018      	movs	r0, r3
 800d932:	f003 fc4b 	bl	80111cc <VL53L0X_set_vcsel_pulse_period>
 800d936:	0003      	movs	r3, r0
 800d938:	7023      	strb	r3, [r4, #0]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800d93a:	197b      	adds	r3, r7, r5
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	b25b      	sxtb	r3, r3
}
 800d940:	0018      	movs	r0, r3
 800d942:	46bd      	mov	sp, r7
 800d944:	b004      	add	sp, #16
 800d946:	bdb0      	pop	{r4, r5, r7, pc}

0800d948 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800d948:	b5b0      	push	{r4, r5, r7, lr}
 800d94a:	b086      	sub	sp, #24
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	607a      	str	r2, [r7, #4]
 800d952:	200b      	movs	r0, #11
 800d954:	183b      	adds	r3, r7, r0
 800d956:	1c0a      	adds	r2, r1, #0
 800d958:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d95a:	2517      	movs	r5, #23
 800d95c:	197b      	adds	r3, r7, r5
 800d95e:	2200      	movs	r2, #0
 800d960:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800d962:	197c      	adds	r4, r7, r5
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	183b      	adds	r3, r7, r0
 800d968:	7819      	ldrb	r1, [r3, #0]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	0018      	movs	r0, r3
 800d96e:	f003 ff2a 	bl	80117c6 <VL53L0X_get_vcsel_pulse_period>
 800d972:	0003      	movs	r3, r0
 800d974:	7023      	strb	r3, [r4, #0]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800d976:	197b      	adds	r3, r7, r5
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	b25b      	sxtb	r3, r3
}
 800d97c:	0018      	movs	r0, r3
 800d97e:	46bd      	mov	sp, r7
 800d980:	b006      	add	sp, #24
 800d982:	bdb0      	pop	{r4, r5, r7, pc}

0800d984 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800d984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d986:	b087      	sub	sp, #28
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	0008      	movs	r0, r1
 800d98e:	0011      	movs	r1, r2
 800d990:	1cfb      	adds	r3, r7, #3
 800d992:	1c02      	adds	r2, r0, #0
 800d994:	701a      	strb	r2, [r3, #0]
 800d996:	1cbb      	adds	r3, r7, #2
 800d998:	1c0a      	adds	r2, r1, #0
 800d99a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d99c:	2517      	movs	r5, #23
 800d99e:	197b      	adds	r3, r7, r5
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800d9a4:	210f      	movs	r1, #15
 800d9a6:	187b      	adds	r3, r7, r1
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfigNew = 0;
 800d9ac:	2316      	movs	r3, #22
 800d9ae:	18fb      	adds	r3, r7, r3
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	701a      	strb	r2, [r3, #0]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d9b4:	197c      	adds	r4, r7, r5
 800d9b6:	000e      	movs	r6, r1
 800d9b8:	187a      	adds	r2, r7, r1
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2101      	movs	r1, #1
 800d9be:	0018      	movs	r0, r3
 800d9c0:	f005 fa29 	bl	8012e16 <VL53L0X_RdByte>
 800d9c4:	0003      	movs	r3, r0
 800d9c6:	7023      	strb	r3, [r4, #0]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800d9c8:	2316      	movs	r3, #22
 800d9ca:	18fb      	adds	r3, r7, r3
 800d9cc:	19ba      	adds	r2, r7, r6
 800d9ce:	7812      	ldrb	r2, [r2, #0]
 800d9d0:	701a      	strb	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800d9d2:	197b      	adds	r3, r7, r5
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	b25b      	sxtb	r3, r3
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d000      	beq.n	800d9de <VL53L0X_SetSequenceStepEnable+0x5a>
 800d9dc:	e070      	b.n	800dac0 <VL53L0X_SetSequenceStepEnable+0x13c>
		if (SequenceStepEnabled == 1) {
 800d9de:	1cbb      	adds	r3, r7, #2
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d136      	bne.n	800da54 <VL53L0X_SetSequenceStepEnable+0xd0>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800d9e6:	1cfb      	adds	r3, r7, #3
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	2b04      	cmp	r3, #4
 800d9ec:	d82d      	bhi.n	800da4a <VL53L0X_SetSequenceStepEnable+0xc6>
 800d9ee:	009a      	lsls	r2, r3, #2
 800d9f0:	4b52      	ldr	r3, [pc, #328]	; (800db3c <VL53L0X_SetSequenceStepEnable+0x1b8>)
 800d9f2:	18d3      	adds	r3, r2, r3
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	469f      	mov	pc, r3
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800d9f8:	2216      	movs	r2, #22
 800d9fa:	18bb      	adds	r3, r7, r2
 800d9fc:	18ba      	adds	r2, r7, r2
 800d9fe:	7812      	ldrb	r2, [r2, #0]
 800da00:	2110      	movs	r1, #16
 800da02:	430a      	orrs	r2, r1
 800da04:	701a      	strb	r2, [r3, #0]
				break;
 800da06:	e05c      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800da08:	2216      	movs	r2, #22
 800da0a:	18bb      	adds	r3, r7, r2
 800da0c:	18ba      	adds	r2, r7, r2
 800da0e:	7812      	ldrb	r2, [r2, #0]
 800da10:	2128      	movs	r1, #40	; 0x28
 800da12:	430a      	orrs	r2, r1
 800da14:	701a      	strb	r2, [r3, #0]
				break;
 800da16:	e054      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800da18:	2216      	movs	r2, #22
 800da1a:	18bb      	adds	r3, r7, r2
 800da1c:	18ba      	adds	r2, r7, r2
 800da1e:	7812      	ldrb	r2, [r2, #0]
 800da20:	2104      	movs	r1, #4
 800da22:	430a      	orrs	r2, r1
 800da24:	701a      	strb	r2, [r3, #0]
				break;
 800da26:	e04c      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800da28:	2216      	movs	r2, #22
 800da2a:	18bb      	adds	r3, r7, r2
 800da2c:	18ba      	adds	r2, r7, r2
 800da2e:	7812      	ldrb	r2, [r2, #0]
 800da30:	2140      	movs	r1, #64	; 0x40
 800da32:	430a      	orrs	r2, r1
 800da34:	701a      	strb	r2, [r3, #0]
				break;
 800da36:	e044      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800da38:	2216      	movs	r2, #22
 800da3a:	18bb      	adds	r3, r7, r2
 800da3c:	18ba      	adds	r2, r7, r2
 800da3e:	7812      	ldrb	r2, [r2, #0]
 800da40:	2180      	movs	r1, #128	; 0x80
 800da42:	4249      	negs	r1, r1
 800da44:	430a      	orrs	r2, r1
 800da46:	701a      	strb	r2, [r3, #0]
				break;
 800da48:	e03b      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800da4a:	2317      	movs	r3, #23
 800da4c:	18fb      	adds	r3, r7, r3
 800da4e:	22fc      	movs	r2, #252	; 0xfc
 800da50:	701a      	strb	r2, [r3, #0]
 800da52:	e036      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800da54:	1cfb      	adds	r3, r7, #3
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	2b04      	cmp	r3, #4
 800da5a:	d82c      	bhi.n	800dab6 <VL53L0X_SetSequenceStepEnable+0x132>
 800da5c:	009a      	lsls	r2, r3, #2
 800da5e:	4b38      	ldr	r3, [pc, #224]	; (800db40 <VL53L0X_SetSequenceStepEnable+0x1bc>)
 800da60:	18d3      	adds	r3, r2, r3
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	469f      	mov	pc, r3
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800da66:	2216      	movs	r2, #22
 800da68:	18bb      	adds	r3, r7, r2
 800da6a:	18ba      	adds	r2, r7, r2
 800da6c:	7812      	ldrb	r2, [r2, #0]
 800da6e:	2110      	movs	r1, #16
 800da70:	438a      	bics	r2, r1
 800da72:	701a      	strb	r2, [r3, #0]
				break;
 800da74:	e025      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800da76:	2216      	movs	r2, #22
 800da78:	18bb      	adds	r3, r7, r2
 800da7a:	18ba      	adds	r2, r7, r2
 800da7c:	7812      	ldrb	r2, [r2, #0]
 800da7e:	2128      	movs	r1, #40	; 0x28
 800da80:	438a      	bics	r2, r1
 800da82:	701a      	strb	r2, [r3, #0]
				break;
 800da84:	e01d      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800da86:	2216      	movs	r2, #22
 800da88:	18bb      	adds	r3, r7, r2
 800da8a:	18ba      	adds	r2, r7, r2
 800da8c:	7812      	ldrb	r2, [r2, #0]
 800da8e:	2104      	movs	r1, #4
 800da90:	438a      	bics	r2, r1
 800da92:	701a      	strb	r2, [r3, #0]
				break;
 800da94:	e015      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800da96:	2216      	movs	r2, #22
 800da98:	18bb      	adds	r3, r7, r2
 800da9a:	18ba      	adds	r2, r7, r2
 800da9c:	7812      	ldrb	r2, [r2, #0]
 800da9e:	2140      	movs	r1, #64	; 0x40
 800daa0:	438a      	bics	r2, r1
 800daa2:	701a      	strb	r2, [r3, #0]
				break;
 800daa4:	e00d      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800daa6:	2216      	movs	r2, #22
 800daa8:	18bb      	adds	r3, r7, r2
 800daaa:	18ba      	adds	r2, r7, r2
 800daac:	7812      	ldrb	r2, [r2, #0]
 800daae:	217f      	movs	r1, #127	; 0x7f
 800dab0:	400a      	ands	r2, r1
 800dab2:	701a      	strb	r2, [r3, #0]
				break;
 800dab4:	e005      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dab6:	2317      	movs	r3, #23
 800dab8:	18fb      	adds	r3, r7, r3
 800daba:	22fc      	movs	r2, #252	; 0xfc
 800dabc:	701a      	strb	r2, [r3, #0]
 800dabe:	e000      	b.n	800dac2 <VL53L0X_SetSequenceStepEnable+0x13e>
			}
		}
 800dac0:	46c0      	nop			; (mov r8, r8)
	}

	if (SequenceConfigNew != SequenceConfig) {
 800dac2:	230f      	movs	r3, #15
 800dac4:	18fb      	adds	r3, r7, r3
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	2116      	movs	r1, #22
 800daca:	187a      	adds	r2, r7, r1
 800dacc:	7812      	ldrb	r2, [r2, #0]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d02b      	beq.n	800db2a <VL53L0X_SetSequenceStepEnable+0x1a6>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800dad2:	2217      	movs	r2, #23
 800dad4:	18bb      	adds	r3, r7, r2
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	b25b      	sxtb	r3, r3
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d109      	bne.n	800daf2 <VL53L0X_SetSequenceStepEnable+0x16e>
			Status = VL53L0X_WrByte(Dev,
 800dade:	18bc      	adds	r4, r7, r2
 800dae0:	187b      	adds	r3, r7, r1
 800dae2:	781a      	ldrb	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2101      	movs	r1, #1
 800dae8:	0018      	movs	r0, r3
 800daea:	f005 f8e5 	bl	8012cb8 <VL53L0X_WrByte>
 800daee:	0003      	movs	r3, r0
 800daf0:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800daf2:	2317      	movs	r3, #23
 800daf4:	18fb      	adds	r3, r7, r3
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	b25b      	sxtb	r3, r3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <VL53L0X_SetSequenceStepEnable+0x188>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	2316      	movs	r3, #22
 800db02:	18f9      	adds	r1, r7, r3
 800db04:	2398      	movs	r3, #152	; 0x98
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	7809      	ldrb	r1, [r1, #0]
 800db0a:	54d1      	strb	r1, [r2, r3]


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800db0c:	2317      	movs	r3, #23
 800db0e:	18fb      	adds	r3, r7, r3
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	b25b      	sxtb	r3, r3
 800db14:	2b00      	cmp	r3, #0
 800db16:	d108      	bne.n	800db2a <VL53L0X_SetSequenceStepEnable+0x1a6>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	695b      	ldr	r3, [r3, #20]
 800db1c:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	0011      	movs	r1, r2
 800db24:	0018      	movs	r0, r3
 800db26:	f7ff febb 	bl	800d8a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800db2a:	2317      	movs	r3, #23
 800db2c:	18fb      	adds	r3, r7, r3
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	b25b      	sxtb	r3, r3
}
 800db32:	0018      	movs	r0, r3
 800db34:	46bd      	mov	sp, r7
 800db36:	b007      	add	sp, #28
 800db38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db3a:	46c0      	nop			; (mov r8, r8)
 800db3c:	0801b78c 	.word	0x0801b78c
 800db40:	0801b7a0 	.word	0x0801b7a0

0800db44 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800db44:	b590      	push	{r4, r7, lr}
 800db46:	b087      	sub	sp, #28
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	0008      	movs	r0, r1
 800db4e:	0011      	movs	r1, r2
 800db50:	607b      	str	r3, [r7, #4]
 800db52:	240b      	movs	r4, #11
 800db54:	193b      	adds	r3, r7, r4
 800db56:	1c02      	adds	r2, r0, #0
 800db58:	701a      	strb	r2, [r3, #0]
 800db5a:	230a      	movs	r3, #10
 800db5c:	18fb      	adds	r3, r7, r3
 800db5e:	1c0a      	adds	r2, r1, #0
 800db60:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db62:	2317      	movs	r3, #23
 800db64:	18fb      	adds	r3, r7, r3
 800db66:	2200      	movs	r2, #0
 800db68:	701a      	strb	r2, [r3, #0]
	*pSequenceStepEnabled = 0;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800db70:	193b      	adds	r3, r7, r4
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	2b04      	cmp	r3, #4
 800db76:	d838      	bhi.n	800dbea <sequence_step_enabled+0xa6>
 800db78:	009a      	lsls	r2, r3, #2
 800db7a:	4b22      	ldr	r3, [pc, #136]	; (800dc04 <sequence_step_enabled+0xc0>)
 800db7c:	18d3      	adds	r3, r2, r3
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	469f      	mov	pc, r3
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800db82:	230a      	movs	r3, #10
 800db84:	18fb      	adds	r3, r7, r3
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	111b      	asrs	r3, r3, #4
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2201      	movs	r2, #1
 800db8e:	4013      	ands	r3, r2
 800db90:	b2da      	uxtb	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	701a      	strb	r2, [r3, #0]
		break;
 800db96:	e02c      	b.n	800dbf2 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800db98:	230a      	movs	r3, #10
 800db9a:	18fb      	adds	r3, r7, r3
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	10db      	asrs	r3, r3, #3
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	2201      	movs	r2, #1
 800dba4:	4013      	ands	r3, r2
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	701a      	strb	r2, [r3, #0]
		break;
 800dbac:	e021      	b.n	800dbf2 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800dbae:	230a      	movs	r3, #10
 800dbb0:	18fb      	adds	r3, r7, r3
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	109b      	asrs	r3, r3, #2
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	2201      	movs	r2, #1
 800dbba:	4013      	ands	r3, r2
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	701a      	strb	r2, [r3, #0]
		break;
 800dbc2:	e016      	b.n	800dbf2 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800dbc4:	230a      	movs	r3, #10
 800dbc6:	18fb      	adds	r3, r7, r3
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	119b      	asrs	r3, r3, #6
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	2201      	movs	r2, #1
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	701a      	strb	r2, [r3, #0]
		break;
 800dbd8:	e00b      	b.n	800dbf2 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800dbda:	230a      	movs	r3, #10
 800dbdc:	18fb      	adds	r3, r7, r3
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	09db      	lsrs	r3, r3, #7
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	701a      	strb	r2, [r3, #0]
		break;
 800dbe8:	e003      	b.n	800dbf2 <sequence_step_enabled+0xae>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dbea:	2317      	movs	r3, #23
 800dbec:	18fb      	adds	r3, r7, r3
 800dbee:	22fc      	movs	r2, #252	; 0xfc
 800dbf0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dbf2:	2317      	movs	r3, #23
 800dbf4:	18fb      	adds	r3, r7, r3
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	b25b      	sxtb	r3, r3
}
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	b007      	add	sp, #28
 800dc00:	bd90      	pop	{r4, r7, pc}
 800dc02:	46c0      	nop			; (mov r8, r8)
 800dc04:	0801b7b4 	.word	0x0801b7b4

0800dc08 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800dc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc12:	250f      	movs	r5, #15
 800dc14:	197b      	adds	r3, r7, r5
 800dc16:	2200      	movs	r2, #0
 800dc18:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800dc1a:	260e      	movs	r6, #14
 800dc1c:	19bb      	adds	r3, r7, r6
 800dc1e:	2200      	movs	r2, #0
 800dc20:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800dc22:	197c      	adds	r4, r7, r5
 800dc24:	19ba      	adds	r2, r7, r6
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2101      	movs	r1, #1
 800dc2a:	0018      	movs	r0, r3
 800dc2c:	f005 f8f3 	bl	8012e16 <VL53L0X_RdByte>
 800dc30:	0003      	movs	r3, r0
 800dc32:	7023      	strb	r3, [r4, #0]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800dc34:	197b      	adds	r3, r7, r5
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	b25b      	sxtb	r3, r3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d109      	bne.n	800dc52 <VL53L0X_GetSequenceStepEnables+0x4a>
		Status = sequence_step_enabled(Dev,
 800dc3e:	19bb      	adds	r3, r7, r6
 800dc40:	781a      	ldrb	r2, [r3, #0]
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	197c      	adds	r4, r7, r5
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	2100      	movs	r1, #0
 800dc4a:	f7ff ff7b 	bl	800db44 <sequence_step_enabled>
 800dc4e:	0003      	movs	r3, r0
 800dc50:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800dc52:	210f      	movs	r1, #15
 800dc54:	187b      	adds	r3, r7, r1
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	b25b      	sxtb	r3, r3
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10b      	bne.n	800dc76 <VL53L0X_GetSequenceStepEnables+0x6e>
		Status = sequence_step_enabled(Dev,
 800dc5e:	230e      	movs	r3, #14
 800dc60:	18fb      	adds	r3, r7, r3
 800dc62:	781a      	ldrb	r2, [r3, #0]
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	3302      	adds	r3, #2
 800dc68:	187c      	adds	r4, r7, r1
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	2101      	movs	r1, #1
 800dc6e:	f7ff ff69 	bl	800db44 <sequence_step_enabled>
 800dc72:	0003      	movs	r3, r0
 800dc74:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800dc76:	210f      	movs	r1, #15
 800dc78:	187b      	adds	r3, r7, r1
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	b25b      	sxtb	r3, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d10b      	bne.n	800dc9a <VL53L0X_GetSequenceStepEnables+0x92>
		Status = sequence_step_enabled(Dev,
 800dc82:	230e      	movs	r3, #14
 800dc84:	18fb      	adds	r3, r7, r3
 800dc86:	781a      	ldrb	r2, [r3, #0]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	187c      	adds	r4, r7, r1
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	2102      	movs	r1, #2
 800dc92:	f7ff ff57 	bl	800db44 <sequence_step_enabled>
 800dc96:	0003      	movs	r3, r0
 800dc98:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800dc9a:	210f      	movs	r1, #15
 800dc9c:	187b      	adds	r3, r7, r1
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	b25b      	sxtb	r3, r3
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10b      	bne.n	800dcbe <VL53L0X_GetSequenceStepEnables+0xb6>
		Status = sequence_step_enabled(Dev,
 800dca6:	230e      	movs	r3, #14
 800dca8:	18fb      	adds	r3, r7, r3
 800dcaa:	781a      	ldrb	r2, [r3, #0]
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	3303      	adds	r3, #3
 800dcb0:	187c      	adds	r4, r7, r1
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	2103      	movs	r1, #3
 800dcb6:	f7ff ff45 	bl	800db44 <sequence_step_enabled>
 800dcba:	0003      	movs	r3, r0
 800dcbc:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800dcbe:	210f      	movs	r1, #15
 800dcc0:	187b      	adds	r3, r7, r1
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	b25b      	sxtb	r3, r3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10b      	bne.n	800dce2 <VL53L0X_GetSequenceStepEnables+0xda>
		Status = sequence_step_enabled(Dev,
 800dcca:	230e      	movs	r3, #14
 800dccc:	18fb      	adds	r3, r7, r3
 800dcce:	781a      	ldrb	r2, [r3, #0]
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	187c      	adds	r4, r7, r1
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	2104      	movs	r1, #4
 800dcda:	f7ff ff33 	bl	800db44 <sequence_step_enabled>
 800dcde:	0003      	movs	r3, r0
 800dce0:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dce2:	230f      	movs	r3, #15
 800dce4:	18fb      	adds	r3, r7, r3
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	b25b      	sxtb	r3, r3
}
 800dcea:	0018      	movs	r0, r3
 800dcec:	46bd      	mov	sp, r7
 800dcee:	b005      	add	sp, #20
 800dcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dcf2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800dcf2:	b5b0      	push	{r4, r5, r7, lr}
 800dcf4:	b084      	sub	sp, #16
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dcfc:	250f      	movs	r5, #15
 800dcfe:	197b      	adds	r3, r7, r5
 800dd00:	2200      	movs	r2, #0
 800dd02:	701a      	strb	r2, [r3, #0]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800dd04:	197c      	adds	r4, r7, r5
 800dd06:	230c      	movs	r3, #12
 800dd08:	18fa      	adds	r2, r7, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	21f8      	movs	r1, #248	; 0xf8
 800dd0e:	0018      	movs	r0, r3
 800dd10:	f005 f8b6 	bl	8012e80 <VL53L0X_RdWord>
 800dd14:	0003      	movs	r3, r0
 800dd16:	7023      	strb	r3, [r4, #0]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800dd18:	197b      	adds	r3, r7, r5
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	b25b      	sxtb	r3, r3
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d109      	bne.n	800dd36 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x44>
		Status = VL53L0X_RdDWord(Dev,
 800dd22:	197c      	adds	r4, r7, r5
 800dd24:	2308      	movs	r3, #8
 800dd26:	18fa      	adds	r2, r7, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2104      	movs	r1, #4
 800dd2c:	0018      	movs	r0, r3
 800dd2e:	f005 f8e9 	bl	8012f04 <VL53L0X_RdDWord>
 800dd32:	0003      	movs	r3, r0
 800dd34:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dd36:	230f      	movs	r3, #15
 800dd38:	18fb      	adds	r3, r7, r3
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	b25b      	sxtb	r3, r3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d113      	bne.n	800dd6a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x78>
		if (osc_calibrate_val != 0) {
 800dd42:	210c      	movs	r1, #12
 800dd44:	187b      	adds	r3, r7, r1
 800dd46:	881b      	ldrh	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00a      	beq.n	800dd62 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x70>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	187b      	adds	r3, r7, r1
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	0019      	movs	r1, r3
 800dd54:	0010      	movs	r0, r2
 800dd56:	f7f2 f9fd 	bl	8000154 <__udivsi3>
 800dd5a:	0003      	movs	r3, r0
 800dd5c:	001a      	movs	r2, r3
			*pInterMeasurementPeriodMilliSeconds =
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dd6a:	230f      	movs	r3, #15
 800dd6c:	18fb      	adds	r3, r7, r3
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	b25b      	sxtb	r3, r3
}
 800dd72:	0018      	movs	r0, r3
 800dd74:	46bd      	mov	sp, r7
 800dd76:	b004      	add	sp, #16
 800dd78:	bdb0      	pop	{r4, r5, r7, pc}

0800dd7a <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b084      	sub	sp, #16
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd84:	210f      	movs	r1, #15
 800dd86:	187b      	adds	r3, r7, r1
 800dd88:	2200      	movs	r2, #0
 800dd8a:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800dd8c:	200e      	movs	r0, #14
 800dd8e:	183b      	adds	r3, r7, r0
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	7f12      	ldrb	r2, [r2, #28]
 800dd94:	701a      	strb	r2, [r3, #0]
	*pXTalkCompensationEnable = Temp8;
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	183a      	adds	r2, r7, r0
 800dd9a:	7812      	ldrb	r2, [r2, #0]
 800dd9c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800dd9e:	187b      	adds	r3, r7, r1
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	b25b      	sxtb	r3, r3
}
 800dda4:	0018      	movs	r0, r3
 800dda6:	46bd      	mov	sp, r7
 800dda8:	b004      	add	sp, #16
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800ddac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ddb6:	2517      	movs	r5, #23
 800ddb8:	197b      	adds	r3, r7, r5
 800ddba:	2200      	movs	r2, #0
 800ddbc:	701a      	strb	r2, [r3, #0]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800ddbe:	197c      	adds	r4, r7, r5
 800ddc0:	260e      	movs	r6, #14
 800ddc2:	19ba      	adds	r2, r7, r6
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2120      	movs	r1, #32
 800ddc8:	0018      	movs	r0, r3
 800ddca:	f005 f859 	bl	8012e80 <VL53L0X_RdWord>
 800ddce:	0003      	movs	r3, r0
 800ddd0:	7023      	strb	r3, [r4, #0]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800ddd2:	197b      	adds	r3, r7, r5
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	b25b      	sxtb	r3, r3
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d11b      	bne.n	800de14 <VL53L0X_GetXTalkCompensationRateMegaCps+0x68>
		if (Value == 0) {
 800dddc:	19bb      	adds	r3, r7, r6
 800ddde:	881b      	ldrh	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d109      	bne.n	800ddf8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x4c>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6a1b      	ldr	r3, [r3, #32]
 800dde8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	771a      	strb	r2, [r3, #28]
 800ddf6:	e00d      	b.n	800de14 <VL53L0X_GetXTalkCompensationRateMegaCps+0x68>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800ddf8:	230e      	movs	r3, #14
 800ddfa:	18fb      	adds	r3, r7, r3
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	00db      	lsls	r3, r3, #3
 800de00:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	693a      	ldr	r2, [r7, #16]
 800de06:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	693a      	ldr	r2, [r7, #16]
 800de0c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2201      	movs	r2, #1
 800de12:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800de14:	2317      	movs	r3, #23
 800de16:	18fb      	adds	r3, r7, r3
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	b25b      	sxtb	r3, r3
}
 800de1c:	0018      	movs	r0, r3
 800de1e:	46bd      	mov	sp, r7
 800de20:	b007      	add	sp, #28
 800de22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de24 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800de24:	b590      	push	{r4, r7, lr}
 800de26:	b087      	sub	sp, #28
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	0008      	movs	r0, r1
 800de2e:	0011      	movs	r1, r2
 800de30:	1cbb      	adds	r3, r7, #2
 800de32:	1c02      	adds	r2, r0, #0
 800de34:	801a      	strh	r2, [r3, #0]
 800de36:	1c7b      	adds	r3, r7, #1
 800de38:	1c0a      	adds	r2, r1, #0
 800de3a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de3c:	2117      	movs	r1, #23
 800de3e:	187b      	adds	r3, r7, r1
 800de40:	2200      	movs	r2, #0
 800de42:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t TempFix1616 = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800de48:	230f      	movs	r3, #15
 800de4a:	18fb      	adds	r3, r7, r3
 800de4c:	2200      	movs	r2, #0
 800de4e:	701a      	strb	r2, [r3, #0]
	uint8_t LimitCheckDisable = 0;
 800de50:	230e      	movs	r3, #14
 800de52:	18fb      	adds	r3, r7, r3
 800de54:	2200      	movs	r2, #0
 800de56:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800de58:	1cbb      	adds	r3, r7, #2
 800de5a:	881b      	ldrh	r3, [r3, #0]
 800de5c:	2b05      	cmp	r3, #5
 800de5e:	d903      	bls.n	800de68 <VL53L0X_SetLimitCheckEnable+0x44>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800de60:	187b      	adds	r3, r7, r1
 800de62:	22fc      	movs	r2, #252	; 0xfc
 800de64:	701a      	strb	r2, [r3, #0]
 800de66:	e074      	b.n	800df52 <VL53L0X_SetLimitCheckEnable+0x12e>
	} else {
		if (LimitCheckEnable == 0) {
 800de68:	1c7b      	adds	r3, r7, #1
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d10a      	bne.n	800de86 <VL53L0X_SetLimitCheckEnable+0x62>
			TempFix1616 = 0;
 800de70:	2300      	movs	r3, #0
 800de72:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800de74:	230f      	movs	r3, #15
 800de76:	18fb      	adds	r3, r7, r3
 800de78:	2200      	movs	r2, #0
 800de7a:	701a      	strb	r2, [r3, #0]
			LimitCheckDisable = 1;
 800de7c:	230e      	movs	r3, #14
 800de7e:	18fb      	adds	r3, r7, r3
 800de80:	2201      	movs	r2, #1
 800de82:	701a      	strb	r2, [r3, #0]
 800de84:	e010      	b.n	800dea8 <VL53L0X_SetLimitCheckEnable+0x84>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800de86:	1cbb      	adds	r3, r7, #2
 800de88:	881b      	ldrh	r3, [r3, #0]
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	330c      	adds	r3, #12
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	18d3      	adds	r3, r2, r3
 800de92:	3304      	adds	r3, #4
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800de98:	230e      	movs	r3, #14
 800de9a:	18fb      	adds	r3, r7, r3
 800de9c:	2200      	movs	r2, #0
 800de9e:	701a      	strb	r2, [r3, #0]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800dea0:	230f      	movs	r3, #15
 800dea2:	18fb      	adds	r3, r7, r3
 800dea4:	2201      	movs	r2, #1
 800dea6:	701a      	strb	r2, [r3, #0]
		}

		switch (LimitCheckId) {
 800dea8:	1cbb      	adds	r3, r7, #2
 800deaa:	881b      	ldrh	r3, [r3, #0]
 800deac:	2b05      	cmp	r3, #5
 800deae:	d84c      	bhi.n	800df4a <VL53L0X_SetLimitCheckEnable+0x126>
 800deb0:	009a      	lsls	r2, r3, #2
 800deb2:	4b39      	ldr	r3, [pc, #228]	; (800df98 <VL53L0X_SetLimitCheckEnable+0x174>)
 800deb4:	18d3      	adds	r3, r2, r3
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	469f      	mov	pc, r3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	220f      	movs	r2, #15
 800debe:	18ba      	adds	r2, r7, r2
 800dec0:	2128      	movs	r1, #40	; 0x28
 800dec2:	7812      	ldrb	r2, [r2, #0]
 800dec4:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800dec6:	e044      	b.n	800df52 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800decc:	b29a      	uxth	r2, r3
 800dece:	2317      	movs	r3, #23
 800ded0:	18fc      	adds	r4, r7, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2144      	movs	r1, #68	; 0x44
 800ded6:	0018      	movs	r0, r3
 800ded8:	f004 ff1e 	bl	8012d18 <VL53L0X_WrWord>
 800dedc:	0003      	movs	r3, r0
 800dede:	7023      	strb	r3, [r4, #0]

			break;
 800dee0:	e037      	b.n	800df52 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	220f      	movs	r2, #15
 800dee6:	18ba      	adds	r2, r7, r2
 800dee8:	212a      	movs	r1, #42	; 0x2a
 800deea:	7812      	ldrb	r2, [r2, #0]
 800deec:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800deee:	e030      	b.n	800df52 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	220f      	movs	r2, #15
 800def4:	18ba      	adds	r2, r7, r2
 800def6:	212b      	movs	r1, #43	; 0x2b
 800def8:	7812      	ldrb	r2, [r2, #0]
 800defa:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800defc:	e029      	b.n	800df52 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800defe:	210d      	movs	r1, #13
 800df00:	187a      	adds	r2, r7, r1
 800df02:	230e      	movs	r3, #14
 800df04:	18fb      	adds	r3, r7, r3
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	18db      	adds	r3, r3, r3
 800df0a:	7013      	strb	r3, [r2, #0]
			Status = VL53L0X_UpdateByte(Dev,
 800df0c:	2317      	movs	r3, #23
 800df0e:	18fc      	adds	r4, r7, r3
 800df10:	187b      	adds	r3, r7, r1
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	22fe      	movs	r2, #254	; 0xfe
 800df18:	2160      	movs	r1, #96	; 0x60
 800df1a:	f004 ff35 	bl	8012d88 <VL53L0X_UpdateByte>
 800df1e:	0003      	movs	r3, r0
 800df20:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800df22:	e016      	b.n	800df52 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800df24:	210d      	movs	r1, #13
 800df26:	187b      	adds	r3, r7, r1
 800df28:	220e      	movs	r2, #14
 800df2a:	18ba      	adds	r2, r7, r2
 800df2c:	7812      	ldrb	r2, [r2, #0]
 800df2e:	0112      	lsls	r2, r2, #4
 800df30:	701a      	strb	r2, [r3, #0]
			Status = VL53L0X_UpdateByte(Dev,
 800df32:	2317      	movs	r3, #23
 800df34:	18fc      	adds	r4, r7, r3
 800df36:	187b      	adds	r3, r7, r1
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	22ef      	movs	r2, #239	; 0xef
 800df3e:	2160      	movs	r1, #96	; 0x60
 800df40:	f004 ff22 	bl	8012d88 <VL53L0X_UpdateByte>
 800df44:	0003      	movs	r3, r0
 800df46:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800df48:	e003      	b.n	800df52 <VL53L0X_SetLimitCheckEnable+0x12e>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800df4a:	2317      	movs	r3, #23
 800df4c:	18fb      	adds	r3, r7, r3
 800df4e:	22fc      	movs	r2, #252	; 0xfc
 800df50:	701a      	strb	r2, [r3, #0]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800df52:	2317      	movs	r3, #23
 800df54:	18fb      	adds	r3, r7, r3
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	b25b      	sxtb	r3, r3
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d114      	bne.n	800df88 <VL53L0X_SetLimitCheckEnable+0x164>
		if (LimitCheckEnable == 0) {
 800df5e:	1c7b      	adds	r3, r7, #1
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d108      	bne.n	800df78 <VL53L0X_SetLimitCheckEnable+0x154>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800df66:	1cbb      	adds	r3, r7, #2
 800df68:	881b      	ldrh	r3, [r3, #0]
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	2128      	movs	r1, #40	; 0x28
 800df6e:	18d3      	adds	r3, r2, r3
 800df70:	185b      	adds	r3, r3, r1
 800df72:	2200      	movs	r2, #0
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	e007      	b.n	800df88 <VL53L0X_SetLimitCheckEnable+0x164>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800df78:	1cbb      	adds	r3, r7, #2
 800df7a:	881b      	ldrh	r3, [r3, #0]
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	2128      	movs	r1, #40	; 0x28
 800df80:	18d3      	adds	r3, r2, r3
 800df82:	185b      	adds	r3, r3, r1
 800df84:	2201      	movs	r2, #1
 800df86:	701a      	strb	r2, [r3, #0]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800df88:	2317      	movs	r3, #23
 800df8a:	18fb      	adds	r3, r7, r3
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	b25b      	sxtb	r3, r3
}
 800df90:	0018      	movs	r0, r3
 800df92:	46bd      	mov	sp, r7
 800df94:	b007      	add	sp, #28
 800df96:	bd90      	pop	{r4, r7, pc}
 800df98:	0801b7c8 	.word	0x0801b7c8

0800df9c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800df9c:	b590      	push	{r4, r7, lr}
 800df9e:	b087      	sub	sp, #28
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	607a      	str	r2, [r7, #4]
 800dfa6:	200a      	movs	r0, #10
 800dfa8:	183b      	adds	r3, r7, r0
 800dfaa:	1c0a      	adds	r2, r1, #0
 800dfac:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dfae:	2117      	movs	r1, #23
 800dfb0:	187b      	adds	r3, r7, r1
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800dfb6:	183b      	adds	r3, r7, r0
 800dfb8:	881b      	ldrh	r3, [r3, #0]
 800dfba:	2b05      	cmp	r3, #5
 800dfbc:	d906      	bls.n	800dfcc <VL53L0X_GetLimitCheckEnable+0x30>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dfbe:	187b      	adds	r3, r7, r1
 800dfc0:	22fc      	movs	r2, #252	; 0xfc
 800dfc2:	701a      	strb	r2, [r3, #0]
		*pLimitCheckEnable = 0;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	e00e      	b.n	800dfea <VL53L0X_GetLimitCheckEnable+0x4e>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800dfcc:	230a      	movs	r3, #10
 800dfce:	18fb      	adds	r3, r7, r3
 800dfd0:	881a      	ldrh	r2, [r3, #0]
 800dfd2:	2416      	movs	r4, #22
 800dfd4:	193b      	adds	r3, r7, r4
 800dfd6:	68f9      	ldr	r1, [r7, #12]
 800dfd8:	2028      	movs	r0, #40	; 0x28
 800dfda:	188a      	adds	r2, r1, r2
 800dfdc:	1812      	adds	r2, r2, r0
 800dfde:	7812      	ldrb	r2, [r2, #0]
 800dfe0:	701a      	strb	r2, [r3, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	193a      	adds	r2, r7, r4
 800dfe6:	7812      	ldrb	r2, [r2, #0]
 800dfe8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dfea:	2317      	movs	r3, #23
 800dfec:	18fb      	adds	r3, r7, r3
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	b25b      	sxtb	r3, r3
}
 800dff2:	0018      	movs	r0, r3
 800dff4:	46bd      	mov	sp, r7
 800dff6:	b007      	add	sp, #28
 800dff8:	bd90      	pop	{r4, r7, pc}
	...

0800dffc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800dffc:	b5b0      	push	{r4, r5, r7, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	607a      	str	r2, [r7, #4]
 800e006:	240a      	movs	r4, #10
 800e008:	193b      	adds	r3, r7, r4
 800e00a:	1c0a      	adds	r2, r1, #0
 800e00c:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e00e:	2317      	movs	r3, #23
 800e010:	18fb      	adds	r3, r7, r3
 800e012:	2200      	movs	r2, #0
 800e014:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800e016:	193b      	adds	r3, r7, r4
 800e018:	881a      	ldrh	r2, [r3, #0]
 800e01a:	2516      	movs	r5, #22
 800e01c:	197b      	adds	r3, r7, r5
 800e01e:	68f9      	ldr	r1, [r7, #12]
 800e020:	2028      	movs	r0, #40	; 0x28
 800e022:	188a      	adds	r2, r1, r2
 800e024:	1812      	adds	r2, r2, r0
 800e026:	7812      	ldrb	r2, [r2, #0]
 800e028:	701a      	strb	r2, [r3, #0]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800e02a:	197b      	adds	r3, r7, r5
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d109      	bne.n	800e046 <VL53L0X_SetLimitCheckValue+0x4a>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800e032:	193b      	adds	r3, r7, r4
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	330c      	adds	r3, #12
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	18d3      	adds	r3, r2, r3
 800e03e:	3304      	adds	r3, #4
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	e043      	b.n	800e0ce <VL53L0X_SetLimitCheckValue+0xd2>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800e046:	230a      	movs	r3, #10
 800e048:	18fb      	adds	r3, r7, r3
 800e04a:	881b      	ldrh	r3, [r3, #0]
 800e04c:	2b05      	cmp	r3, #5
 800e04e:	d82a      	bhi.n	800e0a6 <VL53L0X_SetLimitCheckValue+0xaa>
 800e050:	009a      	lsls	r2, r3, #2
 800e052:	4b23      	ldr	r3, [pc, #140]	; (800e0e0 <VL53L0X_SetLimitCheckValue+0xe4>)
 800e054:	18d3      	adds	r3, r2, r3
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	469f      	mov	pc, r3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800e060:	e025      	b.n	800e0ae <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800e066:	b29a      	uxth	r2, r3
 800e068:	2317      	movs	r3, #23
 800e06a:	18fc      	adds	r4, r7, r3
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2144      	movs	r1, #68	; 0x44
 800e070:	0018      	movs	r0, r3
 800e072:	f004 fe51 	bl	8012d18 <VL53L0X_WrWord>
 800e076:	0003      	movs	r3, r0
 800e078:	7023      	strb	r3, [r4, #0]
					LimitCheckValue));

			break;
 800e07a:	e018      	b.n	800e0ae <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800e082:	e014      	b.n	800e0ae <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800e08a:	e010      	b.n	800e0ae <VL53L0X_SetLimitCheckValue+0xb2>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800e090:	b29a      	uxth	r2, r3
 800e092:	2317      	movs	r3, #23
 800e094:	18fc      	adds	r4, r7, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2164      	movs	r1, #100	; 0x64
 800e09a:	0018      	movs	r0, r3
 800e09c:	f004 fe3c 	bl	8012d18 <VL53L0X_WrWord>
 800e0a0:	0003      	movs	r3, r0
 800e0a2:	7023      	strb	r3, [r4, #0]
					LimitCheckValue));

			break;
 800e0a4:	e003      	b.n	800e0ae <VL53L0X_SetLimitCheckValue+0xb2>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e0a6:	2317      	movs	r3, #23
 800e0a8:	18fb      	adds	r3, r7, r3
 800e0aa:	22fc      	movs	r2, #252	; 0xfc
 800e0ac:	701a      	strb	r2, [r3, #0]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e0ae:	2317      	movs	r3, #23
 800e0b0:	18fb      	adds	r3, r7, r3
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	b25b      	sxtb	r3, r3
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d109      	bne.n	800e0ce <VL53L0X_SetLimitCheckValue+0xd2>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800e0ba:	230a      	movs	r3, #10
 800e0bc:	18fb      	adds	r3, r7, r3
 800e0be:	881b      	ldrh	r3, [r3, #0]
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	330c      	adds	r3, #12
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	18d3      	adds	r3, r2, r3
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	601a      	str	r2, [r3, #0]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e0ce:	2317      	movs	r3, #23
 800e0d0:	18fb      	adds	r3, r7, r3
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	b25b      	sxtb	r3, r3
}
 800e0d6:	0018      	movs	r0, r3
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	b006      	add	sp, #24
 800e0dc:	bdb0      	pop	{r4, r5, r7, pc}
 800e0de:	46c0      	nop			; (mov r8, r8)
 800e0e0:	0801b7e0 	.word	0x0801b7e0

0800e0e4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800e0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0e6:	b089      	sub	sp, #36	; 0x24
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	607a      	str	r2, [r7, #4]
 800e0ee:	200a      	movs	r0, #10
 800e0f0:	183b      	adds	r3, r7, r0
 800e0f2:	1c0a      	adds	r2, r1, #0
 800e0f4:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e0f6:	231f      	movs	r3, #31
 800e0f8:	18fb      	adds	r3, r7, r3
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	701a      	strb	r2, [r3, #0]
	uint8_t EnableZeroValue = 0;
 800e0fe:	231e      	movs	r3, #30
 800e100:	18fb      	adds	r3, r7, r3
 800e102:	2200      	movs	r2, #0
 800e104:	701a      	strb	r2, [r3, #0]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800e106:	183b      	adds	r3, r7, r0
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	2b05      	cmp	r3, #5
 800e10c:	d84e      	bhi.n	800e1ac <VL53L0X_GetLimitCheckValue+0xc8>
 800e10e:	009a      	lsls	r2, r3, #2
 800e110:	4b4b      	ldr	r3, [pc, #300]	; (800e240 <VL53L0X_GetLimitCheckValue+0x15c>)
 800e112:	18d3      	adds	r3, r2, r3
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	469f      	mov	pc, r3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e11c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800e11e:	231e      	movs	r3, #30
 800e120:	18fb      	adds	r3, r7, r3
 800e122:	2200      	movs	r2, #0
 800e124:	701a      	strb	r2, [r3, #0]
		break;
 800e126:	e045      	b.n	800e1b4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800e128:	251f      	movs	r5, #31
 800e12a:	197c      	adds	r4, r7, r5
 800e12c:	2616      	movs	r6, #22
 800e12e:	19ba      	adds	r2, r7, r6
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2144      	movs	r1, #68	; 0x44
 800e134:	0018      	movs	r0, r3
 800e136:	f004 fea3 	bl	8012e80 <VL53L0X_RdWord>
 800e13a:	0003      	movs	r3, r0
 800e13c:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800e13e:	197b      	adds	r3, r7, r5
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	b25b      	sxtb	r3, r3
 800e144:	2b00      	cmp	r3, #0
 800e146:	d103      	bne.n	800e150 <VL53L0X_GetLimitCheckValue+0x6c>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800e148:	19bb      	adds	r3, r7, r6
 800e14a:	881b      	ldrh	r3, [r3, #0]
 800e14c:	025b      	lsls	r3, r3, #9
 800e14e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800e150:	231e      	movs	r3, #30
 800e152:	18fb      	adds	r3, r7, r3
 800e154:	2201      	movs	r2, #1
 800e156:	701a      	strb	r2, [r3, #0]
		break;
 800e158:	e02c      	b.n	800e1b4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e15e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800e160:	231e      	movs	r3, #30
 800e162:	18fb      	adds	r3, r7, r3
 800e164:	2200      	movs	r2, #0
 800e166:	701a      	strb	r2, [r3, #0]
		break;
 800e168:	e024      	b.n	800e1b4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e16e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800e170:	231e      	movs	r3, #30
 800e172:	18fb      	adds	r3, r7, r3
 800e174:	2200      	movs	r2, #0
 800e176:	701a      	strb	r2, [r3, #0]
		break;
 800e178:	e01c      	b.n	800e1b4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800e17a:	251f      	movs	r5, #31
 800e17c:	197c      	adds	r4, r7, r5
 800e17e:	2616      	movs	r6, #22
 800e180:	19ba      	adds	r2, r7, r6
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2164      	movs	r1, #100	; 0x64
 800e186:	0018      	movs	r0, r3
 800e188:	f004 fe7a 	bl	8012e80 <VL53L0X_RdWord>
 800e18c:	0003      	movs	r3, r0
 800e18e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800e190:	197b      	adds	r3, r7, r5
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	b25b      	sxtb	r3, r3
 800e196:	2b00      	cmp	r3, #0
 800e198:	d103      	bne.n	800e1a2 <VL53L0X_GetLimitCheckValue+0xbe>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800e19a:	19bb      	adds	r3, r7, r6
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	025b      	lsls	r3, r3, #9
 800e1a0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800e1a2:	231e      	movs	r3, #30
 800e1a4:	18fb      	adds	r3, r7, r3
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	701a      	strb	r2, [r3, #0]
		break;
 800e1aa:	e003      	b.n	800e1b4 <VL53L0X_GetLimitCheckValue+0xd0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e1ac:	231f      	movs	r3, #31
 800e1ae:	18fb      	adds	r3, r7, r3
 800e1b0:	22fc      	movs	r2, #252	; 0xfc
 800e1b2:	701a      	strb	r2, [r3, #0]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e1b4:	231f      	movs	r3, #31
 800e1b6:	18fb      	adds	r3, r7, r3
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	b25b      	sxtb	r3, r3
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d136      	bne.n	800e22e <VL53L0X_GetLimitCheckValue+0x14a>

		if (EnableZeroValue == 1) {
 800e1c0:	231e      	movs	r3, #30
 800e1c2:	18fb      	adds	r3, r7, r3
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d12e      	bne.n	800e228 <VL53L0X_GetLimitCheckValue+0x144>

			if (TempFix1616 == 0) {
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d115      	bne.n	800e1fc <VL53L0X_GetLimitCheckValue+0x118>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800e1d0:	210a      	movs	r1, #10
 800e1d2:	187b      	adds	r3, r7, r1
 800e1d4:	881b      	ldrh	r3, [r3, #0]
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	330c      	adds	r3, #12
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	18d3      	adds	r3, r2, r3
 800e1de:	3304      	adds	r3, #4
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	69ba      	ldr	r2, [r7, #24]
 800e1e8:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800e1ea:	187b      	adds	r3, r7, r1
 800e1ec:	881b      	ldrh	r3, [r3, #0]
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	2128      	movs	r1, #40	; 0x28
 800e1f2:	18d3      	adds	r3, r2, r3
 800e1f4:	185b      	adds	r3, r3, r1
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	701a      	strb	r2, [r3, #0]
 800e1fa:	e018      	b.n	800e22e <VL53L0X_GetLimitCheckValue+0x14a>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	69ba      	ldr	r2, [r7, #24]
 800e200:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800e202:	210a      	movs	r1, #10
 800e204:	187b      	adds	r3, r7, r1
 800e206:	881b      	ldrh	r3, [r3, #0]
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	330c      	adds	r3, #12
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	18d3      	adds	r3, r2, r3
 800e210:	3304      	adds	r3, #4
 800e212:	69ba      	ldr	r2, [r7, #24]
 800e214:	601a      	str	r2, [r3, #0]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800e216:	187b      	adds	r3, r7, r1
 800e218:	881b      	ldrh	r3, [r3, #0]
 800e21a:	68fa      	ldr	r2, [r7, #12]
 800e21c:	2128      	movs	r1, #40	; 0x28
 800e21e:	18d3      	adds	r3, r2, r3
 800e220:	185b      	adds	r3, r3, r1
 800e222:	2201      	movs	r2, #1
 800e224:	701a      	strb	r2, [r3, #0]
 800e226:	e002      	b.n	800e22e <VL53L0X_GetLimitCheckValue+0x14a>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	69ba      	ldr	r2, [r7, #24]
 800e22c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e22e:	231f      	movs	r3, #31
 800e230:	18fb      	adds	r3, r7, r3
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	b25b      	sxtb	r3, r3

}
 800e236:	0018      	movs	r0, r3
 800e238:	46bd      	mov	sp, r7
 800e23a:	b009      	add	sp, #36	; 0x24
 800e23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e23e:	46c0      	nop			; (mov r8, r8)
 800e240:	0801b7f8 	.word	0x0801b7f8

0800e244 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800e244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e246:	b085      	sub	sp, #20
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e24e:	250f      	movs	r5, #15
 800e250:	197b      	adds	r3, r7, r5
 800e252:	2200      	movs	r2, #0
 800e254:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800e256:	197c      	adds	r4, r7, r5
 800e258:	260e      	movs	r6, #14
 800e25a:	19ba      	adds	r2, r7, r6
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2101      	movs	r1, #1
 800e260:	0018      	movs	r0, r3
 800e262:	f004 fdd8 	bl	8012e16 <VL53L0X_RdByte>
 800e266:	0003      	movs	r3, r0
 800e268:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800e26a:	197b      	adds	r3, r7, r5
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	b25b      	sxtb	r3, r3
 800e270:	2b00      	cmp	r3, #0
 800e272:	d111      	bne.n	800e298 <VL53L0X_GetWrapAroundCheckEnable+0x54>
		PALDevDataSet(Dev, SequenceConfig, data);
 800e274:	19bb      	adds	r3, r7, r6
 800e276:	7819      	ldrb	r1, [r3, #0]
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	2398      	movs	r3, #152	; 0x98
 800e27c:	005b      	lsls	r3, r3, #1
 800e27e:	54d1      	strb	r1, [r2, r3]
		if (data & (0x01 << 7))
 800e280:	19bb      	adds	r3, r7, r6
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	b25b      	sxtb	r3, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	da03      	bge.n	800e292 <VL53L0X_GetWrapAroundCheckEnable+0x4e>
			*pWrapAroundCheckEnable = 0x01;
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	2201      	movs	r2, #1
 800e28e:	701a      	strb	r2, [r3, #0]
 800e290:	e002      	b.n	800e298 <VL53L0X_GetWrapAroundCheckEnable+0x54>
		else
			*pWrapAroundCheckEnable = 0x00;
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	2200      	movs	r2, #0
 800e296:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800e298:	230f      	movs	r3, #15
 800e29a:	18fb      	adds	r3, r7, r3
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	b25b      	sxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d104      	bne.n	800e2ae <VL53L0X_GetWrapAroundCheckEnable+0x6a>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	7819      	ldrb	r1, [r3, #0]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	224c      	movs	r2, #76	; 0x4c
 800e2ac:	5499      	strb	r1, [r3, r2]
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e2ae:	230f      	movs	r3, #15
 800e2b0:	18fb      	adds	r3, r7, r3
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	b25b      	sxtb	r3, r3
}
 800e2b6:	0018      	movs	r0, r3
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	b005      	add	sp, #20
 800e2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e2be <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800e2be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2c0:	b085      	sub	sp, #20
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e2c6:	250f      	movs	r5, #15
 800e2c8:	197b      	adds	r3, r7, r5
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800e2ce:	197c      	adds	r4, r7, r5
 800e2d0:	260e      	movs	r6, #14
 800e2d2:	19ba      	adds	r2, r7, r6
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	0011      	movs	r1, r2
 800e2d8:	0018      	movs	r0, r3
 800e2da:	f7ff faa7 	bl	800d82c <VL53L0X_GetDeviceMode>
 800e2de:	0003      	movs	r3, r0
 800e2e0:	7023      	strb	r3, [r4, #0]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800e2e2:	002a      	movs	r2, r5
 800e2e4:	18bb      	adds	r3, r7, r2
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	b25b      	sxtb	r3, r3
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10a      	bne.n	800e304 <VL53L0X_PerformSingleMeasurement+0x46>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800e2ee:	19bb      	adds	r3, r7, r6
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d106      	bne.n	800e304 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_StartMeasurement(Dev);
 800e2f6:	18bc      	adds	r4, r7, r2
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	0018      	movs	r0, r3
 800e2fc:	f000 f8ca 	bl	800e494 <VL53L0X_StartMeasurement>
 800e300:	0003      	movs	r3, r0
 800e302:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE)
 800e304:	220f      	movs	r2, #15
 800e306:	18bb      	adds	r3, r7, r2
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	b25b      	sxtb	r3, r3
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d106      	bne.n	800e31e <VL53L0X_PerformSingleMeasurement+0x60>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800e310:	18bc      	adds	r4, r7, r2
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	0018      	movs	r0, r3
 800e316:	f001 fe0e 	bl	800ff36 <VL53L0X_measurement_poll_for_completion>
 800e31a:	0003      	movs	r3, r0
 800e31c:	7023      	strb	r3, [r4, #0]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800e31e:	230f      	movs	r3, #15
 800e320:	18fb      	adds	r3, r7, r3
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	b25b      	sxtb	r3, r3
 800e326:	2b00      	cmp	r3, #0
 800e328:	d109      	bne.n	800e33e <VL53L0X_PerformSingleMeasurement+0x80>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800e32a:	230e      	movs	r3, #14
 800e32c:	18fb      	adds	r3, r7, r3
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d104      	bne.n	800e33e <VL53L0X_PerformSingleMeasurement+0x80>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	2399      	movs	r3, #153	; 0x99
 800e338:	005b      	lsls	r3, r3, #1
 800e33a:	2103      	movs	r1, #3
 800e33c:	54d1      	strb	r1, [r2, r3]


	LOG_FUNCTION_END(Status);
	return Status;
 800e33e:	230f      	movs	r3, #15
 800e340:	18fb      	adds	r3, r7, r3
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	b25b      	sxtb	r3, r3
}
 800e346:	0018      	movs	r0, r3
 800e348:	46bd      	mov	sp, r7
 800e34a:	b005      	add	sp, #20
 800e34c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e34e <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800e34e:	b5b0      	push	{r4, r5, r7, lr}
 800e350:	b086      	sub	sp, #24
 800e352:	af00      	add	r7, sp, #0
 800e354:	60f8      	str	r0, [r7, #12]
 800e356:	60b9      	str	r1, [r7, #8]
 800e358:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e35a:	2517      	movs	r5, #23
 800e35c:	197b      	adds	r3, r7, r5
 800e35e:	2200      	movs	r2, #0
 800e360:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800e362:	197c      	adds	r4, r7, r5
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	68b9      	ldr	r1, [r7, #8]
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	2301      	movs	r3, #1
 800e36c:	f001 fd8e 	bl	800fe8c <VL53L0X_perform_ref_calibration>
 800e370:	0003      	movs	r3, r0
 800e372:	7023      	strb	r3, [r4, #0]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800e374:	197b      	adds	r3, r7, r5
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	b25b      	sxtb	r3, r3
}
 800e37a:	0018      	movs	r0, r3
 800e37c:	46bd      	mov	sp, r7
 800e37e:	b006      	add	sp, #24
 800e380:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e384 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800e384:	b590      	push	{r4, r7, lr}
 800e386:	b087      	sub	sp, #28
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	000a      	movs	r2, r1
 800e38e:	1cfb      	adds	r3, r7, #3
 800e390:	701a      	strb	r2, [r3, #0]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e392:	2317      	movs	r3, #23
 800e394:	18fb      	adds	r3, r7, r3
 800e396:	2200      	movs	r2, #0
 800e398:	701a      	strb	r2, [r3, #0]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800e39a:	2016      	movs	r0, #22
 800e39c:	183b      	adds	r3, r7, r0
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	21da      	movs	r1, #218	; 0xda
 800e3a2:	5c52      	ldrb	r2, [r2, r1]
 800e3a4:	701a      	strb	r2, [r3, #0]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800e3a6:	0002      	movs	r2, r0
 800e3a8:	18bb      	adds	r3, r7, r2
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d007      	beq.n	800e3c0 <VL53L0X_CheckAndLoadInterruptSettings+0x3c>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800e3b0:	18bb      	adds	r3, r7, r2
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	d003      	beq.n	800e3c0 <VL53L0X_CheckAndLoadInterruptSettings+0x3c>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800e3b8:	18bb      	adds	r3, r7, r2
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	2b03      	cmp	r3, #3
 800e3be:	d15e      	bne.n	800e47e <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800e3c0:	2317      	movs	r3, #23
 800e3c2:	18fc      	adds	r4, r7, r3
 800e3c4:	230c      	movs	r3, #12
 800e3c6:	18fb      	adds	r3, r7, r3
 800e3c8:	2210      	movs	r2, #16
 800e3ca:	18ba      	adds	r2, r7, r2
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	2101      	movs	r1, #1
 800e3d0:	f000 fcca 	bl	800ed68 <VL53L0X_GetInterruptThresholds>
 800e3d4:	0003      	movs	r3, r0
 800e3d6:	7023      	strb	r3, [r4, #0]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800e3d8:	693a      	ldr	r2, [r7, #16]
 800e3da:	23ff      	movs	r3, #255	; 0xff
 800e3dc:	041b      	lsls	r3, r3, #16
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d804      	bhi.n	800e3ec <VL53L0X_CheckAndLoadInterruptSettings+0x68>
			(ThresholdHigh > 255*65536)) &&
 800e3e2:	68fa      	ldr	r2, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800e3e4:	23ff      	movs	r3, #255	; 0xff
 800e3e6:	041b      	lsls	r3, r3, #16
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d948      	bls.n	800e47e <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
			(ThresholdHigh > 255*65536)) &&
 800e3ec:	2217      	movs	r2, #23
 800e3ee:	18bb      	adds	r3, r7, r2
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	b25b      	sxtb	r3, r3
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d142      	bne.n	800e47e <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800e3f8:	1cfb      	adds	r3, r7, #3
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d009      	beq.n	800e414 <VL53L0X_CheckAndLoadInterruptSettings+0x90>
				Status = VL53L0X_load_tuning_settings(Dev,
 800e400:	18bc      	adds	r4, r7, r2
 800e402:	4a23      	ldr	r2, [pc, #140]	; (800e490 <VL53L0X_CheckAndLoadInterruptSettings+0x10c>)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	0011      	movs	r1, r2
 800e408:	0018      	movs	r0, r3
 800e40a:	f003 fc03 	bl	8011c14 <VL53L0X_load_tuning_settings>
 800e40e:	0003      	movs	r3, r0
 800e410:	7023      	strb	r3, [r4, #0]
 800e412:	e034      	b.n	800e47e <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2204      	movs	r2, #4
 800e418:	21ff      	movs	r1, #255	; 0xff
 800e41a:	0018      	movs	r0, r3
 800e41c:	f004 fc4c 	bl	8012cb8 <VL53L0X_WrByte>
 800e420:	0003      	movs	r3, r0
 800e422:	0019      	movs	r1, r3
 800e424:	2417      	movs	r4, #23
 800e426:	193b      	adds	r3, r7, r4
 800e428:	193a      	adds	r2, r7, r4
 800e42a:	7812      	ldrb	r2, [r2, #0]
 800e42c:	430a      	orrs	r2, r1
 800e42e:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	2170      	movs	r1, #112	; 0x70
 800e436:	0018      	movs	r0, r3
 800e438:	f004 fc3e 	bl	8012cb8 <VL53L0X_WrByte>
 800e43c:	0003      	movs	r3, r0
 800e43e:	0019      	movs	r1, r3
 800e440:	193b      	adds	r3, r7, r4
 800e442:	193a      	adds	r2, r7, r4
 800e444:	7812      	ldrb	r2, [r2, #0]
 800e446:	430a      	orrs	r2, r1
 800e448:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2200      	movs	r2, #0
 800e44e:	21ff      	movs	r1, #255	; 0xff
 800e450:	0018      	movs	r0, r3
 800e452:	f004 fc31 	bl	8012cb8 <VL53L0X_WrByte>
 800e456:	0003      	movs	r3, r0
 800e458:	0019      	movs	r1, r3
 800e45a:	193b      	adds	r3, r7, r4
 800e45c:	193a      	adds	r2, r7, r4
 800e45e:	7812      	ldrb	r2, [r2, #0]
 800e460:	430a      	orrs	r2, r1
 800e462:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	2180      	movs	r1, #128	; 0x80
 800e46a:	0018      	movs	r0, r3
 800e46c:	f004 fc24 	bl	8012cb8 <VL53L0X_WrByte>
 800e470:	0003      	movs	r3, r0
 800e472:	0019      	movs	r1, r3
 800e474:	193b      	adds	r3, r7, r4
 800e476:	193a      	adds	r2, r7, r4
 800e478:	7812      	ldrb	r2, [r2, #0]
 800e47a:	430a      	orrs	r2, r1
 800e47c:	701a      	strb	r2, [r3, #0]
		}


	}

	return Status;
 800e47e:	2317      	movs	r3, #23
 800e480:	18fb      	adds	r3, r7, r3
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	b25b      	sxtb	r3, r3

}
 800e486:	0018      	movs	r0, r3
 800e488:	46bd      	mov	sp, r7
 800e48a:	b007      	add	sp, #28
 800e48c:	bd90      	pop	{r4, r7, pc}
 800e48e:	46c0      	nop			; (mov r8, r8)
 800e490:	2000010c 	.word	0x2000010c

0800e494 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800e494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e496:	b087      	sub	sp, #28
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e49c:	2517      	movs	r5, #23
 800e49e:	197b      	adds	r3, r7, r5
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800e4a4:	230f      	movs	r3, #15
 800e4a6:	18fb      	adds	r3, r7, r3
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	701a      	strb	r2, [r3, #0]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800e4ac:	260e      	movs	r6, #14
 800e4ae:	19ba      	adds	r2, r7, r6
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	0011      	movs	r1, r2
 800e4b4:	0018      	movs	r0, r3
 800e4b6:	f7ff f9b9 	bl	800d82c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800e4ba:	197c      	adds	r4, r7, r5
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	2180      	movs	r1, #128	; 0x80
 800e4c2:	0018      	movs	r0, r3
 800e4c4:	f004 fbf8 	bl	8012cb8 <VL53L0X_WrByte>
 800e4c8:	0003      	movs	r3, r0
 800e4ca:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e4cc:	197c      	adds	r4, r7, r5
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	21ff      	movs	r1, #255	; 0xff
 800e4d4:	0018      	movs	r0, r3
 800e4d6:	f004 fbef 	bl	8012cb8 <VL53L0X_WrByte>
 800e4da:	0003      	movs	r3, r0
 800e4dc:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800e4de:	197c      	adds	r4, r7, r5
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	0018      	movs	r0, r3
 800e4e8:	f004 fbe6 	bl	8012cb8 <VL53L0X_WrByte>
 800e4ec:	0003      	movs	r3, r0
 800e4ee:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	239d      	movs	r3, #157	; 0x9d
 800e4f4:	005b      	lsls	r3, r3, #1
 800e4f6:	5cd2      	ldrb	r2, [r2, r3]
 800e4f8:	197c      	adds	r4, r7, r5
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2191      	movs	r1, #145	; 0x91
 800e4fe:	0018      	movs	r0, r3
 800e500:	f004 fbda 	bl	8012cb8 <VL53L0X_WrByte>
 800e504:	0003      	movs	r3, r0
 800e506:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e508:	197c      	adds	r4, r7, r5
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2201      	movs	r2, #1
 800e50e:	2100      	movs	r1, #0
 800e510:	0018      	movs	r0, r3
 800e512:	f004 fbd1 	bl	8012cb8 <VL53L0X_WrByte>
 800e516:	0003      	movs	r3, r0
 800e518:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e51a:	197c      	adds	r4, r7, r5
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	21ff      	movs	r1, #255	; 0xff
 800e522:	0018      	movs	r0, r3
 800e524:	f004 fbc8 	bl	8012cb8 <VL53L0X_WrByte>
 800e528:	0003      	movs	r3, r0
 800e52a:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e52c:	197c      	adds	r4, r7, r5
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	2180      	movs	r1, #128	; 0x80
 800e534:	0018      	movs	r0, r3
 800e536:	f004 fbbf 	bl	8012cb8 <VL53L0X_WrByte>
 800e53a:	0003      	movs	r3, r0
 800e53c:	7023      	strb	r3, [r4, #0]

	switch (DeviceMode) {
 800e53e:	19bb      	adds	r3, r7, r6
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	2b03      	cmp	r3, #3
 800e544:	d100      	bne.n	800e548 <VL53L0X_StartMeasurement+0xb4>
 800e546:	e073      	b.n	800e630 <VL53L0X_StartMeasurement+0x19c>
 800e548:	dd00      	ble.n	800e54c <VL53L0X_StartMeasurement+0xb8>
 800e54a:	e094      	b.n	800e676 <VL53L0X_StartMeasurement+0x1e2>
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <VL53L0X_StartMeasurement+0xc2>
 800e550:	2b01      	cmp	r3, #1
 800e552:	d04a      	beq.n	800e5ea <VL53L0X_StartMeasurement+0x156>
 800e554:	e08f      	b.n	800e676 <VL53L0X_StartMeasurement+0x1e2>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800e556:	2517      	movs	r5, #23
 800e558:	197c      	adds	r4, r7, r5
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2201      	movs	r2, #1
 800e55e:	2100      	movs	r1, #0
 800e560:	0018      	movs	r0, r3
 800e562:	f004 fba9 	bl	8012cb8 <VL53L0X_WrByte>
 800e566:	0003      	movs	r3, r0
 800e568:	7023      	strb	r3, [r4, #0]

		Byte = StartStopByte;
 800e56a:	230d      	movs	r3, #13
 800e56c:	18fb      	adds	r3, r7, r3
 800e56e:	220f      	movs	r2, #15
 800e570:	18ba      	adds	r2, r7, r2
 800e572:	7812      	ldrb	r2, [r2, #0]
 800e574:	701a      	strb	r2, [r3, #0]
		if (Status == VL53L0X_ERROR_NONE) {
 800e576:	197b      	adds	r3, r7, r5
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	b25b      	sxtb	r3, r3
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d000      	beq.n	800e582 <VL53L0X_StartMeasurement+0xee>
 800e580:	e07e      	b.n	800e680 <VL53L0X_StartMeasurement+0x1ec>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800e582:	2300      	movs	r3, #0
 800e584:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00a      	beq.n	800e5a2 <VL53L0X_StartMeasurement+0x10e>
					Status = VL53L0X_RdByte(Dev,
 800e58c:	2317      	movs	r3, #23
 800e58e:	18fc      	adds	r4, r7, r3
 800e590:	230d      	movs	r3, #13
 800e592:	18fa      	adds	r2, r7, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2100      	movs	r1, #0
 800e598:	0018      	movs	r0, r3
 800e59a:	f004 fc3c 	bl	8012e16 <VL53L0X_RdByte>
 800e59e:	0003      	movs	r3, r0
 800e5a0:	7023      	strb	r3, [r4, #0]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800e5a8:	230d      	movs	r3, #13
 800e5aa:	18fb      	adds	r3, r7, r3
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	210f      	movs	r1, #15
 800e5b0:	187a      	adds	r2, r7, r1
 800e5b2:	7812      	ldrb	r2, [r2, #0]
 800e5b4:	4013      	ands	r3, r2
 800e5b6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800e5b8:	187a      	adds	r2, r7, r1
 800e5ba:	7812      	ldrb	r2, [r2, #0]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d10a      	bne.n	800e5d6 <VL53L0X_StartMeasurement+0x142>
				&& (Status == VL53L0X_ERROR_NONE)
 800e5c0:	2317      	movs	r3, #23
 800e5c2:	18fb      	adds	r3, r7, r3
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	b25b      	sxtb	r3, r3
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d104      	bne.n	800e5d6 <VL53L0X_StartMeasurement+0x142>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800e5cc:	693a      	ldr	r2, [r7, #16]
 800e5ce:	23fa      	movs	r3, #250	; 0xfa
 800e5d0:	00db      	lsls	r3, r3, #3
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d3d7      	bcc.n	800e586 <VL53L0X_StartMeasurement+0xf2>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800e5d6:	693a      	ldr	r2, [r7, #16]
 800e5d8:	23fa      	movs	r3, #250	; 0xfa
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d34f      	bcc.n	800e680 <VL53L0X_StartMeasurement+0x1ec>
				Status = VL53L0X_ERROR_TIME_OUT;
 800e5e0:	2317      	movs	r3, #23
 800e5e2:	18fb      	adds	r3, r7, r3
 800e5e4:	22f9      	movs	r2, #249	; 0xf9
 800e5e6:	701a      	strb	r2, [r3, #0]

		}

		break;
 800e5e8:	e04a      	b.n	800e680 <VL53L0X_StartMeasurement+0x1ec>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800e5ea:	2217      	movs	r2, #23
 800e5ec:	18bb      	adds	r3, r7, r2
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	b25b      	sxtb	r3, r3
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d107      	bne.n	800e606 <VL53L0X_StartMeasurement+0x172>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800e5f6:	18bc      	adds	r4, r7, r2
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2101      	movs	r1, #1
 800e5fc:	0018      	movs	r0, r3
 800e5fe:	f7ff fec1 	bl	800e384 <VL53L0X_CheckAndLoadInterruptSettings>
 800e602:	0003      	movs	r3, r0
 800e604:	7023      	strb	r3, [r4, #0]

		Status = VL53L0X_WrByte(Dev,
 800e606:	2517      	movs	r5, #23
 800e608:	197c      	adds	r4, r7, r5
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2202      	movs	r2, #2
 800e60e:	2100      	movs	r1, #0
 800e610:	0018      	movs	r0, r3
 800e612:	f004 fb51 	bl	8012cb8 <VL53L0X_WrByte>
 800e616:	0003      	movs	r3, r0
 800e618:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800e61a:	197b      	adds	r3, r7, r5
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	b25b      	sxtb	r3, r3
 800e620:	2b00      	cmp	r3, #0
 800e622:	d12f      	bne.n	800e684 <VL53L0X_StartMeasurement+0x1f0>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	2399      	movs	r3, #153	; 0x99
 800e628:	005b      	lsls	r3, r3, #1
 800e62a:	2104      	movs	r1, #4
 800e62c:	54d1      	strb	r1, [r2, r3]
		}
		break;
 800e62e:	e029      	b.n	800e684 <VL53L0X_StartMeasurement+0x1f0>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800e630:	2217      	movs	r2, #23
 800e632:	18bb      	adds	r3, r7, r2
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	b25b      	sxtb	r3, r3
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d107      	bne.n	800e64c <VL53L0X_StartMeasurement+0x1b8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800e63c:	18bc      	adds	r4, r7, r2
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2101      	movs	r1, #1
 800e642:	0018      	movs	r0, r3
 800e644:	f7ff fe9e 	bl	800e384 <VL53L0X_CheckAndLoadInterruptSettings>
 800e648:	0003      	movs	r3, r0
 800e64a:	7023      	strb	r3, [r4, #0]

		Status = VL53L0X_WrByte(Dev,
 800e64c:	2517      	movs	r5, #23
 800e64e:	197c      	adds	r4, r7, r5
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2204      	movs	r2, #4
 800e654:	2100      	movs	r1, #0
 800e656:	0018      	movs	r0, r3
 800e658:	f004 fb2e 	bl	8012cb8 <VL53L0X_WrByte>
 800e65c:	0003      	movs	r3, r0
 800e65e:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800e660:	197b      	adds	r3, r7, r5
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	b25b      	sxtb	r3, r3
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10e      	bne.n	800e688 <VL53L0X_StartMeasurement+0x1f4>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	2399      	movs	r3, #153	; 0x99
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	2104      	movs	r1, #4
 800e672:	54d1      	strb	r1, [r2, r3]
		}
		break;
 800e674:	e008      	b.n	800e688 <VL53L0X_StartMeasurement+0x1f4>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800e676:	2317      	movs	r3, #23
 800e678:	18fb      	adds	r3, r7, r3
 800e67a:	22f8      	movs	r2, #248	; 0xf8
 800e67c:	701a      	strb	r2, [r3, #0]
 800e67e:	e004      	b.n	800e68a <VL53L0X_StartMeasurement+0x1f6>
		break;
 800e680:	46c0      	nop			; (mov r8, r8)
 800e682:	e002      	b.n	800e68a <VL53L0X_StartMeasurement+0x1f6>
		break;
 800e684:	46c0      	nop			; (mov r8, r8)
 800e686:	e000      	b.n	800e68a <VL53L0X_StartMeasurement+0x1f6>
		break;
 800e688:	46c0      	nop			; (mov r8, r8)
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800e68a:	2317      	movs	r3, #23
 800e68c:	18fb      	adds	r3, r7, r3
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	b25b      	sxtb	r3, r3
}
 800e692:	0018      	movs	r0, r3
 800e694:	46bd      	mov	sp, r7
 800e696:	b007      	add	sp, #28
 800e698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e69a <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800e69a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e69c:	b085      	sub	sp, #20
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e6a4:	200f      	movs	r0, #15
 800e6a6:	183b      	adds	r3, r7, r0
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	701a      	strb	r2, [r3, #0]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800e6ac:	240e      	movs	r4, #14
 800e6ae:	193b      	adds	r3, r7, r4
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	21da      	movs	r1, #218	; 0xda
 800e6b4:	5c52      	ldrb	r2, [r2, r1]
 800e6b6:	701a      	strb	r2, [r3, #0]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800e6b8:	193b      	adds	r3, r7, r4
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	2b04      	cmp	r3, #4
 800e6be:	d114      	bne.n	800e6ea <VL53L0X_GetMeasurementDataReady+0x50>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800e6c0:	183c      	adds	r4, r7, r0
 800e6c2:	2308      	movs	r3, #8
 800e6c4:	18fa      	adds	r2, r7, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	0011      	movs	r1, r2
 800e6ca:	0018      	movs	r0, r3
 800e6cc:	f000 fbe8 	bl	800eea0 <VL53L0X_GetInterruptMaskStatus>
 800e6d0:	0003      	movs	r3, r0
 800e6d2:	7023      	strb	r3, [r4, #0]
		if (InterruptMask ==
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	2b04      	cmp	r3, #4
 800e6d8:	d103      	bne.n	800e6e2 <VL53L0X_GetMeasurementDataReady+0x48>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	701a      	strb	r2, [r3, #0]
 800e6e0:	e020      	b.n	800e724 <VL53L0X_GetMeasurementDataReady+0x8a>
		else
			*pMeasurementDataReady = 0;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	701a      	strb	r2, [r3, #0]
 800e6e8:	e01c      	b.n	800e724 <VL53L0X_GetMeasurementDataReady+0x8a>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800e6ea:	250f      	movs	r5, #15
 800e6ec:	197c      	adds	r4, r7, r5
 800e6ee:	260d      	movs	r6, #13
 800e6f0:	19ba      	adds	r2, r7, r6
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2114      	movs	r1, #20
 800e6f6:	0018      	movs	r0, r3
 800e6f8:	f004 fb8d 	bl	8012e16 <VL53L0X_RdByte>
 800e6fc:	0003      	movs	r3, r0
 800e6fe:	7023      	strb	r3, [r4, #0]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800e700:	197b      	adds	r3, r7, r5
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	b25b      	sxtb	r3, r3
 800e706:	2b00      	cmp	r3, #0
 800e708:	d10c      	bne.n	800e724 <VL53L0X_GetMeasurementDataReady+0x8a>
			if (SysRangeStatusRegister & 0x01)
 800e70a:	19bb      	adds	r3, r7, r6
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	001a      	movs	r2, r3
 800e710:	2301      	movs	r3, #1
 800e712:	4013      	ands	r3, r2
 800e714:	d003      	beq.n	800e71e <VL53L0X_GetMeasurementDataReady+0x84>
				*pMeasurementDataReady = 1;
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	2201      	movs	r2, #1
 800e71a:	701a      	strb	r2, [r3, #0]
 800e71c:	e002      	b.n	800e724 <VL53L0X_GetMeasurementDataReady+0x8a>
			else
				*pMeasurementDataReady = 0;
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	2200      	movs	r2, #0
 800e722:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e724:	230f      	movs	r3, #15
 800e726:	18fb      	adds	r3, r7, r3
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	b25b      	sxtb	r3, r3
}
 800e72c:	0018      	movs	r0, r3
 800e72e:	46bd      	mov	sp, r7
 800e730:	b005      	add	sp, #20
 800e732:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e734 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800e734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e736:	b097      	sub	sp, #92	; 0x5c
 800e738:	af02      	add	r7, sp, #8
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e73e:	264f      	movs	r6, #79	; 0x4f
 800e740:	19bb      	adds	r3, r7, r6
 800e742:	2200      	movs	r2, #0
 800e744:	701a      	strb	r2, [r3, #0]
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800e746:	19bc      	adds	r4, r7, r6
 800e748:	2528      	movs	r5, #40	; 0x28
 800e74a:	197a      	adds	r2, r7, r5
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	230c      	movs	r3, #12
 800e750:	2114      	movs	r1, #20
 800e752:	f004 fa7b 	bl	8012c4c <VL53L0X_ReadMulti>
 800e756:	0003      	movs	r3, r0
 800e758:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800e75a:	19bb      	adds	r3, r7, r6
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	b25b      	sxtb	r3, r3
 800e760:	2b00      	cmp	r3, #0
 800e762:	d000      	beq.n	800e766 <VL53L0X_GetRangingMeasurementData+0x32>
 800e764:	e0f0      	b.n	800e948 <VL53L0X_GetRangingMeasurementData+0x214>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	2200      	movs	r2, #0
 800e76a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	2200      	movs	r2, #0
 800e770:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800e772:	0028      	movs	r0, r5
 800e774:	183b      	adds	r3, r7, r0
 800e776:	7a9b      	ldrb	r3, [r3, #10]
 800e778:	b29b      	uxth	r3, r3
 800e77a:	021b      	lsls	r3, r3, #8
 800e77c:	b299      	uxth	r1, r3
 800e77e:	183b      	adds	r3, r7, r0
 800e780:	7adb      	ldrb	r3, [r3, #11]
 800e782:	b29a      	uxth	r2, r3
 800e784:	244c      	movs	r4, #76	; 0x4c
 800e786:	193b      	adds	r3, r7, r4
 800e788:	188a      	adds	r2, r1, r2
 800e78a:	801a      	strh	r2, [r3, #0]
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	2200      	movs	r2, #0
 800e790:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800e792:	183b      	adds	r3, r7, r0
 800e794:	799b      	ldrb	r3, [r3, #6]
 800e796:	b29b      	uxth	r3, r3
 800e798:	021b      	lsls	r3, r3, #8
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	183b      	adds	r3, r7, r0
 800e79e:	79db      	ldrb	r3, [r3, #7]
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	18d3      	adds	r3, r2, r3
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	025b      	lsls	r3, r3, #9
 800e7a8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7ae:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800e7b0:	183b      	adds	r3, r7, r0
 800e7b2:	7a1b      	ldrb	r3, [r3, #8]
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	021b      	lsls	r3, r3, #8
 800e7b8:	b299      	uxth	r1, r3
 800e7ba:	183b      	adds	r3, r7, r0
 800e7bc:	7a5b      	ldrb	r3, [r3, #9]
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	2542      	movs	r5, #66	; 0x42
 800e7c2:	197b      	adds	r3, r7, r5
 800e7c4:	188a      	adds	r2, r1, r2
 800e7c6:	801a      	strh	r2, [r3, #0]
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800e7c8:	197b      	adds	r3, r7, r5
 800e7ca:	881b      	ldrh	r3, [r3, #0]
 800e7cc:	025b      	lsls	r3, r3, #9
 800e7ce:	001a      	movs	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800e7d4:	183b      	adds	r3, r7, r0
 800e7d6:	789b      	ldrb	r3, [r3, #2]
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	021b      	lsls	r3, r3, #8
 800e7dc:	b299      	uxth	r1, r3
 800e7de:	183b      	adds	r3, r7, r0
 800e7e0:	78db      	ldrb	r3, [r3, #3]
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	2540      	movs	r5, #64	; 0x40
 800e7e6:	197b      	adds	r3, r7, r5
 800e7e8:	188a      	adds	r2, r1, r2
 800e7ea:	801a      	strh	r2, [r3, #0]
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	197a      	adds	r2, r7, r5
 800e7f0:	8812      	ldrh	r2, [r2, #0]
 800e7f2:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800e7f4:	233f      	movs	r3, #63	; 0x3f
 800e7f6:	18fb      	adds	r3, r7, r3
 800e7f8:	183a      	adds	r2, r7, r0
 800e7fa:	7812      	ldrb	r2, [r2, #0]
 800e7fc:	701a      	strb	r2, [r3, #0]

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800e7fe:	203c      	movs	r0, #60	; 0x3c
 800e800:	183b      	adds	r3, r7, r0
 800e802:	6879      	ldr	r1, [r7, #4]
 800e804:	22a9      	movs	r2, #169	; 0xa9
 800e806:	0052      	lsls	r2, r2, #1
 800e808:	5a8a      	ldrh	r2, [r1, r2]
 800e80a:	801a      	strh	r2, [r3, #0]
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800e80c:	263b      	movs	r6, #59	; 0x3b
 800e80e:	19bb      	adds	r3, r7, r6
 800e810:	6879      	ldr	r1, [r7, #4]
 800e812:	2232      	movs	r2, #50	; 0x32
 800e814:	32ff      	adds	r2, #255	; 0xff
 800e816:	5c8a      	ldrb	r2, [r1, r2]
 800e818:	701a      	strb	r2, [r3, #0]
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800e81a:	183b      	adds	r3, r7, r0
 800e81c:	881a      	ldrh	r2, [r3, #0]
 800e81e:	23fa      	movs	r3, #250	; 0xfa
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	429a      	cmp	r2, r3
 800e824:	d053      	beq.n	800e8ce <VL53L0X_GetRangingMeasurementData+0x19a>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800e826:	183b      	adds	r3, r7, r0
 800e828:	881b      	ldrh	r3, [r3, #0]
 800e82a:	193a      	adds	r2, r7, r4
 800e82c:	8812      	ldrh	r2, [r2, #0]
 800e82e:	4353      	muls	r3, r2
 800e830:	33f5      	adds	r3, #245	; 0xf5
 800e832:	33ff      	adds	r3, #255	; 0xff
 800e834:	22fa      	movs	r2, #250	; 0xfa
 800e836:	0091      	lsls	r1, r2, #2
 800e838:	0018      	movs	r0, r3
 800e83a:	f7f1 fd15 	bl	8000268 <__divsi3>
 800e83e:	0003      	movs	r3, r0
 800e840:	001a      	movs	r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800e842:	193b      	adds	r3, r7, r4
 800e844:	801a      	strh	r2, [r3, #0]

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6a1a      	ldr	r2, [r3, #32]
 800e84a:	2138      	movs	r1, #56	; 0x38
 800e84c:	187b      	adds	r3, r7, r1
 800e84e:	801a      	strh	r2, [r3, #0]
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800e850:	2037      	movs	r0, #55	; 0x37
 800e852:	183b      	adds	r3, r7, r0
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	7f12      	ldrb	r2, [r2, #28]
 800e858:	701a      	strb	r2, [r3, #0]
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800e85a:	183b      	adds	r3, r7, r0
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d035      	beq.n	800e8ce <VL53L0X_GetRangingMeasurementData+0x19a>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800e862:	187b      	adds	r3, r7, r1
 800e864:	881b      	ldrh	r3, [r3, #0]
 800e866:	197a      	adds	r2, r7, r5
 800e868:	8812      	ldrh	r2, [r2, #0]
 800e86a:	4353      	muls	r3, r2
 800e86c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800e86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800e870:	429a      	cmp	r2, r3
 800e872:	d10d      	bne.n	800e890 <VL53L0X_GetRangingMeasurementData+0x15c>
					if (RangeFractionalEnable)
 800e874:	19bb      	adds	r3, r7, r6
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d004      	beq.n	800e886 <VL53L0X_GetRangingMeasurementData+0x152>
						XtalkRangeMilliMeter = 8888;
 800e87c:	234a      	movs	r3, #74	; 0x4a
 800e87e:	18fb      	adds	r3, r7, r3
 800e880:	4a52      	ldr	r2, [pc, #328]	; (800e9cc <VL53L0X_GetRangingMeasurementData+0x298>)
 800e882:	801a      	strh	r2, [r3, #0]
 800e884:	e01d      	b.n	800e8c2 <VL53L0X_GetRangingMeasurementData+0x18e>
					else
						XtalkRangeMilliMeter = 8888
 800e886:	234a      	movs	r3, #74	; 0x4a
 800e888:	18fb      	adds	r3, r7, r3
 800e88a:	4a51      	ldr	r2, [pc, #324]	; (800e9d0 <VL53L0X_GetRangingMeasurementData+0x29c>)
 800e88c:	801a      	strh	r2, [r3, #0]
 800e88e:	e018      	b.n	800e8c2 <VL53L0X_GetRangingMeasurementData+0x18e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800e890:	234c      	movs	r3, #76	; 0x4c
 800e892:	18fb      	adds	r3, r7, r3
 800e894:	881b      	ldrh	r3, [r3, #0]
 800e896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e898:	435a      	muls	r2, r3
 800e89a:	0010      	movs	r0, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800e89c:	2338      	movs	r3, #56	; 0x38
 800e89e:	18fb      	adds	r3, r7, r3
 800e8a0:	881b      	ldrh	r3, [r3, #0]
 800e8a2:	2240      	movs	r2, #64	; 0x40
 800e8a4:	18ba      	adds	r2, r7, r2
 800e8a6:	8812      	ldrh	r2, [r2, #0]
 800e8a8:	4353      	muls	r3, r2
						>> 8));
 800e8aa:	121b      	asrs	r3, r3, #8
 800e8ac:	001a      	movs	r2, r3
						- ((XTalkCompensationRateMegaCps
 800e8ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8b0:	1a9b      	subs	r3, r3, r2
						/ (SignalRate
 800e8b2:	0019      	movs	r1, r3
 800e8b4:	f7f1 fc4e 	bl	8000154 <__udivsi3>
 800e8b8:	0003      	movs	r3, r0
 800e8ba:	001a      	movs	r2, r3
					XtalkRangeMilliMeter =
 800e8bc:	234a      	movs	r3, #74	; 0x4a
 800e8be:	18fb      	adds	r3, r7, r3
 800e8c0:	801a      	strh	r2, [r3, #0]
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800e8c2:	234c      	movs	r3, #76	; 0x4c
 800e8c4:	18fb      	adds	r3, r7, r3
 800e8c6:	224a      	movs	r2, #74	; 0x4a
 800e8c8:	18ba      	adds	r2, r7, r2
 800e8ca:	8812      	ldrh	r2, [r2, #0]
 800e8cc:	801a      	strh	r2, [r3, #0]
			}

		}

		if (RangeFractionalEnable) {
 800e8ce:	233b      	movs	r3, #59	; 0x3b
 800e8d0:	18fb      	adds	r3, r7, r3
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00e      	beq.n	800e8f6 <VL53L0X_GetRangingMeasurementData+0x1c2>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800e8d8:	214c      	movs	r1, #76	; 0x4c
 800e8da:	187b      	adds	r3, r7, r1
 800e8dc:	881b      	ldrh	r3, [r3, #0]
 800e8de:	089b      	lsrs	r3, r3, #2
 800e8e0:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800e8e6:	187b      	adds	r3, r7, r1
 800e8e8:	881b      	ldrh	r3, [r3, #0]
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	019b      	lsls	r3, r3, #6
 800e8ee:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	75da      	strb	r2, [r3, #23]
 800e8f4:	e007      	b.n	800e906 <VL53L0X_GetRangingMeasurementData+0x1d2>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	224c      	movs	r2, #76	; 0x4c
 800e8fa:	18ba      	adds	r2, r7, r2
 800e8fc:	8812      	ldrh	r2, [r2, #0]
 800e8fe:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2200      	movs	r2, #0
 800e904:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800e906:	2340      	movs	r3, #64	; 0x40
 800e908:	18fb      	adds	r3, r7, r3
 800e90a:	881c      	ldrh	r4, [r3, #0]
 800e90c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e90e:	233f      	movs	r3, #63	; 0x3f
 800e910:	18fb      	adds	r3, r7, r3
 800e912:	7819      	ldrb	r1, [r3, #0]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	2536      	movs	r5, #54	; 0x36
 800e918:	197b      	adds	r3, r7, r5
 800e91a:	9301      	str	r3, [sp, #4]
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	0023      	movs	r3, r4
 800e922:	f003 fed9 	bl	80126d8 <VL53L0X_get_pal_range_status>
 800e926:	0003      	movs	r3, r0
 800e928:	0019      	movs	r1, r3
 800e92a:	204f      	movs	r0, #79	; 0x4f
 800e92c:	183b      	adds	r3, r7, r0
 800e92e:	183a      	adds	r2, r7, r0
 800e930:	7812      	ldrb	r2, [r2, #0]
 800e932:	430a      	orrs	r2, r1
 800e934:	701a      	strb	r2, [r3, #0]
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800e936:	183b      	adds	r3, r7, r0
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	b25b      	sxtb	r3, r3
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d103      	bne.n	800e948 <VL53L0X_GetRangingMeasurementData+0x214>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800e940:	197b      	adds	r3, r7, r5
 800e942:	781a      	ldrb	r2, [r3, #0]
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e948:	234f      	movs	r3, #79	; 0x4f
 800e94a:	18fb      	adds	r3, r7, r3
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	b25b      	sxtb	r3, r3
 800e950:	2b00      	cmp	r3, #0
 800e952:	d132      	bne.n	800e9ba <VL53L0X_GetRangingMeasurementData+0x286>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800e954:	210c      	movs	r1, #12
 800e956:	187a      	adds	r2, r7, r1
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	3350      	adds	r3, #80	; 0x50
 800e95c:	cb31      	ldmia	r3!, {r0, r4, r5}
 800e95e:	c231      	stmia	r2!, {r0, r4, r5}
 800e960:	cb31      	ldmia	r3!, {r0, r4, r5}
 800e962:	c231      	stmia	r2!, {r0, r4, r5}
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	6013      	str	r3, [r2, #0]

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	891a      	ldrh	r2, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800e96c:	187b      	adds	r3, r7, r1
 800e96e:	811a      	strh	r2, [r3, #8]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	7dda      	ldrb	r2, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800e974:	187b      	adds	r3, r7, r1
 800e976:	75da      	strb	r2, [r3, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	895a      	ldrh	r2, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800e97c:	187b      	adds	r3, r7, r1
 800e97e:	815a      	strh	r2, [r3, #10]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	685a      	ldr	r2, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800e984:	187b      	adds	r3, r7, r1
 800e986:	605a      	str	r2, [r3, #4]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	68da      	ldr	r2, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800e98c:	187b      	adds	r3, r7, r1
 800e98e:	60da      	str	r2, [r3, #12]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	691a      	ldr	r2, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800e994:	187b      	adds	r3, r7, r1
 800e996:	611a      	str	r2, [r3, #16]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	8a9a      	ldrh	r2, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800e99c:	187b      	adds	r3, r7, r1
 800e99e:	829a      	strh	r2, [r3, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	7e1a      	ldrb	r2, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800e9a4:	187b      	adds	r3, r7, r1
 800e9a6:	761a      	strb	r2, [r3, #24]

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	187a      	adds	r2, r7, r1
 800e9ac:	3350      	adds	r3, #80	; 0x50
 800e9ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 800e9b0:	c313      	stmia	r3!, {r0, r1, r4}
 800e9b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 800e9b4:	c313      	stmia	r3!, {r0, r1, r4}
 800e9b6:	6812      	ldr	r2, [r2, #0]
 800e9b8:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e9ba:	234f      	movs	r3, #79	; 0x4f
 800e9bc:	18fb      	adds	r3, r7, r3
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	b25b      	sxtb	r3, r3
}
 800e9c2:	0018      	movs	r0, r3
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	b015      	add	sp, #84	; 0x54
 800e9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9ca:	46c0      	nop			; (mov r8, r8)
 800e9cc:	000022b8 	.word	0x000022b8
 800e9d0:	ffff8ae0 	.word	0xffff8ae0

0800e9d4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800e9d4:	b5b0      	push	{r4, r5, r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e9de:	250f      	movs	r5, #15
 800e9e0:	197b      	adds	r3, r7, r5
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800e9e6:	197c      	adds	r4, r7, r5
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	0018      	movs	r0, r3
 800e9ee:	f7fe feeb 	bl	800d7c8 <VL53L0X_SetDeviceMode>
 800e9f2:	0003      	movs	r3, r0
 800e9f4:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800e9f6:	197b      	adds	r3, r7, r5
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	b25b      	sxtb	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d106      	bne.n	800ea0e <VL53L0X_PerformSingleRangingMeasurement+0x3a>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800ea00:	197c      	adds	r4, r7, r5
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	0018      	movs	r0, r3
 800ea06:	f7ff fc5a 	bl	800e2be <VL53L0X_PerformSingleMeasurement>
 800ea0a:	0003      	movs	r3, r0
 800ea0c:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE)
 800ea0e:	220f      	movs	r2, #15
 800ea10:	18bb      	adds	r3, r7, r2
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	b25b      	sxtb	r3, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d108      	bne.n	800ea2c <VL53L0X_PerformSingleRangingMeasurement+0x58>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800ea1a:	18bc      	adds	r4, r7, r2
 800ea1c:	683a      	ldr	r2, [r7, #0]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	0011      	movs	r1, r2
 800ea22:	0018      	movs	r0, r3
 800ea24:	f7ff fe86 	bl	800e734 <VL53L0X_GetRangingMeasurementData>
 800ea28:	0003      	movs	r3, r0
 800ea2a:	7023      	strb	r3, [r4, #0]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800ea2c:	220f      	movs	r2, #15
 800ea2e:	18bb      	adds	r3, r7, r2
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	b25b      	sxtb	r3, r3
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d107      	bne.n	800ea48 <VL53L0X_PerformSingleRangingMeasurement+0x74>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800ea38:	18bc      	adds	r4, r7, r2
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	0018      	movs	r0, r3
 800ea40:	f000 f9d4 	bl	800edec <VL53L0X_ClearInterruptMask>
 800ea44:	0003      	movs	r3, r0
 800ea46:	7023      	strb	r3, [r4, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800ea48:	230f      	movs	r3, #15
 800ea4a:	18fb      	adds	r3, r7, r3
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	b25b      	sxtb	r3, r3
}
 800ea50:	0018      	movs	r0, r3
 800ea52:	46bd      	mov	sp, r7
 800ea54:	b004      	add	sp, #16
 800ea56:	bdb0      	pop	{r4, r5, r7, pc}

0800ea58 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800ea58:	b590      	push	{r4, r7, lr}
 800ea5a:	b085      	sub	sp, #20
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	000c      	movs	r4, r1
 800ea62:	0010      	movs	r0, r2
 800ea64:	0019      	movs	r1, r3
 800ea66:	1cfb      	adds	r3, r7, #3
 800ea68:	1c22      	adds	r2, r4, #0
 800ea6a:	701a      	strb	r2, [r3, #0]
 800ea6c:	1cbb      	adds	r3, r7, #2
 800ea6e:	1c02      	adds	r2, r0, #0
 800ea70:	701a      	strb	r2, [r3, #0]
 800ea72:	1c7b      	adds	r3, r7, #1
 800ea74:	1c0a      	adds	r2, r1, #0
 800ea76:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea78:	210f      	movs	r1, #15
 800ea7a:	187b      	adds	r3, r7, r1
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800ea80:	1cfb      	adds	r3, r7, #3
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d003      	beq.n	800ea90 <VL53L0X_SetGpioConfig+0x38>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800ea88:	187b      	adds	r3, r7, r1
 800ea8a:	22f6      	movs	r2, #246	; 0xf6
 800ea8c:	701a      	strb	r2, [r3, #0]
 800ea8e:	e160      	b.n	800ed52 <VL53L0X_SetGpioConfig+0x2fa>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800ea90:	1cbb      	adds	r3, r7, #2
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	2b14      	cmp	r3, #20
 800ea96:	d11a      	bne.n	800eace <VL53L0X_SetGpioConfig+0x76>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800ea98:	2320      	movs	r3, #32
 800ea9a:	18fb      	adds	r3, r7, r3
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d104      	bne.n	800eaac <VL53L0X_SetGpioConfig+0x54>
			data = 0x10;
 800eaa2:	230e      	movs	r3, #14
 800eaa4:	18fb      	adds	r3, r7, r3
 800eaa6:	2210      	movs	r2, #16
 800eaa8:	701a      	strb	r2, [r3, #0]
 800eaaa:	e003      	b.n	800eab4 <VL53L0X_SetGpioConfig+0x5c>
		else
			data = 1;
 800eaac:	230e      	movs	r3, #14
 800eaae:	18fb      	adds	r3, r7, r3
 800eab0:	2201      	movs	r2, #1
 800eab2:	701a      	strb	r2, [r3, #0]

		Status = VL53L0X_WrByte(Dev,
 800eab4:	230f      	movs	r3, #15
 800eab6:	18fc      	adds	r4, r7, r3
 800eab8:	230e      	movs	r3, #14
 800eaba:	18fb      	adds	r3, r7, r3
 800eabc:	781a      	ldrb	r2, [r3, #0]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2184      	movs	r1, #132	; 0x84
 800eac2:	0018      	movs	r0, r3
 800eac4:	f004 f8f8 	bl	8012cb8 <VL53L0X_WrByte>
 800eac8:	0003      	movs	r3, r0
 800eaca:	7023      	strb	r3, [r4, #0]
 800eacc:	e141      	b.n	800ed52 <VL53L0X_SetGpioConfig+0x2fa>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800eace:	1cbb      	adds	r3, r7, #2
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	2b15      	cmp	r3, #21
 800ead4:	d000      	beq.n	800ead8 <VL53L0X_SetGpioConfig+0x80>
 800ead6:	e0c4      	b.n	800ec62 <VL53L0X_SetGpioConfig+0x20a>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	21ff      	movs	r1, #255	; 0xff
 800eade:	0018      	movs	r0, r3
 800eae0:	f004 f8ea 	bl	8012cb8 <VL53L0X_WrByte>
 800eae4:	0003      	movs	r3, r0
 800eae6:	0019      	movs	r1, r3
 800eae8:	240f      	movs	r4, #15
 800eaea:	193b      	adds	r3, r7, r4
 800eaec:	193a      	adds	r2, r7, r4
 800eaee:	7812      	ldrb	r2, [r2, #0]
 800eaf0:	430a      	orrs	r2, r1
 800eaf2:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	2100      	movs	r1, #0
 800eafa:	0018      	movs	r0, r3
 800eafc:	f004 f8dc 	bl	8012cb8 <VL53L0X_WrByte>
 800eb00:	0003      	movs	r3, r0
 800eb02:	0019      	movs	r1, r3
 800eb04:	193b      	adds	r3, r7, r4
 800eb06:	193a      	adds	r2, r7, r4
 800eb08:	7812      	ldrb	r2, [r2, #0]
 800eb0a:	430a      	orrs	r2, r1
 800eb0c:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	21ff      	movs	r1, #255	; 0xff
 800eb14:	0018      	movs	r0, r3
 800eb16:	f004 f8cf 	bl	8012cb8 <VL53L0X_WrByte>
 800eb1a:	0003      	movs	r3, r0
 800eb1c:	0019      	movs	r1, r3
 800eb1e:	193b      	adds	r3, r7, r4
 800eb20:	193a      	adds	r2, r7, r4
 800eb22:	7812      	ldrb	r2, [r2, #0]
 800eb24:	430a      	orrs	r2, r1
 800eb26:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	2180      	movs	r1, #128	; 0x80
 800eb2e:	0018      	movs	r0, r3
 800eb30:	f004 f8c2 	bl	8012cb8 <VL53L0X_WrByte>
 800eb34:	0003      	movs	r3, r0
 800eb36:	0019      	movs	r1, r3
 800eb38:	193b      	adds	r3, r7, r4
 800eb3a:	193a      	adds	r2, r7, r4
 800eb3c:	7812      	ldrb	r2, [r2, #0]
 800eb3e:	430a      	orrs	r2, r1
 800eb40:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2202      	movs	r2, #2
 800eb46:	2185      	movs	r1, #133	; 0x85
 800eb48:	0018      	movs	r0, r3
 800eb4a:	f004 f8b5 	bl	8012cb8 <VL53L0X_WrByte>
 800eb4e:	0003      	movs	r3, r0
 800eb50:	0019      	movs	r1, r3
 800eb52:	193b      	adds	r3, r7, r4
 800eb54:	193a      	adds	r2, r7, r4
 800eb56:	7812      	ldrb	r2, [r2, #0]
 800eb58:	430a      	orrs	r2, r1
 800eb5a:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2204      	movs	r2, #4
 800eb60:	21ff      	movs	r1, #255	; 0xff
 800eb62:	0018      	movs	r0, r3
 800eb64:	f004 f8a8 	bl	8012cb8 <VL53L0X_WrByte>
 800eb68:	0003      	movs	r3, r0
 800eb6a:	0019      	movs	r1, r3
 800eb6c:	193b      	adds	r3, r7, r4
 800eb6e:	193a      	adds	r2, r7, r4
 800eb70:	7812      	ldrb	r2, [r2, #0]
 800eb72:	430a      	orrs	r2, r1
 800eb74:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	21cd      	movs	r1, #205	; 0xcd
 800eb7c:	0018      	movs	r0, r3
 800eb7e:	f004 f89b 	bl	8012cb8 <VL53L0X_WrByte>
 800eb82:	0003      	movs	r3, r0
 800eb84:	0019      	movs	r1, r3
 800eb86:	193b      	adds	r3, r7, r4
 800eb88:	193a      	adds	r2, r7, r4
 800eb8a:	7812      	ldrb	r2, [r2, #0]
 800eb8c:	430a      	orrs	r2, r1
 800eb8e:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2211      	movs	r2, #17
 800eb94:	21cc      	movs	r1, #204	; 0xcc
 800eb96:	0018      	movs	r0, r3
 800eb98:	f004 f88e 	bl	8012cb8 <VL53L0X_WrByte>
 800eb9c:	0003      	movs	r3, r0
 800eb9e:	0019      	movs	r1, r3
 800eba0:	193b      	adds	r3, r7, r4
 800eba2:	193a      	adds	r2, r7, r4
 800eba4:	7812      	ldrb	r2, [r2, #0]
 800eba6:	430a      	orrs	r2, r1
 800eba8:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2207      	movs	r2, #7
 800ebae:	21ff      	movs	r1, #255	; 0xff
 800ebb0:	0018      	movs	r0, r3
 800ebb2:	f004 f881 	bl	8012cb8 <VL53L0X_WrByte>
 800ebb6:	0003      	movs	r3, r0
 800ebb8:	0019      	movs	r1, r3
 800ebba:	193b      	adds	r3, r7, r4
 800ebbc:	193a      	adds	r2, r7, r4
 800ebbe:	7812      	ldrb	r2, [r2, #0]
 800ebc0:	430a      	orrs	r2, r1
 800ebc2:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	21be      	movs	r1, #190	; 0xbe
 800ebca:	0018      	movs	r0, r3
 800ebcc:	f004 f874 	bl	8012cb8 <VL53L0X_WrByte>
 800ebd0:	0003      	movs	r3, r0
 800ebd2:	0019      	movs	r1, r3
 800ebd4:	193b      	adds	r3, r7, r4
 800ebd6:	193a      	adds	r2, r7, r4
 800ebd8:	7812      	ldrb	r2, [r2, #0]
 800ebda:	430a      	orrs	r2, r1
 800ebdc:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2206      	movs	r2, #6
 800ebe2:	21ff      	movs	r1, #255	; 0xff
 800ebe4:	0018      	movs	r0, r3
 800ebe6:	f004 f867 	bl	8012cb8 <VL53L0X_WrByte>
 800ebea:	0003      	movs	r3, r0
 800ebec:	0019      	movs	r1, r3
 800ebee:	193b      	adds	r3, r7, r4
 800ebf0:	193a      	adds	r2, r7, r4
 800ebf2:	7812      	ldrb	r2, [r2, #0]
 800ebf4:	430a      	orrs	r2, r1
 800ebf6:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2209      	movs	r2, #9
 800ebfc:	21cc      	movs	r1, #204	; 0xcc
 800ebfe:	0018      	movs	r0, r3
 800ec00:	f004 f85a 	bl	8012cb8 <VL53L0X_WrByte>
 800ec04:	0003      	movs	r3, r0
 800ec06:	0019      	movs	r1, r3
 800ec08:	193b      	adds	r3, r7, r4
 800ec0a:	193a      	adds	r2, r7, r4
 800ec0c:	7812      	ldrb	r2, [r2, #0]
 800ec0e:	430a      	orrs	r2, r1
 800ec10:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2200      	movs	r2, #0
 800ec16:	21ff      	movs	r1, #255	; 0xff
 800ec18:	0018      	movs	r0, r3
 800ec1a:	f004 f84d 	bl	8012cb8 <VL53L0X_WrByte>
 800ec1e:	0003      	movs	r3, r0
 800ec20:	0019      	movs	r1, r3
 800ec22:	193b      	adds	r3, r7, r4
 800ec24:	193a      	adds	r2, r7, r4
 800ec26:	7812      	ldrb	r2, [r2, #0]
 800ec28:	430a      	orrs	r2, r1
 800ec2a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	21ff      	movs	r1, #255	; 0xff
 800ec32:	0018      	movs	r0, r3
 800ec34:	f004 f840 	bl	8012cb8 <VL53L0X_WrByte>
 800ec38:	0003      	movs	r3, r0
 800ec3a:	0019      	movs	r1, r3
 800ec3c:	193b      	adds	r3, r7, r4
 800ec3e:	193a      	adds	r2, r7, r4
 800ec40:	7812      	ldrb	r2, [r2, #0]
 800ec42:	430a      	orrs	r2, r1
 800ec44:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	0018      	movs	r0, r3
 800ec4e:	f004 f833 	bl	8012cb8 <VL53L0X_WrByte>
 800ec52:	0003      	movs	r3, r0
 800ec54:	0019      	movs	r1, r3
 800ec56:	193b      	adds	r3, r7, r4
 800ec58:	193a      	adds	r2, r7, r4
 800ec5a:	7812      	ldrb	r2, [r2, #0]
 800ec5c:	430a      	orrs	r2, r1
 800ec5e:	701a      	strb	r2, [r3, #0]
 800ec60:	e077      	b.n	800ed52 <VL53L0X_SetGpioConfig+0x2fa>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800ec62:	230f      	movs	r3, #15
 800ec64:	18fb      	adds	r3, r7, r3
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	b25b      	sxtb	r3, r3
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d126      	bne.n	800ecbc <VL53L0X_SetGpioConfig+0x264>
			switch (Functionality) {
 800ec6e:	1c7b      	adds	r3, r7, #1
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	2b04      	cmp	r3, #4
 800ec74:	d81d      	bhi.n	800ecb2 <VL53L0X_SetGpioConfig+0x25a>
 800ec76:	009a      	lsls	r2, r3, #2
 800ec78:	4b3a      	ldr	r3, [pc, #232]	; (800ed64 <VL53L0X_SetGpioConfig+0x30c>)
 800ec7a:	18d3      	adds	r3, r2, r3
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	469f      	mov	pc, r3
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800ec80:	230e      	movs	r3, #14
 800ec82:	18fb      	adds	r3, r7, r3
 800ec84:	2200      	movs	r2, #0
 800ec86:	701a      	strb	r2, [r3, #0]
				break;
 800ec88:	e019      	b.n	800ecbe <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800ec8a:	230e      	movs	r3, #14
 800ec8c:	18fb      	adds	r3, r7, r3
 800ec8e:	2201      	movs	r2, #1
 800ec90:	701a      	strb	r2, [r3, #0]
				break;
 800ec92:	e014      	b.n	800ecbe <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800ec94:	230e      	movs	r3, #14
 800ec96:	18fb      	adds	r3, r7, r3
 800ec98:	2202      	movs	r2, #2
 800ec9a:	701a      	strb	r2, [r3, #0]
				break;
 800ec9c:	e00f      	b.n	800ecbe <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800ec9e:	230e      	movs	r3, #14
 800eca0:	18fb      	adds	r3, r7, r3
 800eca2:	2203      	movs	r2, #3
 800eca4:	701a      	strb	r2, [r3, #0]
				break;
 800eca6:	e00a      	b.n	800ecbe <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800eca8:	230e      	movs	r3, #14
 800ecaa:	18fb      	adds	r3, r7, r3
 800ecac:	2204      	movs	r2, #4
 800ecae:	701a      	strb	r2, [r3, #0]
				break;
 800ecb0:	e005      	b.n	800ecbe <VL53L0X_SetGpioConfig+0x266>
			default:
				Status =
 800ecb2:	230f      	movs	r3, #15
 800ecb4:	18fb      	adds	r3, r7, r3
 800ecb6:	22f5      	movs	r2, #245	; 0xf5
 800ecb8:	701a      	strb	r2, [r3, #0]
 800ecba:	e000      	b.n	800ecbe <VL53L0X_SetGpioConfig+0x266>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800ecbc:	46c0      	nop			; (mov r8, r8)

		if (Status == VL53L0X_ERROR_NONE)
 800ecbe:	220f      	movs	r2, #15
 800ecc0:	18bb      	adds	r3, r7, r2
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	b25b      	sxtb	r3, r3
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d10a      	bne.n	800ece0 <VL53L0X_SetGpioConfig+0x288>
			Status = VL53L0X_WrByte(Dev,
 800ecca:	18bc      	adds	r4, r7, r2
 800eccc:	230e      	movs	r3, #14
 800ecce:	18fb      	adds	r3, r7, r3
 800ecd0:	781a      	ldrb	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	210a      	movs	r1, #10
 800ecd6:	0018      	movs	r0, r3
 800ecd8:	f003 ffee 	bl	8012cb8 <VL53L0X_WrByte>
 800ecdc:	0003      	movs	r3, r0
 800ecde:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800ece0:	230f      	movs	r3, #15
 800ece2:	18fb      	adds	r3, r7, r3
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	b25b      	sxtb	r3, r3
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d119      	bne.n	800ed20 <VL53L0X_SetGpioConfig+0x2c8>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800ecec:	2320      	movs	r3, #32
 800ecee:	18fb      	adds	r3, r7, r3
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d104      	bne.n	800ed00 <VL53L0X_SetGpioConfig+0x2a8>
				data = 0;
 800ecf6:	230e      	movs	r3, #14
 800ecf8:	18fb      	adds	r3, r7, r3
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	701a      	strb	r2, [r3, #0]
 800ecfe:	e003      	b.n	800ed08 <VL53L0X_SetGpioConfig+0x2b0>
			else
				data = (uint8_t)(1 << 4);
 800ed00:	230e      	movs	r3, #14
 800ed02:	18fb      	adds	r3, r7, r3
 800ed04:	2210      	movs	r2, #16
 800ed06:	701a      	strb	r2, [r3, #0]

			Status = VL53L0X_UpdateByte(Dev,
 800ed08:	230f      	movs	r3, #15
 800ed0a:	18fc      	adds	r4, r7, r3
 800ed0c:	230e      	movs	r3, #14
 800ed0e:	18fb      	adds	r3, r7, r3
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	22ef      	movs	r2, #239	; 0xef
 800ed16:	2184      	movs	r1, #132	; 0x84
 800ed18:	f004 f836 	bl	8012d88 <VL53L0X_UpdateByte>
 800ed1c:	0003      	movs	r3, r0
 800ed1e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800ed20:	230f      	movs	r3, #15
 800ed22:	18fb      	adds	r3, r7, r3
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	b25b      	sxtb	r3, r3
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d104      	bne.n	800ed36 <VL53L0X_SetGpioConfig+0x2de>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	1c7a      	adds	r2, r7, #1
 800ed30:	21da      	movs	r1, #218	; 0xda
 800ed32:	7812      	ldrb	r2, [r2, #0]
 800ed34:	545a      	strb	r2, [r3, r1]
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800ed36:	220f      	movs	r2, #15
 800ed38:	18bb      	adds	r3, r7, r2
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	b25b      	sxtb	r3, r3
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d107      	bne.n	800ed52 <VL53L0X_SetGpioConfig+0x2fa>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800ed42:	18bc      	adds	r4, r7, r2
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2100      	movs	r1, #0
 800ed48:	0018      	movs	r0, r3
 800ed4a:	f000 f84f 	bl	800edec <VL53L0X_ClearInterruptMask>
 800ed4e:	0003      	movs	r3, r0
 800ed50:	7023      	strb	r3, [r4, #0]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ed52:	230f      	movs	r3, #15
 800ed54:	18fb      	adds	r3, r7, r3
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	b25b      	sxtb	r3, r3
}
 800ed5a:	0018      	movs	r0, r3
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	b005      	add	sp, #20
 800ed60:	bd90      	pop	{r4, r7, pc}
 800ed62:	46c0      	nop			; (mov r8, r8)
 800ed64:	0801b810 	.word	0x0801b810

0800ed68 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800ed68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed6a:	b087      	sub	sp, #28
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	607a      	str	r2, [r7, #4]
 800ed72:	603b      	str	r3, [r7, #0]
 800ed74:	230b      	movs	r3, #11
 800ed76:	18fb      	adds	r3, r7, r3
 800ed78:	1c0a      	adds	r2, r1, #0
 800ed7a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed7c:	2517      	movs	r5, #23
 800ed7e:	197b      	adds	r3, r7, r5
 800ed80:	2200      	movs	r2, #0
 800ed82:	701a      	strb	r2, [r3, #0]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800ed84:	197c      	adds	r4, r7, r5
 800ed86:	2614      	movs	r6, #20
 800ed88:	19ba      	adds	r2, r7, r6
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	210e      	movs	r1, #14
 800ed8e:	0018      	movs	r0, r3
 800ed90:	f004 f876 	bl	8012e80 <VL53L0X_RdWord>
 800ed94:	0003      	movs	r3, r0
 800ed96:	7023      	strb	r3, [r4, #0]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800ed98:	0031      	movs	r1, r6
 800ed9a:	187b      	adds	r3, r7, r1
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	045b      	lsls	r3, r3, #17
 800eda0:	001a      	movs	r2, r3
 800eda2:	4b11      	ldr	r3, [pc, #68]	; (800ede8 <VL53L0X_GetInterruptThresholds+0x80>)
 800eda4:	401a      	ands	r2, r3
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	601a      	str	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800edaa:	197b      	adds	r3, r7, r5
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	b25b      	sxtb	r3, r3
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d111      	bne.n	800edd8 <VL53L0X_GetInterruptThresholds+0x70>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800edb4:	197c      	adds	r4, r7, r5
 800edb6:	000d      	movs	r5, r1
 800edb8:	187a      	adds	r2, r7, r1
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	210c      	movs	r1, #12
 800edbe:	0018      	movs	r0, r3
 800edc0:	f004 f85e 	bl	8012e80 <VL53L0X_RdWord>
 800edc4:	0003      	movs	r3, r0
 800edc6:	7023      	strb	r3, [r4, #0]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800edc8:	197b      	adds	r3, r7, r5
 800edca:	881b      	ldrh	r3, [r3, #0]
 800edcc:	045b      	lsls	r3, r3, #17
 800edce:	001a      	movs	r2, r3
 800edd0:	4b05      	ldr	r3, [pc, #20]	; (800ede8 <VL53L0X_GetInterruptThresholds+0x80>)
 800edd2:	401a      	ands	r2, r3
		*pThresholdHigh =
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800edd8:	2317      	movs	r3, #23
 800edda:	18fb      	adds	r3, r7, r3
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	b25b      	sxtb	r3, r3
}
 800ede0:	0018      	movs	r0, r3
 800ede2:	46bd      	mov	sp, r7
 800ede4:	b007      	add	sp, #28
 800ede6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ede8:	1ffe0000 	.word	0x1ffe0000

0800edec <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800edec:	b5b0      	push	{r4, r5, r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800edf6:	230f      	movs	r3, #15
 800edf8:	18fb      	adds	r3, r7, r3
 800edfa:	2200      	movs	r2, #0
 800edfc:	701a      	strb	r2, [r3, #0]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800edfe:	230e      	movs	r3, #14
 800ee00:	18fb      	adds	r3, r7, r3
 800ee02:	2200      	movs	r2, #0
 800ee04:	701a      	strb	r2, [r3, #0]
	do {
		Status = VL53L0X_WrByte(Dev,
 800ee06:	250f      	movs	r5, #15
 800ee08:	197c      	adds	r4, r7, r5
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	210b      	movs	r1, #11
 800ee10:	0018      	movs	r0, r3
 800ee12:	f003 ff51 	bl	8012cb8 <VL53L0X_WrByte>
 800ee16:	0003      	movs	r3, r0
 800ee18:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	210b      	movs	r1, #11
 800ee20:	0018      	movs	r0, r3
 800ee22:	f003 ff49 	bl	8012cb8 <VL53L0X_WrByte>
 800ee26:	0003      	movs	r3, r0
 800ee28:	0019      	movs	r1, r3
 800ee2a:	002c      	movs	r4, r5
 800ee2c:	193b      	adds	r3, r7, r4
 800ee2e:	193a      	adds	r2, r7, r4
 800ee30:	7812      	ldrb	r2, [r2, #0]
 800ee32:	430a      	orrs	r2, r1
 800ee34:	701a      	strb	r2, [r3, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800ee36:	250d      	movs	r5, #13
 800ee38:	197a      	adds	r2, r7, r5
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2113      	movs	r1, #19
 800ee3e:	0018      	movs	r0, r3
 800ee40:	f003 ffe9 	bl	8012e16 <VL53L0X_RdByte>
 800ee44:	0003      	movs	r3, r0
 800ee46:	0019      	movs	r1, r3
 800ee48:	0020      	movs	r0, r4
 800ee4a:	183b      	adds	r3, r7, r0
 800ee4c:	183a      	adds	r2, r7, r0
 800ee4e:	7812      	ldrb	r2, [r2, #0]
 800ee50:	430a      	orrs	r2, r1
 800ee52:	701a      	strb	r2, [r3, #0]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800ee54:	210e      	movs	r1, #14
 800ee56:	187b      	adds	r3, r7, r1
 800ee58:	781a      	ldrb	r2, [r3, #0]
 800ee5a:	187b      	adds	r3, r7, r1
 800ee5c:	3201      	adds	r2, #1
 800ee5e:	701a      	strb	r2, [r3, #0]
	} while (((Byte & 0x07) != 0x00)
 800ee60:	197b      	adds	r3, r7, r5
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	001a      	movs	r2, r3
 800ee66:	2307      	movs	r3, #7
 800ee68:	4013      	ands	r3, r2
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800ee6a:	d008      	beq.n	800ee7e <VL53L0X_ClearInterruptMask+0x92>
			&& (LoopCount < 3)
 800ee6c:	187b      	adds	r3, r7, r1
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d804      	bhi.n	800ee7e <VL53L0X_ClearInterruptMask+0x92>
			&& (Status == VL53L0X_ERROR_NONE));
 800ee74:	183b      	adds	r3, r7, r0
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	b25b      	sxtb	r3, r3
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d0c3      	beq.n	800ee06 <VL53L0X_ClearInterruptMask+0x1a>


	if (LoopCount >= 3)
 800ee7e:	230e      	movs	r3, #14
 800ee80:	18fb      	adds	r3, r7, r3
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	2b02      	cmp	r3, #2
 800ee86:	d903      	bls.n	800ee90 <VL53L0X_ClearInterruptMask+0xa4>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800ee88:	230f      	movs	r3, #15
 800ee8a:	18fb      	adds	r3, r7, r3
 800ee8c:	22f4      	movs	r2, #244	; 0xf4
 800ee8e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800ee90:	230f      	movs	r3, #15
 800ee92:	18fb      	adds	r3, r7, r3
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	b25b      	sxtb	r3, r3
}
 800ee98:	0018      	movs	r0, r3
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	b004      	add	sp, #16
 800ee9e:	bdb0      	pop	{r4, r5, r7, pc}

0800eea0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800eea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eeaa:	250f      	movs	r5, #15
 800eeac:	197b      	adds	r3, r7, r5
 800eeae:	2200      	movs	r2, #0
 800eeb0:	701a      	strb	r2, [r3, #0]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800eeb2:	197c      	adds	r4, r7, r5
 800eeb4:	260e      	movs	r6, #14
 800eeb6:	19ba      	adds	r2, r7, r6
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2113      	movs	r1, #19
 800eebc:	0018      	movs	r0, r3
 800eebe:	f003 ffaa 	bl	8012e16 <VL53L0X_RdByte>
 800eec2:	0003      	movs	r3, r0
 800eec4:	7023      	strb	r3, [r4, #0]
	*pInterruptMaskStatus = Byte & 0x07;
 800eec6:	0031      	movs	r1, r6
 800eec8:	187b      	adds	r3, r7, r1
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	001a      	movs	r2, r3
 800eece:	2307      	movs	r3, #7
 800eed0:	401a      	ands	r2, r3
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800eed6:	187b      	adds	r3, r7, r1
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	001a      	movs	r2, r3
 800eedc:	2318      	movs	r3, #24
 800eede:	4013      	ands	r3, r2
 800eee0:	d002      	beq.n	800eee8 <VL53L0X_GetInterruptMaskStatus+0x48>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800eee2:	197b      	adds	r3, r7, r5
 800eee4:	22fa      	movs	r2, #250	; 0xfa
 800eee6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800eee8:	230f      	movs	r3, #15
 800eeea:	18fb      	adds	r3, r7, r3
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	b25b      	sxtb	r3, r3
}
 800eef0:	0018      	movs	r0, r3
 800eef2:	46bd      	mov	sp, r7
 800eef4:	b005      	add	sp, #20
 800eef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eef8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800eef8:	b5b0      	push	{r4, r5, r7, lr}
 800eefa:	b086      	sub	sp, #24
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ef04:	2517      	movs	r5, #23
 800ef06:	197b      	adds	r3, r7, r5
 800ef08:	2200      	movs	r2, #0
 800ef0a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800ef0c:	197c      	adds	r4, r7, r5
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	68b9      	ldr	r1, [r7, #8]
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	0018      	movs	r0, r3
 800ef16:	f000 fa58 	bl	800f3ca <VL53L0X_perform_ref_spad_management>
 800ef1a:	0003      	movs	r3, r0
 800ef1c:	7023      	strb	r3, [r4, #0]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800ef1e:	197b      	adds	r3, r7, r5
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	b25b      	sxtb	r3, r3
}
 800ef24:	0018      	movs	r0, r3
 800ef26:	46bd      	mov	sp, r7
 800ef28:	b006      	add	sp, #24
 800ef2a:	bdb0      	pop	{r4, r5, r7, pc}

0800ef2c <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800ef2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ef36:	210f      	movs	r1, #15
 800ef38:	187b      	adds	r3, r7, r1
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	701a      	strb	r2, [r3, #0]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800ef3e:	230c      	movs	r3, #12
 800ef40:	18fb      	adds	r3, r7, r3
 800ef42:	4a23      	ldr	r2, [pc, #140]	; (800efd0 <VL53L0X_get_offset_calibration_data_micro_meter+0xa4>)
 800ef44:	801a      	strh	r2, [r3, #0]
	int16_t cOffsetRange = 4096;
 800ef46:	220a      	movs	r2, #10
 800ef48:	18bb      	adds	r3, r7, r2
 800ef4a:	2280      	movs	r2, #128	; 0x80
 800ef4c:	0152      	lsls	r2, r2, #5
 800ef4e:	801a      	strh	r2, [r3, #0]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800ef50:	000e      	movs	r6, r1
 800ef52:	187c      	adds	r4, r7, r1
 800ef54:	2508      	movs	r5, #8
 800ef56:	197a      	adds	r2, r7, r5
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2128      	movs	r1, #40	; 0x28
 800ef5c:	0018      	movs	r0, r3
 800ef5e:	f003 ff8f 	bl	8012e80 <VL53L0X_RdWord>
 800ef62:	0003      	movs	r3, r0
 800ef64:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800ef66:	19bb      	adds	r3, r7, r6
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	b25b      	sxtb	r3, r3
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d127      	bne.n	800efc0 <VL53L0X_get_offset_calibration_data_micro_meter+0x94>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800ef70:	197b      	adds	r3, r7, r5
 800ef72:	881b      	ldrh	r3, [r3, #0]
 800ef74:	051b      	lsls	r3, r3, #20
 800ef76:	0d1b      	lsrs	r3, r3, #20
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	197b      	adds	r3, r7, r5
 800ef7c:	801a      	strh	r2, [r3, #0]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800ef7e:	0029      	movs	r1, r5
 800ef80:	197b      	adds	r3, r7, r5
 800ef82:	881b      	ldrh	r3, [r3, #0]
 800ef84:	001a      	movs	r2, r3
 800ef86:	230c      	movs	r3, #12
 800ef88:	18fb      	adds	r3, r7, r3
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	5e1b      	ldrsh	r3, [r3, r0]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	dd0d      	ble.n	800efae <VL53L0X_get_offset_calibration_data_micro_meter+0x82>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800ef92:	187b      	adds	r3, r7, r1
 800ef94:	881a      	ldrh	r2, [r3, #0]
 800ef96:	230a      	movs	r3, #10
 800ef98:	18fb      	adds	r3, r7, r3
 800ef9a:	881b      	ldrh	r3, [r3, #0]
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	b21b      	sxth	r3, r3
 800efa2:	001a      	movs	r2, r3
					* 250;
 800efa4:	23fa      	movs	r3, #250	; 0xfa
 800efa6:	435a      	muls	r2, r3
			*pOffsetCalibrationDataMicroMeter =
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	601a      	str	r2, [r3, #0]
 800efac:	e008      	b.n	800efc0 <VL53L0X_get_offset_calibration_data_micro_meter+0x94>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800efae:	2308      	movs	r3, #8
 800efb0:	18fb      	adds	r3, r7, r3
 800efb2:	881b      	ldrh	r3, [r3, #0]
 800efb4:	b21b      	sxth	r3, r3
 800efb6:	001a      	movs	r2, r3
 800efb8:	23fa      	movs	r3, #250	; 0xfa
 800efba:	435a      	muls	r2, r3
			*pOffsetCalibrationDataMicroMeter =
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800efc0:	230f      	movs	r3, #15
 800efc2:	18fb      	adds	r3, r7, r3
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	b25b      	sxtb	r3, r3
}
 800efc8:	0018      	movs	r0, r3
 800efca:	46bd      	mov	sp, r7
 800efcc:	b005      	add	sp, #20
 800efce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd0:	000007ff 	.word	0x000007ff

0800efd4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b08a      	sub	sp, #40	; 0x28
 800efd8:	af00      	add	r7, sp, #0
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	607a      	str	r2, [r7, #4]
 800efe0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800efe2:	2308      	movs	r3, #8
 800efe4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800efe6:	231e      	movs	r3, #30
 800efe8:	18fb      	adds	r3, r7, r3
 800efea:	2200      	movs	r2, #0
 800efec:	701a      	strb	r2, [r3, #0]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	2201      	movs	r2, #1
 800eff2:	4252      	negs	r2, r2
 800eff4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800eff6:	69b9      	ldr	r1, [r7, #24]
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f7f1 f8ab 	bl	8000154 <__udivsi3>
 800effe:	0003      	movs	r3, r0
 800f000:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	69b9      	ldr	r1, [r7, #24]
 800f006:	0018      	movs	r0, r3
 800f008:	f7f1 f92a 	bl	8000260 <__aeabi_uidivmod>
 800f00c:	000b      	movs	r3, r1
 800f00e:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	627b      	str	r3, [r7, #36]	; 0x24
 800f014:	e038      	b.n	800f088 <get_next_good_spad+0xb4>
				coarseIndex++) {
		fineIndex = 0;
 800f016:	2300      	movs	r3, #0
 800f018:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800f01a:	68fa      	ldr	r2, [r7, #12]
 800f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01e:	18d2      	adds	r2, r2, r3
 800f020:	211f      	movs	r1, #31
 800f022:	187b      	adds	r3, r7, r1
 800f024:	7812      	ldrb	r2, [r2, #0]
 800f026:	701a      	strb	r2, [r3, #0]

		if (coarseIndex == startIndex) {
 800f028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d124      	bne.n	800f07a <get_next_good_spad+0xa6>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800f030:	187b      	adds	r3, r7, r1
 800f032:	781a      	ldrb	r2, [r3, #0]
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	411a      	asrs	r2, r3
 800f038:	187b      	adds	r3, r7, r1
 800f03a:	701a      	strb	r2, [r3, #0]
			fineIndex = fineOffset;
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800f040:	e01b      	b.n	800f07a <get_next_good_spad+0xa6>
			if ((dataByte & 0x1) == 1) {
 800f042:	231f      	movs	r3, #31
 800f044:	18fb      	adds	r3, r7, r3
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	2201      	movs	r2, #1
 800f04a:	4013      	ands	r3, r2
 800f04c:	d00c      	beq.n	800f068 <get_next_good_spad+0x94>
				success = 1;
 800f04e:	231e      	movs	r3, #30
 800f050:	18fb      	adds	r3, r7, r3
 800f052:	2201      	movs	r2, #1
 800f054:	701a      	strb	r2, [r3, #0]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800f056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f058:	69ba      	ldr	r2, [r7, #24]
 800f05a:	435a      	muls	r2, r3
 800f05c:	6a3b      	ldr	r3, [r7, #32]
 800f05e:	18d3      	adds	r3, r2, r3
 800f060:	001a      	movs	r2, r3
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	601a      	str	r2, [r3, #0]
				break;
 800f066:	e00c      	b.n	800f082 <get_next_good_spad+0xae>
			}
			dataByte >>= 1;
 800f068:	221f      	movs	r2, #31
 800f06a:	18bb      	adds	r3, r7, r2
 800f06c:	18ba      	adds	r2, r7, r2
 800f06e:	7812      	ldrb	r2, [r2, #0]
 800f070:	0852      	lsrs	r2, r2, #1
 800f072:	701a      	strb	r2, [r3, #0]
			fineIndex++;
 800f074:	6a3b      	ldr	r3, [r7, #32]
 800f076:	3301      	adds	r3, #1
 800f078:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800f07a:	6a3a      	ldr	r2, [r7, #32]
 800f07c:	69bb      	ldr	r3, [r7, #24]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d3df      	bcc.n	800f042 <get_next_good_spad+0x6e>
				coarseIndex++) {
 800f082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f084:	3301      	adds	r3, #1
 800f086:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800f088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d204      	bcs.n	800f09a <get_next_good_spad+0xc6>
 800f090:	231e      	movs	r3, #30
 800f092:	18fb      	adds	r3, r7, r3
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d0bd      	beq.n	800f016 <get_next_good_spad+0x42>
		}
	}
}
 800f09a:	46c0      	nop			; (mov r8, r8)
 800f09c:	46bd      	mov	sp, r7
 800f09e:	b00a      	add	sp, #40	; 0x28
 800f0a0:	bd80      	pop	{r7, pc}
	...

0800f0a4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800f0ac:	210f      	movs	r1, #15
 800f0ae:	187b      	adds	r3, r7, r1
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	701a      	strb	r2, [r3, #0]
	quadrant = spadIndex >> 6;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	099b      	lsrs	r3, r3, #6
 800f0b8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800f0ba:	4b08      	ldr	r3, [pc, #32]	; (800f0dc <is_aperture+0x38>)
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	0092      	lsls	r2, r2, #2
 800f0c0:	58d3      	ldr	r3, [r2, r3]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d102      	bne.n	800f0cc <is_aperture+0x28>
		isAperture = 0;
 800f0c6:	187b      	adds	r3, r7, r1
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	701a      	strb	r2, [r3, #0]

	return isAperture;
 800f0cc:	230f      	movs	r3, #15
 800f0ce:	18fb      	adds	r3, r7, r3
 800f0d0:	781b      	ldrb	r3, [r3, #0]
}
 800f0d2:	0018      	movs	r0, r3
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	b004      	add	sp, #16
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	46c0      	nop			; (mov r8, r8)
 800f0dc:	200002c4 	.word	0x200002c4

0800f0e0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800f0e0:	b590      	push	{r4, r7, lr}
 800f0e2:	b089      	sub	sp, #36	; 0x24
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800f0ec:	241f      	movs	r4, #31
 800f0ee:	193b      	adds	r3, r7, r4
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	701a      	strb	r2, [r3, #0]
	uint32_t cSpadsPerByte = 8;
 800f0f4:	2308      	movs	r3, #8
 800f0f6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800f0f8:	69b9      	ldr	r1, [r7, #24]
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f7f1 f82a 	bl	8000154 <__udivsi3>
 800f100:	0003      	movs	r3, r0
 800f102:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	69b9      	ldr	r1, [r7, #24]
 800f108:	0018      	movs	r0, r3
 800f10a:	f7f1 f8a9 	bl	8000260 <__aeabi_uidivmod>
 800f10e:	000b      	movs	r3, r1
 800f110:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800f112:	697a      	ldr	r2, [r7, #20]
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	429a      	cmp	r2, r3
 800f118:	d303      	bcc.n	800f122 <enable_spad_bit+0x42>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800f11a:	193b      	adds	r3, r7, r4
 800f11c:	22ce      	movs	r2, #206	; 0xce
 800f11e:	701a      	strb	r2, [r3, #0]
 800f120:	e010      	b.n	800f144 <enable_spad_bit+0x64>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	18d3      	adds	r3, r2, r3
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	b25a      	sxtb	r2, r3
 800f12c:	2101      	movs	r1, #1
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	4099      	lsls	r1, r3
 800f132:	000b      	movs	r3, r1
 800f134:	b25b      	sxtb	r3, r3
 800f136:	4313      	orrs	r3, r2
 800f138:	b259      	sxtb	r1, r3
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	18d3      	adds	r3, r2, r3
 800f140:	b2ca      	uxtb	r2, r1
 800f142:	701a      	strb	r2, [r3, #0]

	return status;
 800f144:	231f      	movs	r3, #31
 800f146:	18fb      	adds	r3, r7, r3
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	b25b      	sxtb	r3, r3
}
 800f14c:	0018      	movs	r0, r3
 800f14e:	46bd      	mov	sp, r7
 800f150:	b009      	add	sp, #36	; 0x24
 800f152:	bd90      	pop	{r4, r7, pc}

0800f154 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800f154:	b5b0      	push	{r4, r5, r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800f15e:	250f      	movs	r5, #15
 800f160:	197c      	adds	r4, r7, r5
 800f162:	683a      	ldr	r2, [r7, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	2306      	movs	r3, #6
 800f168:	21b0      	movs	r1, #176	; 0xb0
 800f16a:	f003 fd33 	bl	8012bd4 <VL53L0X_WriteMulti>
 800f16e:	0003      	movs	r3, r0
 800f170:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800f172:	197b      	adds	r3, r7, r5
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	b25b      	sxtb	r3, r3
}
 800f178:	0018      	movs	r0, r3
 800f17a:	46bd      	mov	sp, r7
 800f17c:	b004      	add	sp, #16
 800f17e:	bdb0      	pop	{r4, r5, r7, pc}

0800f180 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800f180:	b5b0      	push	{r4, r5, r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800f18a:	250f      	movs	r5, #15
 800f18c:	197c      	adds	r4, r7, r5
 800f18e:	683a      	ldr	r2, [r7, #0]
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	2306      	movs	r3, #6
 800f194:	21b0      	movs	r1, #176	; 0xb0
 800f196:	f003 fd59 	bl	8012c4c <VL53L0X_ReadMulti>
 800f19a:	0003      	movs	r3, r0
 800f19c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800f19e:	197b      	adds	r3, r7, r5
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	b25b      	sxtb	r3, r3
}
 800f1a4:	0018      	movs	r0, r3
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	b004      	add	sp, #16
 800f1aa:	bdb0      	pop	{r4, r5, r7, pc}

0800f1ac <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800f1ac:	b590      	push	{r4, r7, lr}
 800f1ae:	b08d      	sub	sp, #52	; 0x34
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	607a      	str	r2, [r7, #4]
 800f1b6:	603b      	str	r3, [r7, #0]
 800f1b8:	230b      	movs	r3, #11
 800f1ba:	18fb      	adds	r3, r7, r3
 800f1bc:	1c0a      	adds	r2, r1, #0
 800f1be:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800f1c0:	232f      	movs	r3, #47	; 0x2f
 800f1c2:	18fb      	adds	r3, r7, r3
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	701a      	strb	r2, [r3, #0]
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800f1c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1ca:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800f1cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1ce:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1d4:	e02f      	b.n	800f236 <enable_ref_spads+0x8a>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800f1d6:	231c      	movs	r3, #28
 800f1d8:	18fb      	adds	r3, r7, r3
 800f1da:	6a3a      	ldr	r2, [r7, #32]
 800f1dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f7ff fef8 	bl	800efd4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	d104      	bne.n	800f1f4 <enable_ref_spads+0x48>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800f1ea:	232f      	movs	r3, #47	; 0x2f
 800f1ec:	18fb      	adds	r3, r7, r3
 800f1ee:	22ce      	movs	r2, #206	; 0xce
 800f1f0:	701a      	strb	r2, [r3, #0]
			break;
 800f1f2:	e024      	b.n	800f23e <enable_ref_spads+0x92>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	001a      	movs	r2, r3
 800f1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1fa:	18d3      	adds	r3, r2, r3
 800f1fc:	0018      	movs	r0, r3
 800f1fe:	f7ff ff51 	bl	800f0a4 <is_aperture>
 800f202:	0003      	movs	r3, r0
 800f204:	001a      	movs	r2, r3
 800f206:	230b      	movs	r3, #11
 800f208:	18fb      	adds	r3, r7, r3
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d004      	beq.n	800f21a <enable_ref_spads+0x6e>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800f210:	232f      	movs	r3, #47	; 0x2f
 800f212:	18fb      	adds	r3, r7, r3
 800f214:	22ce      	movs	r2, #206	; 0xce
 800f216:	701a      	strb	r2, [r3, #0]
			break;
 800f218:	e011      	b.n	800f23e <enable_ref_spads+0x92>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800f21e:	6a3a      	ldr	r2, [r7, #32]
 800f220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	0018      	movs	r0, r3
 800f226:	f7ff ff5b 	bl	800f0e0 <enable_spad_bit>
		currentSpad++;
 800f22a:	6a3b      	ldr	r3, [r7, #32]
 800f22c:	3301      	adds	r3, #1
 800f22e:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800f230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f232:	3301      	adds	r3, #1
 800f234:	62bb      	str	r3, [r7, #40]	; 0x28
 800f236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d3cb      	bcc.n	800f1d6 <enable_ref_spads+0x2a>
	}
	*lastSpad = currentSpad;
 800f23e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f240:	6a3a      	ldr	r2, [r7, #32]
 800f242:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800f244:	222f      	movs	r2, #47	; 0x2f
 800f246:	18bb      	adds	r3, r7, r2
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	b25b      	sxtb	r3, r3
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d108      	bne.n	800f262 <enable_ref_spads+0xb6>
		status = set_ref_spad_map(Dev, spadArray);
 800f250:	18bc      	adds	r4, r7, r2
 800f252:	683a      	ldr	r2, [r7, #0]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	0011      	movs	r1, r2
 800f258:	0018      	movs	r0, r3
 800f25a:	f7ff ff7b 	bl	800f154 <set_ref_spad_map>
 800f25e:	0003      	movs	r3, r0
 800f260:	7023      	strb	r3, [r4, #0]


	if (status == VL53L0X_ERROR_NONE) {
 800f262:	222f      	movs	r2, #47	; 0x2f
 800f264:	18bb      	adds	r3, r7, r2
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	b25b      	sxtb	r3, r3
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d123      	bne.n	800f2b6 <enable_ref_spads+0x10a>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800f26e:	18bc      	adds	r4, r7, r2
 800f270:	2314      	movs	r3, #20
 800f272:	18fa      	adds	r2, r7, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	0011      	movs	r1, r2
 800f278:	0018      	movs	r0, r3
 800f27a:	f7ff ff81 	bl	800f180 <get_ref_spad_map>
 800f27e:	0003      	movs	r3, r0
 800f280:	7023      	strb	r3, [r4, #0]

		i = 0;
 800f282:	2300      	movs	r3, #0
 800f284:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800f286:	e012      	b.n	800f2ae <enable_ref_spads+0x102>
			if (spadArray[i] != checkSpadArray[i]) {
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28c:	18d3      	adds	r3, r2, r3
 800f28e:	781a      	ldrb	r2, [r3, #0]
 800f290:	2314      	movs	r3, #20
 800f292:	18f9      	adds	r1, r7, r3
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	18cb      	adds	r3, r1, r3
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d004      	beq.n	800f2a8 <enable_ref_spads+0xfc>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800f29e:	232f      	movs	r3, #47	; 0x2f
 800f2a0:	18fb      	adds	r3, r7, r3
 800f2a2:	22ce      	movs	r2, #206	; 0xce
 800f2a4:	701a      	strb	r2, [r3, #0]
				break;
 800f2a6:	e006      	b.n	800f2b6 <enable_ref_spads+0x10a>
			}
			i++;
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800f2ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d3e8      	bcc.n	800f288 <enable_ref_spads+0xdc>
		}
	}
	return status;
 800f2b6:	232f      	movs	r3, #47	; 0x2f
 800f2b8:	18fb      	adds	r3, r7, r3
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	b25b      	sxtb	r3, r3
}
 800f2be:	0018      	movs	r0, r3
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	b00d      	add	sp, #52	; 0x34
 800f2c4:	bd90      	pop	{r4, r7, pc}

0800f2c6 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800f2c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2c8:	b08b      	sub	sp, #44	; 0x2c
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
 800f2ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800f2d0:	2027      	movs	r0, #39	; 0x27
 800f2d2:	183b      	adds	r3, r7, r0
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	701a      	strb	r2, [r3, #0]
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800f2d8:	2126      	movs	r1, #38	; 0x26
 800f2da:	187b      	adds	r3, r7, r1
 800f2dc:	2200      	movs	r2, #0
 800f2de:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800f2e0:	187b      	adds	r3, r7, r1
 800f2e2:	6879      	ldr	r1, [r7, #4]
 800f2e4:	2298      	movs	r2, #152	; 0x98
 800f2e6:	0052      	lsls	r2, r2, #1
 800f2e8:	5c8a      	ldrb	r2, [r1, r2]
 800f2ea:	701a      	strb	r2, [r3, #0]

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800f2ec:	183b      	adds	r3, r7, r0
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	b25b      	sxtb	r3, r3
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d108      	bne.n	800f308 <perform_ref_signal_measurement+0x42>
		status = VL53L0X_WrByte(Dev,
 800f2f6:	183c      	adds	r4, r7, r0
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	22c0      	movs	r2, #192	; 0xc0
 800f2fc:	2101      	movs	r1, #1
 800f2fe:	0018      	movs	r0, r3
 800f300:	f003 fcda 	bl	8012cb8 <VL53L0X_WrByte>
 800f304:	0003      	movs	r3, r0
 800f306:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800f308:	2227      	movs	r2, #39	; 0x27
 800f30a:	18bb      	adds	r3, r7, r2
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	b25b      	sxtb	r3, r3
 800f310:	2b00      	cmp	r3, #0
 800f312:	d109      	bne.n	800f328 <perform_ref_signal_measurement+0x62>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800f314:	18bc      	adds	r4, r7, r2
 800f316:	2308      	movs	r3, #8
 800f318:	18fa      	adds	r2, r7, r3
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	0011      	movs	r1, r2
 800f31e:	0018      	movs	r0, r3
 800f320:	f7ff fb58 	bl	800e9d4 <VL53L0X_PerformSingleRangingMeasurement>
 800f324:	0003      	movs	r3, r0
 800f326:	7023      	strb	r3, [r4, #0]
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800f328:	2227      	movs	r2, #39	; 0x27
 800f32a:	18bb      	adds	r3, r7, r2
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	b25b      	sxtb	r3, r3
 800f330:	2b00      	cmp	r3, #0
 800f332:	d108      	bne.n	800f346 <perform_ref_signal_measurement+0x80>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f334:	18bc      	adds	r4, r7, r2
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	21ff      	movs	r1, #255	; 0xff
 800f33c:	0018      	movs	r0, r3
 800f33e:	f003 fcbb 	bl	8012cb8 <VL53L0X_WrByte>
 800f342:	0003      	movs	r3, r0
 800f344:	7023      	strb	r3, [r4, #0]

	if (status == VL53L0X_ERROR_NONE)
 800f346:	2227      	movs	r2, #39	; 0x27
 800f348:	18bb      	adds	r3, r7, r2
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	b25b      	sxtb	r3, r3
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d108      	bne.n	800f364 <perform_ref_signal_measurement+0x9e>
		status = VL53L0X_RdWord(Dev,
 800f352:	18bc      	adds	r4, r7, r2
 800f354:	683a      	ldr	r2, [r7, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	21b6      	movs	r1, #182	; 0xb6
 800f35a:	0018      	movs	r0, r3
 800f35c:	f003 fd90 	bl	8012e80 <VL53L0X_RdWord>
 800f360:	0003      	movs	r3, r0
 800f362:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800f364:	2227      	movs	r2, #39	; 0x27
 800f366:	18bb      	adds	r3, r7, r2
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	b25b      	sxtb	r3, r3
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d108      	bne.n	800f382 <perform_ref_signal_measurement+0xbc>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f370:	18bc      	adds	r4, r7, r2
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	21ff      	movs	r1, #255	; 0xff
 800f378:	0018      	movs	r0, r3
 800f37a:	f003 fc9d 	bl	8012cb8 <VL53L0X_WrByte>
 800f37e:	0003      	movs	r3, r0
 800f380:	7023      	strb	r3, [r4, #0]

	if (status == VL53L0X_ERROR_NONE) {
 800f382:	2527      	movs	r5, #39	; 0x27
 800f384:	197b      	adds	r3, r7, r5
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	b25b      	sxtb	r3, r3
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d115      	bne.n	800f3ba <perform_ref_signal_measurement+0xf4>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800f38e:	197c      	adds	r4, r7, r5
 800f390:	2626      	movs	r6, #38	; 0x26
 800f392:	19bb      	adds	r3, r7, r6
 800f394:	781a      	ldrb	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2101      	movs	r1, #1
 800f39a:	0018      	movs	r0, r3
 800f39c:	f003 fc8c 	bl	8012cb8 <VL53L0X_WrByte>
 800f3a0:	0003      	movs	r3, r0
 800f3a2:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800f3a4:	197b      	adds	r3, r7, r5
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	b25b      	sxtb	r3, r3
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d105      	bne.n	800f3ba <perform_ref_signal_measurement+0xf4>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	19b9      	adds	r1, r7, r6
 800f3b2:	2398      	movs	r3, #152	; 0x98
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	7809      	ldrb	r1, [r1, #0]
 800f3b8:	54d1      	strb	r1, [r2, r3]
	}

	return status;
 800f3ba:	2327      	movs	r3, #39	; 0x27
 800f3bc:	18fb      	adds	r3, r7, r3
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	b25b      	sxtb	r3, r3
}
 800f3c2:	0018      	movs	r0, r3
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	b00b      	add	sp, #44	; 0x2c
 800f3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f3ca <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800f3ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3cc:	b09d      	sub	sp, #116	; 0x74
 800f3ce:	af06      	add	r7, sp, #24
 800f3d0:	60f8      	str	r0, [r7, #12]
 800f3d2:	60b9      	str	r1, [r7, #8]
 800f3d4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f3d6:	2357      	movs	r3, #87	; 0x57
 800f3d8:	18fb      	adds	r3, r7, r3
 800f3da:	2200      	movs	r2, #0
 800f3dc:	701a      	strb	r2, [r3, #0]
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800f3de:	233a      	movs	r3, #58	; 0x3a
 800f3e0:	18fb      	adds	r3, r7, r3
 800f3e2:	22b4      	movs	r2, #180	; 0xb4
 800f3e4:	701a      	strb	r2, [r3, #0]
	uint32_t minimumSpadCount = 3;
 800f3e6:	2303      	movs	r3, #3
 800f3e8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800f3ea:	232c      	movs	r3, #44	; 0x2c
 800f3ec:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800f3fa:	212e      	movs	r1, #46	; 0x2e
 800f3fc:	187b      	adds	r3, r7, r1
 800f3fe:	22a0      	movs	r2, #160	; 0xa0
 800f400:	0112      	lsls	r2, r2, #4
 800f402:	801a      	strh	r2, [r3, #0]
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800f40c:	2306      	movs	r3, #6
 800f40e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800f410:	2300      	movs	r3, #0
 800f412:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800f414:	2300      	movs	r3, #0
 800f416:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800f418:	2343      	movs	r3, #67	; 0x43
 800f41a:	18fb      	adds	r3, r7, r3
 800f41c:	2200      	movs	r2, #0
 800f41e:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800f420:	2311      	movs	r3, #17
 800f422:	18fb      	adds	r3, r7, r3
 800f424:	2200      	movs	r2, #0
 800f426:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800f428:	2310      	movs	r3, #16
 800f42a:	18fb      	adds	r3, r7, r3
 800f42c:	2200      	movs	r2, #0
 800f42e:	701a      	strb	r2, [r3, #0]
	uint32_t refSpadCount_int = 0;
 800f430:	2300      	movs	r3, #0
 800f432:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800f434:	233b      	movs	r3, #59	; 0x3b
 800f436:	18fb      	adds	r3, r7, r3
 800f438:	2200      	movs	r2, #0
 800f43a:	701a      	strb	r2, [r3, #0]
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800f43c:	187b      	adds	r3, r7, r1
 800f43e:	68f9      	ldr	r1, [r7, #12]
 800f440:	229e      	movs	r2, #158	; 0x9e
 800f442:	0052      	lsls	r2, r2, #1
 800f444:	5a8a      	ldrh	r2, [r1, r2]
 800f446:	801a      	strh	r2, [r3, #0]
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800f448:	2300      	movs	r3, #0
 800f44a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f44c:	e00a      	b.n	800f464 <VL53L0X_perform_ref_spad_management+0x9a>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800f44e:	68f9      	ldr	r1, [r7, #12]
 800f450:	2392      	movs	r3, #146	; 0x92
 800f452:	005b      	lsls	r3, r3, #1
 800f454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f456:	188a      	adds	r2, r1, r2
 800f458:	18d3      	adds	r3, r2, r3
 800f45a:	2200      	movs	r2, #0
 800f45c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800f45e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f460:	3301      	adds	r3, #1
 800f462:	64bb      	str	r3, [r7, #72]	; 0x48
 800f464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f468:	429a      	cmp	r2, r3
 800f46a:	d3f0      	bcc.n	800f44e <VL53L0X_perform_ref_spad_management+0x84>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f46c:	2557      	movs	r5, #87	; 0x57
 800f46e:	197c      	adds	r4, r7, r5
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2201      	movs	r2, #1
 800f474:	21ff      	movs	r1, #255	; 0xff
 800f476:	0018      	movs	r0, r3
 800f478:	f003 fc1e 	bl	8012cb8 <VL53L0X_WrByte>
 800f47c:	0003      	movs	r3, r0
 800f47e:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800f480:	197b      	adds	r3, r7, r5
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	b25b      	sxtb	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d108      	bne.n	800f49c <VL53L0X_perform_ref_spad_management+0xd2>
		Status = VL53L0X_WrByte(Dev,
 800f48a:	197c      	adds	r4, r7, r5
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2200      	movs	r2, #0
 800f490:	214f      	movs	r1, #79	; 0x4f
 800f492:	0018      	movs	r0, r3
 800f494:	f003 fc10 	bl	8012cb8 <VL53L0X_WrByte>
 800f498:	0003      	movs	r3, r0
 800f49a:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800f49c:	2257      	movs	r2, #87	; 0x57
 800f49e:	18bb      	adds	r3, r7, r2
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	b25b      	sxtb	r3, r3
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d108      	bne.n	800f4ba <VL53L0X_perform_ref_spad_management+0xf0>
		Status = VL53L0X_WrByte(Dev,
 800f4a8:	18bc      	adds	r4, r7, r2
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	222c      	movs	r2, #44	; 0x2c
 800f4ae:	214e      	movs	r1, #78	; 0x4e
 800f4b0:	0018      	movs	r0, r3
 800f4b2:	f003 fc01 	bl	8012cb8 <VL53L0X_WrByte>
 800f4b6:	0003      	movs	r3, r0
 800f4b8:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800f4ba:	2257      	movs	r2, #87	; 0x57
 800f4bc:	18bb      	adds	r3, r7, r2
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	b25b      	sxtb	r3, r3
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d108      	bne.n	800f4d8 <VL53L0X_perform_ref_spad_management+0x10e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f4c6:	18bc      	adds	r4, r7, r2
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	21ff      	movs	r1, #255	; 0xff
 800f4ce:	0018      	movs	r0, r3
 800f4d0:	f003 fbf2 	bl	8012cb8 <VL53L0X_WrByte>
 800f4d4:	0003      	movs	r3, r0
 800f4d6:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800f4d8:	2257      	movs	r2, #87	; 0x57
 800f4da:	18bb      	adds	r3, r7, r2
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	b25b      	sxtb	r3, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d10a      	bne.n	800f4fa <VL53L0X_perform_ref_spad_management+0x130>
		Status = VL53L0X_WrByte(Dev,
 800f4e4:	18bc      	adds	r4, r7, r2
 800f4e6:	233a      	movs	r3, #58	; 0x3a
 800f4e8:	18fb      	adds	r3, r7, r3
 800f4ea:	781a      	ldrb	r2, [r3, #0]
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	21b6      	movs	r1, #182	; 0xb6
 800f4f0:	0018      	movs	r0, r3
 800f4f2:	f003 fbe1 	bl	8012cb8 <VL53L0X_WrByte>
 800f4f6:	0003      	movs	r3, r0
 800f4f8:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800f4fa:	2257      	movs	r2, #87	; 0x57
 800f4fc:	18bb      	adds	r3, r7, r2
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	b25b      	sxtb	r3, r3
 800f502:	2b00      	cmp	r3, #0
 800f504:	d108      	bne.n	800f518 <VL53L0X_perform_ref_spad_management+0x14e>
		Status = VL53L0X_WrByte(Dev,
 800f506:	18bc      	adds	r4, r7, r2
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2200      	movs	r2, #0
 800f50c:	2180      	movs	r1, #128	; 0x80
 800f50e:	0018      	movs	r0, r3
 800f510:	f003 fbd2 	bl	8012cb8 <VL53L0X_WrByte>
 800f514:	0003      	movs	r3, r0
 800f516:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800f518:	2257      	movs	r2, #87	; 0x57
 800f51a:	18bb      	adds	r3, r7, r2
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	b25b      	sxtb	r3, r3
 800f520:	2b00      	cmp	r3, #0
 800f522:	d10a      	bne.n	800f53a <VL53L0X_perform_ref_spad_management+0x170>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800f524:	18bc      	adds	r4, r7, r2
 800f526:	2310      	movs	r3, #16
 800f528:	18fa      	adds	r2, r7, r3
 800f52a:	2311      	movs	r3, #17
 800f52c:	18f9      	adds	r1, r7, r3
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	2300      	movs	r3, #0
 800f532:	f000 fcab 	bl	800fe8c <VL53L0X_perform_ref_calibration>
 800f536:	0003      	movs	r3, r0
 800f538:	7023      	strb	r3, [r4, #0]
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800f53a:	2257      	movs	r2, #87	; 0x57
 800f53c:	18bb      	adds	r3, r7, r2
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	b25b      	sxtb	r3, r3
 800f542:	2b00      	cmp	r3, #0
 800f544:	d124      	bne.n	800f590 <VL53L0X_perform_ref_spad_management+0x1c6>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800f54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f54c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800f54e:	2300      	movs	r3, #0
 800f550:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800f552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f554:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	332b      	adds	r3, #43	; 0x2b
 800f55a:	33ff      	adds	r3, #255	; 0xff
 800f55c:	001d      	movs	r5, r3
					Dev->Data.SpadData.RefSpadEnables,
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	3325      	adds	r3, #37	; 0x25
 800f562:	33ff      	adds	r3, #255	; 0xff
 800f564:	001e      	movs	r6, r3
		Status = enable_ref_spads(Dev,
 800f566:	233a      	movs	r3, #58	; 0x3a
 800f568:	18fb      	adds	r3, r7, r3
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	18bc      	adds	r4, r7, r2
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	2218      	movs	r2, #24
 800f572:	18ba      	adds	r2, r7, r2
 800f574:	9204      	str	r2, [sp, #16]
 800f576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f578:	9203      	str	r2, [sp, #12]
 800f57a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f57c:	9202      	str	r2, [sp, #8]
 800f57e:	9301      	str	r3, [sp, #4]
 800f580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f582:	9300      	str	r3, [sp, #0]
 800f584:	0033      	movs	r3, r6
 800f586:	002a      	movs	r2, r5
 800f588:	f7ff fe10 	bl	800f1ac <enable_ref_spads>
 800f58c:	0003      	movs	r3, r0
 800f58e:	7023      	strb	r3, [r4, #0]
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f590:	2557      	movs	r5, #87	; 0x57
 800f592:	197b      	adds	r3, r7, r5
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	b25b      	sxtb	r3, r3
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d000      	beq.n	800f59e <VL53L0X_perform_ref_spad_management+0x1d4>
 800f59c:	e087      	b.n	800f6ae <VL53L0X_perform_ref_spad_management+0x2e4>
		currentSpadIndex = lastSpadIndex;
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800f5a2:	197c      	adds	r4, r7, r5
 800f5a4:	2612      	movs	r6, #18
 800f5a6:	19ba      	adds	r2, r7, r6
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	0011      	movs	r1, r2
 800f5ac:	0018      	movs	r0, r3
 800f5ae:	f7ff fe8a 	bl	800f2c6 <perform_ref_signal_measurement>
 800f5b2:	0003      	movs	r3, r0
 800f5b4:	7023      	strb	r3, [r4, #0]
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800f5b6:	197b      	adds	r3, r7, r5
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	b25b      	sxtb	r3, r3
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d000      	beq.n	800f5c2 <VL53L0X_perform_ref_spad_management+0x1f8>
 800f5c0:	e071      	b.n	800f6a6 <VL53L0X_perform_ref_spad_management+0x2dc>
			(peakSignalRateRef > targetRefRate)) {
 800f5c2:	19bb      	adds	r3, r7, r6
 800f5c4:	881b      	ldrh	r3, [r3, #0]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800f5c6:	222e      	movs	r2, #46	; 0x2e
 800f5c8:	18ba      	adds	r2, r7, r2
 800f5ca:	8812      	ldrh	r2, [r2, #0]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d26a      	bcs.n	800f6a6 <VL53L0X_perform_ref_spad_management+0x2dc>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5d4:	e00a      	b.n	800f5ec <VL53L0X_perform_ref_spad_management+0x222>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800f5d6:	68f9      	ldr	r1, [r7, #12]
 800f5d8:	2392      	movs	r3, #146	; 0x92
 800f5da:	005b      	lsls	r3, r3, #1
 800f5dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5de:	188a      	adds	r2, r1, r2
 800f5e0:	18d3      	adds	r3, r2, r3
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800f5e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d3f0      	bcc.n	800f5d6 <VL53L0X_perform_ref_spad_management+0x20c>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800f5f4:	e002      	b.n	800f5fc <VL53L0X_perform_ref_spad_management+0x232>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800f5f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800f5fc:	233a      	movs	r3, #58	; 0x3a
 800f5fe:	18fb      	adds	r3, r7, r3
 800f600:	781a      	ldrb	r2, [r3, #0]
 800f602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f604:	18d3      	adds	r3, r2, r3
 800f606:	0018      	movs	r0, r3
 800f608:	f7ff fd4c 	bl	800f0a4 <is_aperture>
 800f60c:	1e03      	subs	r3, r0, #0
 800f60e:	d103      	bne.n	800f618 <VL53L0X_perform_ref_spad_management+0x24e>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800f610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f614:	429a      	cmp	r2, r3
 800f616:	d3ee      	bcc.n	800f5f6 <VL53L0X_perform_ref_spad_management+0x22c>
			}

			needAptSpads = 1;
 800f618:	2301      	movs	r3, #1
 800f61a:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800f61c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f61e:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	332b      	adds	r3, #43	; 0x2b
 800f624:	33ff      	adds	r3, #255	; 0xff
 800f626:	001d      	movs	r5, r3
					Dev->Data.SpadData.RefSpadEnables,
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	3325      	adds	r3, #37	; 0x25
 800f62c:	33ff      	adds	r3, #255	; 0xff
 800f62e:	001e      	movs	r6, r3
			Status = enable_ref_spads(Dev,
 800f630:	233a      	movs	r3, #58	; 0x3a
 800f632:	18fb      	adds	r3, r7, r3
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	2257      	movs	r2, #87	; 0x57
 800f638:	18bc      	adds	r4, r7, r2
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	2218      	movs	r2, #24
 800f63e:	18ba      	adds	r2, r7, r2
 800f640:	9204      	str	r2, [sp, #16]
 800f642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f644:	9203      	str	r2, [sp, #12]
 800f646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f648:	9202      	str	r2, [sp, #8]
 800f64a:	9301      	str	r3, [sp, #4]
 800f64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64e:	9300      	str	r3, [sp, #0]
 800f650:	0033      	movs	r3, r6
 800f652:	002a      	movs	r2, r5
 800f654:	f7ff fdaa 	bl	800f1ac <enable_ref_spads>
 800f658:	0003      	movs	r3, r0
 800f65a:	7023      	strb	r3, [r4, #0]
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800f65c:	2557      	movs	r5, #87	; 0x57
 800f65e:	197b      	adds	r3, r7, r5
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	b25b      	sxtb	r3, r3
 800f664:	2b00      	cmp	r3, #0
 800f666:	d121      	bne.n	800f6ac <VL53L0X_perform_ref_spad_management+0x2e2>
				currentSpadIndex = lastSpadIndex;
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800f66c:	197c      	adds	r4, r7, r5
 800f66e:	2612      	movs	r6, #18
 800f670:	19ba      	adds	r2, r7, r6
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	0011      	movs	r1, r2
 800f676:	0018      	movs	r0, r3
 800f678:	f7ff fe25 	bl	800f2c6 <perform_ref_signal_measurement>
 800f67c:	0003      	movs	r3, r0
 800f67e:	7023      	strb	r3, [r4, #0]
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800f680:	197b      	adds	r3, r7, r5
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	b25b      	sxtb	r3, r3
 800f686:	2b00      	cmp	r3, #0
 800f688:	d110      	bne.n	800f6ac <VL53L0X_perform_ref_spad_management+0x2e2>
					(peakSignalRateRef > targetRefRate)) {
 800f68a:	19bb      	adds	r3, r7, r6
 800f68c:	881b      	ldrh	r3, [r3, #0]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800f68e:	222e      	movs	r2, #46	; 0x2e
 800f690:	18ba      	adds	r2, r7, r2
 800f692:	8812      	ldrh	r2, [r2, #0]
 800f694:	429a      	cmp	r2, r3
 800f696:	d209      	bcs.n	800f6ac <VL53L0X_perform_ref_spad_management+0x2e2>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800f698:	233b      	movs	r3, #59	; 0x3b
 800f69a:	18fb      	adds	r3, r7, r3
 800f69c:	2201      	movs	r2, #1
 800f69e:	701a      	strb	r2, [r3, #0]
					refSpadCount_int = minimumSpadCount;
 800f6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800f6a4:	e002      	b.n	800f6ac <VL53L0X_perform_ref_spad_management+0x2e2>
				}
			}
		} else {
			needAptSpads = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6aa:	e000      	b.n	800f6ae <VL53L0X_perform_ref_spad_management+0x2e4>
			if (Status == VL53L0X_ERROR_NONE) {
 800f6ac:	46c0      	nop			; (mov r8, r8)
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800f6ae:	2357      	movs	r3, #87	; 0x57
 800f6b0:	18fb      	adds	r3, r7, r3
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	b25b      	sxtb	r3, r3
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d000      	beq.n	800f6bc <VL53L0X_perform_ref_spad_management+0x2f2>
 800f6ba:	e0cd      	b.n	800f858 <VL53L0X_perform_ref_spad_management+0x48e>
		(peakSignalRateRef < targetRefRate)) {
 800f6bc:	2412      	movs	r4, #18
 800f6be:	193b      	adds	r3, r7, r4
 800f6c0:	881b      	ldrh	r3, [r3, #0]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800f6c2:	252e      	movs	r5, #46	; 0x2e
 800f6c4:	197a      	adds	r2, r7, r5
 800f6c6:	8812      	ldrh	r2, [r2, #0]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d800      	bhi.n	800f6ce <VL53L0X_perform_ref_spad_management+0x304>
 800f6cc:	e0c4      	b.n	800f858 <VL53L0X_perform_ref_spad_management+0x48e>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800f6ce:	233b      	movs	r3, #59	; 0x3b
 800f6d0:	18fb      	adds	r3, r7, r3
 800f6d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6d4:	701a      	strb	r2, [r3, #0]
		refSpadCount_int	= minimumSpadCount;
 800f6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6d8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	3325      	adds	r3, #37	; 0x25
 800f6de:	33ff      	adds	r3, #255	; 0xff
 800f6e0:	0019      	movs	r1, r3
 800f6e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6e4:	231c      	movs	r3, #28
 800f6e6:	18fb      	adds	r3, r7, r3
 800f6e8:	0018      	movs	r0, r3
 800f6ea:	f005 fbd1 	bl	8014e90 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800f6ee:	193b      	adds	r3, r7, r4
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	001a      	movs	r2, r3
 800f6f4:	197b      	adds	r3, r7, r5
 800f6f6:	881b      	ldrh	r3, [r3, #0]
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	17da      	asrs	r2, r3, #31
 800f6fc:	189b      	adds	r3, r3, r2
 800f6fe:	4053      	eors	r3, r2
 800f700:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800f702:	2343      	movs	r3, #67	; 0x43
 800f704:	18fb      	adds	r3, r7, r3
 800f706:	2200      	movs	r2, #0
 800f708:	701a      	strb	r2, [r3, #0]

		while (!complete) {
 800f70a:	e09b      	b.n	800f844 <VL53L0X_perform_ref_spad_management+0x47a>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	332b      	adds	r3, #43	; 0x2b
 800f710:	33ff      	adds	r3, #255	; 0xff
 800f712:	0018      	movs	r0, r3
			get_next_good_spad(
 800f714:	2314      	movs	r3, #20
 800f716:	18fb      	adds	r3, r7, r3
 800f718:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f71a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f71c:	f7ff fc5a 	bl	800efd4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	3301      	adds	r3, #1
 800f724:	d104      	bne.n	800f730 <VL53L0X_perform_ref_spad_management+0x366>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800f726:	2357      	movs	r3, #87	; 0x57
 800f728:	18fb      	adds	r3, r7, r3
 800f72a:	22ce      	movs	r2, #206	; 0xce
 800f72c:	701a      	strb	r2, [r3, #0]
				break;
 800f72e:	e093      	b.n	800f858 <VL53L0X_perform_ref_spad_management+0x48e>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800f730:	233a      	movs	r3, #58	; 0x3a
 800f732:	18fb      	adds	r3, r7, r3
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	697a      	ldr	r2, [r7, #20]
 800f738:	189b      	adds	r3, r3, r2
 800f73a:	0018      	movs	r0, r3
 800f73c:	f7ff fcb2 	bl	800f0a4 <is_aperture>
 800f740:	0003      	movs	r3, r0
 800f742:	001a      	movs	r2, r3
 800f744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f746:	4293      	cmp	r3, r2
 800f748:	d004      	beq.n	800f754 <VL53L0X_perform_ref_spad_management+0x38a>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800f74a:	2343      	movs	r3, #67	; 0x43
 800f74c:	18fb      	adds	r3, r7, r3
 800f74e:	2201      	movs	r2, #1
 800f750:	701a      	strb	r2, [r3, #0]
				break;
 800f752:	e081      	b.n	800f858 <VL53L0X_perform_ref_spad_management+0x48e>
			}

			(refSpadCount_int)++;
 800f754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f756:	3301      	adds	r3, #1
 800f758:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	3325      	adds	r3, #37	; 0x25
 800f762:	33ff      	adds	r3, #255	; 0xff
			Status = enable_spad_bit(
 800f764:	2557      	movs	r5, #87	; 0x57
 800f766:	197c      	adds	r4, r7, r5
 800f768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f76a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f76c:	0018      	movs	r0, r3
 800f76e:	f7ff fcb7 	bl	800f0e0 <enable_spad_bit>
 800f772:	0003      	movs	r3, r0
 800f774:	7023      	strb	r3, [r4, #0]
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800f776:	0029      	movs	r1, r5
 800f778:	187b      	adds	r3, r7, r1
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	b25b      	sxtb	r3, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d10e      	bne.n	800f7a0 <VL53L0X_perform_ref_spad_management+0x3d6>
				currentSpadIndex++;
 800f782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f784:	3301      	adds	r3, #1
 800f786:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	3325      	adds	r3, #37	; 0x25
 800f78c:	33ff      	adds	r3, #255	; 0xff
 800f78e:	001a      	movs	r2, r3
				Status = set_ref_spad_map(Dev,
 800f790:	187c      	adds	r4, r7, r1
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	0011      	movs	r1, r2
 800f796:	0018      	movs	r0, r3
 800f798:	f7ff fcdc 	bl	800f154 <set_ref_spad_map>
 800f79c:	0003      	movs	r3, r0
 800f79e:	7023      	strb	r3, [r4, #0]
			}

			if (Status != VL53L0X_ERROR_NONE)
 800f7a0:	2557      	movs	r5, #87	; 0x57
 800f7a2:	197b      	adds	r3, r7, r5
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	b25b      	sxtb	r3, r3
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d152      	bne.n	800f852 <VL53L0X_perform_ref_spad_management+0x488>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800f7ac:	197c      	adds	r4, r7, r5
 800f7ae:	2612      	movs	r6, #18
 800f7b0:	19ba      	adds	r2, r7, r6
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	0011      	movs	r1, r2
 800f7b6:	0018      	movs	r0, r3
 800f7b8:	f7ff fd85 	bl	800f2c6 <perform_ref_signal_measurement>
 800f7bc:	0003      	movs	r3, r0
 800f7be:	7023      	strb	r3, [r4, #0]
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800f7c0:	0029      	movs	r1, r5
 800f7c2:	187b      	adds	r3, r7, r1
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	b25b      	sxtb	r3, r3
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d144      	bne.n	800f856 <VL53L0X_perform_ref_spad_management+0x48c>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800f7cc:	0030      	movs	r0, r6
 800f7ce:	183b      	adds	r3, r7, r0
 800f7d0:	881b      	ldrh	r3, [r3, #0]
 800f7d2:	001a      	movs	r2, r3
 800f7d4:	242e      	movs	r4, #46	; 0x2e
 800f7d6:	193b      	adds	r3, r7, r4
 800f7d8:	881b      	ldrh	r3, [r3, #0]
 800f7da:	1ad3      	subs	r3, r2, r3
 800f7dc:	17da      	asrs	r2, r3, #31
 800f7de:	189b      	adds	r3, r3, r2
 800f7e0:	4053      	eors	r3, r2
 800f7e2:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800f7e4:	183b      	adds	r3, r7, r0
 800f7e6:	881b      	ldrh	r3, [r3, #0]
 800f7e8:	193a      	adds	r2, r7, r4
 800f7ea:	8812      	ldrh	r2, [r2, #0]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d21d      	bcs.n	800f82c <VL53L0X_perform_ref_spad_management+0x462>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800f7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d914      	bls.n	800f822 <VL53L0X_perform_ref_spad_management+0x458>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800f7f8:	187c      	adds	r4, r7, r1
 800f7fa:	251c      	movs	r5, #28
 800f7fc:	197a      	adds	r2, r7, r5
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	0011      	movs	r1, r2
 800f802:	0018      	movs	r0, r3
 800f804:	f7ff fca6 	bl	800f154 <set_ref_spad_map>
 800f808:	0003      	movs	r3, r0
 800f80a:	7023      	strb	r3, [r4, #0]
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	3325      	adds	r3, #37	; 0x25
 800f810:	33ff      	adds	r3, #255	; 0xff
					memcpy(
 800f812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f814:	1979      	adds	r1, r7, r5
 800f816:	0018      	movs	r0, r3
 800f818:	f005 fb3a 	bl	8014e90 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800f81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f81e:	3b01      	subs	r3, #1
 800f820:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800f822:	2343      	movs	r3, #67	; 0x43
 800f824:	18fb      	adds	r3, r7, r3
 800f826:	2201      	movs	r2, #1
 800f828:	701a      	strb	r2, [r3, #0]
 800f82a:	e00b      	b.n	800f844 <VL53L0X_perform_ref_spad_management+0x47a>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800f82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f82e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	3325      	adds	r3, #37	; 0x25
 800f834:	33ff      	adds	r3, #255	; 0xff
 800f836:	0019      	movs	r1, r3
				memcpy(lastSpadArray,
 800f838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f83a:	231c      	movs	r3, #28
 800f83c:	18fb      	adds	r3, r7, r3
 800f83e:	0018      	movs	r0, r3
 800f840:	f005 fb26 	bl	8014e90 <memcpy>
		while (!complete) {
 800f844:	2343      	movs	r3, #67	; 0x43
 800f846:	18fb      	adds	r3, r7, r3
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d100      	bne.n	800f850 <VL53L0X_perform_ref_spad_management+0x486>
 800f84e:	e75d      	b.n	800f70c <VL53L0X_perform_ref_spad_management+0x342>
 800f850:	e002      	b.n	800f858 <VL53L0X_perform_ref_spad_management+0x48e>
				break;
 800f852:	46c0      	nop			; (mov r8, r8)
 800f854:	e000      	b.n	800f858 <VL53L0X_perform_ref_spad_management+0x48e>
				break;
 800f856:	46c0      	nop			; (mov r8, r8)
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f858:	2357      	movs	r3, #87	; 0x57
 800f85a:	18fb      	adds	r3, r7, r3
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	b25b      	sxtb	r3, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	d119      	bne.n	800f898 <VL53L0X_perform_ref_spad_management+0x4ce>
		*refSpadCount = refSpadCount_int;
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f868:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	223b      	movs	r2, #59	; 0x3b
 800f86e:	18ba      	adds	r2, r7, r2
 800f870:	7812      	ldrb	r2, [r2, #0]
 800f872:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	2316      	movs	r3, #22
 800f878:	33ff      	adds	r3, #255	; 0xff
 800f87a:	2101      	movs	r1, #1
 800f87c:	54d1      	strb	r1, [r2, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	b2d9      	uxtb	r1, r3
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	2314      	movs	r3, #20
 800f888:	33ff      	adds	r3, #255	; 0xff
 800f88a:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	7819      	ldrb	r1, [r3, #0]
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	238a      	movs	r3, #138	; 0x8a
 800f894:	005b      	lsls	r3, r3, #1
 800f896:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800f898:	2357      	movs	r3, #87	; 0x57
 800f89a:	18fb      	adds	r3, r7, r3
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	b25b      	sxtb	r3, r3
}
 800f8a0:	0018      	movs	r0, r3
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	b017      	add	sp, #92	; 0x5c
 800f8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f8a8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8aa:	b093      	sub	sp, #76	; 0x4c
 800f8ac:	af06      	add	r7, sp, #24
 800f8ae:	60f8      	str	r0, [r7, #12]
 800f8b0:	60b9      	str	r1, [r7, #8]
 800f8b2:	1dfb      	adds	r3, r7, #7
 800f8b4:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f8b6:	212f      	movs	r1, #47	; 0x2f
 800f8b8:	187b      	adds	r3, r7, r1
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	701a      	strb	r2, [r3, #0]
	uint32_t currentSpadIndex = 0;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800f8c2:	2323      	movs	r3, #35	; 0x23
 800f8c4:	18fb      	adds	r3, r7, r3
 800f8c6:	22b4      	movs	r2, #180	; 0xb4
 800f8c8:	701a      	strb	r2, [r3, #0]
	uint32_t spadArraySize = 6;
 800f8ca:	2306      	movs	r3, #6
 800f8cc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800f8ce:	232c      	movs	r3, #44	; 0x2c
 800f8d0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f8d2:	000d      	movs	r5, r1
 800f8d4:	187c      	adds	r4, r7, r1
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	21ff      	movs	r1, #255	; 0xff
 800f8dc:	0018      	movs	r0, r3
 800f8de:	f003 f9eb 	bl	8012cb8 <VL53L0X_WrByte>
 800f8e2:	0003      	movs	r3, r0
 800f8e4:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800f8e6:	197b      	adds	r3, r7, r5
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	b25b      	sxtb	r3, r3
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d108      	bne.n	800f902 <VL53L0X_set_reference_spads+0x5a>
		Status = VL53L0X_WrByte(Dev,
 800f8f0:	197c      	adds	r4, r7, r5
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	214f      	movs	r1, #79	; 0x4f
 800f8f8:	0018      	movs	r0, r3
 800f8fa:	f003 f9dd 	bl	8012cb8 <VL53L0X_WrByte>
 800f8fe:	0003      	movs	r3, r0
 800f900:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800f902:	222f      	movs	r2, #47	; 0x2f
 800f904:	18bb      	adds	r3, r7, r2
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	b25b      	sxtb	r3, r3
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d108      	bne.n	800f920 <VL53L0X_set_reference_spads+0x78>
		Status = VL53L0X_WrByte(Dev,
 800f90e:	18bc      	adds	r4, r7, r2
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	222c      	movs	r2, #44	; 0x2c
 800f914:	214e      	movs	r1, #78	; 0x4e
 800f916:	0018      	movs	r0, r3
 800f918:	f003 f9ce 	bl	8012cb8 <VL53L0X_WrByte>
 800f91c:	0003      	movs	r3, r0
 800f91e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800f920:	222f      	movs	r2, #47	; 0x2f
 800f922:	18bb      	adds	r3, r7, r2
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	b25b      	sxtb	r3, r3
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d108      	bne.n	800f93e <VL53L0X_set_reference_spads+0x96>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f92c:	18bc      	adds	r4, r7, r2
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2200      	movs	r2, #0
 800f932:	21ff      	movs	r1, #255	; 0xff
 800f934:	0018      	movs	r0, r3
 800f936:	f003 f9bf 	bl	8012cb8 <VL53L0X_WrByte>
 800f93a:	0003      	movs	r3, r0
 800f93c:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800f93e:	222f      	movs	r2, #47	; 0x2f
 800f940:	18bb      	adds	r3, r7, r2
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	b25b      	sxtb	r3, r3
 800f946:	2b00      	cmp	r3, #0
 800f948:	d10a      	bne.n	800f960 <VL53L0X_set_reference_spads+0xb8>
		Status = VL53L0X_WrByte(Dev,
 800f94a:	18bc      	adds	r4, r7, r2
 800f94c:	2323      	movs	r3, #35	; 0x23
 800f94e:	18fb      	adds	r3, r7, r3
 800f950:	781a      	ldrb	r2, [r3, #0]
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	21b6      	movs	r1, #182	; 0xb6
 800f956:	0018      	movs	r0, r3
 800f958:	f003 f9ae 	bl	8012cb8 <VL53L0X_WrByte>
 800f95c:	0003      	movs	r3, r0
 800f95e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800f960:	2300      	movs	r3, #0
 800f962:	627b      	str	r3, [r7, #36]	; 0x24
 800f964:	e00a      	b.n	800f97c <VL53L0X_set_reference_spads+0xd4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800f966:	68f9      	ldr	r1, [r7, #12]
 800f968:	2392      	movs	r3, #146	; 0x92
 800f96a:	005b      	lsls	r3, r3, #1
 800f96c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f96e:	188a      	adds	r2, r1, r2
 800f970:	18d3      	adds	r3, r2, r3
 800f972:	2200      	movs	r2, #0
 800f974:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800f976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f978:	3301      	adds	r3, #1
 800f97a:	627b      	str	r3, [r7, #36]	; 0x24
 800f97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	429a      	cmp	r2, r3
 800f982:	d3f0      	bcc.n	800f966 <VL53L0X_set_reference_spads+0xbe>

	if (isApertureSpads) {
 800f984:	1dfb      	adds	r3, r7, #7
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d011      	beq.n	800f9b0 <VL53L0X_set_reference_spads+0x108>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800f98c:	e002      	b.n	800f994 <VL53L0X_set_reference_spads+0xec>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800f98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f990:	3301      	adds	r3, #1
 800f992:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800f994:	2323      	movs	r3, #35	; 0x23
 800f996:	18fb      	adds	r3, r7, r3
 800f998:	781a      	ldrb	r2, [r3, #0]
 800f99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f99c:	18d3      	adds	r3, r2, r3
 800f99e:	0018      	movs	r0, r3
 800f9a0:	f7ff fb80 	bl	800f0a4 <is_aperture>
 800f9a4:	1e03      	subs	r3, r0, #0
 800f9a6:	d103      	bne.n	800f9b0 <VL53L0X_set_reference_spads+0x108>
 800f9a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d3ee      	bcc.n	800f98e <VL53L0X_set_reference_spads+0xe6>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	332b      	adds	r3, #43	; 0x2b
 800f9b4:	33ff      	adds	r3, #255	; 0xff
 800f9b6:	001d      	movs	r5, r3
				Dev->Data.SpadData.RefSpadEnables,
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	3325      	adds	r3, #37	; 0x25
 800f9bc:	33ff      	adds	r3, #255	; 0xff
 800f9be:	001e      	movs	r6, r3
	Status = enable_ref_spads(Dev,
 800f9c0:	2323      	movs	r3, #35	; 0x23
 800f9c2:	18fb      	adds	r3, r7, r3
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	222f      	movs	r2, #47	; 0x2f
 800f9c8:	18bc      	adds	r4, r7, r2
 800f9ca:	1dfa      	adds	r2, r7, #7
 800f9cc:	7811      	ldrb	r1, [r2, #0]
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	2214      	movs	r2, #20
 800f9d2:	18ba      	adds	r2, r7, r2
 800f9d4:	9204      	str	r2, [sp, #16]
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	9203      	str	r2, [sp, #12]
 800f9da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9dc:	9202      	str	r2, [sp, #8]
 800f9de:	9301      	str	r3, [sp, #4]
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	9300      	str	r3, [sp, #0]
 800f9e4:	0033      	movs	r3, r6
 800f9e6:	002a      	movs	r2, r5
 800f9e8:	f7ff fbe0 	bl	800f1ac <enable_ref_spads>
 800f9ec:	0003      	movs	r3, r0
 800f9ee:	7023      	strb	r3, [r4, #0]
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800f9f0:	222f      	movs	r2, #47	; 0x2f
 800f9f2:	18bb      	adds	r3, r7, r2
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	b25b      	sxtb	r3, r3
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d110      	bne.n	800fa1e <VL53L0X_set_reference_spads+0x176>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	2316      	movs	r3, #22
 800fa00:	33ff      	adds	r3, #255	; 0xff
 800fa02:	2101      	movs	r1, #1
 800fa04:	54d1      	strb	r1, [r2, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	b2d9      	uxtb	r1, r3
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	2314      	movs	r3, #20
 800fa0e:	33ff      	adds	r3, #255	; 0xff
 800fa10:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800fa12:	68fa      	ldr	r2, [r7, #12]
 800fa14:	1df9      	adds	r1, r7, #7
 800fa16:	238a      	movs	r3, #138	; 0x8a
 800fa18:	005b      	lsls	r3, r3, #1
 800fa1a:	7809      	ldrb	r1, [r1, #0]
 800fa1c:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800fa1e:	232f      	movs	r3, #47	; 0x2f
 800fa20:	18fb      	adds	r3, r7, r3
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	b25b      	sxtb	r3, r3
}
 800fa26:	0018      	movs	r0, r3
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	b00d      	add	sp, #52	; 0x34
 800fa2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa2e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800fa2e:	b590      	push	{r4, r7, lr}
 800fa30:	b085      	sub	sp, #20
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
 800fa36:	000a      	movs	r2, r1
 800fa38:	1cfb      	adds	r3, r7, #3
 800fa3a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa3c:	210f      	movs	r1, #15
 800fa3e:	187b      	adds	r3, r7, r1
 800fa40:	2200      	movs	r2, #0
 800fa42:	701a      	strb	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800fa44:	187b      	adds	r3, r7, r1
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	b25b      	sxtb	r3, r3
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10c      	bne.n	800fa68 <VL53L0X_perform_single_ref_calibration+0x3a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800fa4e:	1cfb      	adds	r3, r7, #3
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	2201      	movs	r2, #1
 800fa54:	4313      	orrs	r3, r2
 800fa56:	b2da      	uxtb	r2, r3
 800fa58:	187c      	adds	r4, r7, r1
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	0018      	movs	r0, r3
 800fa60:	f003 f92a 	bl	8012cb8 <VL53L0X_WrByte>
 800fa64:	0003      	movs	r3, r0
 800fa66:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800fa68:	220f      	movs	r2, #15
 800fa6a:	18bb      	adds	r3, r7, r2
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	b25b      	sxtb	r3, r3
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d106      	bne.n	800fa82 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800fa74:	18bc      	adds	r4, r7, r2
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	0018      	movs	r0, r3
 800fa7a:	f000 fa5c 	bl	800ff36 <VL53L0X_measurement_poll_for_completion>
 800fa7e:	0003      	movs	r3, r0
 800fa80:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800fa82:	220f      	movs	r2, #15
 800fa84:	18bb      	adds	r3, r7, r2
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	b25b      	sxtb	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d107      	bne.n	800fa9e <VL53L0X_perform_single_ref_calibration+0x70>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800fa8e:	18bc      	adds	r4, r7, r2
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2100      	movs	r1, #0
 800fa94:	0018      	movs	r0, r3
 800fa96:	f7ff f9a9 	bl	800edec <VL53L0X_ClearInterruptMask>
 800fa9a:	0003      	movs	r3, r0
 800fa9c:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800fa9e:	220f      	movs	r2, #15
 800faa0:	18bb      	adds	r3, r7, r2
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	b25b      	sxtb	r3, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d108      	bne.n	800fabc <VL53L0X_perform_single_ref_calibration+0x8e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800faaa:	18bc      	adds	r4, r7, r2
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	2100      	movs	r1, #0
 800fab2:	0018      	movs	r0, r3
 800fab4:	f003 f900 	bl	8012cb8 <VL53L0X_WrByte>
 800fab8:	0003      	movs	r3, r0
 800faba:	7023      	strb	r3, [r4, #0]

	return Status;
 800fabc:	230f      	movs	r3, #15
 800fabe:	18fb      	adds	r3, r7, r3
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	b25b      	sxtb	r3, r3
}
 800fac4:	0018      	movs	r0, r3
 800fac6:	46bd      	mov	sp, r7
 800fac8:	b005      	add	sp, #20
 800faca:	bd90      	pop	{r4, r7, pc}

0800facc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800facc:	b590      	push	{r4, r7, lr}
 800face:	b085      	sub	sp, #20
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	000c      	movs	r4, r1
 800fad6:	0010      	movs	r0, r2
 800fad8:	0019      	movs	r1, r3
 800fada:	1cfb      	adds	r3, r7, #3
 800fadc:	1c22      	adds	r2, r4, #0
 800fade:	701a      	strb	r2, [r3, #0]
 800fae0:	1cbb      	adds	r3, r7, #2
 800fae2:	1c02      	adds	r2, r0, #0
 800fae4:	701a      	strb	r2, [r3, #0]
 800fae6:	1c7b      	adds	r3, r7, #1
 800fae8:	1c0a      	adds	r2, r1, #0
 800faea:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800faec:	240f      	movs	r4, #15
 800faee:	193b      	adds	r3, r7, r4
 800faf0:	2200      	movs	r2, #0
 800faf2:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCalint = 0;
 800faf4:	230e      	movs	r3, #14
 800faf6:	18fb      	adds	r3, r7, r3
 800faf8:	2200      	movs	r2, #0
 800fafa:	701a      	strb	r2, [r3, #0]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	21ff      	movs	r1, #255	; 0xff
 800fb02:	0018      	movs	r0, r3
 800fb04:	f003 f8d8 	bl	8012cb8 <VL53L0X_WrByte>
 800fb08:	0003      	movs	r3, r0
 800fb0a:	0019      	movs	r1, r3
 800fb0c:	193b      	adds	r3, r7, r4
 800fb0e:	193a      	adds	r2, r7, r4
 800fb10:	7812      	ldrb	r2, [r2, #0]
 800fb12:	430a      	orrs	r2, r1
 800fb14:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	2100      	movs	r1, #0
 800fb1c:	0018      	movs	r0, r3
 800fb1e:	f003 f8cb 	bl	8012cb8 <VL53L0X_WrByte>
 800fb22:	0003      	movs	r3, r0
 800fb24:	0019      	movs	r1, r3
 800fb26:	193b      	adds	r3, r7, r4
 800fb28:	193a      	adds	r2, r7, r4
 800fb2a:	7812      	ldrb	r2, [r2, #0]
 800fb2c:	430a      	orrs	r2, r1
 800fb2e:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2200      	movs	r2, #0
 800fb34:	21ff      	movs	r1, #255	; 0xff
 800fb36:	0018      	movs	r0, r3
 800fb38:	f003 f8be 	bl	8012cb8 <VL53L0X_WrByte>
 800fb3c:	0003      	movs	r3, r0
 800fb3e:	0019      	movs	r1, r3
 800fb40:	193b      	adds	r3, r7, r4
 800fb42:	193a      	adds	r2, r7, r4
 800fb44:	7812      	ldrb	r2, [r2, #0]
 800fb46:	430a      	orrs	r2, r1
 800fb48:	701a      	strb	r2, [r3, #0]

	if (read_not_write) {
 800fb4a:	1cfb      	adds	r3, r7, #3
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d026      	beq.n	800fba0 <VL53L0X_ref_calibration_io+0xd4>
		if (vhv_enable)
 800fb52:	2328      	movs	r3, #40	; 0x28
 800fb54:	18fb      	adds	r3, r7, r3
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00c      	beq.n	800fb76 <VL53L0X_ref_calibration_io+0xaa>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800fb5c:	6a3a      	ldr	r2, [r7, #32]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	21cb      	movs	r1, #203	; 0xcb
 800fb62:	0018      	movs	r0, r3
 800fb64:	f003 f957 	bl	8012e16 <VL53L0X_RdByte>
 800fb68:	0003      	movs	r3, r0
 800fb6a:	0019      	movs	r1, r3
 800fb6c:	193b      	adds	r3, r7, r4
 800fb6e:	193a      	adds	r2, r7, r4
 800fb70:	7812      	ldrb	r2, [r2, #0]
 800fb72:	430a      	orrs	r2, r1
 800fb74:	701a      	strb	r2, [r3, #0]
		if (phase_enable)
 800fb76:	232c      	movs	r3, #44	; 0x2c
 800fb78:	18fb      	adds	r3, r7, r3
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d037      	beq.n	800fbf0 <VL53L0X_ref_calibration_io+0x124>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800fb80:	230e      	movs	r3, #14
 800fb82:	18fa      	adds	r2, r7, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	21ee      	movs	r1, #238	; 0xee
 800fb88:	0018      	movs	r0, r3
 800fb8a:	f003 f944 	bl	8012e16 <VL53L0X_RdByte>
 800fb8e:	0003      	movs	r3, r0
 800fb90:	0019      	movs	r1, r3
 800fb92:	220f      	movs	r2, #15
 800fb94:	18bb      	adds	r3, r7, r2
 800fb96:	18ba      	adds	r2, r7, r2
 800fb98:	7812      	ldrb	r2, [r2, #0]
 800fb9a:	430a      	orrs	r2, r1
 800fb9c:	701a      	strb	r2, [r3, #0]
 800fb9e:	e027      	b.n	800fbf0 <VL53L0X_ref_calibration_io+0x124>
	} else {
		if (vhv_enable)
 800fba0:	2328      	movs	r3, #40	; 0x28
 800fba2:	18fb      	adds	r3, r7, r3
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00e      	beq.n	800fbc8 <VL53L0X_ref_calibration_io+0xfc>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800fbaa:	1cbb      	adds	r3, r7, #2
 800fbac:	781a      	ldrb	r2, [r3, #0]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	21cb      	movs	r1, #203	; 0xcb
 800fbb2:	0018      	movs	r0, r3
 800fbb4:	f003 f880 	bl	8012cb8 <VL53L0X_WrByte>
 800fbb8:	0003      	movs	r3, r0
 800fbba:	0019      	movs	r1, r3
 800fbbc:	220f      	movs	r2, #15
 800fbbe:	18bb      	adds	r3, r7, r2
 800fbc0:	18ba      	adds	r2, r7, r2
 800fbc2:	7812      	ldrb	r2, [r2, #0]
 800fbc4:	430a      	orrs	r2, r1
 800fbc6:	701a      	strb	r2, [r3, #0]
		if (phase_enable)
 800fbc8:	232c      	movs	r3, #44	; 0x2c
 800fbca:	18fb      	adds	r3, r7, r3
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00e      	beq.n	800fbf0 <VL53L0X_ref_calibration_io+0x124>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800fbd2:	1c7b      	adds	r3, r7, #1
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	2280      	movs	r2, #128	; 0x80
 800fbda:	21ee      	movs	r1, #238	; 0xee
 800fbdc:	f003 f8d4 	bl	8012d88 <VL53L0X_UpdateByte>
 800fbe0:	0003      	movs	r3, r0
 800fbe2:	0019      	movs	r1, r3
 800fbe4:	220f      	movs	r2, #15
 800fbe6:	18bb      	adds	r3, r7, r2
 800fbe8:	18ba      	adds	r2, r7, r2
 800fbea:	7812      	ldrb	r2, [r2, #0]
 800fbec:	430a      	orrs	r2, r1
 800fbee:	701a      	strb	r2, [r3, #0]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	21ff      	movs	r1, #255	; 0xff
 800fbf6:	0018      	movs	r0, r3
 800fbf8:	f003 f85e 	bl	8012cb8 <VL53L0X_WrByte>
 800fbfc:	0003      	movs	r3, r0
 800fbfe:	0019      	movs	r1, r3
 800fc00:	240f      	movs	r4, #15
 800fc02:	193b      	adds	r3, r7, r4
 800fc04:	193a      	adds	r2, r7, r4
 800fc06:	7812      	ldrb	r2, [r2, #0]
 800fc08:	430a      	orrs	r2, r1
 800fc0a:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2201      	movs	r2, #1
 800fc10:	2100      	movs	r1, #0
 800fc12:	0018      	movs	r0, r3
 800fc14:	f003 f850 	bl	8012cb8 <VL53L0X_WrByte>
 800fc18:	0003      	movs	r3, r0
 800fc1a:	0019      	movs	r1, r3
 800fc1c:	193b      	adds	r3, r7, r4
 800fc1e:	193a      	adds	r2, r7, r4
 800fc20:	7812      	ldrb	r2, [r2, #0]
 800fc22:	430a      	orrs	r2, r1
 800fc24:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	21ff      	movs	r1, #255	; 0xff
 800fc2c:	0018      	movs	r0, r3
 800fc2e:	f003 f843 	bl	8012cb8 <VL53L0X_WrByte>
 800fc32:	0003      	movs	r3, r0
 800fc34:	0019      	movs	r1, r3
 800fc36:	0020      	movs	r0, r4
 800fc38:	183b      	adds	r3, r7, r0
 800fc3a:	183a      	adds	r2, r7, r0
 800fc3c:	7812      	ldrb	r2, [r2, #0]
 800fc3e:	430a      	orrs	r2, r1
 800fc40:	701a      	strb	r2, [r3, #0]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800fc42:	230e      	movs	r3, #14
 800fc44:	18fb      	adds	r3, r7, r3
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	2210      	movs	r2, #16
 800fc4a:	4393      	bics	r3, r2
 800fc4c:	b2da      	uxtb	r2, r3
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	701a      	strb	r2, [r3, #0]

	return Status;
 800fc52:	183b      	adds	r3, r7, r0
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	b25b      	sxtb	r3, r3
}
 800fc58:	0018      	movs	r0, r3
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	b005      	add	sp, #20
 800fc5e:	bd90      	pop	{r4, r7, pc}

0800fc60 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800fc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc62:	b08b      	sub	sp, #44	; 0x2c
 800fc64:	af04      	add	r7, sp, #16
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	0019      	movs	r1, r3
 800fc6c:	1dfb      	adds	r3, r7, #7
 800fc6e:	701a      	strb	r2, [r3, #0]
 800fc70:	1dbb      	adds	r3, r7, #6
 800fc72:	1c0a      	adds	r2, r1, #0
 800fc74:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fc76:	2317      	movs	r3, #23
 800fc78:	18fb      	adds	r3, r7, r3
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800fc7e:	2116      	movs	r1, #22
 800fc80:	187b      	adds	r3, r7, r1
 800fc82:	2200      	movs	r2, #0
 800fc84:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800fc86:	2315      	movs	r3, #21
 800fc88:	18fb      	adds	r3, r7, r3
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800fc8e:	2314      	movs	r3, #20
 800fc90:	18fb      	adds	r3, r7, r3
 800fc92:	2200      	movs	r2, #0
 800fc94:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCalInt = 0;
 800fc96:	2313      	movs	r3, #19
 800fc98:	18fb      	adds	r3, r7, r3
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800fc9e:	1dbb      	adds	r3, r7, #6
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d005      	beq.n	800fcb2 <VL53L0X_perform_vhv_calibration+0x52>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800fca6:	187b      	adds	r3, r7, r1
 800fca8:	68f9      	ldr	r1, [r7, #12]
 800fcaa:	2298      	movs	r2, #152	; 0x98
 800fcac:	0052      	lsls	r2, r2, #1
 800fcae:	5c8a      	ldrb	r2, [r1, r2]
 800fcb0:	701a      	strb	r2, [r3, #0]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800fcb2:	2517      	movs	r5, #23
 800fcb4:	197c      	adds	r4, r7, r5
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2201      	movs	r2, #1
 800fcba:	2101      	movs	r1, #1
 800fcbc:	0018      	movs	r0, r3
 800fcbe:	f002 fffb 	bl	8012cb8 <VL53L0X_WrByte>
 800fcc2:	0003      	movs	r3, r0
 800fcc4:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800fcc6:	197b      	adds	r3, r7, r5
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	b25b      	sxtb	r3, r3
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d107      	bne.n	800fce0 <VL53L0X_perform_vhv_calibration+0x80>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800fcd0:	197c      	adds	r4, r7, r5
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2140      	movs	r1, #64	; 0x40
 800fcd6:	0018      	movs	r0, r3
 800fcd8:	f7ff fea9 	bl	800fa2e <VL53L0X_perform_single_ref_calibration>
 800fcdc:	0003      	movs	r3, r0
 800fcde:	7023      	strb	r3, [r4, #0]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800fce0:	2217      	movs	r2, #23
 800fce2:	18bb      	adds	r3, r7, r2
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	b25b      	sxtb	r3, r3
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d11b      	bne.n	800fd24 <VL53L0X_perform_vhv_calibration+0xc4>
 800fcec:	1dfb      	adds	r3, r7, #7
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d117      	bne.n	800fd24 <VL53L0X_perform_vhv_calibration+0xc4>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800fcf4:	18bc      	adds	r4, r7, r2
 800fcf6:	2314      	movs	r3, #20
 800fcf8:	18fb      	adds	r3, r7, r3
 800fcfa:	7819      	ldrb	r1, [r3, #0]
 800fcfc:	2315      	movs	r3, #21
 800fcfe:	18fb      	adds	r3, r7, r3
 800fd00:	781a      	ldrb	r2, [r3, #0]
 800fd02:	68f8      	ldr	r0, [r7, #12]
 800fd04:	2300      	movs	r3, #0
 800fd06:	9303      	str	r3, [sp, #12]
 800fd08:	2301      	movs	r3, #1
 800fd0a:	9302      	str	r3, [sp, #8]
 800fd0c:	2313      	movs	r3, #19
 800fd0e:	18fb      	adds	r3, r7, r3
 800fd10:	9301      	str	r3, [sp, #4]
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	9300      	str	r3, [sp, #0]
 800fd16:	000b      	movs	r3, r1
 800fd18:	2101      	movs	r1, #1
 800fd1a:	f7ff fed7 	bl	800facc <VL53L0X_ref_calibration_io>
 800fd1e:	0003      	movs	r3, r0
 800fd20:	7023      	strb	r3, [r4, #0]
 800fd22:	e002      	b.n	800fd2a <VL53L0X_perform_vhv_calibration+0xca>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	2200      	movs	r2, #0
 800fd28:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800fd2a:	2517      	movs	r5, #23
 800fd2c:	197b      	adds	r3, r7, r5
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	b25b      	sxtb	r3, r3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d119      	bne.n	800fd6a <VL53L0X_perform_vhv_calibration+0x10a>
 800fd36:	1dbb      	adds	r3, r7, #6
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d015      	beq.n	800fd6a <VL53L0X_perform_vhv_calibration+0x10a>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800fd3e:	197c      	adds	r4, r7, r5
 800fd40:	2616      	movs	r6, #22
 800fd42:	19bb      	adds	r3, r7, r6
 800fd44:	781a      	ldrb	r2, [r3, #0]
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	2101      	movs	r1, #1
 800fd4a:	0018      	movs	r0, r3
 800fd4c:	f002 ffb4 	bl	8012cb8 <VL53L0X_WrByte>
 800fd50:	0003      	movs	r3, r0
 800fd52:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800fd54:	197b      	adds	r3, r7, r5
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	b25b      	sxtb	r3, r3
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d105      	bne.n	800fd6a <VL53L0X_perform_vhv_calibration+0x10a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	19b9      	adds	r1, r7, r6
 800fd62:	2398      	movs	r3, #152	; 0x98
 800fd64:	005b      	lsls	r3, r3, #1
 800fd66:	7809      	ldrb	r1, [r1, #0]
 800fd68:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800fd6a:	2317      	movs	r3, #23
 800fd6c:	18fb      	adds	r3, r7, r3
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	b25b      	sxtb	r3, r3
}
 800fd72:	0018      	movs	r0, r3
 800fd74:	46bd      	mov	sp, r7
 800fd76:	b007      	add	sp, #28
 800fd78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd7a <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800fd7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd7c:	b08b      	sub	sp, #44	; 0x2c
 800fd7e:	af04      	add	r7, sp, #16
 800fd80:	60f8      	str	r0, [r7, #12]
 800fd82:	60b9      	str	r1, [r7, #8]
 800fd84:	0019      	movs	r1, r3
 800fd86:	1dfb      	adds	r3, r7, #7
 800fd88:	701a      	strb	r2, [r3, #0]
 800fd8a:	1dbb      	adds	r3, r7, #6
 800fd8c:	1c0a      	adds	r2, r1, #0
 800fd8e:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fd90:	2317      	movs	r3, #23
 800fd92:	18fb      	adds	r3, r7, r3
 800fd94:	2200      	movs	r2, #0
 800fd96:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800fd98:	2116      	movs	r1, #22
 800fd9a:	187b      	adds	r3, r7, r1
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800fda0:	2315      	movs	r3, #21
 800fda2:	18fb      	adds	r3, r7, r3
 800fda4:	2200      	movs	r2, #0
 800fda6:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800fda8:	2314      	movs	r3, #20
 800fdaa:	18fb      	adds	r3, r7, r3
 800fdac:	2200      	movs	r2, #0
 800fdae:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800fdb0:	1dbb      	adds	r3, r7, #6
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d005      	beq.n	800fdc4 <VL53L0X_perform_phase_calibration+0x4a>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800fdb8:	187b      	adds	r3, r7, r1
 800fdba:	68f9      	ldr	r1, [r7, #12]
 800fdbc:	2298      	movs	r2, #152	; 0x98
 800fdbe:	0052      	lsls	r2, r2, #1
 800fdc0:	5c8a      	ldrb	r2, [r1, r2]
 800fdc2:	701a      	strb	r2, [r3, #0]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800fdc4:	2517      	movs	r5, #23
 800fdc6:	197c      	adds	r4, r7, r5
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2202      	movs	r2, #2
 800fdcc:	2101      	movs	r1, #1
 800fdce:	0018      	movs	r0, r3
 800fdd0:	f002 ff72 	bl	8012cb8 <VL53L0X_WrByte>
 800fdd4:	0003      	movs	r3, r0
 800fdd6:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800fdd8:	197b      	adds	r3, r7, r5
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	b25b      	sxtb	r3, r3
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d107      	bne.n	800fdf2 <VL53L0X_perform_phase_calibration+0x78>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800fde2:	197c      	adds	r4, r7, r5
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2100      	movs	r1, #0
 800fde8:	0018      	movs	r0, r3
 800fdea:	f7ff fe20 	bl	800fa2e <VL53L0X_perform_single_ref_calibration>
 800fdee:	0003      	movs	r3, r0
 800fdf0:	7023      	strb	r3, [r4, #0]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800fdf2:	2217      	movs	r2, #23
 800fdf4:	18bb      	adds	r3, r7, r2
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	b25b      	sxtb	r3, r3
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d11b      	bne.n	800fe36 <VL53L0X_perform_phase_calibration+0xbc>
 800fdfe:	1dfb      	adds	r3, r7, #7
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d117      	bne.n	800fe36 <VL53L0X_perform_phase_calibration+0xbc>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800fe06:	18bc      	adds	r4, r7, r2
 800fe08:	2314      	movs	r3, #20
 800fe0a:	18fb      	adds	r3, r7, r3
 800fe0c:	7819      	ldrb	r1, [r3, #0]
 800fe0e:	2315      	movs	r3, #21
 800fe10:	18fb      	adds	r3, r7, r3
 800fe12:	781a      	ldrb	r2, [r3, #0]
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	2301      	movs	r3, #1
 800fe18:	9303      	str	r3, [sp, #12]
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	9302      	str	r3, [sp, #8]
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	9301      	str	r3, [sp, #4]
 800fe22:	2313      	movs	r3, #19
 800fe24:	18fb      	adds	r3, r7, r3
 800fe26:	9300      	str	r3, [sp, #0]
 800fe28:	000b      	movs	r3, r1
 800fe2a:	2101      	movs	r1, #1
 800fe2c:	f7ff fe4e 	bl	800facc <VL53L0X_ref_calibration_io>
 800fe30:	0003      	movs	r3, r0
 800fe32:	7023      	strb	r3, [r4, #0]
 800fe34:	e002      	b.n	800fe3c <VL53L0X_perform_phase_calibration+0xc2>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800fe3c:	2517      	movs	r5, #23
 800fe3e:	197b      	adds	r3, r7, r5
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	b25b      	sxtb	r3, r3
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d119      	bne.n	800fe7c <VL53L0X_perform_phase_calibration+0x102>
 800fe48:	1dbb      	adds	r3, r7, #6
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d015      	beq.n	800fe7c <VL53L0X_perform_phase_calibration+0x102>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800fe50:	197c      	adds	r4, r7, r5
 800fe52:	2616      	movs	r6, #22
 800fe54:	19bb      	adds	r3, r7, r6
 800fe56:	781a      	ldrb	r2, [r3, #0]
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2101      	movs	r1, #1
 800fe5c:	0018      	movs	r0, r3
 800fe5e:	f002 ff2b 	bl	8012cb8 <VL53L0X_WrByte>
 800fe62:	0003      	movs	r3, r0
 800fe64:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800fe66:	197b      	adds	r3, r7, r5
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	b25b      	sxtb	r3, r3
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d105      	bne.n	800fe7c <VL53L0X_perform_phase_calibration+0x102>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800fe70:	68fa      	ldr	r2, [r7, #12]
 800fe72:	19b9      	adds	r1, r7, r6
 800fe74:	2398      	movs	r3, #152	; 0x98
 800fe76:	005b      	lsls	r3, r3, #1
 800fe78:	7809      	ldrb	r1, [r1, #0]
 800fe7a:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800fe7c:	2317      	movs	r3, #23
 800fe7e:	18fb      	adds	r3, r7, r3
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	b25b      	sxtb	r3, r3
}
 800fe84:	0018      	movs	r0, r3
 800fe86:	46bd      	mov	sp, r7
 800fe88:	b007      	add	sp, #28
 800fe8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe8c <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800fe8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe8e:	b087      	sub	sp, #28
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	607a      	str	r2, [r7, #4]
 800fe98:	001a      	movs	r2, r3
 800fe9a:	1cfb      	adds	r3, r7, #3
 800fe9c:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fe9e:	2017      	movs	r0, #23
 800fea0:	183b      	adds	r3, r7, r0
 800fea2:	2200      	movs	r2, #0
 800fea4:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800fea6:	2116      	movs	r1, #22
 800fea8:	187b      	adds	r3, r7, r1
 800feaa:	2200      	movs	r2, #0
 800feac:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800feae:	187b      	adds	r3, r7, r1
 800feb0:	68f9      	ldr	r1, [r7, #12]
 800feb2:	2298      	movs	r2, #152	; 0x98
 800feb4:	0052      	lsls	r2, r2, #1
 800feb6:	5c8a      	ldrb	r2, [r1, r2]
 800feb8:	701a      	strb	r2, [r3, #0]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800feba:	0005      	movs	r5, r0
 800febc:	183c      	adds	r4, r7, r0
 800febe:	1cfb      	adds	r3, r7, #3
 800fec0:	781a      	ldrb	r2, [r3, #0]
 800fec2:	68b9      	ldr	r1, [r7, #8]
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	2300      	movs	r3, #0
 800fec8:	f7ff feca 	bl	800fc60 <VL53L0X_perform_vhv_calibration>
 800fecc:	0003      	movs	r3, r0
 800fece:	7023      	strb	r3, [r4, #0]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800fed0:	197b      	adds	r3, r7, r5
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	b25b      	sxtb	r3, r3
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d109      	bne.n	800feee <VL53L0X_perform_ref_calibration+0x62>
		Status = VL53L0X_perform_phase_calibration(
 800feda:	197c      	adds	r4, r7, r5
 800fedc:	1cfb      	adds	r3, r7, #3
 800fede:	781a      	ldrb	r2, [r3, #0]
 800fee0:	6879      	ldr	r1, [r7, #4]
 800fee2:	68f8      	ldr	r0, [r7, #12]
 800fee4:	2300      	movs	r3, #0
 800fee6:	f7ff ff48 	bl	800fd7a <VL53L0X_perform_phase_calibration>
 800feea:	0003      	movs	r3, r0
 800feec:	7023      	strb	r3, [r4, #0]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800feee:	2517      	movs	r5, #23
 800fef0:	197b      	adds	r3, r7, r5
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	b25b      	sxtb	r3, r3
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d115      	bne.n	800ff26 <VL53L0X_perform_ref_calibration+0x9a>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800fefa:	197c      	adds	r4, r7, r5
 800fefc:	2616      	movs	r6, #22
 800fefe:	19bb      	adds	r3, r7, r6
 800ff00:	781a      	ldrb	r2, [r3, #0]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2101      	movs	r1, #1
 800ff06:	0018      	movs	r0, r3
 800ff08:	f002 fed6 	bl	8012cb8 <VL53L0X_WrByte>
 800ff0c:	0003      	movs	r3, r0
 800ff0e:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800ff10:	197b      	adds	r3, r7, r5
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	b25b      	sxtb	r3, r3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d105      	bne.n	800ff26 <VL53L0X_perform_ref_calibration+0x9a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	19b9      	adds	r1, r7, r6
 800ff1e:	2398      	movs	r3, #152	; 0x98
 800ff20:	005b      	lsls	r3, r3, #1
 800ff22:	7809      	ldrb	r1, [r1, #0]
 800ff24:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800ff26:	2317      	movs	r3, #23
 800ff28:	18fb      	adds	r3, r7, r3
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	b25b      	sxtb	r3, r3
}
 800ff2e:	0018      	movs	r0, r3
 800ff30:	46bd      	mov	sp, r7
 800ff32:	b007      	add	sp, #28
 800ff34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff36 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800ff36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff38:	b087      	sub	sp, #28
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff3e:	2317      	movs	r3, #23
 800ff40:	18fb      	adds	r3, r7, r3
 800ff42:	2200      	movs	r2, #0
 800ff44:	701a      	strb	r2, [r3, #0]
	uint8_t NewDataReady = 0;
 800ff46:	230f      	movs	r3, #15
 800ff48:	18fb      	adds	r3, r7, r3
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	701a      	strb	r2, [r3, #0]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800ff52:	2517      	movs	r5, #23
 800ff54:	197c      	adds	r4, r7, r5
 800ff56:	260f      	movs	r6, #15
 800ff58:	19ba      	adds	r2, r7, r6
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	0011      	movs	r1, r2
 800ff5e:	0018      	movs	r0, r3
 800ff60:	f7fe fb9b 	bl	800e69a <VL53L0X_GetMeasurementDataReady>
 800ff64:	0003      	movs	r3, r0
 800ff66:	7023      	strb	r3, [r4, #0]
		if (Status != 0)
 800ff68:	0029      	movs	r1, r5
 800ff6a:	187b      	adds	r3, r7, r1
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	b25b      	sxtb	r3, r3
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d114      	bne.n	800ff9e <VL53L0X_measurement_poll_for_completion+0x68>
			break; /* the error is set */

		if (NewDataReady == 1)
 800ff74:	19bb      	adds	r3, r7, r6
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d012      	beq.n	800ffa2 <VL53L0X_measurement_poll_for_completion+0x6c>
			break; /* done note that status == 0 */

		LoopNb++;
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800ff82:	693a      	ldr	r2, [r7, #16]
 800ff84:	23fa      	movs	r3, #250	; 0xfa
 800ff86:	00db      	lsls	r3, r3, #3
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d303      	bcc.n	800ff94 <VL53L0X_measurement_poll_for_completion+0x5e>
			Status = VL53L0X_ERROR_TIME_OUT;
 800ff8c:	187b      	adds	r3, r7, r1
 800ff8e:	22f9      	movs	r2, #249	; 0xf9
 800ff90:	701a      	strb	r2, [r3, #0]
			break;
 800ff92:	e007      	b.n	800ffa4 <VL53L0X_measurement_poll_for_completion+0x6e>
		}

		VL53L0X_PollingDelay(Dev);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	0018      	movs	r0, r3
 800ff98:	f002 fffa 	bl	8012f90 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800ff9c:	e7d9      	b.n	800ff52 <VL53L0X_measurement_poll_for_completion+0x1c>
			break; /* the error is set */
 800ff9e:	46c0      	nop			; (mov r8, r8)
 800ffa0:	e000      	b.n	800ffa4 <VL53L0X_measurement_poll_for_completion+0x6e>
			break; /* done note that status == 0 */
 800ffa2:	46c0      	nop			; (mov r8, r8)
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800ffa4:	2317      	movs	r3, #23
 800ffa6:	18fb      	adds	r3, r7, r3
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	b25b      	sxtb	r3, r3
}
 800ffac:	0018      	movs	r0, r3
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	b007      	add	sp, #28
 800ffb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ffb4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	0002      	movs	r2, r0
 800ffbc:	1dfb      	adds	r3, r7, #7
 800ffbe:	701a      	strb	r2, [r3, #0]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800ffc0:	210f      	movs	r1, #15
 800ffc2:	187b      	adds	r3, r7, r1
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	701a      	strb	r2, [r3, #0]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800ffc8:	1dfb      	adds	r3, r7, #7
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	187a      	adds	r2, r7, r1
 800ffd2:	18db      	adds	r3, r3, r3
 800ffd4:	7013      	strb	r3, [r2, #0]

	return vcsel_period_pclks;
 800ffd6:	187b      	adds	r3, r7, r1
 800ffd8:	781b      	ldrb	r3, [r3, #0]
}
 800ffda:	0018      	movs	r0, r3
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	b004      	add	sp, #16
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b084      	sub	sp, #16
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	0002      	movs	r2, r0
 800ffea:	1dfb      	adds	r3, r7, #7
 800ffec:	701a      	strb	r2, [r3, #0]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800ffee:	210f      	movs	r1, #15
 800fff0:	187b      	adds	r3, r7, r1
 800fff2:	2200      	movs	r2, #0
 800fff4:	701a      	strb	r2, [r3, #0]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800fff6:	1dfb      	adds	r3, r7, #7
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	085b      	lsrs	r3, r3, #1
 800fffc:	b2da      	uxtb	r2, r3
 800fffe:	187b      	adds	r3, r7, r1
 8010000:	3a01      	subs	r2, #1
 8010002:	701a      	strb	r2, [r3, #0]

	return vcsel_period_reg;
 8010004:	187b      	adds	r3, r7, r1
 8010006:	781b      	ldrb	r3, [r3, #0]
}
 8010008:	0018      	movs	r0, r3
 801000a:	46bd      	mov	sp, r7
 801000c:	b004      	add	sp, #16
 801000e:	bd80      	pop	{r7, pc}

08010010 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b084      	sub	sp, #16
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8010018:	2300      	movs	r3, #0
 801001a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 801001c:	2380      	movs	r3, #128	; 0x80
 801001e:	05db      	lsls	r3, r3, #23
 8010020:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8010022:	e002      	b.n	801002a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	089b      	lsrs	r3, r3, #2
 8010028:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	429a      	cmp	r2, r3
 8010030:	d8f8      	bhi.n	8010024 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8010032:	e017      	b.n	8010064 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8010034:	68fa      	ldr	r2, [r7, #12]
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	18d3      	adds	r3, r2, r3
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	429a      	cmp	r2, r3
 801003e:	d30b      	bcc.n	8010058 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8010040:	68fa      	ldr	r2, [r7, #12]
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	18d3      	adds	r3, r2, r3
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	1ad3      	subs	r3, r2, r3
 801004a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	085b      	lsrs	r3, r3, #1
 8010050:	68ba      	ldr	r2, [r7, #8]
 8010052:	18d3      	adds	r3, r2, r3
 8010054:	60fb      	str	r3, [r7, #12]
 8010056:	e002      	b.n	801005e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	085b      	lsrs	r3, r3, #1
 801005c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	089b      	lsrs	r3, r3, #2
 8010062:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d1e4      	bne.n	8010034 <VL53L0X_isqrt+0x24>
	}

	return res;
 801006a:	68fb      	ldr	r3, [r7, #12]
}
 801006c:	0018      	movs	r0, r3
 801006e:	46bd      	mov	sp, r7
 8010070:	b004      	add	sp, #16
 8010072:	bd80      	pop	{r7, pc}

08010074 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8010074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010076:	b087      	sub	sp, #28
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801007c:	2417      	movs	r4, #23
 801007e:	193b      	adds	r3, r7, r4
 8010080:	2200      	movs	r2, #0
 8010082:	701a      	strb	r2, [r3, #0]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2200      	movs	r2, #0
 8010088:	2183      	movs	r1, #131	; 0x83
 801008a:	0018      	movs	r0, r3
 801008c:	f002 fe14 	bl	8012cb8 <VL53L0X_WrByte>
 8010090:	0003      	movs	r3, r0
 8010092:	0019      	movs	r1, r3
 8010094:	193b      	adds	r3, r7, r4
 8010096:	193a      	adds	r2, r7, r4
 8010098:	7812      	ldrb	r2, [r2, #0]
 801009a:	430a      	orrs	r2, r1
 801009c:	701a      	strb	r2, [r3, #0]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 801009e:	193b      	adds	r3, r7, r4
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	b25b      	sxtb	r3, r3
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d126      	bne.n	80100f6 <VL53L0X_device_read_strobe+0x82>
		LoopNb = 0;
 80100a8:	2300      	movs	r3, #0
 80100aa:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80100ac:	2617      	movs	r6, #23
 80100ae:	19bc      	adds	r4, r7, r6
 80100b0:	250f      	movs	r5, #15
 80100b2:	197a      	adds	r2, r7, r5
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2183      	movs	r1, #131	; 0x83
 80100b8:	0018      	movs	r0, r3
 80100ba:	f002 feac 	bl	8012e16 <VL53L0X_RdByte>
 80100be:	0003      	movs	r3, r0
 80100c0:	7023      	strb	r3, [r4, #0]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80100c2:	197b      	adds	r3, r7, r5
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d10c      	bne.n	80100e4 <VL53L0X_device_read_strobe+0x70>
 80100ca:	19bb      	adds	r3, r7, r6
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	b25b      	sxtb	r3, r3
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d107      	bne.n	80100e4 <VL53L0X_device_read_strobe+0x70>
					break;

			LoopNb = LoopNb + 1;
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	3301      	adds	r3, #1
 80100d8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80100da:	693a      	ldr	r2, [r7, #16]
 80100dc:	23fa      	movs	r3, #250	; 0xfa
 80100de:	00db      	lsls	r3, r3, #3
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d3e3      	bcc.n	80100ac <VL53L0X_device_read_strobe+0x38>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80100e4:	693a      	ldr	r2, [r7, #16]
 80100e6:	23fa      	movs	r3, #250	; 0xfa
 80100e8:	00db      	lsls	r3, r3, #3
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d303      	bcc.n	80100f6 <VL53L0X_device_read_strobe+0x82>
			Status = VL53L0X_ERROR_TIME_OUT;
 80100ee:	2317      	movs	r3, #23
 80100f0:	18fb      	adds	r3, r7, r3
 80100f2:	22f9      	movs	r2, #249	; 0xf9
 80100f4:	701a      	strb	r2, [r3, #0]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2201      	movs	r2, #1
 80100fa:	2183      	movs	r1, #131	; 0x83
 80100fc:	0018      	movs	r0, r3
 80100fe:	f002 fddb 	bl	8012cb8 <VL53L0X_WrByte>
 8010102:	0003      	movs	r3, r0
 8010104:	0019      	movs	r1, r3
 8010106:	2017      	movs	r0, #23
 8010108:	183b      	adds	r3, r7, r0
 801010a:	183a      	adds	r2, r7, r0
 801010c:	7812      	ldrb	r2, [r2, #0]
 801010e:	430a      	orrs	r2, r1
 8010110:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8010112:	183b      	adds	r3, r7, r0
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	b25b      	sxtb	r3, r3

}
 8010118:	0018      	movs	r0, r3
 801011a:	46bd      	mov	sp, r7
 801011c:	b007      	add	sp, #28
 801011e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010120 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8010120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010122:	b099      	sub	sp, #100	; 0x64
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	000a      	movs	r2, r1
 801012a:	1cfb      	adds	r3, r7, #3
 801012c:	701a      	strb	r2, [r3, #0]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801012e:	245f      	movs	r4, #95	; 0x5f
 8010130:	193b      	adds	r3, r7, r4
 8010132:	2200      	movs	r2, #0
 8010134:	701a      	strb	r2, [r3, #0]
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8010136:	235e      	movs	r3, #94	; 0x5e
 8010138:	18fb      	adds	r3, r7, r3
 801013a:	2200      	movs	r2, #0
 801013c:	701a      	strb	r2, [r3, #0]
	uint8_t ReferenceSpadType = 0;
 801013e:	225d      	movs	r2, #93	; 0x5d
 8010140:	18bb      	adds	r3, r7, r2
 8010142:	2200      	movs	r2, #0
 8010144:	701a      	strb	r2, [r3, #0]
	uint32_t PartUIDUpper = 0;
 8010146:	2300      	movs	r3, #0
 8010148:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 801014a:	2300      	movs	r3, #0
 801014c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 801014e:	2300      	movs	r3, #0
 8010150:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8010152:	215a      	movs	r1, #90	; 0x5a
 8010154:	187b      	adds	r3, r7, r1
 8010156:	2200      	movs	r2, #0
 8010158:	801a      	strh	r2, [r3, #0]
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 801015a:	23c8      	movs	r3, #200	; 0xc8
 801015c:	015b      	lsls	r3, r3, #5
 801015e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8010160:	2300      	movs	r3, #0
 8010162:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8010164:	2300      	movs	r3, #0
 8010166:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8010168:	2300      	movs	r3, #0
 801016a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 801016c:	253f      	movs	r5, #63	; 0x3f
 801016e:	197b      	adds	r3, r7, r5
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	21f0      	movs	r1, #240	; 0xf0
 8010174:	5c52      	ldrb	r2, [r2, r1]
 8010176:	701a      	strb	r2, [r3, #0]
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8010178:	197b      	adds	r3, r7, r5
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	2b07      	cmp	r3, #7
 801017e:	d101      	bne.n	8010184 <VL53L0X_get_info_from_device+0x64>
 8010180:	f000 fc51 	bl	8010a26 <VL53L0X_get_info_from_device+0x906>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2201      	movs	r2, #1
 8010188:	2180      	movs	r1, #128	; 0x80
 801018a:	0018      	movs	r0, r3
 801018c:	f002 fd94 	bl	8012cb8 <VL53L0X_WrByte>
 8010190:	0003      	movs	r3, r0
 8010192:	0019      	movs	r1, r3
 8010194:	193b      	adds	r3, r7, r4
 8010196:	193a      	adds	r2, r7, r4
 8010198:	7812      	ldrb	r2, [r2, #0]
 801019a:	430a      	orrs	r2, r1
 801019c:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2201      	movs	r2, #1
 80101a2:	21ff      	movs	r1, #255	; 0xff
 80101a4:	0018      	movs	r0, r3
 80101a6:	f002 fd87 	bl	8012cb8 <VL53L0X_WrByte>
 80101aa:	0003      	movs	r3, r0
 80101ac:	0019      	movs	r1, r3
 80101ae:	193b      	adds	r3, r7, r4
 80101b0:	193a      	adds	r2, r7, r4
 80101b2:	7812      	ldrb	r2, [r2, #0]
 80101b4:	430a      	orrs	r2, r1
 80101b6:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	2100      	movs	r1, #0
 80101be:	0018      	movs	r0, r3
 80101c0:	f002 fd7a 	bl	8012cb8 <VL53L0X_WrByte>
 80101c4:	0003      	movs	r3, r0
 80101c6:	0019      	movs	r1, r3
 80101c8:	193b      	adds	r3, r7, r4
 80101ca:	193a      	adds	r2, r7, r4
 80101cc:	7812      	ldrb	r2, [r2, #0]
 80101ce:	430a      	orrs	r2, r1
 80101d0:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2206      	movs	r2, #6
 80101d6:	21ff      	movs	r1, #255	; 0xff
 80101d8:	0018      	movs	r0, r3
 80101da:	f002 fd6d 	bl	8012cb8 <VL53L0X_WrByte>
 80101de:	0003      	movs	r3, r0
 80101e0:	0019      	movs	r1, r3
 80101e2:	193b      	adds	r3, r7, r4
 80101e4:	193a      	adds	r2, r7, r4
 80101e6:	7812      	ldrb	r2, [r2, #0]
 80101e8:	430a      	orrs	r2, r1
 80101ea:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80101ec:	2637      	movs	r6, #55	; 0x37
 80101ee:	19ba      	adds	r2, r7, r6
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2183      	movs	r1, #131	; 0x83
 80101f4:	0018      	movs	r0, r3
 80101f6:	f002 fe0e 	bl	8012e16 <VL53L0X_RdByte>
 80101fa:	0003      	movs	r3, r0
 80101fc:	0019      	movs	r1, r3
 80101fe:	193b      	adds	r3, r7, r4
 8010200:	193a      	adds	r2, r7, r4
 8010202:	7812      	ldrb	r2, [r2, #0]
 8010204:	430a      	orrs	r2, r1
 8010206:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8010208:	19bb      	adds	r3, r7, r6
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	2204      	movs	r2, #4
 801020e:	4313      	orrs	r3, r2
 8010210:	b2da      	uxtb	r2, r3
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2183      	movs	r1, #131	; 0x83
 8010216:	0018      	movs	r0, r3
 8010218:	f002 fd4e 	bl	8012cb8 <VL53L0X_WrByte>
 801021c:	0003      	movs	r3, r0
 801021e:	0019      	movs	r1, r3
 8010220:	193b      	adds	r3, r7, r4
 8010222:	193a      	adds	r2, r7, r4
 8010224:	7812      	ldrb	r2, [r2, #0]
 8010226:	430a      	orrs	r2, r1
 8010228:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2207      	movs	r2, #7
 801022e:	21ff      	movs	r1, #255	; 0xff
 8010230:	0018      	movs	r0, r3
 8010232:	f002 fd41 	bl	8012cb8 <VL53L0X_WrByte>
 8010236:	0003      	movs	r3, r0
 8010238:	0019      	movs	r1, r3
 801023a:	193b      	adds	r3, r7, r4
 801023c:	193a      	adds	r2, r7, r4
 801023e:	7812      	ldrb	r2, [r2, #0]
 8010240:	430a      	orrs	r2, r1
 8010242:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2201      	movs	r2, #1
 8010248:	2181      	movs	r1, #129	; 0x81
 801024a:	0018      	movs	r0, r3
 801024c:	f002 fd34 	bl	8012cb8 <VL53L0X_WrByte>
 8010250:	0003      	movs	r3, r0
 8010252:	0019      	movs	r1, r3
 8010254:	193b      	adds	r3, r7, r4
 8010256:	193a      	adds	r2, r7, r4
 8010258:	7812      	ldrb	r2, [r2, #0]
 801025a:	430a      	orrs	r2, r1
 801025c:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_PollingDelay(Dev);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	0018      	movs	r0, r3
 8010262:	f002 fe95 	bl	8012f90 <VL53L0X_PollingDelay>
 8010266:	0003      	movs	r3, r0
 8010268:	0019      	movs	r1, r3
 801026a:	193b      	adds	r3, r7, r4
 801026c:	193a      	adds	r2, r7, r4
 801026e:	7812      	ldrb	r2, [r2, #0]
 8010270:	430a      	orrs	r2, r1
 8010272:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2201      	movs	r2, #1
 8010278:	2180      	movs	r1, #128	; 0x80
 801027a:	0018      	movs	r0, r3
 801027c:	f002 fd1c 	bl	8012cb8 <VL53L0X_WrByte>
 8010280:	0003      	movs	r3, r0
 8010282:	0019      	movs	r1, r3
 8010284:	193b      	adds	r3, r7, r4
 8010286:	193a      	adds	r2, r7, r4
 8010288:	7812      	ldrb	r2, [r2, #0]
 801028a:	430a      	orrs	r2, r1
 801028c:	701a      	strb	r2, [r3, #0]

		if (((option & 1) == 1) &&
 801028e:	1cfb      	adds	r3, r7, #3
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	2201      	movs	r2, #1
 8010294:	4013      	ands	r3, r2
 8010296:	d100      	bne.n	801029a <VL53L0X_get_info_from_device+0x17a>
 8010298:	e0a3      	b.n	80103e2 <VL53L0X_get_info_from_device+0x2c2>
			((ReadDataFromDeviceDone & 1) == 0)) {
 801029a:	197b      	adds	r3, r7, r5
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	2201      	movs	r2, #1
 80102a0:	4013      	ands	r3, r2
		if (((option & 1) == 1) &&
 80102a2:	d000      	beq.n	80102a6 <VL53L0X_get_info_from_device+0x186>
 80102a4:	e09d      	b.n	80103e2 <VL53L0X_get_info_from_device+0x2c2>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	226b      	movs	r2, #107	; 0x6b
 80102aa:	2194      	movs	r1, #148	; 0x94
 80102ac:	0018      	movs	r0, r3
 80102ae:	f002 fd03 	bl	8012cb8 <VL53L0X_WrByte>
 80102b2:	0003      	movs	r3, r0
 80102b4:	0019      	movs	r1, r3
 80102b6:	193b      	adds	r3, r7, r4
 80102b8:	193a      	adds	r2, r7, r4
 80102ba:	7812      	ldrb	r2, [r2, #0]
 80102bc:	430a      	orrs	r2, r1
 80102be:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	0018      	movs	r0, r3
 80102c4:	f7ff fed6 	bl	8010074 <VL53L0X_device_read_strobe>
 80102c8:	0003      	movs	r3, r0
 80102ca:	0019      	movs	r1, r3
 80102cc:	193b      	adds	r3, r7, r4
 80102ce:	193a      	adds	r2, r7, r4
 80102d0:	7812      	ldrb	r2, [r2, #0]
 80102d2:	430a      	orrs	r2, r1
 80102d4:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80102d6:	2630      	movs	r6, #48	; 0x30
 80102d8:	19ba      	adds	r2, r7, r6
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2190      	movs	r1, #144	; 0x90
 80102de:	0018      	movs	r0, r3
 80102e0:	f002 fe10 	bl	8012f04 <VL53L0X_RdDWord>
 80102e4:	0003      	movs	r3, r0
 80102e6:	0019      	movs	r1, r3
 80102e8:	193b      	adds	r3, r7, r4
 80102ea:	193a      	adds	r2, r7, r4
 80102ec:	7812      	ldrb	r2, [r2, #0]
 80102ee:	430a      	orrs	r2, r1
 80102f0:	701a      	strb	r2, [r3, #0]

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	0a1b      	lsrs	r3, r3, #8
 80102f6:	b2da      	uxtb	r2, r3
 80102f8:	235e      	movs	r3, #94	; 0x5e
 80102fa:	18fb      	adds	r3, r7, r3
 80102fc:	217f      	movs	r1, #127	; 0x7f
 80102fe:	400a      	ands	r2, r1
 8010300:	701a      	strb	r2, [r3, #0]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8010302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010304:	0bdb      	lsrs	r3, r3, #15
 8010306:	b2da      	uxtb	r2, r3
 8010308:	235d      	movs	r3, #93	; 0x5d
 801030a:	18fb      	adds	r3, r7, r3
 801030c:	2101      	movs	r1, #1
 801030e:	400a      	ands	r2, r1
 8010310:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2224      	movs	r2, #36	; 0x24
 8010316:	2194      	movs	r1, #148	; 0x94
 8010318:	0018      	movs	r0, r3
 801031a:	f002 fccd 	bl	8012cb8 <VL53L0X_WrByte>
 801031e:	0003      	movs	r3, r0
 8010320:	0019      	movs	r1, r3
 8010322:	193b      	adds	r3, r7, r4
 8010324:	193a      	adds	r2, r7, r4
 8010326:	7812      	ldrb	r2, [r2, #0]
 8010328:	430a      	orrs	r2, r1
 801032a:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	0018      	movs	r0, r3
 8010330:	f7ff fea0 	bl	8010074 <VL53L0X_device_read_strobe>
 8010334:	0003      	movs	r3, r0
 8010336:	0019      	movs	r1, r3
 8010338:	193b      	adds	r3, r7, r4
 801033a:	193a      	adds	r2, r7, r4
 801033c:	7812      	ldrb	r2, [r2, #0]
 801033e:	430a      	orrs	r2, r1
 8010340:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8010342:	19ba      	adds	r2, r7, r6
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2190      	movs	r1, #144	; 0x90
 8010348:	0018      	movs	r0, r3
 801034a:	f002 fddb 	bl	8012f04 <VL53L0X_RdDWord>
 801034e:	0003      	movs	r3, r0
 8010350:	0019      	movs	r1, r3
 8010352:	193b      	adds	r3, r7, r4
 8010354:	193a      	adds	r2, r7, r4
 8010356:	7812      	ldrb	r2, [r2, #0]
 8010358:	430a      	orrs	r2, r1
 801035a:	701a      	strb	r2, [r3, #0]


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 801035c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035e:	0e1b      	lsrs	r3, r3, #24
 8010360:	b2da      	uxtb	r2, r3
 8010362:	2508      	movs	r5, #8
 8010364:	197b      	adds	r3, r7, r5
 8010366:	701a      	strb	r2, [r3, #0]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8010368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036a:	0c1b      	lsrs	r3, r3, #16
 801036c:	b2da      	uxtb	r2, r3
 801036e:	197b      	adds	r3, r7, r5
 8010370:	705a      	strb	r2, [r3, #1]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8010372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010374:	0a1b      	lsrs	r3, r3, #8
 8010376:	b2da      	uxtb	r2, r3
 8010378:	197b      	adds	r3, r7, r5
 801037a:	709a      	strb	r2, [r3, #2]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 801037c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037e:	b2da      	uxtb	r2, r3
 8010380:	197b      	adds	r3, r7, r5
 8010382:	70da      	strb	r2, [r3, #3]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2225      	movs	r2, #37	; 0x25
 8010388:	2194      	movs	r1, #148	; 0x94
 801038a:	0018      	movs	r0, r3
 801038c:	f002 fc94 	bl	8012cb8 <VL53L0X_WrByte>
 8010390:	0003      	movs	r3, r0
 8010392:	0019      	movs	r1, r3
 8010394:	193b      	adds	r3, r7, r4
 8010396:	193a      	adds	r2, r7, r4
 8010398:	7812      	ldrb	r2, [r2, #0]
 801039a:	430a      	orrs	r2, r1
 801039c:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	0018      	movs	r0, r3
 80103a2:	f7ff fe67 	bl	8010074 <VL53L0X_device_read_strobe>
 80103a6:	0003      	movs	r3, r0
 80103a8:	0019      	movs	r1, r3
 80103aa:	193b      	adds	r3, r7, r4
 80103ac:	193a      	adds	r2, r7, r4
 80103ae:	7812      	ldrb	r2, [r2, #0]
 80103b0:	430a      	orrs	r2, r1
 80103b2:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80103b4:	19ba      	adds	r2, r7, r6
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2190      	movs	r1, #144	; 0x90
 80103ba:	0018      	movs	r0, r3
 80103bc:	f002 fda2 	bl	8012f04 <VL53L0X_RdDWord>
 80103c0:	0003      	movs	r3, r0
 80103c2:	0019      	movs	r1, r3
 80103c4:	193b      	adds	r3, r7, r4
 80103c6:	193a      	adds	r2, r7, r4
 80103c8:	7812      	ldrb	r2, [r2, #0]
 80103ca:	430a      	orrs	r2, r1
 80103cc:	701a      	strb	r2, [r3, #0]

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80103ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d0:	0e1b      	lsrs	r3, r3, #24
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	197b      	adds	r3, r7, r5
 80103d6:	711a      	strb	r2, [r3, #4]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80103d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103da:	0c1b      	lsrs	r3, r3, #16
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	197b      	adds	r3, r7, r5
 80103e0:	715a      	strb	r2, [r3, #5]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80103e2:	1cfb      	adds	r3, r7, #3
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	2202      	movs	r2, #2
 80103e8:	4013      	ands	r3, r2
 80103ea:	d100      	bne.n	80103ee <VL53L0X_get_info_from_device+0x2ce>
 80103ec:	e1aa      	b.n	8010744 <VL53L0X_get_info_from_device+0x624>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80103ee:	233f      	movs	r3, #63	; 0x3f
 80103f0:	18fb      	adds	r3, r7, r3
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	2202      	movs	r2, #2
 80103f6:	4013      	ands	r3, r2
		if (((option & 2) == 2) &&
 80103f8:	d000      	beq.n	80103fc <VL53L0X_get_info_from_device+0x2dc>
 80103fa:	e1a3      	b.n	8010744 <VL53L0X_get_info_from_device+0x624>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2202      	movs	r2, #2
 8010400:	2194      	movs	r1, #148	; 0x94
 8010402:	0018      	movs	r0, r3
 8010404:	f002 fc58 	bl	8012cb8 <VL53L0X_WrByte>
 8010408:	0003      	movs	r3, r0
 801040a:	0019      	movs	r1, r3
 801040c:	245f      	movs	r4, #95	; 0x5f
 801040e:	193b      	adds	r3, r7, r4
 8010410:	193a      	adds	r2, r7, r4
 8010412:	7812      	ldrb	r2, [r2, #0]
 8010414:	430a      	orrs	r2, r1
 8010416:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	0018      	movs	r0, r3
 801041c:	f7ff fe2a 	bl	8010074 <VL53L0X_device_read_strobe>
 8010420:	0003      	movs	r3, r0
 8010422:	0019      	movs	r1, r3
 8010424:	193b      	adds	r3, r7, r4
 8010426:	193a      	adds	r2, r7, r4
 8010428:	7812      	ldrb	r2, [r2, #0]
 801042a:	430a      	orrs	r2, r1
 801042c:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 801042e:	232f      	movs	r3, #47	; 0x2f
 8010430:	18fa      	adds	r2, r7, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2190      	movs	r1, #144	; 0x90
 8010436:	0018      	movs	r0, r3
 8010438:	f002 fced 	bl	8012e16 <VL53L0X_RdByte>
 801043c:	0003      	movs	r3, r0
 801043e:	0019      	movs	r1, r3
 8010440:	193b      	adds	r3, r7, r4
 8010442:	193a      	adds	r2, r7, r4
 8010444:	7812      	ldrb	r2, [r2, #0]
 8010446:	430a      	orrs	r2, r1
 8010448:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	227b      	movs	r2, #123	; 0x7b
 801044e:	2194      	movs	r1, #148	; 0x94
 8010450:	0018      	movs	r0, r3
 8010452:	f002 fc31 	bl	8012cb8 <VL53L0X_WrByte>
 8010456:	0003      	movs	r3, r0
 8010458:	0019      	movs	r1, r3
 801045a:	193b      	adds	r3, r7, r4
 801045c:	193a      	adds	r2, r7, r4
 801045e:	7812      	ldrb	r2, [r2, #0]
 8010460:	430a      	orrs	r2, r1
 8010462:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	0018      	movs	r0, r3
 8010468:	f7ff fe04 	bl	8010074 <VL53L0X_device_read_strobe>
 801046c:	0003      	movs	r3, r0
 801046e:	0019      	movs	r1, r3
 8010470:	193b      	adds	r3, r7, r4
 8010472:	193a      	adds	r2, r7, r4
 8010474:	7812      	ldrb	r2, [r2, #0]
 8010476:	430a      	orrs	r2, r1
 8010478:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 801047a:	232e      	movs	r3, #46	; 0x2e
 801047c:	18fa      	adds	r2, r7, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2190      	movs	r1, #144	; 0x90
 8010482:	0018      	movs	r0, r3
 8010484:	f002 fcc7 	bl	8012e16 <VL53L0X_RdByte>
 8010488:	0003      	movs	r3, r0
 801048a:	0019      	movs	r1, r3
 801048c:	193b      	adds	r3, r7, r4
 801048e:	193a      	adds	r2, r7, r4
 8010490:	7812      	ldrb	r2, [r2, #0]
 8010492:	430a      	orrs	r2, r1
 8010494:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2277      	movs	r2, #119	; 0x77
 801049a:	2194      	movs	r1, #148	; 0x94
 801049c:	0018      	movs	r0, r3
 801049e:	f002 fc0b 	bl	8012cb8 <VL53L0X_WrByte>
 80104a2:	0003      	movs	r3, r0
 80104a4:	0019      	movs	r1, r3
 80104a6:	193b      	adds	r3, r7, r4
 80104a8:	193a      	adds	r2, r7, r4
 80104aa:	7812      	ldrb	r2, [r2, #0]
 80104ac:	430a      	orrs	r2, r1
 80104ae:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	0018      	movs	r0, r3
 80104b4:	f7ff fdde 	bl	8010074 <VL53L0X_device_read_strobe>
 80104b8:	0003      	movs	r3, r0
 80104ba:	0019      	movs	r1, r3
 80104bc:	193b      	adds	r3, r7, r4
 80104be:	193a      	adds	r2, r7, r4
 80104c0:	7812      	ldrb	r2, [r2, #0]
 80104c2:	430a      	orrs	r2, r1
 80104c4:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80104c6:	2330      	movs	r3, #48	; 0x30
 80104c8:	18fa      	adds	r2, r7, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2190      	movs	r1, #144	; 0x90
 80104ce:	0018      	movs	r0, r3
 80104d0:	f002 fd18 	bl	8012f04 <VL53L0X_RdDWord>
 80104d4:	0003      	movs	r3, r0
 80104d6:	0019      	movs	r1, r3
 80104d8:	193b      	adds	r3, r7, r4
 80104da:	193a      	adds	r2, r7, r4
 80104dc:	7812      	ldrb	r2, [r2, #0]
 80104de:	430a      	orrs	r2, r1
 80104e0:	701a      	strb	r2, [r3, #0]

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80104e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e4:	0e5b      	lsrs	r3, r3, #25
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	227f      	movs	r2, #127	; 0x7f
 80104ea:	4013      	ands	r3, r2
 80104ec:	b2da      	uxtb	r2, r3
 80104ee:	2510      	movs	r5, #16
 80104f0:	197b      	adds	r3, r7, r5
 80104f2:	701a      	strb	r2, [r3, #0]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80104f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f6:	0c9b      	lsrs	r3, r3, #18
 80104f8:	b2db      	uxtb	r3, r3
 80104fa:	227f      	movs	r2, #127	; 0x7f
 80104fc:	4013      	ands	r3, r2
 80104fe:	b2da      	uxtb	r2, r3
 8010500:	197b      	adds	r3, r7, r5
 8010502:	705a      	strb	r2, [r3, #1]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8010504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010506:	0adb      	lsrs	r3, r3, #11
 8010508:	b2db      	uxtb	r3, r3
 801050a:	227f      	movs	r2, #127	; 0x7f
 801050c:	4013      	ands	r3, r2
 801050e:	b2da      	uxtb	r2, r3
 8010510:	197b      	adds	r3, r7, r5
 8010512:	709a      	strb	r2, [r3, #2]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8010514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010516:	091b      	lsrs	r3, r3, #4
 8010518:	b2db      	uxtb	r3, r3
 801051a:	227f      	movs	r2, #127	; 0x7f
 801051c:	4013      	ands	r3, r2
 801051e:	b2da      	uxtb	r2, r3
 8010520:	197b      	adds	r3, r7, r5
 8010522:	70da      	strb	r2, [r3, #3]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8010524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010526:	b2db      	uxtb	r3, r3
 8010528:	00db      	lsls	r3, r3, #3
 801052a:	b2db      	uxtb	r3, r3
 801052c:	2278      	movs	r2, #120	; 0x78
 801052e:	4013      	ands	r3, r2
 8010530:	b2da      	uxtb	r2, r3
 8010532:	2637      	movs	r6, #55	; 0x37
 8010534:	19bb      	adds	r3, r7, r6
 8010536:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2278      	movs	r2, #120	; 0x78
 801053c:	2194      	movs	r1, #148	; 0x94
 801053e:	0018      	movs	r0, r3
 8010540:	f002 fbba 	bl	8012cb8 <VL53L0X_WrByte>
 8010544:	0003      	movs	r3, r0
 8010546:	0019      	movs	r1, r3
 8010548:	193b      	adds	r3, r7, r4
 801054a:	193a      	adds	r2, r7, r4
 801054c:	7812      	ldrb	r2, [r2, #0]
 801054e:	430a      	orrs	r2, r1
 8010550:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	0018      	movs	r0, r3
 8010556:	f7ff fd8d 	bl	8010074 <VL53L0X_device_read_strobe>
 801055a:	0003      	movs	r3, r0
 801055c:	0019      	movs	r1, r3
 801055e:	193b      	adds	r3, r7, r4
 8010560:	193a      	adds	r2, r7, r4
 8010562:	7812      	ldrb	r2, [r2, #0]
 8010564:	430a      	orrs	r2, r1
 8010566:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8010568:	2330      	movs	r3, #48	; 0x30
 801056a:	18fa      	adds	r2, r7, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2190      	movs	r1, #144	; 0x90
 8010570:	0018      	movs	r0, r3
 8010572:	f002 fcc7 	bl	8012f04 <VL53L0X_RdDWord>
 8010576:	0003      	movs	r3, r0
 8010578:	0019      	movs	r1, r3
 801057a:	193b      	adds	r3, r7, r4
 801057c:	193a      	adds	r2, r7, r4
 801057e:	7812      	ldrb	r2, [r2, #0]
 8010580:	430a      	orrs	r2, r1
 8010582:	701a      	strb	r2, [r3, #0]

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8010584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010586:	0f5b      	lsrs	r3, r3, #29
 8010588:	b2db      	uxtb	r3, r3
 801058a:	227f      	movs	r2, #127	; 0x7f
 801058c:	4013      	ands	r3, r2
 801058e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8010590:	0031      	movs	r1, r6
 8010592:	187b      	adds	r3, r7, r1
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	18d3      	adds	r3, r2, r3
 8010598:	b2da      	uxtb	r2, r3
 801059a:	197b      	adds	r3, r7, r5
 801059c:	711a      	strb	r2, [r3, #4]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 801059e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a0:	0d9b      	lsrs	r3, r3, #22
 80105a2:	b2db      	uxtb	r3, r3
 80105a4:	227f      	movs	r2, #127	; 0x7f
 80105a6:	4013      	ands	r3, r2
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	197b      	adds	r3, r7, r5
 80105ac:	715a      	strb	r2, [r3, #5]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80105ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b0:	0bdb      	lsrs	r3, r3, #15
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	227f      	movs	r2, #127	; 0x7f
 80105b6:	4013      	ands	r3, r2
 80105b8:	b2da      	uxtb	r2, r3
 80105ba:	197b      	adds	r3, r7, r5
 80105bc:	719a      	strb	r2, [r3, #6]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80105be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c0:	0a1b      	lsrs	r3, r3, #8
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	227f      	movs	r2, #127	; 0x7f
 80105c6:	4013      	ands	r3, r2
 80105c8:	b2da      	uxtb	r2, r3
 80105ca:	197b      	adds	r3, r7, r5
 80105cc:	71da      	strb	r2, [r3, #7]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80105ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d0:	085b      	lsrs	r3, r3, #1
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	227f      	movs	r2, #127	; 0x7f
 80105d6:	4013      	ands	r3, r2
 80105d8:	b2da      	uxtb	r2, r3
 80105da:	197b      	adds	r3, r7, r5
 80105dc:	721a      	strb	r2, [r3, #8]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80105de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	019b      	lsls	r3, r3, #6
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	2240      	movs	r2, #64	; 0x40
 80105e8:	4013      	ands	r3, r2
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	000e      	movs	r6, r1
 80105ee:	19bb      	adds	r3, r7, r6
 80105f0:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2279      	movs	r2, #121	; 0x79
 80105f6:	2194      	movs	r1, #148	; 0x94
 80105f8:	0018      	movs	r0, r3
 80105fa:	f002 fb5d 	bl	8012cb8 <VL53L0X_WrByte>
 80105fe:	0003      	movs	r3, r0
 8010600:	0019      	movs	r1, r3
 8010602:	193b      	adds	r3, r7, r4
 8010604:	193a      	adds	r2, r7, r4
 8010606:	7812      	ldrb	r2, [r2, #0]
 8010608:	430a      	orrs	r2, r1
 801060a:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_device_read_strobe(Dev);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	0018      	movs	r0, r3
 8010610:	f7ff fd30 	bl	8010074 <VL53L0X_device_read_strobe>
 8010614:	0003      	movs	r3, r0
 8010616:	0019      	movs	r1, r3
 8010618:	193b      	adds	r3, r7, r4
 801061a:	193a      	adds	r2, r7, r4
 801061c:	7812      	ldrb	r2, [r2, #0]
 801061e:	430a      	orrs	r2, r1
 8010620:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8010622:	2330      	movs	r3, #48	; 0x30
 8010624:	18fa      	adds	r2, r7, r3
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2190      	movs	r1, #144	; 0x90
 801062a:	0018      	movs	r0, r3
 801062c:	f002 fc6a 	bl	8012f04 <VL53L0X_RdDWord>
 8010630:	0003      	movs	r3, r0
 8010632:	0019      	movs	r1, r3
 8010634:	193b      	adds	r3, r7, r4
 8010636:	193a      	adds	r2, r7, r4
 8010638:	7812      	ldrb	r2, [r2, #0]
 801063a:	430a      	orrs	r2, r1
 801063c:	701a      	strb	r2, [r3, #0]

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 801063e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010640:	0e9b      	lsrs	r3, r3, #26
 8010642:	b2db      	uxtb	r3, r3
 8010644:	227f      	movs	r2, #127	; 0x7f
 8010646:	4013      	ands	r3, r2
 8010648:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 801064a:	19bb      	adds	r3, r7, r6
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	18d3      	adds	r3, r2, r3
 8010650:	b2da      	uxtb	r2, r3
 8010652:	197b      	adds	r3, r7, r5
 8010654:	725a      	strb	r2, [r3, #9]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8010656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010658:	0cdb      	lsrs	r3, r3, #19
 801065a:	b2db      	uxtb	r3, r3
 801065c:	227f      	movs	r2, #127	; 0x7f
 801065e:	4013      	ands	r3, r2
 8010660:	b2da      	uxtb	r2, r3
 8010662:	197b      	adds	r3, r7, r5
 8010664:	729a      	strb	r2, [r3, #10]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8010666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010668:	0b1b      	lsrs	r3, r3, #12
 801066a:	b2db      	uxtb	r3, r3
 801066c:	227f      	movs	r2, #127	; 0x7f
 801066e:	4013      	ands	r3, r2
 8010670:	b2da      	uxtb	r2, r3
 8010672:	197b      	adds	r3, r7, r5
 8010674:	72da      	strb	r2, [r3, #11]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8010676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010678:	095b      	lsrs	r3, r3, #5
 801067a:	b2db      	uxtb	r3, r3
 801067c:	227f      	movs	r2, #127	; 0x7f
 801067e:	4013      	ands	r3, r2
 8010680:	b2da      	uxtb	r2, r3
 8010682:	197b      	adds	r3, r7, r5
 8010684:	731a      	strb	r2, [r3, #12]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8010686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010688:	b2db      	uxtb	r3, r3
 801068a:	009b      	lsls	r3, r3, #2
 801068c:	b2db      	uxtb	r3, r3
 801068e:	227c      	movs	r2, #124	; 0x7c
 8010690:	4013      	ands	r3, r2
 8010692:	b2da      	uxtb	r2, r3
 8010694:	19bb      	adds	r3, r7, r6
 8010696:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	227a      	movs	r2, #122	; 0x7a
 801069c:	2194      	movs	r1, #148	; 0x94
 801069e:	0018      	movs	r0, r3
 80106a0:	f002 fb0a 	bl	8012cb8 <VL53L0X_WrByte>
 80106a4:	0003      	movs	r3, r0
 80106a6:	0019      	movs	r1, r3
 80106a8:	193b      	adds	r3, r7, r4
 80106aa:	193a      	adds	r2, r7, r4
 80106ac:	7812      	ldrb	r2, [r2, #0]
 80106ae:	430a      	orrs	r2, r1
 80106b0:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_device_read_strobe(Dev);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	0018      	movs	r0, r3
 80106b6:	f7ff fcdd 	bl	8010074 <VL53L0X_device_read_strobe>
 80106ba:	0003      	movs	r3, r0
 80106bc:	0019      	movs	r1, r3
 80106be:	193b      	adds	r3, r7, r4
 80106c0:	193a      	adds	r2, r7, r4
 80106c2:	7812      	ldrb	r2, [r2, #0]
 80106c4:	430a      	orrs	r2, r1
 80106c6:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80106c8:	2330      	movs	r3, #48	; 0x30
 80106ca:	18fa      	adds	r2, r7, r3
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2190      	movs	r1, #144	; 0x90
 80106d0:	0018      	movs	r0, r3
 80106d2:	f002 fc17 	bl	8012f04 <VL53L0X_RdDWord>
 80106d6:	0003      	movs	r3, r0
 80106d8:	0019      	movs	r1, r3
 80106da:	193b      	adds	r3, r7, r4
 80106dc:	193a      	adds	r2, r7, r4
 80106de:	7812      	ldrb	r2, [r2, #0]
 80106e0:	430a      	orrs	r2, r1
 80106e2:	701a      	strb	r2, [r3, #0]

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80106e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e6:	0f9b      	lsrs	r3, r3, #30
 80106e8:	b2db      	uxtb	r3, r3
 80106ea:	227f      	movs	r2, #127	; 0x7f
 80106ec:	4013      	ands	r3, r2
 80106ee:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80106f0:	19bb      	adds	r3, r7, r6
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	18d3      	adds	r3, r2, r3
 80106f6:	b2da      	uxtb	r2, r3
 80106f8:	0029      	movs	r1, r5
 80106fa:	187b      	adds	r3, r7, r1
 80106fc:	735a      	strb	r2, [r3, #13]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80106fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010700:	0ddb      	lsrs	r3, r3, #23
 8010702:	b2db      	uxtb	r3, r3
 8010704:	227f      	movs	r2, #127	; 0x7f
 8010706:	4013      	ands	r3, r2
 8010708:	b2da      	uxtb	r2, r3
 801070a:	187b      	adds	r3, r7, r1
 801070c:	739a      	strb	r2, [r3, #14]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 801070e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010710:	0c1b      	lsrs	r3, r3, #16
 8010712:	b2db      	uxtb	r3, r3
 8010714:	227f      	movs	r2, #127	; 0x7f
 8010716:	4013      	ands	r3, r2
 8010718:	b2da      	uxtb	r2, r3
 801071a:	187b      	adds	r3, r7, r1
 801071c:	73da      	strb	r2, [r3, #15]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 801071e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010720:	0a5b      	lsrs	r3, r3, #9
 8010722:	b2db      	uxtb	r3, r3
 8010724:	227f      	movs	r2, #127	; 0x7f
 8010726:	4013      	ands	r3, r2
 8010728:	b2da      	uxtb	r2, r3
 801072a:	187b      	adds	r3, r7, r1
 801072c:	741a      	strb	r2, [r3, #16]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 801072e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010730:	089b      	lsrs	r3, r3, #2
 8010732:	b2db      	uxtb	r3, r3
 8010734:	227f      	movs	r2, #127	; 0x7f
 8010736:	4013      	ands	r3, r2
 8010738:	b2da      	uxtb	r2, r3
 801073a:	187b      	adds	r3, r7, r1
 801073c:	745a      	strb	r2, [r3, #17]
			ProductId[18] = '\0';
 801073e:	187b      	adds	r3, r7, r1
 8010740:	2200      	movs	r2, #0
 8010742:	749a      	strb	r2, [r3, #18]

		}

		if (((option & 4) == 4) &&
 8010744:	1cfb      	adds	r3, r7, #3
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	2204      	movs	r2, #4
 801074a:	4013      	ands	r3, r2
 801074c:	d100      	bne.n	8010750 <VL53L0X_get_info_from_device+0x630>
 801074e:	e0fc      	b.n	801094a <VL53L0X_get_info_from_device+0x82a>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8010750:	233f      	movs	r3, #63	; 0x3f
 8010752:	18fb      	adds	r3, r7, r3
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	2204      	movs	r2, #4
 8010758:	4013      	ands	r3, r2
		if (((option & 4) == 4) &&
 801075a:	d000      	beq.n	801075e <VL53L0X_get_info_from_device+0x63e>
 801075c:	e0f5      	b.n	801094a <VL53L0X_get_info_from_device+0x82a>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	227b      	movs	r2, #123	; 0x7b
 8010762:	2194      	movs	r1, #148	; 0x94
 8010764:	0018      	movs	r0, r3
 8010766:	f002 faa7 	bl	8012cb8 <VL53L0X_WrByte>
 801076a:	0003      	movs	r3, r0
 801076c:	0019      	movs	r1, r3
 801076e:	245f      	movs	r4, #95	; 0x5f
 8010770:	193b      	adds	r3, r7, r4
 8010772:	193a      	adds	r2, r7, r4
 8010774:	7812      	ldrb	r2, [r2, #0]
 8010776:	430a      	orrs	r2, r1
 8010778:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	0018      	movs	r0, r3
 801077e:	f7ff fc79 	bl	8010074 <VL53L0X_device_read_strobe>
 8010782:	0003      	movs	r3, r0
 8010784:	0019      	movs	r1, r3
 8010786:	193b      	adds	r3, r7, r4
 8010788:	193a      	adds	r2, r7, r4
 801078a:	7812      	ldrb	r2, [r2, #0]
 801078c:	430a      	orrs	r2, r1
 801078e:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8010790:	2328      	movs	r3, #40	; 0x28
 8010792:	18fa      	adds	r2, r7, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2190      	movs	r1, #144	; 0x90
 8010798:	0018      	movs	r0, r3
 801079a:	f002 fbb3 	bl	8012f04 <VL53L0X_RdDWord>
 801079e:	0003      	movs	r3, r0
 80107a0:	0019      	movs	r1, r3
 80107a2:	193b      	adds	r3, r7, r4
 80107a4:	193a      	adds	r2, r7, r4
 80107a6:	7812      	ldrb	r2, [r2, #0]
 80107a8:	430a      	orrs	r2, r1
 80107aa:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	227c      	movs	r2, #124	; 0x7c
 80107b0:	2194      	movs	r1, #148	; 0x94
 80107b2:	0018      	movs	r0, r3
 80107b4:	f002 fa80 	bl	8012cb8 <VL53L0X_WrByte>
 80107b8:	0003      	movs	r3, r0
 80107ba:	0019      	movs	r1, r3
 80107bc:	193b      	adds	r3, r7, r4
 80107be:	193a      	adds	r2, r7, r4
 80107c0:	7812      	ldrb	r2, [r2, #0]
 80107c2:	430a      	orrs	r2, r1
 80107c4:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	0018      	movs	r0, r3
 80107ca:	f7ff fc53 	bl	8010074 <VL53L0X_device_read_strobe>
 80107ce:	0003      	movs	r3, r0
 80107d0:	0019      	movs	r1, r3
 80107d2:	193b      	adds	r3, r7, r4
 80107d4:	193a      	adds	r2, r7, r4
 80107d6:	7812      	ldrb	r2, [r2, #0]
 80107d8:	430a      	orrs	r2, r1
 80107da:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80107dc:	2324      	movs	r3, #36	; 0x24
 80107de:	18fa      	adds	r2, r7, r3
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2190      	movs	r1, #144	; 0x90
 80107e4:	0018      	movs	r0, r3
 80107e6:	f002 fb8d 	bl	8012f04 <VL53L0X_RdDWord>
 80107ea:	0003      	movs	r3, r0
 80107ec:	0019      	movs	r1, r3
 80107ee:	193b      	adds	r3, r7, r4
 80107f0:	193a      	adds	r2, r7, r4
 80107f2:	7812      	ldrb	r2, [r2, #0]
 80107f4:	430a      	orrs	r2, r1
 80107f6:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2273      	movs	r2, #115	; 0x73
 80107fc:	2194      	movs	r1, #148	; 0x94
 80107fe:	0018      	movs	r0, r3
 8010800:	f002 fa5a 	bl	8012cb8 <VL53L0X_WrByte>
 8010804:	0003      	movs	r3, r0
 8010806:	0019      	movs	r1, r3
 8010808:	193b      	adds	r3, r7, r4
 801080a:	193a      	adds	r2, r7, r4
 801080c:	7812      	ldrb	r2, [r2, #0]
 801080e:	430a      	orrs	r2, r1
 8010810:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	0018      	movs	r0, r3
 8010816:	f7ff fc2d 	bl	8010074 <VL53L0X_device_read_strobe>
 801081a:	0003      	movs	r3, r0
 801081c:	0019      	movs	r1, r3
 801081e:	193b      	adds	r3, r7, r4
 8010820:	193a      	adds	r2, r7, r4
 8010822:	7812      	ldrb	r2, [r2, #0]
 8010824:	430a      	orrs	r2, r1
 8010826:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8010828:	2530      	movs	r5, #48	; 0x30
 801082a:	197a      	adds	r2, r7, r5
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2190      	movs	r1, #144	; 0x90
 8010830:	0018      	movs	r0, r3
 8010832:	f002 fb67 	bl	8012f04 <VL53L0X_RdDWord>
 8010836:	0003      	movs	r3, r0
 8010838:	0019      	movs	r1, r3
 801083a:	193b      	adds	r3, r7, r4
 801083c:	193a      	adds	r2, r7, r4
 801083e:	7812      	ldrb	r2, [r2, #0]
 8010840:	430a      	orrs	r2, r1
 8010842:	701a      	strb	r2, [r3, #0]

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8010844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010846:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8010848:	041b      	lsls	r3, r3, #16
 801084a:	0c1b      	lsrs	r3, r3, #16
 801084c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2274      	movs	r2, #116	; 0x74
 8010852:	2194      	movs	r1, #148	; 0x94
 8010854:	0018      	movs	r0, r3
 8010856:	f002 fa2f 	bl	8012cb8 <VL53L0X_WrByte>
 801085a:	0003      	movs	r3, r0
 801085c:	0019      	movs	r1, r3
 801085e:	193b      	adds	r3, r7, r4
 8010860:	193a      	adds	r2, r7, r4
 8010862:	7812      	ldrb	r2, [r2, #0]
 8010864:	430a      	orrs	r2, r1
 8010866:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	0018      	movs	r0, r3
 801086c:	f7ff fc02 	bl	8010074 <VL53L0X_device_read_strobe>
 8010870:	0003      	movs	r3, r0
 8010872:	0019      	movs	r1, r3
 8010874:	193b      	adds	r3, r7, r4
 8010876:	193a      	adds	r2, r7, r4
 8010878:	7812      	ldrb	r2, [r2, #0]
 801087a:	430a      	orrs	r2, r1
 801087c:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 801087e:	197a      	adds	r2, r7, r5
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2190      	movs	r1, #144	; 0x90
 8010884:	0018      	movs	r0, r3
 8010886:	f002 fb3d 	bl	8012f04 <VL53L0X_RdDWord>
 801088a:	0003      	movs	r3, r0
 801088c:	0019      	movs	r1, r3
 801088e:	193b      	adds	r3, r7, r4
 8010890:	193a      	adds	r2, r7, r4
 8010892:	7812      	ldrb	r2, [r2, #0]
 8010894:	430a      	orrs	r2, r1
 8010896:	701a      	strb	r2, [r3, #0]

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8010898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 801089c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801089e:	4313      	orrs	r3, r2
 80108a0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2275      	movs	r2, #117	; 0x75
 80108a6:	2194      	movs	r1, #148	; 0x94
 80108a8:	0018      	movs	r0, r3
 80108aa:	f002 fa05 	bl	8012cb8 <VL53L0X_WrByte>
 80108ae:	0003      	movs	r3, r0
 80108b0:	0019      	movs	r1, r3
 80108b2:	193b      	adds	r3, r7, r4
 80108b4:	193a      	adds	r2, r7, r4
 80108b6:	7812      	ldrb	r2, [r2, #0]
 80108b8:	430a      	orrs	r2, r1
 80108ba:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	0018      	movs	r0, r3
 80108c0:	f7ff fbd8 	bl	8010074 <VL53L0X_device_read_strobe>
 80108c4:	0003      	movs	r3, r0
 80108c6:	0019      	movs	r1, r3
 80108c8:	193b      	adds	r3, r7, r4
 80108ca:	193a      	adds	r2, r7, r4
 80108cc:	7812      	ldrb	r2, [r2, #0]
 80108ce:	430a      	orrs	r2, r1
 80108d0:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80108d2:	197a      	adds	r2, r7, r5
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2190      	movs	r1, #144	; 0x90
 80108d8:	0018      	movs	r0, r3
 80108da:	f002 fb13 	bl	8012f04 <VL53L0X_RdDWord>
 80108de:	0003      	movs	r3, r0
 80108e0:	0019      	movs	r1, r3
 80108e2:	193b      	adds	r3, r7, r4
 80108e4:	193a      	adds	r2, r7, r4
 80108e6:	7812      	ldrb	r2, [r2, #0]
 80108e8:	430a      	orrs	r2, r1
 80108ea:	701a      	strb	r2, [r3, #0]

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80108ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ee:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80108f0:	041b      	lsls	r3, r3, #16
 80108f2:	0c1b      	lsrs	r3, r3, #16
 80108f4:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2276      	movs	r2, #118	; 0x76
 80108fa:	2194      	movs	r1, #148	; 0x94
 80108fc:	0018      	movs	r0, r3
 80108fe:	f002 f9db 	bl	8012cb8 <VL53L0X_WrByte>
 8010902:	0003      	movs	r3, r0
 8010904:	0019      	movs	r1, r3
 8010906:	193b      	adds	r3, r7, r4
 8010908:	193a      	adds	r2, r7, r4
 801090a:	7812      	ldrb	r2, [r2, #0]
 801090c:	430a      	orrs	r2, r1
 801090e:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	0018      	movs	r0, r3
 8010914:	f7ff fbae 	bl	8010074 <VL53L0X_device_read_strobe>
 8010918:	0003      	movs	r3, r0
 801091a:	0019      	movs	r1, r3
 801091c:	193b      	adds	r3, r7, r4
 801091e:	193a      	adds	r2, r7, r4
 8010920:	7812      	ldrb	r2, [r2, #0]
 8010922:	430a      	orrs	r2, r1
 8010924:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8010926:	197a      	adds	r2, r7, r5
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2190      	movs	r1, #144	; 0x90
 801092c:	0018      	movs	r0, r3
 801092e:	f002 fae9 	bl	8012f04 <VL53L0X_RdDWord>
 8010932:	0003      	movs	r3, r0
 8010934:	0019      	movs	r1, r3
 8010936:	193b      	adds	r3, r7, r4
 8010938:	193a      	adds	r2, r7, r4
 801093a:	7812      	ldrb	r2, [r2, #0]
 801093c:	430a      	orrs	r2, r1
 801093e:	701a      	strb	r2, [r3, #0]

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8010940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010942:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8010944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010946:	4313      	orrs	r3, r2
 8010948:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2200      	movs	r2, #0
 801094e:	2181      	movs	r1, #129	; 0x81
 8010950:	0018      	movs	r0, r3
 8010952:	f002 f9b1 	bl	8012cb8 <VL53L0X_WrByte>
 8010956:	0003      	movs	r3, r0
 8010958:	0019      	movs	r1, r3
 801095a:	245f      	movs	r4, #95	; 0x5f
 801095c:	193b      	adds	r3, r7, r4
 801095e:	193a      	adds	r2, r7, r4
 8010960:	7812      	ldrb	r2, [r2, #0]
 8010962:	430a      	orrs	r2, r1
 8010964:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2206      	movs	r2, #6
 801096a:	21ff      	movs	r1, #255	; 0xff
 801096c:	0018      	movs	r0, r3
 801096e:	f002 f9a3 	bl	8012cb8 <VL53L0X_WrByte>
 8010972:	0003      	movs	r3, r0
 8010974:	0019      	movs	r1, r3
 8010976:	193b      	adds	r3, r7, r4
 8010978:	193a      	adds	r2, r7, r4
 801097a:	7812      	ldrb	r2, [r2, #0]
 801097c:	430a      	orrs	r2, r1
 801097e:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8010980:	2537      	movs	r5, #55	; 0x37
 8010982:	197a      	adds	r2, r7, r5
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2183      	movs	r1, #131	; 0x83
 8010988:	0018      	movs	r0, r3
 801098a:	f002 fa44 	bl	8012e16 <VL53L0X_RdByte>
 801098e:	0003      	movs	r3, r0
 8010990:	0019      	movs	r1, r3
 8010992:	193b      	adds	r3, r7, r4
 8010994:	193a      	adds	r2, r7, r4
 8010996:	7812      	ldrb	r2, [r2, #0]
 8010998:	430a      	orrs	r2, r1
 801099a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 801099c:	197b      	adds	r3, r7, r5
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	2204      	movs	r2, #4
 80109a2:	4393      	bics	r3, r2
 80109a4:	b2da      	uxtb	r2, r3
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2183      	movs	r1, #131	; 0x83
 80109aa:	0018      	movs	r0, r3
 80109ac:	f002 f984 	bl	8012cb8 <VL53L0X_WrByte>
 80109b0:	0003      	movs	r3, r0
 80109b2:	0019      	movs	r1, r3
 80109b4:	193b      	adds	r3, r7, r4
 80109b6:	193a      	adds	r2, r7, r4
 80109b8:	7812      	ldrb	r2, [r2, #0]
 80109ba:	430a      	orrs	r2, r1
 80109bc:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2201      	movs	r2, #1
 80109c2:	21ff      	movs	r1, #255	; 0xff
 80109c4:	0018      	movs	r0, r3
 80109c6:	f002 f977 	bl	8012cb8 <VL53L0X_WrByte>
 80109ca:	0003      	movs	r3, r0
 80109cc:	0019      	movs	r1, r3
 80109ce:	193b      	adds	r3, r7, r4
 80109d0:	193a      	adds	r2, r7, r4
 80109d2:	7812      	ldrb	r2, [r2, #0]
 80109d4:	430a      	orrs	r2, r1
 80109d6:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2201      	movs	r2, #1
 80109dc:	2100      	movs	r1, #0
 80109de:	0018      	movs	r0, r3
 80109e0:	f002 f96a 	bl	8012cb8 <VL53L0X_WrByte>
 80109e4:	0003      	movs	r3, r0
 80109e6:	0019      	movs	r1, r3
 80109e8:	193b      	adds	r3, r7, r4
 80109ea:	193a      	adds	r2, r7, r4
 80109ec:	7812      	ldrb	r2, [r2, #0]
 80109ee:	430a      	orrs	r2, r1
 80109f0:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2200      	movs	r2, #0
 80109f6:	21ff      	movs	r1, #255	; 0xff
 80109f8:	0018      	movs	r0, r3
 80109fa:	f002 f95d 	bl	8012cb8 <VL53L0X_WrByte>
 80109fe:	0003      	movs	r3, r0
 8010a00:	0019      	movs	r1, r3
 8010a02:	193b      	adds	r3, r7, r4
 8010a04:	193a      	adds	r2, r7, r4
 8010a06:	7812      	ldrb	r2, [r2, #0]
 8010a08:	430a      	orrs	r2, r1
 8010a0a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	2180      	movs	r1, #128	; 0x80
 8010a12:	0018      	movs	r0, r3
 8010a14:	f002 f950 	bl	8012cb8 <VL53L0X_WrByte>
 8010a18:	0003      	movs	r3, r0
 8010a1a:	0019      	movs	r1, r3
 8010a1c:	193b      	adds	r3, r7, r4
 8010a1e:	193a      	adds	r2, r7, r4
 8010a20:	7812      	ldrb	r2, [r2, #0]
 8010a22:	430a      	orrs	r2, r1
 8010a24:	701a      	strb	r2, [r3, #0]
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8010a26:	235f      	movs	r3, #95	; 0x5f
 8010a28:	18fb      	adds	r3, r7, r3
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	b25b      	sxtb	r3, r3
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d000      	beq.n	8010a34 <VL53L0X_get_info_from_device+0x914>
 8010a32:	e0a1      	b.n	8010b78 <VL53L0X_get_info_from_device+0xa58>
 8010a34:	213f      	movs	r1, #63	; 0x3f
 8010a36:	187b      	adds	r3, r7, r1
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	2b07      	cmp	r3, #7
 8010a3c:	d100      	bne.n	8010a40 <VL53L0X_get_info_from_device+0x920>
 8010a3e:	e09b      	b.n	8010b78 <VL53L0X_get_info_from_device+0xa58>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8010a40:	1cfb      	adds	r3, r7, #3
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	2201      	movs	r2, #1
 8010a46:	4013      	ands	r3, r2
 8010a48:	d028      	beq.n	8010a9c <VL53L0X_get_info_from_device+0x97c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8010a4a:	187b      	adds	r3, r7, r1
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	4013      	ands	r3, r2
		if (((option & 1) == 1) &&
 8010a52:	d123      	bne.n	8010a9c <VL53L0X_get_info_from_device+0x97c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	235e      	movs	r3, #94	; 0x5e
 8010a58:	18f9      	adds	r1, r7, r3
 8010a5a:	2314      	movs	r3, #20
 8010a5c:	33ff      	adds	r3, #255	; 0xff
 8010a5e:	7809      	ldrb	r1, [r1, #0]
 8010a60:	54d1      	strb	r1, [r2, r3]
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	235d      	movs	r3, #93	; 0x5d
 8010a66:	18f9      	adds	r1, r7, r3
 8010a68:	238a      	movs	r3, #138	; 0x8a
 8010a6a:	005b      	lsls	r3, r3, #1
 8010a6c:	7809      	ldrb	r1, [r1, #0]
 8010a6e:	54d1      	strb	r1, [r2, r3]
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8010a70:	2300      	movs	r3, #0
 8010a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a74:	e00f      	b.n	8010a96 <VL53L0X_get_info_from_device+0x976>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8010a76:	2308      	movs	r3, #8
 8010a78:	18fa      	adds	r2, r7, r3
 8010a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a7c:	18d3      	adds	r3, r2, r3
 8010a7e:	7818      	ldrb	r0, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8010a80:	6879      	ldr	r1, [r7, #4]
 8010a82:	2395      	movs	r3, #149	; 0x95
 8010a84:	005b      	lsls	r3, r3, #1
 8010a86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a88:	188a      	adds	r2, r1, r2
 8010a8a:	18d3      	adds	r3, r2, r3
 8010a8c:	1c02      	adds	r2, r0, #0
 8010a8e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8010a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a92:	3301      	adds	r3, #1
 8010a94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a98:	2b05      	cmp	r3, #5
 8010a9a:	ddec      	ble.n	8010a76 <VL53L0X_get_info_from_device+0x956>
			}
		}

		if (((option & 2) == 2) &&
 8010a9c:	1cfb      	adds	r3, r7, #3
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	4013      	ands	r3, r2
 8010aa4:	d01b      	beq.n	8010ade <VL53L0X_get_info_from_device+0x9be>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8010aa6:	233f      	movs	r3, #63	; 0x3f
 8010aa8:	18fb      	adds	r3, r7, r3
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	2202      	movs	r2, #2
 8010aae:	4013      	ands	r3, r2
		if (((option & 2) == 2) &&
 8010ab0:	d115      	bne.n	8010ade <VL53L0X_get_info_from_device+0x9be>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8010ab2:	232f      	movs	r3, #47	; 0x2f
 8010ab4:	18fb      	adds	r3, r7, r3
 8010ab6:	7819      	ldrb	r1, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	22f1      	movs	r2, #241	; 0xf1
 8010abc:	5499      	strb	r1, [r3, r2]
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8010abe:	232e      	movs	r3, #46	; 0x2e
 8010ac0:	18fb      	adds	r3, r7, r3
 8010ac2:	7819      	ldrb	r1, [r3, #0]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	22f2      	movs	r2, #242	; 0xf2
 8010ac8:	5499      	strb	r1, [r3, r2]
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	33f3      	adds	r3, #243	; 0xf3
 8010ace:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8010ad0:	2310      	movs	r3, #16
 8010ad2:	18fa      	adds	r2, r7, r3
 8010ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad6:	0011      	movs	r1, r2
 8010ad8:	0018      	movs	r0, r3
 8010ada:	f005 fb0b 	bl	80160f4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8010ade:	1cfb      	adds	r3, r7, #3
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	2204      	movs	r2, #4
 8010ae4:	4013      	ands	r3, r2
 8010ae6:	d038      	beq.n	8010b5a <VL53L0X_get_info_from_device+0xa3a>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8010ae8:	233f      	movs	r3, #63	; 0x3f
 8010aea:	18fb      	adds	r3, r7, r3
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	2204      	movs	r2, #4
 8010af0:	4013      	ands	r3, r2
		if (((option & 4) == 4) &&
 8010af2:	d132      	bne.n	8010b5a <VL53L0X_get_info_from_device+0xa3a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8010af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	238c      	movs	r3, #140	; 0x8c
 8010afa:	005b      	lsls	r3, r3, #1
 8010afc:	50d1      	str	r1, [r2, r3]
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8010afe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	238e      	movs	r3, #142	; 0x8e
 8010b04:	005b      	lsls	r3, r3, #1
 8010b06:	50d1      	str	r1, [r2, r3]
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8010b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b0a:	025b      	lsls	r3, r3, #9
 8010b0c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8010b0e:	687a      	ldr	r2, [r7, #4]
 8010b10:	2390      	movs	r3, #144	; 0x90
 8010b12:	005b      	lsls	r3, r3, #1
 8010b14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010b16:	50d1      	str	r1, [r2, r3]
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8010b18:	215a      	movs	r1, #90	; 0x5a
 8010b1a:	187b      	adds	r3, r7, r1
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	801a      	strh	r2, [r3, #0]
			if (DistMeasFixed1104_400_mm != 0) {
 8010b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d013      	beq.n	8010b4e <VL53L0X_get_info_from_device+0xa2e>
					OffsetFixed1104_mm =
 8010b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b2a:	1ad3      	subs	r3, r2, r3
 8010b2c:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8010b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b30:	0013      	movs	r3, r2
 8010b32:	015b      	lsls	r3, r3, #5
 8010b34:	1a9b      	subs	r3, r3, r2
 8010b36:	009b      	lsls	r3, r3, #2
 8010b38:	189b      	adds	r3, r3, r2
 8010b3a:	00db      	lsls	r3, r3, #3
 8010b3c:	091a      	lsrs	r2, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8010b3e:	187b      	adds	r3, r7, r1
 8010b40:	801a      	strh	r2, [r3, #0]
					OffsetMicroMeters *= -1;
 8010b42:	187b      	adds	r3, r7, r1
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	425b      	negs	r3, r3
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	187b      	adds	r3, r7, r1
 8010b4c:	801a      	strh	r2, [r3, #0]
			}

			PALDevDataSet(Dev,
 8010b4e:	235a      	movs	r3, #90	; 0x5a
 8010b50:	18fb      	adds	r3, r7, r3
 8010b52:	2200      	movs	r2, #0
 8010b54:	5e9a      	ldrsh	r2, [r3, r2]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8010b5a:	233f      	movs	r3, #63	; 0x3f
 8010b5c:	18fa      	adds	r2, r7, r3
 8010b5e:	1cfb      	adds	r3, r7, #3
 8010b60:	7812      	ldrb	r2, [r2, #0]
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	4313      	orrs	r3, r2
 8010b66:	b2da      	uxtb	r2, r3
 8010b68:	2137      	movs	r1, #55	; 0x37
 8010b6a:	187b      	adds	r3, r7, r1
 8010b6c:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8010b6e:	187b      	adds	r3, r7, r1
 8010b70:	7819      	ldrb	r1, [r3, #0]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	22f0      	movs	r2, #240	; 0xf0
 8010b76:	5499      	strb	r1, [r3, r2]
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8010b78:	235f      	movs	r3, #95	; 0x5f
 8010b7a:	18fb      	adds	r3, r7, r3
 8010b7c:	781b      	ldrb	r3, [r3, #0]
 8010b7e:	b25b      	sxtb	r3, r3
}
 8010b80:	0018      	movs	r0, r3
 8010b82:	46bd      	mov	sp, r7
 8010b84:	b019      	add	sp, #100	; 0x64
 8010b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b88 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b086      	sub	sp, #24
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	000a      	movs	r2, r1
 8010b92:	1cfb      	adds	r3, r7, #3
 8010b94:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8010b96:	4a09      	ldr	r2, [pc, #36]	; (8010bbc <VL53L0X_calc_macro_period_ps+0x34>)
 8010b98:	2300      	movs	r3, #0
 8010b9a:	613a      	str	r2, [r7, #16]
 8010b9c:	617b      	str	r3, [r7, #20]

	macro_period_vclks = 2304;
 8010b9e:	2390      	movs	r3, #144	; 0x90
 8010ba0:	011b      	lsls	r3, r3, #4
 8010ba2:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8010ba4:	1cfb      	adds	r3, r7, #3
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	4353      	muls	r3, r2
	macro_period_ps = (uint32_t)(macro_period_vclks
 8010bac:	693a      	ldr	r2, [r7, #16]
 8010bae:	4353      	muls	r3, r2
 8010bb0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8010bb2:	68bb      	ldr	r3, [r7, #8]
}
 8010bb4:	0018      	movs	r0, r3
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	b006      	add	sp, #24
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	00000677 	.word	0x00000677

08010bc0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b086      	sub	sp, #24
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8010bc8:	2316      	movs	r3, #22
 8010bca:	18fb      	adds	r3, r7, r3
 8010bcc:	2200      	movs	r2, #0
 8010bce:	801a      	strh	r2, [r3, #0]
	uint32_t ls_byte = 0;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8010bd4:	230e      	movs	r3, #14
 8010bd6:	18fb      	adds	r3, r7, r3
 8010bd8:	2200      	movs	r2, #0
 8010bda:	801a      	strh	r2, [r3, #0]

	if (timeout_macro_clks > 0) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d01e      	beq.n	8010c20 <VL53L0X_encode_timeout+0x60>
		ls_byte = timeout_macro_clks - 1;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	3b01      	subs	r3, #1
 8010be6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8010be8:	e008      	b.n	8010bfc <VL53L0X_encode_timeout+0x3c>
			ls_byte = ls_byte >> 1;
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	085b      	lsrs	r3, r3, #1
 8010bee:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8010bf0:	210e      	movs	r1, #14
 8010bf2:	187b      	adds	r3, r7, r1
 8010bf4:	881a      	ldrh	r2, [r3, #0]
 8010bf6:	187b      	adds	r3, r7, r1
 8010bf8:	3201      	adds	r2, #1
 8010bfa:	801a      	strh	r2, [r3, #0]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	22ff      	movs	r2, #255	; 0xff
 8010c00:	4393      	bics	r3, r2
 8010c02:	d1f2      	bne.n	8010bea <VL53L0X_encode_timeout+0x2a>
		}

		encoded_timeout = (ms_byte << 8)
 8010c04:	230e      	movs	r3, #14
 8010c06:	18fb      	adds	r3, r7, r3
 8010c08:	881b      	ldrh	r3, [r3, #0]
 8010c0a:	021b      	lsls	r3, r3, #8
 8010c0c:	b299      	uxth	r1, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	22ff      	movs	r2, #255	; 0xff
 8010c14:	4013      	ands	r3, r2
 8010c16:	b29a      	uxth	r2, r3
		encoded_timeout = (ms_byte << 8)
 8010c18:	2316      	movs	r3, #22
 8010c1a:	18fb      	adds	r3, r7, r3
 8010c1c:	188a      	adds	r2, r1, r2
 8010c1e:	801a      	strh	r2, [r3, #0]
	}

	return encoded_timeout;
 8010c20:	2316      	movs	r3, #22
 8010c22:	18fb      	adds	r3, r7, r3
 8010c24:	881b      	ldrh	r3, [r3, #0]

}
 8010c26:	0018      	movs	r0, r3
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	b006      	add	sp, #24
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b084      	sub	sp, #16
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	0002      	movs	r2, r0
 8010c36:	1dbb      	adds	r3, r7, #6
 8010c38:	801a      	strh	r2, [r3, #0]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8010c3e:	1dbb      	adds	r3, r7, #6
 8010c40:	881b      	ldrh	r3, [r3, #0]
 8010c42:	22ff      	movs	r2, #255	; 0xff
 8010c44:	4013      	ands	r3, r2
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8010c46:	1dba      	adds	r2, r7, #6
 8010c48:	8812      	ldrh	r2, [r2, #0]
 8010c4a:	0a12      	lsrs	r2, r2, #8
 8010c4c:	b292      	uxth	r2, r2
 8010c4e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8010c50:	3301      	adds	r3, #1
 8010c52:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8010c54:	68fb      	ldr	r3, [r7, #12]
}
 8010c56:	0018      	movs	r0, r3
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	b004      	add	sp, #16
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b088      	sub	sp, #32
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	60f8      	str	r0, [r7, #12]
 8010c66:	60b9      	str	r1, [r7, #8]
 8010c68:	1dfb      	adds	r3, r7, #7
 8010c6a:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8010c70:	1dfb      	adds	r3, r7, #7
 8010c72:	781a      	ldrb	r2, [r3, #0]
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	0011      	movs	r1, r2
 8010c78:	0018      	movs	r0, r3
 8010c7a:	f7ff ff85 	bl	8010b88 <VL53L0X_calc_macro_period_ps>
 8010c7e:	0003      	movs	r3, r0
 8010c80:	61bb      	str	r3, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8010c82:	69bb      	ldr	r3, [r7, #24]
 8010c84:	33f5      	adds	r3, #245	; 0xf5
 8010c86:	33ff      	adds	r3, #255	; 0xff
 8010c88:	22fa      	movs	r2, #250	; 0xfa
 8010c8a:	0091      	lsls	r1, r2, #2
 8010c8c:	0018      	movs	r0, r3
 8010c8e:	f7ef fa61 	bl	8000154 <__udivsi3>
 8010c92:	0003      	movs	r3, r0
 8010c94:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8010c96:	68ba      	ldr	r2, [r7, #8]
 8010c98:	0013      	movs	r3, r2
 8010c9a:	015b      	lsls	r3, r3, #5
 8010c9c:	1a9b      	subs	r3, r3, r2
 8010c9e:	009b      	lsls	r3, r3, #2
 8010ca0:	189b      	adds	r3, r3, r2
 8010ca2:	00db      	lsls	r3, r3, #3
 8010ca4:	001a      	movs	r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	085b      	lsrs	r3, r3, #1
 8010caa:	18d3      	adds	r3, r2, r3
	timeout_period_mclks =
 8010cac:	6979      	ldr	r1, [r7, #20]
 8010cae:	0018      	movs	r0, r3
 8010cb0:	f7ef fa50 	bl	8000154 <__udivsi3>
 8010cb4:	0003      	movs	r3, r0
 8010cb6:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8010cb8:	69fb      	ldr	r3, [r7, #28]
}
 8010cba:	0018      	movs	r0, r3
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	b008      	add	sp, #32
 8010cc0:	bd80      	pop	{r7, pc}

08010cc2 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8010cc2:	b580      	push	{r7, lr}
 8010cc4:	b086      	sub	sp, #24
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	6078      	str	r0, [r7, #4]
 8010cca:	0008      	movs	r0, r1
 8010ccc:	0011      	movs	r1, r2
 8010cce:	1cbb      	adds	r3, r7, #2
 8010cd0:	1c02      	adds	r2, r0, #0
 8010cd2:	801a      	strh	r2, [r3, #0]
 8010cd4:	1c7b      	adds	r3, r7, #1
 8010cd6:	1c0a      	adds	r2, r1, #0
 8010cd8:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8010cde:	1c7b      	adds	r3, r7, #1
 8010ce0:	781a      	ldrb	r2, [r3, #0]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	0011      	movs	r1, r2
 8010ce6:	0018      	movs	r0, r3
 8010ce8:	f7ff ff4e 	bl	8010b88 <VL53L0X_calc_macro_period_ps>
 8010cec:	0003      	movs	r3, r0
 8010cee:	613b      	str	r3, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	33f5      	adds	r3, #245	; 0xf5
 8010cf4:	33ff      	adds	r3, #255	; 0xff
 8010cf6:	22fa      	movs	r2, #250	; 0xfa
 8010cf8:	0091      	lsls	r1, r2, #2
 8010cfa:	0018      	movs	r0, r3
 8010cfc:	f7ef fa2a 	bl	8000154 <__udivsi3>
 8010d00:	0003      	movs	r3, r0
 8010d02:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8010d04:	1cbb      	adds	r3, r7, #2
 8010d06:	881b      	ldrh	r3, [r3, #0]
 8010d08:	68fa      	ldr	r2, [r7, #12]
 8010d0a:	4353      	muls	r3, r2
 8010d0c:	33f5      	adds	r3, #245	; 0xf5
 8010d0e:	33ff      	adds	r3, #255	; 0xff
	actual_timeout_period_us =
 8010d10:	22fa      	movs	r2, #250	; 0xfa
 8010d12:	0091      	lsls	r1, r2, #2
 8010d14:	0018      	movs	r0, r3
 8010d16:	f7ef fa1d 	bl	8000154 <__udivsi3>
 8010d1a:	0003      	movs	r3, r0
 8010d1c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8010d1e:	697b      	ldr	r3, [r7, #20]
}
 8010d20:	0018      	movs	r0, r3
 8010d22:	46bd      	mov	sp, r7
 8010d24:	b006      	add	sp, #24
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8010d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d2a:	b08d      	sub	sp, #52	; 0x34
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	607a      	str	r2, [r7, #4]
 8010d32:	200b      	movs	r0, #11
 8010d34:	183b      	adds	r3, r7, r0
 8010d36:	1c0a      	adds	r2, r1, #0
 8010d38:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010d3a:	232f      	movs	r3, #47	; 0x2f
 8010d3c:	18fb      	adds	r3, r7, r3
 8010d3e:	2200      	movs	r2, #0
 8010d40:	701a      	strb	r2, [r3, #0]
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8010d42:	2320      	movs	r3, #32
 8010d44:	18fb      	adds	r3, r7, r3
 8010d46:	2200      	movs	r2, #0
 8010d48:	701a      	strb	r2, [r3, #0]
	uint32_t TimeoutMicroSeconds = 0;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8010d4e:	231e      	movs	r3, #30
 8010d50:	18fb      	adds	r3, r7, r3
 8010d52:	2200      	movs	r2, #0
 8010d54:	801a      	strh	r2, [r3, #0]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8010d56:	2324      	movs	r3, #36	; 0x24
 8010d58:	18fb      	adds	r3, r7, r3
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	801a      	strh	r2, [r3, #0]
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8010d5e:	183b      	adds	r3, r7, r0
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d007      	beq.n	8010d76 <get_sequence_step_timeout+0x4e>
 8010d66:	183b      	adds	r3, r7, r0
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	2b01      	cmp	r3, #1
 8010d6c:	d003      	beq.n	8010d76 <get_sequence_step_timeout+0x4e>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8010d6e:	183b      	adds	r3, r7, r0
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	2b02      	cmp	r3, #2
 8010d74:	d130      	bne.n	8010dd8 <get_sequence_step_timeout+0xb0>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8010d76:	252f      	movs	r5, #47	; 0x2f
 8010d78:	197c      	adds	r4, r7, r5
 8010d7a:	2321      	movs	r3, #33	; 0x21
 8010d7c:	18fa      	adds	r2, r7, r3
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2100      	movs	r1, #0
 8010d82:	0018      	movs	r0, r3
 8010d84:	f7fc fde0 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 8010d88:	0003      	movs	r3, r0
 8010d8a:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8010d8c:	197b      	adds	r3, r7, r5
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	b25b      	sxtb	r3, r3
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d109      	bne.n	8010daa <get_sequence_step_timeout+0x82>
			Status = VL53L0X_RdByte(Dev,
 8010d96:	197c      	adds	r4, r7, r5
 8010d98:	2320      	movs	r3, #32
 8010d9a:	18fa      	adds	r2, r7, r3
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2146      	movs	r1, #70	; 0x46
 8010da0:	0018      	movs	r0, r3
 8010da2:	f002 f838 	bl	8012e16 <VL53L0X_RdByte>
 8010da6:	0003      	movs	r3, r0
 8010da8:	7023      	strb	r3, [r4, #0]
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8010daa:	2320      	movs	r3, #32
 8010dac:	18fb      	adds	r3, r7, r3
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	0018      	movs	r0, r3
 8010db4:	f7ff ff3b 	bl	8010c2e <VL53L0X_decode_timeout>
 8010db8:	0002      	movs	r2, r0
 8010dba:	2122      	movs	r1, #34	; 0x22
 8010dbc:	187b      	adds	r3, r7, r1
 8010dbe:	801a      	strh	r2, [r3, #0]

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8010dc0:	2321      	movs	r3, #33	; 0x21
 8010dc2:	18fb      	adds	r3, r7, r3
 8010dc4:	781a      	ldrb	r2, [r3, #0]
 8010dc6:	187b      	adds	r3, r7, r1
 8010dc8:	8819      	ldrh	r1, [r3, #0]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	0018      	movs	r0, r3
 8010dce:	f7ff ff78 	bl	8010cc2 <VL53L0X_calc_timeout_us>
 8010dd2:	0003      	movs	r3, r0
 8010dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dd6:	e0b6      	b.n	8010f46 <get_sequence_step_timeout+0x21e>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8010dd8:	230b      	movs	r3, #11
 8010dda:	18fb      	adds	r3, r7, r3
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	2b03      	cmp	r3, #3
 8010de0:	d13e      	bne.n	8010e60 <get_sequence_step_timeout+0x138>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8010de2:	252f      	movs	r5, #47	; 0x2f
 8010de4:	197c      	adds	r4, r7, r5
 8010de6:	2621      	movs	r6, #33	; 0x21
 8010de8:	19ba      	adds	r2, r7, r6
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2100      	movs	r1, #0
 8010dee:	0018      	movs	r0, r3
 8010df0:	f7fc fdaa 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 8010df4:	0003      	movs	r3, r0
 8010df6:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8010df8:	197b      	adds	r3, r7, r5
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	b25b      	sxtb	r3, r3
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d000      	beq.n	8010e04 <get_sequence_step_timeout+0xdc>
 8010e02:	e0a0      	b.n	8010f46 <get_sequence_step_timeout+0x21e>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8010e04:	197c      	adds	r4, r7, r5
 8010e06:	19ba      	adds	r2, r7, r6
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	0018      	movs	r0, r3
 8010e0e:	f7fc fd9b 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 8010e12:	0003      	movs	r3, r0
 8010e14:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8010e16:	197b      	adds	r3, r7, r5
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	b25b      	sxtb	r3, r3
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d109      	bne.n	8010e34 <get_sequence_step_timeout+0x10c>
				Status = VL53L0X_RdWord(Dev,
 8010e20:	197c      	adds	r4, r7, r5
 8010e22:	231e      	movs	r3, #30
 8010e24:	18fa      	adds	r2, r7, r3
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2151      	movs	r1, #81	; 0x51
 8010e2a:	0018      	movs	r0, r3
 8010e2c:	f002 f828 	bl	8012e80 <VL53L0X_RdWord>
 8010e30:	0003      	movs	r3, r0
 8010e32:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8010e34:	231e      	movs	r3, #30
 8010e36:	18fb      	adds	r3, r7, r3
 8010e38:	881b      	ldrh	r3, [r3, #0]
 8010e3a:	0018      	movs	r0, r3
 8010e3c:	f7ff fef7 	bl	8010c2e <VL53L0X_decode_timeout>
 8010e40:	0002      	movs	r2, r0
 8010e42:	2126      	movs	r1, #38	; 0x26
 8010e44:	187b      	adds	r3, r7, r1
 8010e46:	801a      	strh	r2, [r3, #0]
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8010e48:	2321      	movs	r3, #33	; 0x21
 8010e4a:	18fb      	adds	r3, r7, r3
 8010e4c:	781a      	ldrb	r2, [r3, #0]
 8010e4e:	187b      	adds	r3, r7, r1
 8010e50:	8819      	ldrh	r1, [r3, #0]
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	0018      	movs	r0, r3
 8010e56:	f7ff ff34 	bl	8010cc2 <VL53L0X_calc_timeout_us>
 8010e5a:	0003      	movs	r3, r0
 8010e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e5e:	e072      	b.n	8010f46 <get_sequence_step_timeout+0x21e>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8010e60:	230b      	movs	r3, #11
 8010e62:	18fb      	adds	r3, r7, r3
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	2b04      	cmp	r3, #4
 8010e68:	d16d      	bne.n	8010f46 <get_sequence_step_timeout+0x21e>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8010e6a:	2414      	movs	r4, #20
 8010e6c:	193a      	adds	r2, r7, r4
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	0011      	movs	r1, r2
 8010e72:	0018      	movs	r0, r3
 8010e74:	f7fc fec8 	bl	800dc08 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8010e78:	2626      	movs	r6, #38	; 0x26
 8010e7a:	19bb      	adds	r3, r7, r6
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	801a      	strh	r2, [r3, #0]

		if (SchedulerSequenceSteps.PreRangeOn) {
 8010e80:	193b      	adds	r3, r7, r4
 8010e82:	78db      	ldrb	r3, [r3, #3]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d021      	beq.n	8010ecc <get_sequence_step_timeout+0x1a4>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8010e88:	252f      	movs	r5, #47	; 0x2f
 8010e8a:	197c      	adds	r4, r7, r5
 8010e8c:	2321      	movs	r3, #33	; 0x21
 8010e8e:	18fa      	adds	r2, r7, r3
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2100      	movs	r1, #0
 8010e94:	0018      	movs	r0, r3
 8010e96:	f7fc fd57 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 8010e9a:	0003      	movs	r3, r0
 8010e9c:	7023      	strb	r3, [r4, #0]
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8010e9e:	197b      	adds	r3, r7, r5
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	b25b      	sxtb	r3, r3
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d111      	bne.n	8010ecc <get_sequence_step_timeout+0x1a4>
				Status = VL53L0X_RdWord(Dev,
 8010ea8:	197c      	adds	r4, r7, r5
 8010eaa:	251e      	movs	r5, #30
 8010eac:	197a      	adds	r2, r7, r5
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2151      	movs	r1, #81	; 0x51
 8010eb2:	0018      	movs	r0, r3
 8010eb4:	f001 ffe4 	bl	8012e80 <VL53L0X_RdWord>
 8010eb8:	0003      	movs	r3, r0
 8010eba:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8010ebc:	197b      	adds	r3, r7, r5
 8010ebe:	881b      	ldrh	r3, [r3, #0]
 8010ec0:	0018      	movs	r0, r3
 8010ec2:	f7ff feb4 	bl	8010c2e <VL53L0X_decode_timeout>
 8010ec6:	0002      	movs	r2, r0
 8010ec8:	19bb      	adds	r3, r7, r6
 8010eca:	801a      	strh	r2, [r3, #0]
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8010ecc:	222f      	movs	r2, #47	; 0x2f
 8010ece:	18bb      	adds	r3, r7, r2
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	b25b      	sxtb	r3, r3
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d109      	bne.n	8010eec <get_sequence_step_timeout+0x1c4>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8010ed8:	18bc      	adds	r4, r7, r2
 8010eda:	2321      	movs	r3, #33	; 0x21
 8010edc:	18fa      	adds	r2, r7, r3
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2101      	movs	r1, #1
 8010ee2:	0018      	movs	r0, r3
 8010ee4:	f7fc fd30 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 8010ee8:	0003      	movs	r3, r0
 8010eea:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8010eec:	222f      	movs	r2, #47	; 0x2f
 8010eee:	18bb      	adds	r3, r7, r2
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	b25b      	sxtb	r3, r3
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d112      	bne.n	8010f1e <get_sequence_step_timeout+0x1f6>
			Status = VL53L0X_RdWord(Dev,
 8010ef8:	18bc      	adds	r4, r7, r2
 8010efa:	251c      	movs	r5, #28
 8010efc:	197a      	adds	r2, r7, r5
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2171      	movs	r1, #113	; 0x71
 8010f02:	0018      	movs	r0, r3
 8010f04:	f001 ffbc 	bl	8012e80 <VL53L0X_RdWord>
 8010f08:	0003      	movs	r3, r0
 8010f0a:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8010f0c:	197b      	adds	r3, r7, r5
 8010f0e:	881b      	ldrh	r3, [r3, #0]
 8010f10:	0018      	movs	r0, r3
 8010f12:	f7ff fe8c 	bl	8010c2e <VL53L0X_decode_timeout>
 8010f16:	0002      	movs	r2, r0
 8010f18:	2324      	movs	r3, #36	; 0x24
 8010f1a:	18fb      	adds	r3, r7, r3
 8010f1c:	801a      	strh	r2, [r3, #0]
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8010f1e:	2024      	movs	r0, #36	; 0x24
 8010f20:	183b      	adds	r3, r7, r0
 8010f22:	1839      	adds	r1, r7, r0
 8010f24:	2226      	movs	r2, #38	; 0x26
 8010f26:	18ba      	adds	r2, r7, r2
 8010f28:	8809      	ldrh	r1, [r1, #0]
 8010f2a:	8812      	ldrh	r2, [r2, #0]
 8010f2c:	1a8a      	subs	r2, r1, r2
 8010f2e:	801a      	strh	r2, [r3, #0]
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8010f30:	2321      	movs	r3, #33	; 0x21
 8010f32:	18fb      	adds	r3, r7, r3
 8010f34:	781a      	ldrb	r2, [r3, #0]
 8010f36:	183b      	adds	r3, r7, r0
 8010f38:	8819      	ldrh	r1, [r3, #0]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	0018      	movs	r0, r3
 8010f3e:	f7ff fec0 	bl	8010cc2 <VL53L0X_calc_timeout_us>
 8010f42:	0003      	movs	r3, r0
 8010f44:	62bb      	str	r3, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f4a:	601a      	str	r2, [r3, #0]

	return Status;
 8010f4c:	232f      	movs	r3, #47	; 0x2f
 8010f4e:	18fb      	adds	r3, r7, r3
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	b25b      	sxtb	r3, r3
}
 8010f54:	0018      	movs	r0, r3
 8010f56:	46bd      	mov	sp, r7
 8010f58:	b00d      	add	sp, #52	; 0x34
 8010f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f5c <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8010f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f5e:	b08b      	sub	sp, #44	; 0x2c
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	60f8      	str	r0, [r7, #12]
 8010f64:	607a      	str	r2, [r7, #4]
 8010f66:	200b      	movs	r0, #11
 8010f68:	183b      	adds	r3, r7, r0
 8010f6a:	1c0a      	adds	r2, r1, #0
 8010f6c:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010f6e:	2327      	movs	r3, #39	; 0x27
 8010f70:	18fb      	adds	r3, r7, r3
 8010f72:	2200      	movs	r2, #0
 8010f74:	701a      	strb	r2, [r3, #0]
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8010f76:	183b      	adds	r3, r7, r0
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d007      	beq.n	8010f8e <set_sequence_step_timeout+0x32>
 8010f7e:	183b      	adds	r3, r7, r0
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d003      	beq.n	8010f8e <set_sequence_step_timeout+0x32>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8010f86:	183b      	adds	r3, r7, r0
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	2b02      	cmp	r3, #2
 8010f8c:	d147      	bne.n	801101e <set_sequence_step_timeout+0xc2>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8010f8e:	2527      	movs	r5, #39	; 0x27
 8010f90:	197c      	adds	r4, r7, r5
 8010f92:	261b      	movs	r6, #27
 8010f94:	19ba      	adds	r2, r7, r6
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2100      	movs	r1, #0
 8010f9a:	0018      	movs	r0, r3
 8010f9c:	f7fc fcd4 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 8010fa0:	0003      	movs	r3, r0
 8010fa2:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8010fa4:	197b      	adds	r3, r7, r5
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	b25b      	sxtb	r3, r3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d124      	bne.n	8010ff8 <set_sequence_step_timeout+0x9c>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8010fae:	19bb      	adds	r3, r7, r6
 8010fb0:	781a      	ldrb	r2, [r3, #0]
 8010fb2:	6879      	ldr	r1, [r7, #4]
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	0018      	movs	r0, r3
 8010fb8:	f7ff fe51 	bl	8010c5e <VL53L0X_calc_timeout_mclks>
 8010fbc:	0002      	movs	r2, r0
 8010fbe:	211c      	movs	r1, #28
 8010fc0:	187b      	adds	r3, r7, r1
 8010fc2:	801a      	strh	r2, [r3, #0]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8010fc4:	187b      	adds	r3, r7, r1
 8010fc6:	881a      	ldrh	r2, [r3, #0]
 8010fc8:	2380      	movs	r3, #128	; 0x80
 8010fca:	005b      	lsls	r3, r3, #1
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d904      	bls.n	8010fda <set_sequence_step_timeout+0x7e>
				MsrcEncodedTimeOut = 255;
 8010fd0:	2326      	movs	r3, #38	; 0x26
 8010fd2:	18fb      	adds	r3, r7, r3
 8010fd4:	22ff      	movs	r2, #255	; 0xff
 8010fd6:	701a      	strb	r2, [r3, #0]
 8010fd8:	e007      	b.n	8010fea <set_sequence_step_timeout+0x8e>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8010fda:	231c      	movs	r3, #28
 8010fdc:	18fb      	adds	r3, r7, r3
 8010fde:	881b      	ldrh	r3, [r3, #0]
 8010fe0:	b2da      	uxtb	r2, r3
				MsrcEncodedTimeOut =
 8010fe2:	2326      	movs	r3, #38	; 0x26
 8010fe4:	18fb      	adds	r3, r7, r3
 8010fe6:	3a01      	subs	r2, #1
 8010fe8:	701a      	strb	r2, [r3, #0]

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8010fea:	2326      	movs	r3, #38	; 0x26
 8010fec:	18fb      	adds	r3, r7, r3
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	b299      	uxth	r1, r3
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	22d8      	movs	r2, #216	; 0xd8
 8010ff6:	5299      	strh	r1, [r3, r2]
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8010ff8:	2227      	movs	r2, #39	; 0x27
 8010ffa:	18bb      	adds	r3, r7, r2
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	b25b      	sxtb	r3, r3
 8011000:	2b00      	cmp	r3, #0
 8011002:	d000      	beq.n	8011006 <set_sequence_step_timeout+0xaa>
 8011004:	e0da      	b.n	80111bc <set_sequence_step_timeout+0x260>
			Status = VL53L0X_WrByte(Dev,
 8011006:	18bc      	adds	r4, r7, r2
 8011008:	2326      	movs	r3, #38	; 0x26
 801100a:	18fb      	adds	r3, r7, r3
 801100c:	781a      	ldrb	r2, [r3, #0]
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2146      	movs	r1, #70	; 0x46
 8011012:	0018      	movs	r0, r3
 8011014:	f001 fe50 	bl	8012cb8 <VL53L0X_WrByte>
 8011018:	0003      	movs	r3, r0
 801101a:	7023      	strb	r3, [r4, #0]
		if (Status == VL53L0X_ERROR_NONE) {
 801101c:	e0ce      	b.n	80111bc <set_sequence_step_timeout+0x260>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 801101e:	230b      	movs	r3, #11
 8011020:	18fb      	adds	r3, r7, r3
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	2b03      	cmp	r3, #3
 8011026:	d146      	bne.n	80110b6 <set_sequence_step_timeout+0x15a>

			if (Status == VL53L0X_ERROR_NONE) {
 8011028:	2227      	movs	r2, #39	; 0x27
 801102a:	18bb      	adds	r3, r7, r2
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	b25b      	sxtb	r3, r3
 8011030:	2b00      	cmp	r3, #0
 8011032:	d123      	bne.n	801107c <set_sequence_step_timeout+0x120>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8011034:	18bc      	adds	r4, r7, r2
 8011036:	251b      	movs	r5, #27
 8011038:	197a      	adds	r2, r7, r5
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2100      	movs	r1, #0
 801103e:	0018      	movs	r0, r3
 8011040:	f7fc fc82 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 8011044:	0003      	movs	r3, r0
 8011046:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8011048:	197b      	adds	r3, r7, r5
 801104a:	781a      	ldrb	r2, [r3, #0]
 801104c:	6879      	ldr	r1, [r7, #4]
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	0018      	movs	r0, r3
 8011052:	f7ff fe04 	bl	8010c5e <VL53L0X_calc_timeout_mclks>
 8011056:	0002      	movs	r2, r0
				PreRangeTimeOutMClks =
 8011058:	2124      	movs	r1, #36	; 0x24
 801105a:	187b      	adds	r3, r7, r1
 801105c:	801a      	strh	r2, [r3, #0]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 801105e:	187b      	adds	r3, r7, r1
 8011060:	881b      	ldrh	r3, [r3, #0]
 8011062:	0018      	movs	r0, r3
 8011064:	f7ff fdac 	bl	8010bc0 <VL53L0X_encode_timeout>
 8011068:	0003      	movs	r3, r0
 801106a:	001a      	movs	r2, r3
 801106c:	2118      	movs	r1, #24
 801106e:	187b      	adds	r3, r7, r1
 8011070:	801a      	strh	r2, [r3, #0]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8011072:	187b      	adds	r3, r7, r1
 8011074:	8819      	ldrh	r1, [r3, #0]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	22d8      	movs	r2, #216	; 0xd8
 801107a:	5299      	strh	r1, [r3, r2]
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 801107c:	2127      	movs	r1, #39	; 0x27
 801107e:	187b      	adds	r3, r7, r1
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	b25b      	sxtb	r3, r3
 8011084:	2b00      	cmp	r3, #0
 8011086:	d10a      	bne.n	801109e <set_sequence_step_timeout+0x142>
				Status = VL53L0X_WrWord(Dev,
 8011088:	2318      	movs	r3, #24
 801108a:	18fb      	adds	r3, r7, r3
 801108c:	881a      	ldrh	r2, [r3, #0]
 801108e:	187c      	adds	r4, r7, r1
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2151      	movs	r1, #81	; 0x51
 8011094:	0018      	movs	r0, r3
 8011096:	f001 fe3f 	bl	8012d18 <VL53L0X_WrWord>
 801109a:	0003      	movs	r3, r0
 801109c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 801109e:	2327      	movs	r3, #39	; 0x27
 80110a0:	18fb      	adds	r3, r7, r3
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	b25b      	sxtb	r3, r3
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d000      	beq.n	80110ac <set_sequence_step_timeout+0x150>
 80110aa:	e087      	b.n	80111bc <set_sequence_step_timeout+0x260>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	21e4      	movs	r1, #228	; 0xe4
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	505a      	str	r2, [r3, r1]
 80110b4:	e082      	b.n	80111bc <set_sequence_step_timeout+0x260>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80110b6:	230b      	movs	r3, #11
 80110b8:	18fb      	adds	r3, r7, r3
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	2b04      	cmp	r3, #4
 80110be:	d000      	beq.n	80110c2 <set_sequence_step_timeout+0x166>
 80110c0:	e078      	b.n	80111b4 <set_sequence_step_timeout+0x258>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80110c2:	2410      	movs	r4, #16
 80110c4:	193a      	adds	r2, r7, r4
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	0011      	movs	r1, r2
 80110ca:	0018      	movs	r0, r3
 80110cc:	f7fc fd9c 	bl	800dc08 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80110d0:	2624      	movs	r6, #36	; 0x24
 80110d2:	19bb      	adds	r3, r7, r6
 80110d4:	2200      	movs	r2, #0
 80110d6:	801a      	strh	r2, [r3, #0]
			if (SchedulerSequenceSteps.PreRangeOn) {
 80110d8:	193b      	adds	r3, r7, r4
 80110da:	78db      	ldrb	r3, [r3, #3]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d021      	beq.n	8011124 <set_sequence_step_timeout+0x1c8>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80110e0:	2527      	movs	r5, #39	; 0x27
 80110e2:	197c      	adds	r4, r7, r5
 80110e4:	231b      	movs	r3, #27
 80110e6:	18fa      	adds	r2, r7, r3
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2100      	movs	r1, #0
 80110ec:	0018      	movs	r0, r3
 80110ee:	f7fc fc2b 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 80110f2:	0003      	movs	r3, r0
 80110f4:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80110f6:	197b      	adds	r3, r7, r5
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	b25b      	sxtb	r3, r3
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d111      	bne.n	8011124 <set_sequence_step_timeout+0x1c8>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8011100:	197c      	adds	r4, r7, r5
 8011102:	2518      	movs	r5, #24
 8011104:	197a      	adds	r2, r7, r5
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2151      	movs	r1, #81	; 0x51
 801110a:	0018      	movs	r0, r3
 801110c:	f001 feb8 	bl	8012e80 <VL53L0X_RdWord>
 8011110:	0003      	movs	r3, r0
 8011112:	7023      	strb	r3, [r4, #0]
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8011114:	197b      	adds	r3, r7, r5
 8011116:	881b      	ldrh	r3, [r3, #0]
 8011118:	0018      	movs	r0, r3
 801111a:	f7ff fd88 	bl	8010c2e <VL53L0X_decode_timeout>
 801111e:	0002      	movs	r2, r0
					PreRangeTimeOutMClks =
 8011120:	19bb      	adds	r3, r7, r6
 8011122:	801a      	strh	r2, [r3, #0]
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8011124:	2227      	movs	r2, #39	; 0x27
 8011126:	18bb      	adds	r3, r7, r2
 8011128:	781b      	ldrb	r3, [r3, #0]
 801112a:	b25b      	sxtb	r3, r3
 801112c:	2b00      	cmp	r3, #0
 801112e:	d109      	bne.n	8011144 <set_sequence_step_timeout+0x1e8>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8011130:	18bc      	adds	r4, r7, r2
 8011132:	231b      	movs	r3, #27
 8011134:	18fa      	adds	r2, r7, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2101      	movs	r1, #1
 801113a:	0018      	movs	r0, r3
 801113c:	f7fc fc04 	bl	800d948 <VL53L0X_GetVcselPulsePeriod>
 8011140:	0003      	movs	r3, r0
 8011142:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8011144:	2527      	movs	r5, #39	; 0x27
 8011146:	197b      	adds	r3, r7, r5
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	b25b      	sxtb	r3, r3
 801114c:	2b00      	cmp	r3, #0
 801114e:	d135      	bne.n	80111bc <set_sequence_step_timeout+0x260>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8011150:	231b      	movs	r3, #27
 8011152:	18fb      	adds	r3, r7, r3
 8011154:	781a      	ldrb	r2, [r3, #0]
 8011156:	6879      	ldr	r1, [r7, #4]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	0018      	movs	r0, r3
 801115c:	f7ff fd7f 	bl	8010c5e <VL53L0X_calc_timeout_mclks>
 8011160:	0003      	movs	r3, r0
 8011162:	623b      	str	r3, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8011164:	2324      	movs	r3, #36	; 0x24
 8011166:	18fb      	adds	r3, r7, r3
 8011168:	881b      	ldrh	r3, [r3, #0]
 801116a:	6a3a      	ldr	r2, [r7, #32]
 801116c:	18d3      	adds	r3, r2, r3
 801116e:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8011170:	261e      	movs	r6, #30
 8011172:	19bc      	adds	r4, r7, r6
 8011174:	6a3b      	ldr	r3, [r7, #32]
 8011176:	0018      	movs	r0, r3
 8011178:	f7ff fd22 	bl	8010bc0 <VL53L0X_encode_timeout>
 801117c:	0003      	movs	r3, r0
 801117e:	8023      	strh	r3, [r4, #0]

				if (Status == VL53L0X_ERROR_NONE) {
 8011180:	197b      	adds	r3, r7, r5
 8011182:	781b      	ldrb	r3, [r3, #0]
 8011184:	b25b      	sxtb	r3, r3
 8011186:	2b00      	cmp	r3, #0
 8011188:	d109      	bne.n	801119e <set_sequence_step_timeout+0x242>
					Status = VL53L0X_WrWord(Dev, 0x71,
 801118a:	197c      	adds	r4, r7, r5
 801118c:	19bb      	adds	r3, r7, r6
 801118e:	881a      	ldrh	r2, [r3, #0]
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	2171      	movs	r1, #113	; 0x71
 8011194:	0018      	movs	r0, r3
 8011196:	f001 fdbf 	bl	8012d18 <VL53L0X_WrWord>
 801119a:	0003      	movs	r3, r0
 801119c:	7023      	strb	r3, [r4, #0]
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 801119e:	2327      	movs	r3, #39	; 0x27
 80111a0:	18fb      	adds	r3, r7, r3
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	b25b      	sxtb	r3, r3
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d108      	bne.n	80111bc <set_sequence_step_timeout+0x260>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	21dc      	movs	r1, #220	; 0xdc
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	505a      	str	r2, [r3, r1]
 80111b2:	e003      	b.n	80111bc <set_sequence_step_timeout+0x260>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80111b4:	2327      	movs	r3, #39	; 0x27
 80111b6:	18fb      	adds	r3, r7, r3
 80111b8:	22fc      	movs	r2, #252	; 0xfc
 80111ba:	701a      	strb	r2, [r3, #0]

	}
	return Status;
 80111bc:	2327      	movs	r3, #39	; 0x27
 80111be:	18fb      	adds	r3, r7, r3
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	b25b      	sxtb	r3, r3
}
 80111c4:	0018      	movs	r0, r3
 80111c6:	46bd      	mov	sp, r7
 80111c8:	b00b      	add	sp, #44	; 0x2c
 80111ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080111cc <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80111cc:	b5b0      	push	{r4, r5, r7, lr}
 80111ce:	b08a      	sub	sp, #40	; 0x28
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	0008      	movs	r0, r1
 80111d6:	0011      	movs	r1, r2
 80111d8:	1cfb      	adds	r3, r7, #3
 80111da:	1c02      	adds	r2, r0, #0
 80111dc:	701a      	strb	r2, [r3, #0]
 80111de:	1cbb      	adds	r3, r7, #2
 80111e0:	1c0a      	adds	r2, r1, #0
 80111e2:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80111e4:	2127      	movs	r1, #39	; 0x27
 80111e6:	187b      	adds	r3, r7, r1
 80111e8:	2200      	movs	r2, #0
 80111ea:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80111ec:	2326      	movs	r3, #38	; 0x26
 80111ee:	18fb      	adds	r3, r7, r3
 80111f0:	220c      	movs	r2, #12
 80111f2:	701a      	strb	r2, [r3, #0]
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80111f4:	2325      	movs	r3, #37	; 0x25
 80111f6:	18fb      	adds	r3, r7, r3
 80111f8:	2212      	movs	r2, #18
 80111fa:	701a      	strb	r2, [r3, #0]
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80111fc:	2324      	movs	r3, #36	; 0x24
 80111fe:	18fb      	adds	r3, r7, r3
 8011200:	2208      	movs	r2, #8
 8011202:	701a      	strb	r2, [r3, #0]
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8011204:	2323      	movs	r3, #35	; 0x23
 8011206:	18fb      	adds	r3, r7, r3
 8011208:	220e      	movs	r2, #14
 801120a:	701a      	strb	r2, [r3, #0]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 801120c:	230f      	movs	r3, #15
 801120e:	18fb      	adds	r3, r7, r3
 8011210:	2200      	movs	r2, #0
 8011212:	701a      	strb	r2, [r3, #0]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8011214:	1cbb      	adds	r3, r7, #2
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	2201      	movs	r2, #1
 801121a:	4013      	ands	r3, r2
 801121c:	b2db      	uxtb	r3, r3
 801121e:	2b00      	cmp	r3, #0
 8011220:	d003      	beq.n	801122a <VL53L0X_set_vcsel_pulse_period+0x5e>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8011222:	187b      	adds	r3, r7, r1
 8011224:	22fc      	movs	r2, #252	; 0xfc
 8011226:	701a      	strb	r2, [r3, #0]
 8011228:	e02c      	b.n	8011284 <VL53L0X_set_vcsel_pulse_period+0xb8>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 801122a:	1cfb      	adds	r3, r7, #3
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d112      	bne.n	8011258 <VL53L0X_set_vcsel_pulse_period+0x8c>
 8011232:	1cba      	adds	r2, r7, #2
 8011234:	2326      	movs	r3, #38	; 0x26
 8011236:	18fb      	adds	r3, r7, r3
 8011238:	7812      	ldrb	r2, [r2, #0]
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	429a      	cmp	r2, r3
 801123e:	d306      	bcc.n	801124e <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8011240:	1cba      	adds	r2, r7, #2
 8011242:	2325      	movs	r3, #37	; 0x25
 8011244:	18fb      	adds	r3, r7, r3
 8011246:	7812      	ldrb	r2, [r2, #0]
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	429a      	cmp	r2, r3
 801124c:	d904      	bls.n	8011258 <VL53L0X_set_vcsel_pulse_period+0x8c>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 801124e:	2327      	movs	r3, #39	; 0x27
 8011250:	18fb      	adds	r3, r7, r3
 8011252:	22fc      	movs	r2, #252	; 0xfc
 8011254:	701a      	strb	r2, [r3, #0]
 8011256:	e015      	b.n	8011284 <VL53L0X_set_vcsel_pulse_period+0xb8>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8011258:	1cfb      	adds	r3, r7, #3
 801125a:	781b      	ldrb	r3, [r3, #0]
 801125c:	2b01      	cmp	r3, #1
 801125e:	d111      	bne.n	8011284 <VL53L0X_set_vcsel_pulse_period+0xb8>
 8011260:	1cba      	adds	r2, r7, #2
 8011262:	2324      	movs	r3, #36	; 0x24
 8011264:	18fb      	adds	r3, r7, r3
 8011266:	7812      	ldrb	r2, [r2, #0]
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	429a      	cmp	r2, r3
 801126c:	d306      	bcc.n	801127c <VL53L0X_set_vcsel_pulse_period+0xb0>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 801126e:	1cba      	adds	r2, r7, #2
 8011270:	2323      	movs	r3, #35	; 0x23
 8011272:	18fb      	adds	r3, r7, r3
 8011274:	7812      	ldrb	r2, [r2, #0]
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	429a      	cmp	r2, r3
 801127a:	d903      	bls.n	8011284 <VL53L0X_set_vcsel_pulse_period+0xb8>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 801127c:	2327      	movs	r3, #39	; 0x27
 801127e:	18fb      	adds	r3, r7, r3
 8011280:	22fc      	movs	r2, #252	; 0xfc
 8011282:	701a      	strb	r2, [r3, #0]
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8011284:	2227      	movs	r2, #39	; 0x27
 8011286:	18bb      	adds	r3, r7, r2
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	b25b      	sxtb	r3, r3
 801128c:	2b00      	cmp	r3, #0
 801128e:	d003      	beq.n	8011298 <VL53L0X_set_vcsel_pulse_period+0xcc>
		return Status;
 8011290:	18bb      	adds	r3, r7, r2
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	b25b      	sxtb	r3, r3
 8011296:	e292      	b.n	80117be <VL53L0X_set_vcsel_pulse_period+0x5f2>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8011298:	1cfb      	adds	r3, r7, #3
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d160      	bne.n	8011362 <VL53L0X_set_vcsel_pulse_period+0x196>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80112a0:	1cbb      	adds	r3, r7, #2
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	2b0c      	cmp	r3, #12
 80112a6:	d113      	bne.n	80112d0 <VL53L0X_set_vcsel_pulse_period+0x104>

			Status = VL53L0X_WrByte(Dev,
 80112a8:	2527      	movs	r5, #39	; 0x27
 80112aa:	197c      	adds	r4, r7, r5
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2218      	movs	r2, #24
 80112b0:	2157      	movs	r1, #87	; 0x57
 80112b2:	0018      	movs	r0, r3
 80112b4:	f001 fd00 	bl	8012cb8 <VL53L0X_WrByte>
 80112b8:	0003      	movs	r3, r0
 80112ba:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80112bc:	197c      	adds	r4, r7, r5
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2208      	movs	r2, #8
 80112c2:	2156      	movs	r1, #86	; 0x56
 80112c4:	0018      	movs	r0, r3
 80112c6:	f001 fcf7 	bl	8012cb8 <VL53L0X_WrByte>
 80112ca:	0003      	movs	r3, r0
 80112cc:	7023      	strb	r3, [r4, #0]
 80112ce:	e1b4      	b.n	801163a <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80112d0:	1cbb      	adds	r3, r7, #2
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	2b0e      	cmp	r3, #14
 80112d6:	d113      	bne.n	8011300 <VL53L0X_set_vcsel_pulse_period+0x134>

			Status = VL53L0X_WrByte(Dev,
 80112d8:	2527      	movs	r5, #39	; 0x27
 80112da:	197c      	adds	r4, r7, r5
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2230      	movs	r2, #48	; 0x30
 80112e0:	2157      	movs	r1, #87	; 0x57
 80112e2:	0018      	movs	r0, r3
 80112e4:	f001 fce8 	bl	8012cb8 <VL53L0X_WrByte>
 80112e8:	0003      	movs	r3, r0
 80112ea:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80112ec:	197c      	adds	r4, r7, r5
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2208      	movs	r2, #8
 80112f2:	2156      	movs	r1, #86	; 0x56
 80112f4:	0018      	movs	r0, r3
 80112f6:	f001 fcdf 	bl	8012cb8 <VL53L0X_WrByte>
 80112fa:	0003      	movs	r3, r0
 80112fc:	7023      	strb	r3, [r4, #0]
 80112fe:	e19c      	b.n	801163a <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8011300:	1cbb      	adds	r3, r7, #2
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	2b10      	cmp	r3, #16
 8011306:	d113      	bne.n	8011330 <VL53L0X_set_vcsel_pulse_period+0x164>

			Status = VL53L0X_WrByte(Dev,
 8011308:	2527      	movs	r5, #39	; 0x27
 801130a:	197c      	adds	r4, r7, r5
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2240      	movs	r2, #64	; 0x40
 8011310:	2157      	movs	r1, #87	; 0x57
 8011312:	0018      	movs	r0, r3
 8011314:	f001 fcd0 	bl	8012cb8 <VL53L0X_WrByte>
 8011318:	0003      	movs	r3, r0
 801131a:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 801131c:	197c      	adds	r4, r7, r5
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2208      	movs	r2, #8
 8011322:	2156      	movs	r1, #86	; 0x56
 8011324:	0018      	movs	r0, r3
 8011326:	f001 fcc7 	bl	8012cb8 <VL53L0X_WrByte>
 801132a:	0003      	movs	r3, r0
 801132c:	7023      	strb	r3, [r4, #0]
 801132e:	e184      	b.n	801163a <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8011330:	1cbb      	adds	r3, r7, #2
 8011332:	781b      	ldrb	r3, [r3, #0]
 8011334:	2b12      	cmp	r3, #18
 8011336:	d000      	beq.n	801133a <VL53L0X_set_vcsel_pulse_period+0x16e>
 8011338:	e17f      	b.n	801163a <VL53L0X_set_vcsel_pulse_period+0x46e>

			Status = VL53L0X_WrByte(Dev,
 801133a:	2527      	movs	r5, #39	; 0x27
 801133c:	197c      	adds	r4, r7, r5
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2250      	movs	r2, #80	; 0x50
 8011342:	2157      	movs	r1, #87	; 0x57
 8011344:	0018      	movs	r0, r3
 8011346:	f001 fcb7 	bl	8012cb8 <VL53L0X_WrByte>
 801134a:	0003      	movs	r3, r0
 801134c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 801134e:	197c      	adds	r4, r7, r5
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2208      	movs	r2, #8
 8011354:	2156      	movs	r1, #86	; 0x56
 8011356:	0018      	movs	r0, r3
 8011358:	f001 fcae 	bl	8012cb8 <VL53L0X_WrByte>
 801135c:	0003      	movs	r3, r0
 801135e:	7023      	strb	r3, [r4, #0]
 8011360:	e16b      	b.n	801163a <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8011362:	1cfb      	adds	r3, r7, #3
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	2b01      	cmp	r3, #1
 8011368:	d000      	beq.n	801136c <VL53L0X_set_vcsel_pulse_period+0x1a0>
 801136a:	e166      	b.n	801163a <VL53L0X_set_vcsel_pulse_period+0x46e>

		if (VCSELPulsePeriodPCLK == 8) {
 801136c:	1cbb      	adds	r3, r7, #2
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	2b08      	cmp	r3, #8
 8011372:	d155      	bne.n	8011420 <VL53L0X_set_vcsel_pulse_period+0x254>

			Status = VL53L0X_WrByte(Dev,
 8011374:	2527      	movs	r5, #39	; 0x27
 8011376:	197c      	adds	r4, r7, r5
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2210      	movs	r2, #16
 801137c:	2148      	movs	r1, #72	; 0x48
 801137e:	0018      	movs	r0, r3
 8011380:	f001 fc9a 	bl	8012cb8 <VL53L0X_WrByte>
 8011384:	0003      	movs	r3, r0
 8011386:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8011388:	197c      	adds	r4, r7, r5
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2208      	movs	r2, #8
 801138e:	2147      	movs	r1, #71	; 0x47
 8011390:	0018      	movs	r0, r3
 8011392:	f001 fc91 	bl	8012cb8 <VL53L0X_WrByte>
 8011396:	0003      	movs	r3, r0
 8011398:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2202      	movs	r2, #2
 801139e:	2132      	movs	r1, #50	; 0x32
 80113a0:	0018      	movs	r0, r3
 80113a2:	f001 fc89 	bl	8012cb8 <VL53L0X_WrByte>
 80113a6:	0003      	movs	r3, r0
 80113a8:	0019      	movs	r1, r3
 80113aa:	002c      	movs	r4, r5
 80113ac:	193b      	adds	r3, r7, r4
 80113ae:	193a      	adds	r2, r7, r4
 80113b0:	7812      	ldrb	r2, [r2, #0]
 80113b2:	430a      	orrs	r2, r1
 80113b4:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	220c      	movs	r2, #12
 80113ba:	2130      	movs	r1, #48	; 0x30
 80113bc:	0018      	movs	r0, r3
 80113be:	f001 fc7b 	bl	8012cb8 <VL53L0X_WrByte>
 80113c2:	0003      	movs	r3, r0
 80113c4:	0019      	movs	r1, r3
 80113c6:	193b      	adds	r3, r7, r4
 80113c8:	193a      	adds	r2, r7, r4
 80113ca:	7812      	ldrb	r2, [r2, #0]
 80113cc:	430a      	orrs	r2, r1
 80113ce:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2201      	movs	r2, #1
 80113d4:	21ff      	movs	r1, #255	; 0xff
 80113d6:	0018      	movs	r0, r3
 80113d8:	f001 fc6e 	bl	8012cb8 <VL53L0X_WrByte>
 80113dc:	0003      	movs	r3, r0
 80113de:	0019      	movs	r1, r3
 80113e0:	193b      	adds	r3, r7, r4
 80113e2:	193a      	adds	r2, r7, r4
 80113e4:	7812      	ldrb	r2, [r2, #0]
 80113e6:	430a      	orrs	r2, r1
 80113e8:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2230      	movs	r2, #48	; 0x30
 80113ee:	2130      	movs	r1, #48	; 0x30
 80113f0:	0018      	movs	r0, r3
 80113f2:	f001 fc61 	bl	8012cb8 <VL53L0X_WrByte>
 80113f6:	0003      	movs	r3, r0
 80113f8:	0019      	movs	r1, r3
 80113fa:	193b      	adds	r3, r7, r4
 80113fc:	193a      	adds	r2, r7, r4
 80113fe:	7812      	ldrb	r2, [r2, #0]
 8011400:	430a      	orrs	r2, r1
 8011402:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2200      	movs	r2, #0
 8011408:	21ff      	movs	r1, #255	; 0xff
 801140a:	0018      	movs	r0, r3
 801140c:	f001 fc54 	bl	8012cb8 <VL53L0X_WrByte>
 8011410:	0003      	movs	r3, r0
 8011412:	0019      	movs	r1, r3
 8011414:	193b      	adds	r3, r7, r4
 8011416:	193a      	adds	r2, r7, r4
 8011418:	7812      	ldrb	r2, [r2, #0]
 801141a:	430a      	orrs	r2, r1
 801141c:	701a      	strb	r2, [r3, #0]
 801141e:	e10c      	b.n	801163a <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8011420:	1cbb      	adds	r3, r7, #2
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	2b0a      	cmp	r3, #10
 8011426:	d155      	bne.n	80114d4 <VL53L0X_set_vcsel_pulse_period+0x308>

			Status = VL53L0X_WrByte(Dev,
 8011428:	2527      	movs	r5, #39	; 0x27
 801142a:	197c      	adds	r4, r7, r5
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2228      	movs	r2, #40	; 0x28
 8011430:	2148      	movs	r1, #72	; 0x48
 8011432:	0018      	movs	r0, r3
 8011434:	f001 fc40 	bl	8012cb8 <VL53L0X_WrByte>
 8011438:	0003      	movs	r3, r0
 801143a:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 801143c:	197c      	adds	r4, r7, r5
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2208      	movs	r2, #8
 8011442:	2147      	movs	r1, #71	; 0x47
 8011444:	0018      	movs	r0, r3
 8011446:	f001 fc37 	bl	8012cb8 <VL53L0X_WrByte>
 801144a:	0003      	movs	r3, r0
 801144c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2203      	movs	r2, #3
 8011452:	2132      	movs	r1, #50	; 0x32
 8011454:	0018      	movs	r0, r3
 8011456:	f001 fc2f 	bl	8012cb8 <VL53L0X_WrByte>
 801145a:	0003      	movs	r3, r0
 801145c:	0019      	movs	r1, r3
 801145e:	002c      	movs	r4, r5
 8011460:	193b      	adds	r3, r7, r4
 8011462:	193a      	adds	r2, r7, r4
 8011464:	7812      	ldrb	r2, [r2, #0]
 8011466:	430a      	orrs	r2, r1
 8011468:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2209      	movs	r2, #9
 801146e:	2130      	movs	r1, #48	; 0x30
 8011470:	0018      	movs	r0, r3
 8011472:	f001 fc21 	bl	8012cb8 <VL53L0X_WrByte>
 8011476:	0003      	movs	r3, r0
 8011478:	0019      	movs	r1, r3
 801147a:	193b      	adds	r3, r7, r4
 801147c:	193a      	adds	r2, r7, r4
 801147e:	7812      	ldrb	r2, [r2, #0]
 8011480:	430a      	orrs	r2, r1
 8011482:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2201      	movs	r2, #1
 8011488:	21ff      	movs	r1, #255	; 0xff
 801148a:	0018      	movs	r0, r3
 801148c:	f001 fc14 	bl	8012cb8 <VL53L0X_WrByte>
 8011490:	0003      	movs	r3, r0
 8011492:	0019      	movs	r1, r3
 8011494:	193b      	adds	r3, r7, r4
 8011496:	193a      	adds	r2, r7, r4
 8011498:	7812      	ldrb	r2, [r2, #0]
 801149a:	430a      	orrs	r2, r1
 801149c:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2220      	movs	r2, #32
 80114a2:	2130      	movs	r1, #48	; 0x30
 80114a4:	0018      	movs	r0, r3
 80114a6:	f001 fc07 	bl	8012cb8 <VL53L0X_WrByte>
 80114aa:	0003      	movs	r3, r0
 80114ac:	0019      	movs	r1, r3
 80114ae:	193b      	adds	r3, r7, r4
 80114b0:	193a      	adds	r2, r7, r4
 80114b2:	7812      	ldrb	r2, [r2, #0]
 80114b4:	430a      	orrs	r2, r1
 80114b6:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2200      	movs	r2, #0
 80114bc:	21ff      	movs	r1, #255	; 0xff
 80114be:	0018      	movs	r0, r3
 80114c0:	f001 fbfa 	bl	8012cb8 <VL53L0X_WrByte>
 80114c4:	0003      	movs	r3, r0
 80114c6:	0019      	movs	r1, r3
 80114c8:	193b      	adds	r3, r7, r4
 80114ca:	193a      	adds	r2, r7, r4
 80114cc:	7812      	ldrb	r2, [r2, #0]
 80114ce:	430a      	orrs	r2, r1
 80114d0:	701a      	strb	r2, [r3, #0]
 80114d2:	e0b2      	b.n	801163a <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80114d4:	1cbb      	adds	r3, r7, #2
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	2b0c      	cmp	r3, #12
 80114da:	d155      	bne.n	8011588 <VL53L0X_set_vcsel_pulse_period+0x3bc>

			Status = VL53L0X_WrByte(Dev,
 80114dc:	2527      	movs	r5, #39	; 0x27
 80114de:	197c      	adds	r4, r7, r5
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2238      	movs	r2, #56	; 0x38
 80114e4:	2148      	movs	r1, #72	; 0x48
 80114e6:	0018      	movs	r0, r3
 80114e8:	f001 fbe6 	bl	8012cb8 <VL53L0X_WrByte>
 80114ec:	0003      	movs	r3, r0
 80114ee:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80114f0:	197c      	adds	r4, r7, r5
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2208      	movs	r2, #8
 80114f6:	2147      	movs	r1, #71	; 0x47
 80114f8:	0018      	movs	r0, r3
 80114fa:	f001 fbdd 	bl	8012cb8 <VL53L0X_WrByte>
 80114fe:	0003      	movs	r3, r0
 8011500:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2203      	movs	r2, #3
 8011506:	2132      	movs	r1, #50	; 0x32
 8011508:	0018      	movs	r0, r3
 801150a:	f001 fbd5 	bl	8012cb8 <VL53L0X_WrByte>
 801150e:	0003      	movs	r3, r0
 8011510:	0019      	movs	r1, r3
 8011512:	002c      	movs	r4, r5
 8011514:	193b      	adds	r3, r7, r4
 8011516:	193a      	adds	r2, r7, r4
 8011518:	7812      	ldrb	r2, [r2, #0]
 801151a:	430a      	orrs	r2, r1
 801151c:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2208      	movs	r2, #8
 8011522:	2130      	movs	r1, #48	; 0x30
 8011524:	0018      	movs	r0, r3
 8011526:	f001 fbc7 	bl	8012cb8 <VL53L0X_WrByte>
 801152a:	0003      	movs	r3, r0
 801152c:	0019      	movs	r1, r3
 801152e:	193b      	adds	r3, r7, r4
 8011530:	193a      	adds	r2, r7, r4
 8011532:	7812      	ldrb	r2, [r2, #0]
 8011534:	430a      	orrs	r2, r1
 8011536:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2201      	movs	r2, #1
 801153c:	21ff      	movs	r1, #255	; 0xff
 801153e:	0018      	movs	r0, r3
 8011540:	f001 fbba 	bl	8012cb8 <VL53L0X_WrByte>
 8011544:	0003      	movs	r3, r0
 8011546:	0019      	movs	r1, r3
 8011548:	193b      	adds	r3, r7, r4
 801154a:	193a      	adds	r2, r7, r4
 801154c:	7812      	ldrb	r2, [r2, #0]
 801154e:	430a      	orrs	r2, r1
 8011550:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2220      	movs	r2, #32
 8011556:	2130      	movs	r1, #48	; 0x30
 8011558:	0018      	movs	r0, r3
 801155a:	f001 fbad 	bl	8012cb8 <VL53L0X_WrByte>
 801155e:	0003      	movs	r3, r0
 8011560:	0019      	movs	r1, r3
 8011562:	193b      	adds	r3, r7, r4
 8011564:	193a      	adds	r2, r7, r4
 8011566:	7812      	ldrb	r2, [r2, #0]
 8011568:	430a      	orrs	r2, r1
 801156a:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2200      	movs	r2, #0
 8011570:	21ff      	movs	r1, #255	; 0xff
 8011572:	0018      	movs	r0, r3
 8011574:	f001 fba0 	bl	8012cb8 <VL53L0X_WrByte>
 8011578:	0003      	movs	r3, r0
 801157a:	0019      	movs	r1, r3
 801157c:	193b      	adds	r3, r7, r4
 801157e:	193a      	adds	r2, r7, r4
 8011580:	7812      	ldrb	r2, [r2, #0]
 8011582:	430a      	orrs	r2, r1
 8011584:	701a      	strb	r2, [r3, #0]
 8011586:	e058      	b.n	801163a <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8011588:	1cbb      	adds	r3, r7, #2
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	2b0e      	cmp	r3, #14
 801158e:	d154      	bne.n	801163a <VL53L0X_set_vcsel_pulse_period+0x46e>

			Status = VL53L0X_WrByte(Dev,
 8011590:	2527      	movs	r5, #39	; 0x27
 8011592:	197c      	adds	r4, r7, r5
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2248      	movs	r2, #72	; 0x48
 8011598:	2148      	movs	r1, #72	; 0x48
 801159a:	0018      	movs	r0, r3
 801159c:	f001 fb8c 	bl	8012cb8 <VL53L0X_WrByte>
 80115a0:	0003      	movs	r3, r0
 80115a2:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80115a4:	197c      	adds	r4, r7, r5
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2208      	movs	r2, #8
 80115aa:	2147      	movs	r1, #71	; 0x47
 80115ac:	0018      	movs	r0, r3
 80115ae:	f001 fb83 	bl	8012cb8 <VL53L0X_WrByte>
 80115b2:	0003      	movs	r3, r0
 80115b4:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2203      	movs	r2, #3
 80115ba:	2132      	movs	r1, #50	; 0x32
 80115bc:	0018      	movs	r0, r3
 80115be:	f001 fb7b 	bl	8012cb8 <VL53L0X_WrByte>
 80115c2:	0003      	movs	r3, r0
 80115c4:	0019      	movs	r1, r3
 80115c6:	002c      	movs	r4, r5
 80115c8:	193b      	adds	r3, r7, r4
 80115ca:	193a      	adds	r2, r7, r4
 80115cc:	7812      	ldrb	r2, [r2, #0]
 80115ce:	430a      	orrs	r2, r1
 80115d0:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2207      	movs	r2, #7
 80115d6:	2130      	movs	r1, #48	; 0x30
 80115d8:	0018      	movs	r0, r3
 80115da:	f001 fb6d 	bl	8012cb8 <VL53L0X_WrByte>
 80115de:	0003      	movs	r3, r0
 80115e0:	0019      	movs	r1, r3
 80115e2:	193b      	adds	r3, r7, r4
 80115e4:	193a      	adds	r2, r7, r4
 80115e6:	7812      	ldrb	r2, [r2, #0]
 80115e8:	430a      	orrs	r2, r1
 80115ea:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2201      	movs	r2, #1
 80115f0:	21ff      	movs	r1, #255	; 0xff
 80115f2:	0018      	movs	r0, r3
 80115f4:	f001 fb60 	bl	8012cb8 <VL53L0X_WrByte>
 80115f8:	0003      	movs	r3, r0
 80115fa:	0019      	movs	r1, r3
 80115fc:	193b      	adds	r3, r7, r4
 80115fe:	193a      	adds	r2, r7, r4
 8011600:	7812      	ldrb	r2, [r2, #0]
 8011602:	430a      	orrs	r2, r1
 8011604:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2220      	movs	r2, #32
 801160a:	2130      	movs	r1, #48	; 0x30
 801160c:	0018      	movs	r0, r3
 801160e:	f001 fb53 	bl	8012cb8 <VL53L0X_WrByte>
 8011612:	0003      	movs	r3, r0
 8011614:	0019      	movs	r1, r3
 8011616:	193b      	adds	r3, r7, r4
 8011618:	193a      	adds	r2, r7, r4
 801161a:	7812      	ldrb	r2, [r2, #0]
 801161c:	430a      	orrs	r2, r1
 801161e:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2200      	movs	r2, #0
 8011624:	21ff      	movs	r1, #255	; 0xff
 8011626:	0018      	movs	r0, r3
 8011628:	f001 fb46 	bl	8012cb8 <VL53L0X_WrByte>
 801162c:	0003      	movs	r3, r0
 801162e:	0019      	movs	r1, r3
 8011630:	193b      	adds	r3, r7, r4
 8011632:	193a      	adds	r2, r7, r4
 8011634:	7812      	ldrb	r2, [r2, #0]
 8011636:	430a      	orrs	r2, r1
 8011638:	701a      	strb	r2, [r3, #0]
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 801163a:	2327      	movs	r3, #39	; 0x27
 801163c:	18fb      	adds	r3, r7, r3
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	b25b      	sxtb	r3, r3
 8011642:	2b00      	cmp	r3, #0
 8011644:	d000      	beq.n	8011648 <VL53L0X_set_vcsel_pulse_period+0x47c>
 8011646:	e093      	b.n	8011770 <VL53L0X_set_vcsel_pulse_period+0x5a4>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8011648:	2322      	movs	r3, #34	; 0x22
 801164a:	18fc      	adds	r4, r7, r3
 801164c:	1cbb      	adds	r3, r7, #2
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	0018      	movs	r0, r3
 8011652:	f7fe fcc6 	bl	800ffe2 <VL53L0X_encode_vcsel_period>
 8011656:	0003      	movs	r3, r0
 8011658:	7023      	strb	r3, [r4, #0]
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 801165a:	1cfb      	adds	r3, r7, #3
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d002      	beq.n	8011668 <VL53L0X_set_vcsel_pulse_period+0x49c>
 8011662:	2b01      	cmp	r3, #1
 8011664:	d04f      	beq.n	8011706 <VL53L0X_set_vcsel_pulse_period+0x53a>
 8011666:	e07e      	b.n	8011766 <VL53L0X_set_vcsel_pulse_period+0x59a>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8011668:	2527      	movs	r5, #39	; 0x27
 801166a:	197c      	adds	r4, r7, r5
 801166c:	2314      	movs	r3, #20
 801166e:	18fa      	adds	r2, r7, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2103      	movs	r1, #3
 8011674:	0018      	movs	r0, r3
 8011676:	f7ff fb57 	bl	8010d28 <get_sequence_step_timeout>
 801167a:	0003      	movs	r3, r0
 801167c:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 801167e:	197b      	adds	r3, r7, r5
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	b25b      	sxtb	r3, r3
 8011684:	2b00      	cmp	r3, #0
 8011686:	d109      	bne.n	801169c <VL53L0X_set_vcsel_pulse_period+0x4d0>
				Status = get_sequence_step_timeout(Dev,
 8011688:	197c      	adds	r4, r7, r5
 801168a:	2310      	movs	r3, #16
 801168c:	18fa      	adds	r2, r7, r3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2102      	movs	r1, #2
 8011692:	0018      	movs	r0, r3
 8011694:	f7ff fb48 	bl	8010d28 <get_sequence_step_timeout>
 8011698:	0003      	movs	r3, r0
 801169a:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 801169c:	2227      	movs	r2, #39	; 0x27
 801169e:	18bb      	adds	r3, r7, r2
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	b25b      	sxtb	r3, r3
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d10a      	bne.n	80116be <VL53L0X_set_vcsel_pulse_period+0x4f2>
				Status = VL53L0X_WrByte(Dev,
 80116a8:	18bc      	adds	r4, r7, r2
 80116aa:	2322      	movs	r3, #34	; 0x22
 80116ac:	18fb      	adds	r3, r7, r3
 80116ae:	781a      	ldrb	r2, [r3, #0]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2150      	movs	r1, #80	; 0x50
 80116b4:	0018      	movs	r0, r3
 80116b6:	f001 faff 	bl	8012cb8 <VL53L0X_WrByte>
 80116ba:	0003      	movs	r3, r0
 80116bc:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80116be:	2127      	movs	r1, #39	; 0x27
 80116c0:	187b      	adds	r3, r7, r1
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	b25b      	sxtb	r3, r3
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d108      	bne.n	80116dc <VL53L0X_set_vcsel_pulse_period+0x510>
				Status = set_sequence_step_timeout(Dev,
 80116ca:	697a      	ldr	r2, [r7, #20]
 80116cc:	187c      	adds	r4, r7, r1
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2103      	movs	r1, #3
 80116d2:	0018      	movs	r0, r3
 80116d4:	f7ff fc42 	bl	8010f5c <set_sequence_step_timeout>
 80116d8:	0003      	movs	r3, r0
 80116da:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80116dc:	2127      	movs	r1, #39	; 0x27
 80116de:	187b      	adds	r3, r7, r1
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	b25b      	sxtb	r3, r3
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d108      	bne.n	80116fa <VL53L0X_set_vcsel_pulse_period+0x52e>
				Status = set_sequence_step_timeout(Dev,
 80116e8:	693a      	ldr	r2, [r7, #16]
 80116ea:	187c      	adds	r4, r7, r1
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2102      	movs	r1, #2
 80116f0:	0018      	movs	r0, r3
 80116f2:	f7ff fc33 	bl	8010f5c <set_sequence_step_timeout>
 80116f6:	0003      	movs	r3, r0
 80116f8:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	1cba      	adds	r2, r7, #2
 80116fe:	21e8      	movs	r1, #232	; 0xe8
 8011700:	7812      	ldrb	r2, [r2, #0]
 8011702:	545a      	strb	r2, [r3, r1]
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8011704:	e035      	b.n	8011772 <VL53L0X_set_vcsel_pulse_period+0x5a6>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8011706:	2527      	movs	r5, #39	; 0x27
 8011708:	197c      	adds	r4, r7, r5
 801170a:	2318      	movs	r3, #24
 801170c:	18fa      	adds	r2, r7, r3
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2104      	movs	r1, #4
 8011712:	0018      	movs	r0, r3
 8011714:	f7ff fb08 	bl	8010d28 <get_sequence_step_timeout>
 8011718:	0003      	movs	r3, r0
 801171a:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 801171c:	197b      	adds	r3, r7, r5
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	b25b      	sxtb	r3, r3
 8011722:	2b00      	cmp	r3, #0
 8011724:	d10a      	bne.n	801173c <VL53L0X_set_vcsel_pulse_period+0x570>
				Status = VL53L0X_WrByte(Dev,
 8011726:	197c      	adds	r4, r7, r5
 8011728:	2322      	movs	r3, #34	; 0x22
 801172a:	18fb      	adds	r3, r7, r3
 801172c:	781a      	ldrb	r2, [r3, #0]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2170      	movs	r1, #112	; 0x70
 8011732:	0018      	movs	r0, r3
 8011734:	f001 fac0 	bl	8012cb8 <VL53L0X_WrByte>
 8011738:	0003      	movs	r3, r0
 801173a:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 801173c:	2127      	movs	r1, #39	; 0x27
 801173e:	187b      	adds	r3, r7, r1
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	b25b      	sxtb	r3, r3
 8011744:	2b00      	cmp	r3, #0
 8011746:	d108      	bne.n	801175a <VL53L0X_set_vcsel_pulse_period+0x58e>
				Status = set_sequence_step_timeout(Dev,
 8011748:	69ba      	ldr	r2, [r7, #24]
 801174a:	187c      	adds	r4, r7, r1
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2104      	movs	r1, #4
 8011750:	0018      	movs	r0, r3
 8011752:	f7ff fc03 	bl	8010f5c <set_sequence_step_timeout>
 8011756:	0003      	movs	r3, r0
 8011758:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	1cba      	adds	r2, r7, #2
 801175e:	21e0      	movs	r1, #224	; 0xe0
 8011760:	7812      	ldrb	r2, [r2, #0]
 8011762:	545a      	strb	r2, [r3, r1]
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8011764:	e005      	b.n	8011772 <VL53L0X_set_vcsel_pulse_period+0x5a6>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8011766:	2327      	movs	r3, #39	; 0x27
 8011768:	18fb      	adds	r3, r7, r3
 801176a:	22fc      	movs	r2, #252	; 0xfc
 801176c:	701a      	strb	r2, [r3, #0]
 801176e:	e000      	b.n	8011772 <VL53L0X_set_vcsel_pulse_period+0x5a6>
		}
	}
 8011770:	46c0      	nop			; (mov r8, r8)

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8011772:	2227      	movs	r2, #39	; 0x27
 8011774:	18bb      	adds	r3, r7, r2
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	b25b      	sxtb	r3, r3
 801177a:	2b00      	cmp	r3, #0
 801177c:	d10b      	bne.n	8011796 <VL53L0X_set_vcsel_pulse_period+0x5ca>
		VL53L0X_GETPARAMETERFIELD(Dev,
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	695b      	ldr	r3, [r3, #20]
 8011782:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8011784:	18bc      	adds	r4, r7, r2
 8011786:	69fa      	ldr	r2, [r7, #28]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	0011      	movs	r1, r2
 801178c:	0018      	movs	r0, r3
 801178e:	f7fc f887 	bl	800d8a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8011792:	0003      	movs	r3, r0
 8011794:	7023      	strb	r3, [r4, #0]
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8011796:	2227      	movs	r2, #39	; 0x27
 8011798:	18bb      	adds	r3, r7, r2
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	b25b      	sxtb	r3, r3
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d109      	bne.n	80117b6 <VL53L0X_set_vcsel_pulse_period+0x5ea>
		Status = VL53L0X_perform_phase_calibration(
 80117a2:	18bc      	adds	r4, r7, r2
 80117a4:	230f      	movs	r3, #15
 80117a6:	18f9      	adds	r1, r7, r3
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	2301      	movs	r3, #1
 80117ac:	2200      	movs	r2, #0
 80117ae:	f7fe fae4 	bl	800fd7a <VL53L0X_perform_phase_calibration>
 80117b2:	0003      	movs	r3, r0
 80117b4:	7023      	strb	r3, [r4, #0]
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80117b6:	2327      	movs	r3, #39	; 0x27
 80117b8:	18fb      	adds	r3, r7, r3
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	b25b      	sxtb	r3, r3
}
 80117be:	0018      	movs	r0, r3
 80117c0:	46bd      	mov	sp, r7
 80117c2:	b00a      	add	sp, #40	; 0x28
 80117c4:	bdb0      	pop	{r4, r5, r7, pc}

080117c6 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80117c6:	b590      	push	{r4, r7, lr}
 80117c8:	b087      	sub	sp, #28
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	60f8      	str	r0, [r7, #12]
 80117ce:	607a      	str	r2, [r7, #4]
 80117d0:	200b      	movs	r0, #11
 80117d2:	183b      	adds	r3, r7, r0
 80117d4:	1c0a      	adds	r2, r1, #0
 80117d6:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80117d8:	2317      	movs	r3, #23
 80117da:	18fb      	adds	r3, r7, r3
 80117dc:	2200      	movs	r2, #0
 80117de:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80117e0:	183b      	adds	r3, r7, r0
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d002      	beq.n	80117ee <VL53L0X_get_vcsel_pulse_period+0x28>
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	d00c      	beq.n	8011806 <VL53L0X_get_vcsel_pulse_period+0x40>
 80117ec:	e017      	b.n	801181e <VL53L0X_get_vcsel_pulse_period+0x58>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80117ee:	2317      	movs	r3, #23
 80117f0:	18fc      	adds	r4, r7, r3
 80117f2:	2316      	movs	r3, #22
 80117f4:	18fa      	adds	r2, r7, r3
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2150      	movs	r1, #80	; 0x50
 80117fa:	0018      	movs	r0, r3
 80117fc:	f001 fb0b 	bl	8012e16 <VL53L0X_RdByte>
 8011800:	0003      	movs	r3, r0
 8011802:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8011804:	e00f      	b.n	8011826 <VL53L0X_get_vcsel_pulse_period+0x60>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8011806:	2317      	movs	r3, #23
 8011808:	18fc      	adds	r4, r7, r3
 801180a:	2316      	movs	r3, #22
 801180c:	18fa      	adds	r2, r7, r3
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2170      	movs	r1, #112	; 0x70
 8011812:	0018      	movs	r0, r3
 8011814:	f001 faff 	bl	8012e16 <VL53L0X_RdByte>
 8011818:	0003      	movs	r3, r0
 801181a:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 801181c:	e003      	b.n	8011826 <VL53L0X_get_vcsel_pulse_period+0x60>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 801181e:	2317      	movs	r3, #23
 8011820:	18fb      	adds	r3, r7, r3
 8011822:	22fc      	movs	r2, #252	; 0xfc
 8011824:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8011826:	2317      	movs	r3, #23
 8011828:	18fb      	adds	r3, r7, r3
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	b25b      	sxtb	r3, r3
 801182e:	2b00      	cmp	r3, #0
 8011830:	d109      	bne.n	8011846 <VL53L0X_get_vcsel_pulse_period+0x80>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8011832:	2316      	movs	r3, #22
 8011834:	18fb      	adds	r3, r7, r3
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	0018      	movs	r0, r3
 801183a:	f7fe fbbb 	bl	800ffb4 <VL53L0X_decode_vcsel_period>
 801183e:	0003      	movs	r3, r0
 8011840:	001a      	movs	r2, r3
		*pVCSELPulsePeriodPCLK =
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	701a      	strb	r2, [r3, #0]

	return Status;
 8011846:	2317      	movs	r3, #23
 8011848:	18fb      	adds	r3, r7, r3
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	b25b      	sxtb	r3, r3
}
 801184e:	0018      	movs	r0, r3
 8011850:	46bd      	mov	sp, r7
 8011852:	b007      	add	sp, #28
 8011854:	bd90      	pop	{r4, r7, pc}
	...

08011858 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8011858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801185a:	b093      	sub	sp, #76	; 0x4c
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011862:	2147      	movs	r1, #71	; 0x47
 8011864:	187b      	adds	r3, r7, r1
 8011866:	2200      	movs	r2, #0
 8011868:	701a      	strb	r2, [r3, #0]
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 801186a:	23fa      	movs	r3, #250	; 0xfa
 801186c:	00db      	lsls	r3, r3, #3
 801186e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8011870:	4b7a      	ldr	r3, [pc, #488]	; (8011a5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x204>)
 8011872:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8011874:	23f0      	movs	r3, #240	; 0xf0
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 801187a:	23a5      	movs	r3, #165	; 0xa5
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8011880:	4b77      	ldr	r3, [pc, #476]	; (8011a60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x208>)
 8011882:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8011884:	4b77      	ldr	r3, [pc, #476]	; (8011a64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x20c>)
 8011886:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8011888:	23a5      	movs	r3, #165	; 0xa5
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 801188e:	4b76      	ldr	r3, [pc, #472]	; (8011a68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x210>)
 8011890:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8011892:	2300      	movs	r3, #0
 8011894:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8011896:	4b75      	ldr	r3, [pc, #468]	; (8011a6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x214>)
 8011898:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 801189a:	2300      	movs	r3, #0
 801189c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 801189e:	683a      	ldr	r2, [r7, #0]
 80118a0:	6a3b      	ldr	r3, [r7, #32]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d206      	bcs.n	80118b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x5c>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80118a6:	187b      	adds	r3, r7, r1
 80118a8:	22fc      	movs	r2, #252	; 0xfc
 80118aa:	701a      	strb	r2, [r3, #0]
		return Status;
 80118ac:	187b      	adds	r3, r7, r1
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	b25b      	sxtb	r3, r3
 80118b2:	e0ce      	b.n	8011a52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80118b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b8:	18d3      	adds	r3, r2, r3
	FinalRangeTimingBudgetMicroSeconds =
 80118ba:	683a      	ldr	r2, [r7, #0]
 80118bc:	1ad3      	subs	r3, r2, r3
 80118be:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80118c0:	2647      	movs	r6, #71	; 0x47
 80118c2:	19bc      	adds	r4, r7, r6
 80118c4:	2514      	movs	r5, #20
 80118c6:	197a      	adds	r2, r7, r5
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	0011      	movs	r1, r2
 80118cc:	0018      	movs	r0, r3
 80118ce:	f7fc f99b 	bl	800dc08 <VL53L0X_GetSequenceStepEnables>
 80118d2:	0003      	movs	r3, r0
 80118d4:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE &&
 80118d6:	19bb      	adds	r3, r7, r6
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	b25b      	sxtb	r3, r3
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d000      	beq.n	80118e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8a>
 80118e0:	e06d      	b.n	80119be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
		(SchedulerSequenceSteps.TccOn  ||
 80118e2:	197b      	adds	r3, r7, r5
 80118e4:	781b      	ldrb	r3, [r3, #0]
	if (Status == VL53L0X_ERROR_NONE &&
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d107      	bne.n	80118fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
		SchedulerSequenceSteps.MsrcOn ||
 80118ea:	197b      	adds	r3, r7, r5
 80118ec:	785b      	ldrb	r3, [r3, #1]
		(SchedulerSequenceSteps.TccOn  ||
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d103      	bne.n	80118fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
		SchedulerSequenceSteps.DssOn)) {
 80118f2:	197b      	adds	r3, r7, r5
 80118f4:	789b      	ldrb	r3, [r3, #2]
		SchedulerSequenceSteps.MsrcOn ||
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d061      	beq.n	80119be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80118fa:	2547      	movs	r5, #71	; 0x47
 80118fc:	197c      	adds	r4, r7, r5
 80118fe:	2310      	movs	r3, #16
 8011900:	18fa      	adds	r2, r7, r3
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2102      	movs	r1, #2
 8011906:	0018      	movs	r0, r3
 8011908:	f7ff fa0e 	bl	8010d28 <get_sequence_step_timeout>
 801190c:	0003      	movs	r3, r0
 801190e:	7023      	strb	r3, [r4, #0]
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8011910:	197b      	adds	r3, r7, r5
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	b25b      	sxtb	r3, r3
 8011916:	2b00      	cmp	r3, #0
 8011918:	d003      	beq.n	8011922 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
			return Status;
 801191a:	197b      	adds	r3, r7, r5
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	b25b      	sxtb	r3, r3
 8011920:	e097      	b.n	8011a52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8011922:	2314      	movs	r3, #20
 8011924:	18fb      	adds	r3, r7, r3
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d010      	beq.n	801194e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf6>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 801192c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 801192e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011930:	18d3      	adds	r3, r2, r3
 8011932:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8011934:	69fa      	ldr	r2, [r7, #28]
 8011936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011938:	429a      	cmp	r2, r3
 801193a:	d204      	bcs.n	8011946 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xee>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 801193c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801193e:	69fb      	ldr	r3, [r7, #28]
 8011940:	1ad3      	subs	r3, r2, r3
 8011942:	643b      	str	r3, [r7, #64]	; 0x40
 8011944:	e003      	b.n	801194e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf6>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8011946:	2347      	movs	r3, #71	; 0x47
 8011948:	18fb      	adds	r3, r7, r3
 801194a:	22fc      	movs	r2, #252	; 0xfc
 801194c:	701a      	strb	r2, [r3, #0]
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 801194e:	2247      	movs	r2, #71	; 0x47
 8011950:	18bb      	adds	r3, r7, r2
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	b25b      	sxtb	r3, r3
 8011956:	2b00      	cmp	r3, #0
 8011958:	d003      	beq.n	8011962 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x10a>
			LOG_FUNCTION_END(Status);
			return Status;
 801195a:	18bb      	adds	r3, r7, r2
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	b25b      	sxtb	r3, r3
 8011960:	e077      	b.n	8011a52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8011962:	2314      	movs	r3, #20
 8011964:	18fb      	adds	r3, r7, r3
 8011966:	789b      	ldrb	r3, [r3, #2]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d012      	beq.n	8011992 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 801196c:	693a      	ldr	r2, [r7, #16]
 801196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011970:	18d3      	adds	r3, r2, r3
 8011972:	005b      	lsls	r3, r3, #1
 8011974:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8011976:	69fa      	ldr	r2, [r7, #28]
 8011978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801197a:	429a      	cmp	r2, r3
 801197c:	d204      	bcs.n	8011988 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x130>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 801197e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	1ad3      	subs	r3, r2, r3
 8011984:	643b      	str	r3, [r7, #64]	; 0x40
 8011986:	e01a      	b.n	80119be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8011988:	2347      	movs	r3, #71	; 0x47
 801198a:	18fb      	adds	r3, r7, r3
 801198c:	22fc      	movs	r2, #252	; 0xfc
 801198e:	701a      	strb	r2, [r3, #0]
 8011990:	e015      	b.n	80119be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8011992:	2314      	movs	r3, #20
 8011994:	18fb      	adds	r3, r7, r3
 8011996:	785b      	ldrb	r3, [r3, #1]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d010      	beq.n	80119be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119a0:	18d3      	adds	r3, r2, r3
 80119a2:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80119a4:	69fa      	ldr	r2, [r7, #28]
 80119a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d204      	bcs.n	80119b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x15e>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80119ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	1ad3      	subs	r3, r2, r3
 80119b2:	643b      	str	r3, [r7, #64]	; 0x40
 80119b4:	e003      	b.n	80119be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80119b6:	2347      	movs	r3, #71	; 0x47
 80119b8:	18fb      	adds	r3, r7, r3
 80119ba:	22fc      	movs	r2, #252	; 0xfc
 80119bc:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80119be:	2247      	movs	r2, #71	; 0x47
 80119c0:	18bb      	adds	r3, r7, r2
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	b25b      	sxtb	r3, r3
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d003      	beq.n	80119d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x17a>
		LOG_FUNCTION_END(Status);
		return Status;
 80119ca:	18bb      	adds	r3, r7, r2
 80119cc:	781b      	ldrb	r3, [r3, #0]
 80119ce:	b25b      	sxtb	r3, r3
 80119d0:	e03f      	b.n	8011a52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80119d2:	2314      	movs	r3, #20
 80119d4:	18fb      	adds	r3, r7, r3
 80119d6:	78db      	ldrb	r3, [r3, #3]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d01b      	beq.n	8011a14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1bc>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80119dc:	2347      	movs	r3, #71	; 0x47
 80119de:	18fc      	adds	r4, r7, r3
 80119e0:	230c      	movs	r3, #12
 80119e2:	18fa      	adds	r2, r7, r3
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2103      	movs	r1, #3
 80119e8:	0018      	movs	r0, r3
 80119ea:	f7ff f99d 	bl	8010d28 <get_sequence_step_timeout>
 80119ee:	0003      	movs	r3, r0
 80119f0:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119f6:	18d3      	adds	r3, r2, r3
 80119f8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80119fa:	69fa      	ldr	r2, [r7, #28]
 80119fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d204      	bcs.n	8011a0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8011a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	643b      	str	r3, [r7, #64]	; 0x40
 8011a0a:	e003      	b.n	8011a14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1bc>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8011a0c:	2347      	movs	r3, #71	; 0x47
 8011a0e:	18fb      	adds	r3, r7, r3
 8011a10:	22fc      	movs	r2, #252	; 0xfc
 8011a12:	701a      	strb	r2, [r3, #0]
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8011a14:	2147      	movs	r1, #71	; 0x47
 8011a16:	187b      	adds	r3, r7, r1
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	b25b      	sxtb	r3, r3
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d114      	bne.n	8011a4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f2>
		SchedulerSequenceSteps.FinalRangeOn) {
 8011a20:	2314      	movs	r3, #20
 8011a22:	18fb      	adds	r3, r7, r3
 8011a24:	791b      	ldrb	r3, [r3, #4]
	if (Status == VL53L0X_ERROR_NONE &&
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d00f      	beq.n	8011a4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f2>

		FinalRangeTimingBudgetMicroSeconds -=
 8011a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2e:	1ad3      	subs	r3, r2, r3
 8011a30:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8011a32:	187c      	adds	r4, r7, r1
 8011a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2104      	movs	r1, #4
 8011a3a:	0018      	movs	r0, r3
 8011a3c:	f7ff fa8e 	bl	8010f5c <set_sequence_step_timeout>
 8011a40:	0003      	movs	r3, r0
 8011a42:	7023      	strb	r3, [r4, #0]
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	683a      	ldr	r2, [r7, #0]
 8011a48:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8011a4a:	2347      	movs	r3, #71	; 0x47
 8011a4c:	18fb      	adds	r3, r7, r3
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	b25b      	sxtb	r3, r3
}
 8011a52:	0018      	movs	r0, r3
 8011a54:	46bd      	mov	sp, r7
 8011a56:	b013      	add	sp, #76	; 0x4c
 8011a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a5a:	46c0      	nop			; (mov r8, r8)
 8011a5c:	00000776 	.word	0x00000776
 8011a60:	0000024e 	.word	0x0000024e
 8011a64:	000002b2 	.word	0x000002b2
 8011a68:	00000226 	.word	0x00000226
 8011a6c:	00004e20 	.word	0x00004e20

08011a70 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8011a70:	b5b0      	push	{r4, r5, r7, lr}
 8011a72:	b090      	sub	sp, #64	; 0x40
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011a7a:	213f      	movs	r1, #63	; 0x3f
 8011a7c:	187b      	adds	r3, r7, r1
 8011a7e:	2200      	movs	r2, #0
 8011a80:	701a      	strb	r2, [r3, #0]
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8011a82:	23fa      	movs	r3, #250	; 0xfa
 8011a84:	00db      	lsls	r3, r3, #3
 8011a86:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8011a88:	4b5e      	ldr	r3, [pc, #376]	; (8011c04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x194>)
 8011a8a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8011a8c:	23f0      	movs	r3, #240	; 0xf0
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8011a92:	23a5      	movs	r3, #165	; 0xa5
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8011a98:	4b5b      	ldr	r3, [pc, #364]	; (8011c08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x198>)
 8011a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8011a9c:	4b5b      	ldr	r3, [pc, #364]	; (8011c0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19c>)
 8011a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8011aa0:	23a5      	movs	r3, #165	; 0xa5
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8011aa6:	4b5a      	ldr	r3, [pc, #360]	; (8011c10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a0>)
 8011aa8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8011aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ab2:	18d2      	adds	r2, r2, r3
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8011ab8:	000d      	movs	r5, r1
 8011aba:	187c      	adds	r4, r7, r1
 8011abc:	2318      	movs	r3, #24
 8011abe:	18fa      	adds	r2, r7, r3
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	0011      	movs	r1, r2
 8011ac4:	0018      	movs	r0, r3
 8011ac6:	f7fc f89f 	bl	800dc08 <VL53L0X_GetSequenceStepEnables>
 8011aca:	0003      	movs	r3, r0
 8011acc:	7023      	strb	r3, [r4, #0]

	if (Status != VL53L0X_ERROR_NONE) {
 8011ace:	197b      	adds	r3, r7, r5
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	b25b      	sxtb	r3, r3
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d003      	beq.n	8011ae0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
		LOG_FUNCTION_END(Status);
		return Status;
 8011ad8:	197b      	adds	r3, r7, r5
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	b25b      	sxtb	r3, r3
 8011ade:	e08d      	b.n	8011bfc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8011ae0:	2218      	movs	r2, #24
 8011ae2:	18bb      	adds	r3, r7, r2
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d107      	bne.n	8011afa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8a>
		SchedulerSequenceSteps.MsrcOn ||
 8011aea:	18bb      	adds	r3, r7, r2
 8011aec:	785b      	ldrb	r3, [r3, #1]
	if (SchedulerSequenceSteps.TccOn  ||
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d103      	bne.n	8011afa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8a>
		SchedulerSequenceSteps.DssOn) {
 8011af2:	18bb      	adds	r3, r7, r2
 8011af4:	789b      	ldrb	r3, [r3, #2]
		SchedulerSequenceSteps.MsrcOn ||
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d038      	beq.n	8011b6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>

		Status = get_sequence_step_timeout(Dev,
 8011afa:	253f      	movs	r5, #63	; 0x3f
 8011afc:	197c      	adds	r4, r7, r5
 8011afe:	2310      	movs	r3, #16
 8011b00:	18fa      	adds	r2, r7, r3
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2102      	movs	r1, #2
 8011b06:	0018      	movs	r0, r3
 8011b08:	f7ff f90e 	bl	8010d28 <get_sequence_step_timeout>
 8011b0c:	0003      	movs	r3, r0
 8011b0e:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8011b10:	197b      	adds	r3, r7, r5
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	b25b      	sxtb	r3, r3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d128      	bne.n	8011b6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
			if (SchedulerSequenceSteps.TccOn) {
 8011b1a:	2318      	movs	r3, #24
 8011b1c:	18fb      	adds	r3, r7, r3
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d007      	beq.n	8011b34 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc4>
				*pMeasurementTimingBudgetMicroSeconds +=
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8011b28:	6939      	ldr	r1, [r7, #16]
 8011b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2c:	18cb      	adds	r3, r1, r3
				*pMeasurementTimingBudgetMicroSeconds +=
 8011b2e:	18d2      	adds	r2, r2, r3
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8011b34:	2318      	movs	r3, #24
 8011b36:	18fb      	adds	r3, r7, r3
 8011b38:	789b      	ldrb	r3, [r3, #2]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d009      	beq.n	8011b52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8011b42:	6939      	ldr	r1, [r7, #16]
 8011b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b46:	18cb      	adds	r3, r1, r3
 8011b48:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8011b4a:	18d2      	adds	r2, r2, r3
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	601a      	str	r2, [r3, #0]
 8011b50:	e00c      	b.n	8011b6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8011b52:	2318      	movs	r3, #24
 8011b54:	18fb      	adds	r3, r7, r3
 8011b56:	785b      	ldrb	r3, [r3, #1]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d007      	beq.n	8011b6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8011b60:	6939      	ldr	r1, [r7, #16]
 8011b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b64:	18cb      	adds	r3, r1, r3
				*pMeasurementTimingBudgetMicroSeconds +=
 8011b66:	18d2      	adds	r2, r2, r3
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8011b6c:	223f      	movs	r2, #63	; 0x3f
 8011b6e:	18bb      	adds	r3, r7, r2
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	b25b      	sxtb	r3, r3
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d116      	bne.n	8011ba6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x136>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8011b78:	2318      	movs	r3, #24
 8011b7a:	18fb      	adds	r3, r7, r3
 8011b7c:	78db      	ldrb	r3, [r3, #3]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d011      	beq.n	8011ba6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x136>
			Status = get_sequence_step_timeout(Dev,
 8011b82:	18bc      	adds	r4, r7, r2
 8011b84:	230c      	movs	r3, #12
 8011b86:	18fa      	adds	r2, r7, r3
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2103      	movs	r1, #3
 8011b8c:	0018      	movs	r0, r3
 8011b8e:	f7ff f8cb 	bl	8010d28 <get_sequence_step_timeout>
 8011b92:	0003      	movs	r3, r0
 8011b94:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8011b9a:	68f9      	ldr	r1, [r7, #12]
 8011b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9e:	18cb      	adds	r3, r1, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 8011ba0:	18d2      	adds	r2, r2, r3
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8011ba6:	223f      	movs	r2, #63	; 0x3f
 8011ba8:	18bb      	adds	r3, r7, r2
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	b25b      	sxtb	r3, r3
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d116      	bne.n	8011be0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x170>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8011bb2:	2318      	movs	r3, #24
 8011bb4:	18fb      	adds	r3, r7, r3
 8011bb6:	791b      	ldrb	r3, [r3, #4]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d011      	beq.n	8011be0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x170>
			Status = get_sequence_step_timeout(Dev,
 8011bbc:	18bc      	adds	r4, r7, r2
 8011bbe:	2314      	movs	r3, #20
 8011bc0:	18fa      	adds	r2, r7, r3
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2104      	movs	r1, #4
 8011bc6:	0018      	movs	r0, r3
 8011bc8:	f7ff f8ae 	bl	8010d28 <get_sequence_step_timeout>
 8011bcc:	0003      	movs	r3, r0
 8011bce:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8011bd4:	6979      	ldr	r1, [r7, #20]
 8011bd6:	6a3b      	ldr	r3, [r7, #32]
 8011bd8:	18cb      	adds	r3, r1, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 8011bda:	18d2      	adds	r2, r2, r3
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8011be0:	233f      	movs	r3, #63	; 0x3f
 8011be2:	18fb      	adds	r3, r7, r3
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	b25b      	sxtb	r3, r3
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d103      	bne.n	8011bf4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x184>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8011bf4:	233f      	movs	r3, #63	; 0x3f
 8011bf6:	18fb      	adds	r3, r7, r3
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	b25b      	sxtb	r3, r3
}
 8011bfc:	0018      	movs	r0, r3
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	b010      	add	sp, #64	; 0x40
 8011c02:	bdb0      	pop	{r4, r5, r7, pc}
 8011c04:	00000776 	.word	0x00000776
 8011c08:	0000024e 	.word	0x0000024e
 8011c0c:	000002b2 	.word	0x000002b2
 8011c10:	00000226 	.word	0x00000226

08011c14 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8011c14:	b5b0      	push	{r4, r5, r7, lr}
 8011c16:	b088      	sub	sp, #32
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011c1e:	231f      	movs	r3, #31
 8011c20:	18fb      	adds	r3, r7, r3
 8011c22:	2200      	movs	r2, #0
 8011c24:	701a      	strb	r2, [r3, #0]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8011c26:	2300      	movs	r3, #0
 8011c28:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8011c2a:	e105      	b.n	8011e38 <VL53L0X_load_tuning_settings+0x224>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	683a      	ldr	r2, [r7, #0]
 8011c30:	18d2      	adds	r2, r2, r3
 8011c32:	2113      	movs	r1, #19
 8011c34:	187b      	adds	r3, r7, r1
 8011c36:	7812      	ldrb	r2, [r2, #0]
 8011c38:	701a      	strb	r2, [r3, #0]
		Index++;
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8011c40:	187b      	adds	r3, r7, r1
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	2bff      	cmp	r3, #255	; 0xff
 8011c46:	d000      	beq.n	8011c4a <VL53L0X_load_tuning_settings+0x36>
 8011c48:	e0ba      	b.n	8011dc0 <VL53L0X_load_tuning_settings+0x1ac>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	683a      	ldr	r2, [r7, #0]
 8011c4e:	18d2      	adds	r2, r2, r3
 8011c50:	2111      	movs	r1, #17
 8011c52:	187b      	adds	r3, r7, r1
 8011c54:	7812      	ldrb	r2, [r2, #0]
 8011c56:	701a      	strb	r2, [r3, #0]
			Index++;
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8011c5e:	187b      	adds	r3, r7, r1
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	2b03      	cmp	r3, #3
 8011c64:	d100      	bne.n	8011c68 <VL53L0X_load_tuning_settings+0x54>
 8011c66:	e07f      	b.n	8011d68 <VL53L0X_load_tuning_settings+0x154>
 8011c68:	dd00      	ble.n	8011c6c <VL53L0X_load_tuning_settings+0x58>
 8011c6a:	e0a4      	b.n	8011db6 <VL53L0X_load_tuning_settings+0x1a2>
 8011c6c:	2b02      	cmp	r3, #2
 8011c6e:	d054      	beq.n	8011d1a <VL53L0X_load_tuning_settings+0x106>
 8011c70:	dd00      	ble.n	8011c74 <VL53L0X_load_tuning_settings+0x60>
 8011c72:	e0a0      	b.n	8011db6 <VL53L0X_load_tuning_settings+0x1a2>
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d002      	beq.n	8011c7e <VL53L0X_load_tuning_settings+0x6a>
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d027      	beq.n	8011ccc <VL53L0X_load_tuning_settings+0xb8>
 8011c7c:	e09b      	b.n	8011db6 <VL53L0X_load_tuning_settings+0x1a2>
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	683a      	ldr	r2, [r7, #0]
 8011c82:	18d2      	adds	r2, r2, r3
 8011c84:	2110      	movs	r1, #16
 8011c86:	187b      	adds	r3, r7, r1
 8011c88:	7812      	ldrb	r2, [r2, #0]
 8011c8a:	701a      	strb	r2, [r3, #0]
				Index++;
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	3301      	adds	r3, #1
 8011c90:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	683a      	ldr	r2, [r7, #0]
 8011c96:	18d2      	adds	r2, r2, r3
 8011c98:	200f      	movs	r0, #15
 8011c9a:	183b      	adds	r3, r7, r0
 8011c9c:	7812      	ldrb	r2, [r2, #0]
 8011c9e:	701a      	strb	r2, [r3, #0]
				Index++;
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8011ca6:	187b      	adds	r3, r7, r1
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	021b      	lsls	r3, r3, #8
 8011cae:	b299      	uxth	r1, r3
 8011cb0:	183b      	adds	r3, r7, r0
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	200c      	movs	r0, #12
 8011cb8:	183b      	adds	r3, r7, r0
 8011cba:	188a      	adds	r2, r1, r2
 8011cbc:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	1839      	adds	r1, r7, r0
 8011cc2:	239a      	movs	r3, #154	; 0x9a
 8011cc4:	005b      	lsls	r3, r3, #1
 8011cc6:	8809      	ldrh	r1, [r1, #0]
 8011cc8:	52d1      	strh	r1, [r2, r3]
				break;
 8011cca:	e0b5      	b.n	8011e38 <VL53L0X_load_tuning_settings+0x224>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	683a      	ldr	r2, [r7, #0]
 8011cd0:	18d2      	adds	r2, r2, r3
 8011cd2:	2110      	movs	r1, #16
 8011cd4:	187b      	adds	r3, r7, r1
 8011cd6:	7812      	ldrb	r2, [r2, #0]
 8011cd8:	701a      	strb	r2, [r3, #0]
				Index++;
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	683a      	ldr	r2, [r7, #0]
 8011ce4:	18d2      	adds	r2, r2, r3
 8011ce6:	200f      	movs	r0, #15
 8011ce8:	183b      	adds	r3, r7, r0
 8011cea:	7812      	ldrb	r2, [r2, #0]
 8011cec:	701a      	strb	r2, [r3, #0]
				Index++;
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8011cf4:	187b      	adds	r3, r7, r1
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	b29b      	uxth	r3, r3
 8011cfa:	021b      	lsls	r3, r3, #8
 8011cfc:	b299      	uxth	r1, r3
 8011cfe:	183b      	adds	r3, r7, r0
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	b29a      	uxth	r2, r3
 8011d04:	200c      	movs	r0, #12
 8011d06:	183b      	adds	r3, r7, r0
 8011d08:	188a      	adds	r2, r1, r2
 8011d0a:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	1839      	adds	r1, r7, r0
 8011d10:	239b      	movs	r3, #155	; 0x9b
 8011d12:	005b      	lsls	r3, r3, #1
 8011d14:	8809      	ldrh	r1, [r1, #0]
 8011d16:	52d1      	strh	r1, [r2, r3]
					Temp16);
				break;
 8011d18:	e08e      	b.n	8011e38 <VL53L0X_load_tuning_settings+0x224>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	18d2      	adds	r2, r2, r3
 8011d20:	2110      	movs	r1, #16
 8011d22:	187b      	adds	r3, r7, r1
 8011d24:	7812      	ldrb	r2, [r2, #0]
 8011d26:	701a      	strb	r2, [r3, #0]
				Index++;
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	683a      	ldr	r2, [r7, #0]
 8011d32:	18d2      	adds	r2, r2, r3
 8011d34:	200f      	movs	r0, #15
 8011d36:	183b      	adds	r3, r7, r0
 8011d38:	7812      	ldrb	r2, [r2, #0]
 8011d3a:	701a      	strb	r2, [r3, #0]
				Index++;
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8011d42:	187b      	adds	r3, r7, r1
 8011d44:	781b      	ldrb	r3, [r3, #0]
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	021b      	lsls	r3, r3, #8
 8011d4a:	b299      	uxth	r1, r3
 8011d4c:	183b      	adds	r3, r7, r0
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	b29a      	uxth	r2, r3
 8011d52:	200c      	movs	r0, #12
 8011d54:	183b      	adds	r3, r7, r0
 8011d56:	188a      	adds	r2, r1, r2
 8011d58:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8011d5a:	687a      	ldr	r2, [r7, #4]
 8011d5c:	1839      	adds	r1, r7, r0
 8011d5e:	239c      	movs	r3, #156	; 0x9c
 8011d60:	005b      	lsls	r3, r3, #1
 8011d62:	8809      	ldrh	r1, [r1, #0]
 8011d64:	52d1      	strh	r1, [r2, r3]
				break;
 8011d66:	e067      	b.n	8011e38 <VL53L0X_load_tuning_settings+0x224>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	683a      	ldr	r2, [r7, #0]
 8011d6c:	18d2      	adds	r2, r2, r3
 8011d6e:	2110      	movs	r1, #16
 8011d70:	187b      	adds	r3, r7, r1
 8011d72:	7812      	ldrb	r2, [r2, #0]
 8011d74:	701a      	strb	r2, [r3, #0]
				Index++;
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	3301      	adds	r3, #1
 8011d7a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	683a      	ldr	r2, [r7, #0]
 8011d80:	18d2      	adds	r2, r2, r3
 8011d82:	200f      	movs	r0, #15
 8011d84:	183b      	adds	r3, r7, r0
 8011d86:	7812      	ldrb	r2, [r2, #0]
 8011d88:	701a      	strb	r2, [r3, #0]
				Index++;
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8011d90:	187b      	adds	r3, r7, r1
 8011d92:	781b      	ldrb	r3, [r3, #0]
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	021b      	lsls	r3, r3, #8
 8011d98:	b299      	uxth	r1, r3
 8011d9a:	183b      	adds	r3, r7, r0
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	b29a      	uxth	r2, r3
 8011da0:	200c      	movs	r0, #12
 8011da2:	183b      	adds	r3, r7, r0
 8011da4:	188a      	adds	r2, r1, r2
 8011da6:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8011da8:	687a      	ldr	r2, [r7, #4]
 8011daa:	1839      	adds	r1, r7, r0
 8011dac:	239e      	movs	r3, #158	; 0x9e
 8011dae:	005b      	lsls	r3, r3, #1
 8011db0:	8809      	ldrh	r1, [r1, #0]
 8011db2:	52d1      	strh	r1, [r2, r3]
				break;
 8011db4:	e040      	b.n	8011e38 <VL53L0X_load_tuning_settings+0x224>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8011db6:	231f      	movs	r3, #31
 8011db8:	18fb      	adds	r3, r7, r3
 8011dba:	22fc      	movs	r2, #252	; 0xfc
 8011dbc:	701a      	strb	r2, [r3, #0]
 8011dbe:	e03b      	b.n	8011e38 <VL53L0X_load_tuning_settings+0x224>
			}

		} else if (NumberOfWrites <= 4) {
 8011dc0:	2313      	movs	r3, #19
 8011dc2:	18fb      	adds	r3, r7, r3
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	2b04      	cmp	r3, #4
 8011dc8:	d832      	bhi.n	8011e30 <VL53L0X_load_tuning_settings+0x21c>
			Address = *(pTuningSettingBuffer + Index);
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	683a      	ldr	r2, [r7, #0]
 8011dce:	18d2      	adds	r2, r2, r3
 8011dd0:	2312      	movs	r3, #18
 8011dd2:	18fb      	adds	r3, r7, r3
 8011dd4:	7812      	ldrb	r2, [r2, #0]
 8011dd6:	701a      	strb	r2, [r3, #0]
			Index++;
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	3301      	adds	r3, #1
 8011ddc:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8011dde:	2300      	movs	r3, #0
 8011de0:	61bb      	str	r3, [r7, #24]
 8011de2:	e00f      	b.n	8011e04 <VL53L0X_load_tuning_settings+0x1f0>
				localBuffer[i] = *(pTuningSettingBuffer +
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	683a      	ldr	r2, [r7, #0]
 8011de8:	18d3      	adds	r3, r2, r3
 8011dea:	7819      	ldrb	r1, [r3, #0]
 8011dec:	2308      	movs	r3, #8
 8011dee:	18fa      	adds	r2, r7, r3
 8011df0:	69bb      	ldr	r3, [r7, #24]
 8011df2:	18d3      	adds	r3, r2, r3
 8011df4:	1c0a      	adds	r2, r1, #0
 8011df6:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	3301      	adds	r3, #1
 8011e02:	61bb      	str	r3, [r7, #24]
 8011e04:	2113      	movs	r1, #19
 8011e06:	187b      	adds	r3, r7, r1
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	69ba      	ldr	r2, [r7, #24]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	dbe9      	blt.n	8011de4 <VL53L0X_load_tuning_settings+0x1d0>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8011e10:	187b      	adds	r3, r7, r1
 8011e12:	781d      	ldrb	r5, [r3, #0]
 8011e14:	231f      	movs	r3, #31
 8011e16:	18fc      	adds	r4, r7, r3
 8011e18:	2308      	movs	r3, #8
 8011e1a:	18fa      	adds	r2, r7, r3
 8011e1c:	2312      	movs	r3, #18
 8011e1e:	18fb      	adds	r3, r7, r3
 8011e20:	7819      	ldrb	r1, [r3, #0]
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	002b      	movs	r3, r5
 8011e26:	f000 fed5 	bl	8012bd4 <VL53L0X_WriteMulti>
 8011e2a:	0003      	movs	r3, r0
 8011e2c:	7023      	strb	r3, [r4, #0]
 8011e2e:	e003      	b.n	8011e38 <VL53L0X_load_tuning_settings+0x224>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8011e30:	231f      	movs	r3, #31
 8011e32:	18fb      	adds	r3, r7, r3
 8011e34:	22fc      	movs	r2, #252	; 0xfc
 8011e36:	701a      	strb	r2, [r3, #0]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	683a      	ldr	r2, [r7, #0]
 8011e3c:	18d3      	adds	r3, r2, r3
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d006      	beq.n	8011e52 <VL53L0X_load_tuning_settings+0x23e>
 8011e44:	231f      	movs	r3, #31
 8011e46:	18fb      	adds	r3, r7, r3
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	b25b      	sxtb	r3, r3
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d100      	bne.n	8011e52 <VL53L0X_load_tuning_settings+0x23e>
 8011e50:	e6ec      	b.n	8011c2c <VL53L0X_load_tuning_settings+0x18>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8011e52:	231f      	movs	r3, #31
 8011e54:	18fb      	adds	r3, r7, r3
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	b25b      	sxtb	r3, r3
}
 8011e5a:	0018      	movs	r0, r3
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	b008      	add	sp, #32
 8011e60:	bdb0      	pop	{r4, r5, r7, pc}

08011e62 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8011e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e64:	b089      	sub	sp, #36	; 0x24
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	60f8      	str	r0, [r7, #12]
 8011e6a:	60b9      	str	r1, [r7, #8]
 8011e6c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011e6e:	251f      	movs	r5, #31
 8011e70:	197b      	adds	r3, r7, r5
 8011e72:	2200      	movs	r2, #0
 8011e74:	701a      	strb	r2, [r3, #0]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8011e7c:	197c      	adds	r4, r7, r5
 8011e7e:	2613      	movs	r6, #19
 8011e80:	19ba      	adds	r2, r7, r6
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	0011      	movs	r1, r2
 8011e86:	0018      	movs	r0, r3
 8011e88:	f7fb ff77 	bl	800dd7a <VL53L0X_GetXTalkCompensationEnable>
 8011e8c:	0003      	movs	r3, r0
 8011e8e:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8011e90:	197b      	adds	r3, r7, r5
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	b25b      	sxtb	r3, r3
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d111      	bne.n	8011ebe <VL53L0X_get_total_xtalk_rate+0x5c>

		if (xtalkCompEnable) {
 8011e9a:	19bb      	adds	r3, r7, r6
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d00d      	beq.n	8011ebe <VL53L0X_get_total_xtalk_rate+0x5c>

			VL53L0X_GETPARAMETERFIELD(
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	6a1b      	ldr	r3, [r3, #32]
 8011ea6:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	8a9b      	ldrh	r3, [r3, #20]
 8011eac:	001a      	movs	r2, r3
			totalXtalkMegaCps =
 8011eae:	69bb      	ldr	r3, [r7, #24]
 8011eb0:	4353      	muls	r3, r2
 8011eb2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	3380      	adds	r3, #128	; 0x80
 8011eb8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8011ebe:	231f      	movs	r3, #31
 8011ec0:	18fb      	adds	r3, r7, r3
 8011ec2:	781b      	ldrb	r3, [r3, #0]
 8011ec4:	b25b      	sxtb	r3, r3
}
 8011ec6:	0018      	movs	r0, r3
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	b009      	add	sp, #36	; 0x24
 8011ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ece <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8011ece:	b5b0      	push	{r4, r5, r7, lr}
 8011ed0:	b086      	sub	sp, #24
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	60f8      	str	r0, [r7, #12]
 8011ed6:	60b9      	str	r1, [r7, #8]
 8011ed8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011eda:	2517      	movs	r5, #23
 8011edc:	197b      	adds	r3, r7, r5
 8011ede:	2200      	movs	r2, #0
 8011ee0:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8011eea:	197c      	adds	r4, r7, r5
 8011eec:	2310      	movs	r3, #16
 8011eee:	18fa      	adds	r2, r7, r3
 8011ef0:	68b9      	ldr	r1, [r7, #8]
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	0018      	movs	r0, r3
 8011ef6:	f7ff ffb4 	bl	8011e62 <VL53L0X_get_total_xtalk_rate>
 8011efa:	0003      	movs	r3, r0
 8011efc:	7023      	strb	r3, [r4, #0]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8011efe:	197b      	adds	r3, r7, r5
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	b25b      	sxtb	r3, r3
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d105      	bne.n	8011f14 <VL53L0X_get_total_signal_rate+0x46>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	18d2      	adds	r2, r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	601a      	str	r2, [r3, #0]

	return Status;
 8011f14:	2317      	movs	r3, #23
 8011f16:	18fb      	adds	r3, r7, r3
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	b25b      	sxtb	r3, r3
}
 8011f1c:	0018      	movs	r0, r3
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	b006      	add	sp, #24
 8011f22:	bdb0      	pop	{r4, r5, r7, pc}

08011f24 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b09a      	sub	sp, #104	; 0x68
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
 8011f30:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8011f32:	2312      	movs	r3, #18
 8011f34:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8011f36:	2380      	movs	r3, #128	; 0x80
 8011f38:	01db      	lsls	r3, r3, #7
 8011f3a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8011f3c:	2342      	movs	r3, #66	; 0x42
 8011f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8011f40:	2306      	movs	r3, #6
 8011f42:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8011f44:	2307      	movs	r3, #7
 8011f46:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8011f48:	2343      	movs	r3, #67	; 0x43
 8011f4a:	18fb      	adds	r3, r7, r3
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8011f50:	68fa      	ldr	r2, [r7, #12]
 8011f52:	23aa      	movs	r3, #170	; 0xaa
 8011f54:	005b      	lsls	r3, r3, #1
 8011f56:	5ad3      	ldrh	r3, [r2, r3]
	dmaxCalRange_mm =
 8011f58:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8011f5a:	68fa      	ldr	r2, [r7, #12]
 8011f5c:	23ac      	movs	r3, #172	; 0xac
 8011f5e:	005b      	lsls	r3, r3, #1
 8011f60:	58d3      	ldr	r3, [r2, r3]
 8011f62:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8011f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f68:	4353      	muls	r3, r2
 8011f6a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8011f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f6e:	3380      	adds	r3, #128	; 0x80
 8011f70:	0a1b      	lsrs	r3, r3, #8
 8011f72:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8011f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f78:	4353      	muls	r3, r2
 8011f7a:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d01c      	beq.n	8011fc0 <VL53L0X_calc_dmax+0x9c>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	029b      	lsls	r3, r3, #10
 8011f8a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8011f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f92:	18d3      	adds	r3, r2, r3
 8011f94:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8011f96:	6879      	ldr	r1, [r7, #4]
 8011f98:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011f9a:	f7ee f8db 	bl	8000154 <__udivsi3>
 8011f9e:	0003      	movs	r3, r0
 8011fa0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8011fa2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011fa4:	0013      	movs	r3, r2
 8011fa6:	005b      	lsls	r3, r3, #1
 8011fa8:	189b      	adds	r3, r3, r2
 8011faa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8011fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fae:	435b      	muls	r3, r3
 8011fb0:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8011fb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fb4:	2280      	movs	r2, #128	; 0x80
 8011fb6:	0212      	lsls	r2, r2, #8
 8011fb8:	4694      	mov	ip, r2
 8011fba:	4463      	add	r3, ip
 8011fbc:	0c1b      	lsrs	r3, r3, #16
 8011fbe:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011fc4:	4353      	muls	r3, r2
 8011fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8011fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fca:	2280      	movs	r2, #128	; 0x80
 8011fcc:	0212      	lsls	r2, r2, #8
 8011fce:	4694      	mov	ip, r2
 8011fd0:	4463      	add	r3, ip
 8011fd2:	0c1b      	lsrs	r3, r3, #16
 8011fd4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8011fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd8:	435b      	muls	r3, r3
 8011fda:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8011fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011fde:	2280      	movs	r2, #128	; 0x80
 8011fe0:	0212      	lsls	r2, r2, #8
 8011fe2:	4694      	mov	ip, r2
 8011fe4:	4463      	add	r3, ip
 8011fe6:	0c1b      	lsrs	r3, r3, #16
 8011fe8:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8011fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fec:	085a      	lsrs	r2, r3, #1
 8011fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff0:	18d3      	adds	r3, r2, r3
 8011ff2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011ff4:	0018      	movs	r0, r3
 8011ff6:	f7ee f8ad 	bl	8000154 <__udivsi3>
 8011ffa:	0003      	movs	r3, r0
 8011ffc:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8011ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012002:	4353      	muls	r3, r2
 8012004:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8012006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012008:	2380      	movs	r3, #128	; 0x80
 801200a:	025b      	lsls	r3, r3, #9
 801200c:	429a      	cmp	r2, r3
 801200e:	d302      	bcc.n	8012016 <VL53L0X_calc_dmax+0xf2>
		minSignalNeeded_p3 = 0xfff00000;
 8012010:	4b5d      	ldr	r3, [pc, #372]	; (8012188 <VL53L0X_calc_dmax+0x264>)
 8012012:	663b      	str	r3, [r7, #96]	; 0x60
 8012014:	e017      	b.n	8012046 <VL53L0X_calc_dmax+0x122>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8012016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012018:	085a      	lsrs	r2, r3, #1
 801201a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801201c:	18d3      	adds	r3, r2, r3
 801201e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012020:	0018      	movs	r0, r3
 8012022:	f7ee f897 	bl	8000154 <__udivsi3>
 8012026:	0003      	movs	r3, r0
 8012028:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 801202a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801202c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801202e:	4353      	muls	r3, r2
 8012030:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8012032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012034:	2280      	movs	r2, #128	; 0x80
 8012036:	0212      	lsls	r2, r2, #8
 8012038:	4694      	mov	ip, r2
 801203a:	4463      	add	r3, ip
 801203c:	0c1b      	lsrs	r3, r3, #16
 801203e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8012040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012042:	435b      	muls	r3, r3
 8012044:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8012046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012048:	039b      	lsls	r3, r3, #14
 801204a:	33f5      	adds	r3, #245	; 0xf5
 801204c:	33ff      	adds	r3, #255	; 0xff
 801204e:	22fa      	movs	r2, #250	; 0xfa
 8012050:	0091      	lsls	r1, r2, #2
 8012052:	0018      	movs	r0, r3
 8012054:	f7ee f87e 	bl	8000154 <__udivsi3>
 8012058:	0003      	movs	r3, r0
 801205a:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 801205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205e:	435b      	muls	r3, r3
 8012060:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8012062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012064:	435b      	muls	r3, r3
 8012066:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8012068:	6a3b      	ldr	r3, [r7, #32]
 801206a:	3308      	adds	r3, #8
 801206c:	091b      	lsrs	r3, r3, #4
 801206e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8012070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012072:	6a3b      	ldr	r3, [r7, #32]
 8012074:	1ad3      	subs	r3, r2, r3
 8012076:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8012078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801207a:	0013      	movs	r3, r2
 801207c:	005b      	lsls	r3, r3, #1
 801207e:	189b      	adds	r3, r3, r2
 8012080:	011b      	lsls	r3, r3, #4
 8012082:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	2280      	movs	r2, #128	; 0x80
 8012088:	0192      	lsls	r2, r2, #6
 801208a:	4694      	mov	ip, r2
 801208c:	4463      	add	r3, ip
 801208e:	0b9b      	lsrs	r3, r3, #14
 8012090:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8012092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012096:	18d3      	adds	r3, r2, r3
 8012098:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 801209a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801209c:	085b      	lsrs	r3, r3, #1
 801209e:	69ba      	ldr	r2, [r7, #24]
 80120a0:	18d3      	adds	r3, r2, r3
 80120a2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80120a4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80120a6:	69b8      	ldr	r0, [r7, #24]
 80120a8:	f7ee f854 	bl	8000154 <__udivsi3>
 80120ac:	0003      	movs	r3, r0
 80120ae:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	039b      	lsls	r3, r3, #14
 80120b4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	085b      	lsrs	r3, r3, #1
 80120ba:	69ba      	ldr	r2, [r7, #24]
 80120bc:	18d3      	adds	r3, r2, r3
 80120be:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80120c0:	69f9      	ldr	r1, [r7, #28]
 80120c2:	69b8      	ldr	r0, [r7, #24]
 80120c4:	f7ee f846 	bl	8000154 <__udivsi3>
 80120c8:	0003      	movs	r3, r0
 80120ca:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80120cc:	69bb      	ldr	r3, [r7, #24]
 80120ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80120d0:	4353      	muls	r3, r2
 80120d2:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	33f5      	adds	r3, #245	; 0xf5
 80120d8:	33ff      	adds	r3, #255	; 0xff
 80120da:	22fa      	movs	r2, #250	; 0xfa
 80120dc:	0091      	lsls	r1, r2, #2
 80120de:	0018      	movs	r0, r3
 80120e0:	f7ee f838 	bl	8000154 <__udivsi3>
 80120e4:	0003      	movs	r3, r0
 80120e6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	011b      	lsls	r3, r3, #4
 80120ec:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80120ee:	69bb      	ldr	r3, [r7, #24]
 80120f0:	33f5      	adds	r3, #245	; 0xf5
 80120f2:	33ff      	adds	r3, #255	; 0xff
 80120f4:	22fa      	movs	r2, #250	; 0xfa
 80120f6:	0091      	lsls	r1, r2, #2
 80120f8:	0018      	movs	r0, r3
 80120fa:	f7ee f82b 	bl	8000154 <__udivsi3>
 80120fe:	0003      	movs	r3, r0
 8012100:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8012102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012104:	3380      	adds	r3, #128	; 0x80
 8012106:	0a1b      	lsrs	r3, r3, #8
 8012108:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d00a      	beq.n	8012126 <VL53L0X_calc_dmax+0x202>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	085a      	lsrs	r2, r3, #1
 8012114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012116:	18d3      	adds	r3, r2, r3
 8012118:	6979      	ldr	r1, [r7, #20]
 801211a:	0018      	movs	r0, r3
 801211c:	f7ee f81a 	bl	8000154 <__udivsi3>
 8012120:	0003      	movs	r3, r0
 8012122:	65bb      	str	r3, [r7, #88]	; 0x58
 8012124:	e001      	b.n	801212a <VL53L0X_calc_dmax+0x206>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8012126:	2300      	movs	r3, #0
 8012128:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 801212a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801212c:	0018      	movs	r0, r3
 801212e:	f7fd ff6f 	bl	8010010 <VL53L0X_isqrt>
 8012132:	0003      	movs	r3, r0
 8012134:	613b      	str	r3, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8012136:	69bb      	ldr	r3, [r7, #24]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d00a      	beq.n	8012152 <VL53L0X_calc_dmax+0x22e>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 801213c:	69bb      	ldr	r3, [r7, #24]
 801213e:	085a      	lsrs	r2, r3, #1
 8012140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012142:	18d3      	adds	r3, r2, r3
 8012144:	69b9      	ldr	r1, [r7, #24]
 8012146:	0018      	movs	r0, r3
 8012148:	f7ee f804 	bl	8000154 <__udivsi3>
 801214c:	0003      	movs	r3, r0
 801214e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012150:	e001      	b.n	8012156 <VL53L0X_calc_dmax+0x232>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8012152:	2300      	movs	r3, #0
 8012154:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8012156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012158:	0018      	movs	r0, r3
 801215a:	f7fd ff59 	bl	8010010 <VL53L0X_isqrt>
 801215e:	0003      	movs	r3, r0
 8012160:	65fb      	str	r3, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8012162:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012164:	693a      	ldr	r2, [r7, #16]
 8012166:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8012168:	693a      	ldr	r2, [r7, #16]
 801216a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801216c:	429a      	cmp	r2, r3
 801216e:	d902      	bls.n	8012176 <VL53L0X_calc_dmax+0x252>
		*pdmax_mm = dmaxAmbient;
 8012170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012172:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012174:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8012176:	2343      	movs	r3, #67	; 0x43
 8012178:	18fb      	adds	r3, r7, r3
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	b25b      	sxtb	r3, r3
}
 801217e:	0018      	movs	r0, r3
 8012180:	46bd      	mov	sp, r7
 8012182:	b01a      	add	sp, #104	; 0x68
 8012184:	bd80      	pop	{r7, pc}
 8012186:	46c0      	nop			; (mov r8, r8)
 8012188:	fff00000 	.word	0xfff00000

0801218c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 801218c:	b5b0      	push	{r4, r5, r7, lr}
 801218e:	b0b4      	sub	sp, #208	; 0xd0
 8012190:	af04      	add	r7, sp, #16
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
 8012198:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 801219a:	23c8      	movs	r3, #200	; 0xc8
 801219c:	009b      	lsls	r3, r3, #2
 801219e:	2290      	movs	r2, #144	; 0x90
 80121a0:	18ba      	adds	r2, r7, r2
 80121a2:	6013      	str	r3, [r2, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80121a4:	2396      	movs	r3, #150	; 0x96
 80121a6:	009b      	lsls	r3, r3, #2
 80121a8:	228c      	movs	r2, #140	; 0x8c
 80121aa:	18b9      	adds	r1, r7, r2
 80121ac:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80121ae:	23c8      	movs	r3, #200	; 0xc8
 80121b0:	035b      	lsls	r3, r3, #13
 80121b2:	2188      	movs	r1, #136	; 0x88
 80121b4:	1879      	adds	r1, r7, r1
 80121b6:	600b      	str	r3, [r1, #0]
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80121b8:	4bb5      	ldr	r3, [pc, #724]	; (8012490 <VL53L0X_calc_sigma_estimate+0x304>)
 80121ba:	2184      	movs	r1, #132	; 0x84
 80121bc:	1879      	adds	r1, r7, r1
 80121be:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80121c0:	4bb4      	ldr	r3, [pc, #720]	; (8012494 <VL53L0X_calc_sigma_estimate+0x308>)
 80121c2:	2180      	movs	r1, #128	; 0x80
 80121c4:	1879      	adds	r1, r7, r1
 80121c6:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80121c8:	23f0      	movs	r3, #240	; 0xf0
 80121ca:	021b      	lsls	r3, r3, #8
 80121cc:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80121ce:	18bb      	adds	r3, r7, r2
 80121d0:	6819      	ldr	r1, [r3, #0]
 80121d2:	23f0      	movs	r3, #240	; 0xf0
 80121d4:	0618      	lsls	r0, r3, #24
 80121d6:	f7ed ffbd 	bl	8000154 <__udivsi3>
 80121da:	0003      	movs	r3, r0
 80121dc:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80121de:	4bae      	ldr	r3, [pc, #696]	; (8012498 <VL53L0X_calc_sigma_estimate+0x30c>)
 80121e0:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80121e2:	2380      	movs	r3, #128	; 0x80
 80121e4:	021b      	lsls	r3, r3, #8
 80121e6:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80121e8:	23c8      	movs	r3, #200	; 0xc8
 80121ea:	039b      	lsls	r3, r3, #14
 80121ec:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80121ee:	4bab      	ldr	r3, [pc, #684]	; (801249c <VL53L0X_calc_sigma_estimate+0x310>)
 80121f0:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80121f2:	219f      	movs	r1, #159	; 0x9f
 80121f4:	187b      	adds	r3, r7, r1
 80121f6:	2200      	movs	r2, #0
 80121f8:	701a      	strb	r2, [r3, #0]
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	6a1b      	ldr	r3, [r3, #32]
 80121fe:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	691a      	ldr	r2, [r3, #16]
 8012204:	0013      	movs	r3, r2
 8012206:	015b      	lsls	r3, r3, #5
 8012208:	1a9b      	subs	r3, r3, r2
 801220a:	009b      	lsls	r3, r3, #2
 801220c:	189b      	adds	r3, r3, r2
 801220e:	00db      	lsls	r3, r3, #3
	ambientRate_kcps =
 8012210:	0c1b      	lsrs	r3, r3, #16
 8012212:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	68db      	ldr	r3, [r3, #12]
 8012218:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 801221a:	000d      	movs	r5, r1
 801221c:	187c      	adds	r4, r7, r1
 801221e:	2310      	movs	r3, #16
 8012220:	18fa      	adds	r2, r7, r3
 8012222:	68b9      	ldr	r1, [r7, #8]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	0018      	movs	r0, r3
 8012228:	f7ff fe51 	bl	8011ece <VL53L0X_get_total_signal_rate>
 801222c:	0003      	movs	r3, r0
 801222e:	7023      	strb	r3, [r4, #0]
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8012230:	197c      	adds	r4, r7, r5
 8012232:	2314      	movs	r3, #20
 8012234:	18fa      	adds	r2, r7, r3
 8012236:	68b9      	ldr	r1, [r7, #8]
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	0018      	movs	r0, r3
 801223c:	f7ff fe11 	bl	8011e62 <VL53L0X_get_total_xtalk_rate>
 8012240:	0003      	movs	r3, r0
 8012242:	7023      	strb	r3, [r4, #0]


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8012244:	693a      	ldr	r2, [r7, #16]
 8012246:	0013      	movs	r3, r2
 8012248:	015b      	lsls	r3, r3, #5
 801224a:	1a9b      	subs	r3, r3, r2
 801224c:	009b      	lsls	r3, r3, #2
 801224e:	189b      	adds	r3, r3, r2
 8012250:	00db      	lsls	r3, r3, #3
 8012252:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8012254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012256:	2280      	movs	r2, #128	; 0x80
 8012258:	0212      	lsls	r2, r2, #8
 801225a:	4694      	mov	ip, r2
 801225c:	4463      	add	r3, ip
 801225e:	0c1b      	lsrs	r3, r3, #16
 8012260:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8012262:	697a      	ldr	r2, [r7, #20]
 8012264:	0013      	movs	r3, r2
 8012266:	015b      	lsls	r3, r3, #5
 8012268:	1a9b      	subs	r3, r3, r2
 801226a:	009b      	lsls	r3, r3, #2
 801226c:	189b      	adds	r3, r3, r2
 801226e:	00db      	lsls	r3, r3, #3
 8012270:	21a0      	movs	r1, #160	; 0xa0
 8012272:	187a      	adds	r2, r7, r1
 8012274:	6013      	str	r3, [r2, #0]

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8012276:	187b      	adds	r3, r7, r1
 8012278:	681a      	ldr	r2, [r3, #0]
 801227a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801227c:	429a      	cmp	r2, r3
 801227e:	d902      	bls.n	8012286 <VL53L0X_calc_sigma_estimate+0xfa>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8012280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012282:	187a      	adds	r2, r7, r1
 8012284:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8012286:	239f      	movs	r3, #159	; 0x9f
 8012288:	18fb      	adds	r3, r7, r3
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	b25b      	sxtb	r3, r3
 801228e:	2b00      	cmp	r3, #0
 8012290:	d174      	bne.n	801237c <VL53L0X_calc_sigma_estimate+0x1f0>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	22dc      	movs	r2, #220	; 0xdc
 8012296:	589b      	ldr	r3, [r3, r2]
 8012298:	20b8      	movs	r0, #184	; 0xb8
 801229a:	183a      	adds	r2, r7, r0
 801229c:	6013      	str	r3, [r2, #0]
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 801229e:	245b      	movs	r4, #91	; 0x5b
 80122a0:	193b      	adds	r3, r7, r4
 80122a2:	68fa      	ldr	r2, [r7, #12]
 80122a4:	21e0      	movs	r1, #224	; 0xe0
 80122a6:	5c52      	ldrb	r2, [r2, r1]
 80122a8:	701a      	strb	r2, [r3, #0]
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80122aa:	193b      	adds	r3, r7, r4
 80122ac:	781a      	ldrb	r2, [r3, #0]
 80122ae:	183b      	adds	r3, r7, r0
 80122b0:	6819      	ldr	r1, [r3, #0]
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	0018      	movs	r0, r3
 80122b6:	f7fe fcd2 	bl	8010c5e <VL53L0X_calc_timeout_mclks>
 80122ba:	0003      	movs	r3, r0
 80122bc:	657b      	str	r3, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	22e4      	movs	r2, #228	; 0xe4
 80122c2:	589b      	ldr	r3, [r3, r2]
 80122c4:	20b4      	movs	r0, #180	; 0xb4
 80122c6:	183a      	adds	r2, r7, r0
 80122c8:	6013      	str	r3, [r2, #0]
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80122ca:	2553      	movs	r5, #83	; 0x53
 80122cc:	197b      	adds	r3, r7, r5
 80122ce:	68fa      	ldr	r2, [r7, #12]
 80122d0:	21e8      	movs	r1, #232	; 0xe8
 80122d2:	5c52      	ldrb	r2, [r2, r1]
 80122d4:	701a      	strb	r2, [r3, #0]
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80122d6:	197b      	adds	r3, r7, r5
 80122d8:	781a      	ldrb	r2, [r3, #0]
 80122da:	183b      	adds	r3, r7, r0
 80122dc:	6819      	ldr	r1, [r3, #0]
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	0018      	movs	r0, r3
 80122e2:	f7fe fcbc 	bl	8010c5e <VL53L0X_calc_timeout_mclks>
 80122e6:	0003      	movs	r3, r0
 80122e8:	64fb      	str	r3, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80122ea:	2303      	movs	r3, #3
 80122ec:	2298      	movs	r2, #152	; 0x98
 80122ee:	18b9      	adds	r1, r7, r2
 80122f0:	600b      	str	r3, [r1, #0]
		if (finalRangeVcselPCLKS == 8)
 80122f2:	193b      	adds	r3, r7, r4
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	2b08      	cmp	r3, #8
 80122f8:	d102      	bne.n	8012300 <VL53L0X_calc_sigma_estimate+0x174>
			vcselWidth = 2;
 80122fa:	2302      	movs	r3, #2
 80122fc:	18ba      	adds	r2, r7, r2
 80122fe:	6013      	str	r3, [r2, #0]


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8012300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012304:	18d3      	adds	r3, r2, r3
		peakVcselDuration_us = vcselWidth * 2048 *
 8012306:	2298      	movs	r2, #152	; 0x98
 8012308:	18ba      	adds	r2, r7, r2
 801230a:	6812      	ldr	r2, [r2, #0]
 801230c:	4353      	muls	r3, r2
 801230e:	02db      	lsls	r3, r3, #11
 8012310:	2494      	movs	r4, #148	; 0x94
 8012312:	193a      	adds	r2, r7, r4
 8012314:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8012316:	193b      	adds	r3, r7, r4
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	33f5      	adds	r3, #245	; 0xf5
 801231c:	33ff      	adds	r3, #255	; 0xff
 801231e:	22fa      	movs	r2, #250	; 0xfa
 8012320:	0091      	lsls	r1, r2, #2
 8012322:	0018      	movs	r0, r3
 8012324:	f7ed ff16 	bl	8000154 <__udivsi3>
 8012328:	0003      	movs	r3, r0
 801232a:	193a      	adds	r2, r7, r4
 801232c:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us *= cPllPeriod_ps;
 801232e:	193b      	adds	r3, r7, r4
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012334:	4353      	muls	r3, r2
 8012336:	193a      	adds	r2, r7, r4
 8012338:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 801233a:	193b      	adds	r3, r7, r4
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	33f5      	adds	r3, #245	; 0xf5
 8012340:	33ff      	adds	r3, #255	; 0xff
 8012342:	22fa      	movs	r2, #250	; 0xfa
 8012344:	0091      	lsls	r1, r2, #2
 8012346:	0018      	movs	r0, r3
 8012348:	f7ed ff04 	bl	8000154 <__udivsi3>
 801234c:	0003      	movs	r3, r0
 801234e:	0021      	movs	r1, r4
 8012350:	187a      	adds	r2, r7, r1
 8012352:	6013      	str	r3, [r2, #0]

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	3380      	adds	r3, #128	; 0x80
 8012358:	0a1b      	lsrs	r3, r3, #8
 801235a:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 801235c:	693a      	ldr	r2, [r7, #16]
 801235e:	187b      	adds	r3, r7, r1
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	4353      	muls	r3, r2
 8012364:	22bc      	movs	r2, #188	; 0xbc
 8012366:	18b9      	adds	r1, r7, r2
 8012368:	600b      	str	r3, [r1, #0]
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 801236a:	18bb      	adds	r3, r7, r2
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	3380      	adds	r3, #128	; 0x80
 8012370:	0a1b      	lsrs	r3, r3, #8
 8012372:	18ba      	adds	r2, r7, r2
 8012374:	6013      	str	r3, [r2, #0]

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	021b      	lsls	r3, r3, #8
 801237a:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 801237c:	229f      	movs	r2, #159	; 0x9f
 801237e:	18bb      	adds	r3, r7, r2
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	b25b      	sxtb	r3, r3
 8012384:	2b00      	cmp	r3, #0
 8012386:	d003      	beq.n	8012390 <VL53L0X_calc_sigma_estimate+0x204>
		LOG_FUNCTION_END(Status);
		return Status;
 8012388:	18bb      	adds	r3, r7, r2
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	b25b      	sxtb	r3, r3
 801238e:	e198      	b.n	80126c2 <VL53L0X_calc_sigma_estimate+0x536>
	}

	if (peakSignalRate_kcps == 0) {
 8012390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012392:	2b00      	cmp	r3, #0
 8012394:	d10e      	bne.n	80123b4 <VL53L0X_calc_sigma_estimate+0x228>
		*pSigmaEstimate = cSigmaEstMax;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2180      	movs	r1, #128	; 0x80
 801239a:	187a      	adds	r2, r7, r1
 801239c:	6812      	ldr	r2, [r2, #0]
 801239e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	23a0      	movs	r3, #160	; 0xa0
 80123a4:	005b      	lsls	r3, r3, #1
 80123a6:	1879      	adds	r1, r7, r1
 80123a8:	6809      	ldr	r1, [r1, #0]
 80123aa:	50d1      	str	r1, [r2, r3]
		*pDmax_mm = 0;
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	2200      	movs	r2, #0
 80123b0:	601a      	str	r2, [r3, #0]
 80123b2:	e182      	b.n	80126ba <VL53L0X_calc_sigma_estimate+0x52e>
	} else {
		if (vcselTotalEventsRtn < 1)
 80123b4:	22bc      	movs	r2, #188	; 0xbc
 80123b6:	18bb      	adds	r3, r7, r2
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d102      	bne.n	80123c4 <VL53L0X_calc_sigma_estimate+0x238>
			vcselTotalEventsRtn = 1;
 80123be:	2301      	movs	r3, #1
 80123c0:	18ba      	adds	r2, r7, r2
 80123c2:	6013      	str	r3, [r2, #0]

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80123c4:	2390      	movs	r3, #144	; 0x90
 80123c6:	18fb      	adds	r3, r7, r3
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80123cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123ce:	041b      	lsls	r3, r3, #16
 80123d0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80123d2:	0018      	movs	r0, r3
 80123d4:	f7ed febe 	bl	8000154 <__udivsi3>
 80123d8:	0003      	movs	r3, r0
 80123da:	21b0      	movs	r1, #176	; 0xb0
 80123dc:	187a      	adds	r2, r7, r1
 80123de:	6013      	str	r3, [r2, #0]
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80123e0:	187b      	adds	r3, r7, r1
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d902      	bls.n	80123f0 <VL53L0X_calc_sigma_estimate+0x264>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80123ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123ec:	187a      	adds	r2, r7, r1
 80123ee:	6013      	str	r3, [r2, #0]
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80123f0:	21b0      	movs	r1, #176	; 0xb0
 80123f2:	187b      	adds	r3, r7, r1
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	228c      	movs	r2, #140	; 0x8c
 80123f8:	18ba      	adds	r2, r7, r2
 80123fa:	6812      	ldr	r2, [r2, #0]
 80123fc:	4353      	muls	r3, r2
 80123fe:	187a      	adds	r2, r7, r1
 8012400:	6013      	str	r3, [r2, #0]

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8012402:	23bc      	movs	r3, #188	; 0xbc
 8012404:	18fb      	adds	r3, r7, r3
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	0013      	movs	r3, r2
 801240a:	005b      	lsls	r3, r3, #1
 801240c:	189b      	adds	r3, r3, r2
 801240e:	009b      	lsls	r3, r3, #2
 8012410:	0018      	movs	r0, r3
 8012412:	f7fd fdfd 	bl	8010010 <VL53L0X_isqrt>
 8012416:	0003      	movs	r3, r0
 8012418:	005b      	lsls	r3, r3, #1
 801241a:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	891b      	ldrh	r3, [r3, #8]
 8012420:	001a      	movs	r2, r3
 8012422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012424:	4353      	muls	r3, r2
 8012426:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8012428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801242a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 801242c:	23a0      	movs	r3, #160	; 0xa0
 801242e:	18fb      	adds	r3, r7, r3
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8012434:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8012436:	33f5      	adds	r3, #245	; 0xf5
 8012438:	33ff      	adds	r3, #255	; 0xff
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 801243a:	22fa      	movs	r2, #250	; 0xfa
 801243c:	0091      	lsls	r1, r2, #2
 801243e:	0018      	movs	r0, r3
 8012440:	f7ed fe88 	bl	8000154 <__udivsi3>
 8012444:	0003      	movs	r3, r0
 8012446:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8012448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801244a:	041b      	lsls	r3, r3, #16
 801244c:	33f5      	adds	r3, #245	; 0xf5
 801244e:	33ff      	adds	r3, #255	; 0xff
 8012450:	22fa      	movs	r2, #250	; 0xfa
 8012452:	0091      	lsls	r1, r2, #2
 8012454:	0018      	movs	r0, r3
 8012456:	f7ed fe7d 	bl	8000154 <__udivsi3>
 801245a:	0003      	movs	r3, r0
 801245c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 801245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012460:	021b      	lsls	r3, r3, #8
 8012462:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8012464:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012466:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012468:	f7ed fe74 	bl	8000154 <__udivsi3>
 801246c:	0003      	movs	r3, r0
 801246e:	17da      	asrs	r2, r3, #31
 8012470:	189b      	adds	r3, r3, r2
 8012472:	4053      	eors	r3, r2
 8012474:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8012476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012478:	021b      	lsls	r3, r3, #8
 801247a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	7e1b      	ldrb	r3, [r3, #24]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d00d      	beq.n	80124a0 <VL53L0X_calc_sigma_estimate+0x314>
			pwMult = 1 << 16;
 8012484:	2380      	movs	r3, #128	; 0x80
 8012486:	025b      	lsls	r3, r3, #9
 8012488:	22ac      	movs	r2, #172	; 0xac
 801248a:	18ba      	adds	r2, r7, r2
 801248c:	6013      	str	r3, [r2, #0]
 801248e:	e039      	b.n	8012504 <VL53L0X_calc_sigma_estimate+0x378>
 8012490:	0000125c 	.word	0x0000125c
 8012494:	028f87ae 	.word	0x028f87ae
 8012498:	0006999a 	.word	0x0006999a
 801249c:	00000677 	.word	0x00000677
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80124a0:	2384      	movs	r3, #132	; 0x84
 80124a2:	18fb      	adds	r3, r7, r3
 80124a4:	6819      	ldr	r1, [r3, #0]
 80124a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80124a8:	f7ed fe54 	bl	8000154 <__udivsi3>
 80124ac:	0003      	movs	r3, r0
 80124ae:	21ac      	movs	r1, #172	; 0xac
 80124b0:	187a      	adds	r2, r7, r1
 80124b2:	6013      	str	r3, [r2, #0]
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80124b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124b6:	2280      	movs	r2, #128	; 0x80
 80124b8:	0252      	lsls	r2, r2, #9
 80124ba:	1ad2      	subs	r2, r2, r3
 80124bc:	187b      	adds	r3, r7, r1
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	4353      	muls	r3, r2
 80124c2:	187a      	adds	r2, r7, r1
 80124c4:	6013      	str	r3, [r2, #0]

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80124c6:	187b      	adds	r3, r7, r1
 80124c8:	681a      	ldr	r2, [r3, #0]
 80124ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80124cc:	18d3      	adds	r3, r2, r3
 80124ce:	0c1b      	lsrs	r3, r3, #16
 80124d0:	000a      	movs	r2, r1
 80124d2:	18b9      	adds	r1, r7, r2
 80124d4:	600b      	str	r3, [r1, #0]

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80124d6:	18bb      	adds	r3, r7, r2
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2180      	movs	r1, #128	; 0x80
 80124dc:	0249      	lsls	r1, r1, #9
 80124de:	468c      	mov	ip, r1
 80124e0:	4463      	add	r3, ip
 80124e2:	18b9      	adds	r1, r7, r2
 80124e4:	600b      	str	r3, [r1, #0]
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80124e6:	18bb      	adds	r3, r7, r2
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	085b      	lsrs	r3, r3, #1
 80124ec:	18b9      	adds	r1, r7, r2
 80124ee:	600b      	str	r3, [r1, #0]
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80124f0:	18bb      	adds	r3, r7, r2
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	435b      	muls	r3, r3
 80124f6:	18b9      	adds	r1, r7, r2
 80124f8:	600b      	str	r3, [r1, #0]

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80124fa:	18bb      	adds	r3, r7, r2
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	0b9b      	lsrs	r3, r3, #14
 8012500:	18ba      	adds	r2, r7, r2
 8012502:	6013      	str	r3, [r2, #0]
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8012504:	23ac      	movs	r3, #172	; 0xac
 8012506:	18fb      	adds	r3, r7, r3
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801250c:	4353      	muls	r3, r2
 801250e:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8012510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012512:	2280      	movs	r2, #128	; 0x80
 8012514:	0212      	lsls	r2, r2, #8
 8012516:	4694      	mov	ip, r2
 8012518:	4463      	add	r3, ip
 801251a:	0c1b      	lsrs	r3, r3, #16
 801251c:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 801251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012520:	435b      	muls	r3, r3
 8012522:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8012524:	23b0      	movs	r3, #176	; 0xb0
 8012526:	18fb      	adds	r3, r7, r3
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 801252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252e:	2280      	movs	r2, #128	; 0x80
 8012530:	0212      	lsls	r2, r2, #8
 8012532:	4694      	mov	ip, r2
 8012534:	4463      	add	r3, ip
 8012536:	0c1b      	lsrs	r3, r3, #16
 8012538:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 801253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253c:	435b      	muls	r3, r3
 801253e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8012540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012544:	18d3      	adds	r3, r2, r3
 8012546:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8012548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801254a:	0018      	movs	r0, r3
 801254c:	f7fd fd60 	bl	8010010 <VL53L0X_isqrt>
 8012550:	0003      	movs	r3, r0
 8012552:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8012554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012556:	041b      	lsls	r3, r3, #16
 8012558:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 801255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255c:	3332      	adds	r3, #50	; 0x32
 801255e:	2164      	movs	r1, #100	; 0x64
 8012560:	0018      	movs	r0, r3
 8012562:	f7ed fdf7 	bl	8000154 <__udivsi3>
 8012566:	0003      	movs	r3, r0
 8012568:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801256a:	0018      	movs	r0, r3
 801256c:	f7ed fdf2 	bl	8000154 <__udivsi3>
 8012570:	0003      	movs	r3, r0
 8012572:	21a8      	movs	r1, #168	; 0xa8
 8012574:	187a      	adds	r2, r7, r1
 8012576:	6013      	str	r3, [r2, #0]
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8012578:	187b      	adds	r3, r7, r1
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4a53      	ldr	r2, [pc, #332]	; (80126cc <VL53L0X_calc_sigma_estimate+0x540>)
 801257e:	4353      	muls	r3, r2
 8012580:	000a      	movs	r2, r1
 8012582:	18b9      	adds	r1, r7, r2
 8012584:	600b      	str	r3, [r1, #0]

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8012586:	18bb      	adds	r3, r7, r2
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	4951      	ldr	r1, [pc, #324]	; (80126d0 <VL53L0X_calc_sigma_estimate+0x544>)
 801258c:	468c      	mov	ip, r1
 801258e:	4463      	add	r3, ip
 8012590:	18b9      	adds	r1, r7, r2
 8012592:	600b      	str	r3, [r1, #0]
		sigmaEstRtn		 /= 10000;
 8012594:	0014      	movs	r4, r2
 8012596:	18bb      	adds	r3, r7, r2
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	494e      	ldr	r1, [pc, #312]	; (80126d4 <VL53L0X_calc_sigma_estimate+0x548>)
 801259c:	0018      	movs	r0, r3
 801259e:	f7ed fdd9 	bl	8000154 <__udivsi3>
 80125a2:	0003      	movs	r3, r0
 80125a4:	0021      	movs	r1, r4
 80125a6:	187a      	adds	r2, r7, r1
 80125a8:	6013      	str	r3, [r2, #0]

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80125aa:	187b      	adds	r3, r7, r1
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d902      	bls.n	80125ba <VL53L0X_calc_sigma_estimate+0x42e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80125b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80125b6:	187a      	adds	r2, r7, r1
 80125b8:	6013      	str	r3, [r2, #0]
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80125ba:	23b8      	movs	r3, #184	; 0xb8
 80125bc:	18fb      	adds	r3, r7, r3
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	23b4      	movs	r3, #180	; 0xb4
 80125c2:	18fb      	adds	r3, r7, r3
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	18d3      	adds	r3, r2, r3
 80125c8:	33f5      	adds	r3, #245	; 0xf5
 80125ca:	33ff      	adds	r3, #255	; 0xff
		finalRangeIntegrationTimeMilliSecs =
 80125cc:	22fa      	movs	r2, #250	; 0xfa
 80125ce:	0091      	lsls	r1, r2, #2
 80125d0:	0018      	movs	r0, r3
 80125d2:	f7ed fdbf 	bl	8000154 <__udivsi3>
 80125d6:	0003      	movs	r3, r0
 80125d8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80125da:	6a3b      	ldr	r3, [r7, #32]
 80125dc:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80125de:	2388      	movs	r3, #136	; 0x88
 80125e0:	18fb      	adds	r3, r7, r3
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	18d3      	adds	r3, r2, r3
 80125e6:	6a39      	ldr	r1, [r7, #32]
 80125e8:	0018      	movs	r0, r3
 80125ea:	f7ed fdb3 	bl	8000154 <__udivsi3>
 80125ee:	0003      	movs	r3, r0
 80125f0:	0018      	movs	r0, r3
 80125f2:	f7fd fd0d 	bl	8010010 <VL53L0X_isqrt>
 80125f6:	0003      	movs	r3, r0
 80125f8:	61fb      	str	r3, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	021b      	lsls	r3, r3, #8
 80125fe:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8012600:	69fb      	ldr	r3, [r7, #28]
 8012602:	33f5      	adds	r3, #245	; 0xf5
 8012604:	33ff      	adds	r3, #255	; 0xff
 8012606:	22fa      	movs	r2, #250	; 0xfa
 8012608:	0091      	lsls	r1, r2, #2
 801260a:	0018      	movs	r0, r3
 801260c:	f7ed fda2 	bl	8000154 <__udivsi3>
 8012610:	0003      	movs	r3, r0
 8012612:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8012614:	23a8      	movs	r3, #168	; 0xa8
 8012616:	18fb      	adds	r3, r7, r3
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	435b      	muls	r3, r3
 801261c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	435b      	muls	r3, r3
 8012622:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8012624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012628:	18d3      	adds	r3, r2, r3
 801262a:	0018      	movs	r0, r3
 801262c:	f7fd fcf0 	bl	8010010 <VL53L0X_isqrt>
 8012630:	0003      	movs	r3, r0
 8012632:	61bb      	str	r3, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8012634:	69ba      	ldr	r2, [r7, #24]
 8012636:	0013      	movs	r3, r2
 8012638:	015b      	lsls	r3, r3, #5
 801263a:	1a9b      	subs	r3, r3, r2
 801263c:	009b      	lsls	r3, r3, #2
 801263e:	189b      	adds	r3, r3, r2
 8012640:	00db      	lsls	r3, r3, #3
 8012642:	22a4      	movs	r2, #164	; 0xa4
 8012644:	18b9      	adds	r1, r7, r2
 8012646:	600b      	str	r3, [r1, #0]

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8012648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801264a:	2b00      	cmp	r3, #0
 801264c:	d00b      	beq.n	8012666 <VL53L0X_calc_sigma_estimate+0x4da>
 801264e:	23bc      	movs	r3, #188	; 0xbc
 8012650:	18fb      	adds	r3, r7, r3
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d006      	beq.n	8012666 <VL53L0X_calc_sigma_estimate+0x4da>
 8012658:	18bb      	adds	r3, r7, r2
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	2380      	movs	r3, #128	; 0x80
 801265e:	18fb      	adds	r3, r7, r3
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	429a      	cmp	r2, r3
 8012664:	d905      	bls.n	8012672 <VL53L0X_calc_sigma_estimate+0x4e6>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8012666:	2380      	movs	r3, #128	; 0x80
 8012668:	18fb      	adds	r3, r7, r3
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	22a4      	movs	r2, #164	; 0xa4
 801266e:	18ba      	adds	r2, r7, r2
 8012670:	6013      	str	r3, [r2, #0]
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	22a4      	movs	r2, #164	; 0xa4
 8012676:	18ba      	adds	r2, r7, r2
 8012678:	6812      	ldr	r2, [r2, #0]
 801267a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6819      	ldr	r1, [r3, #0]
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	23a0      	movs	r3, #160	; 0xa0
 8012684:	005b      	lsls	r3, r3, #1
 8012686:	50d1      	str	r1, [r2, r3]
		Status = VL53L0X_calc_dmax(
 8012688:	6939      	ldr	r1, [r7, #16]
 801268a:	239f      	movs	r3, #159	; 0x9f
 801268c:	18fc      	adds	r4, r7, r3
 801268e:	23ac      	movs	r3, #172	; 0xac
 8012690:	18fb      	adds	r3, r7, r3
 8012692:	681d      	ldr	r5, [r3, #0]
 8012694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	9303      	str	r3, [sp, #12]
 801269c:	2394      	movs	r3, #148	; 0x94
 801269e:	18fb      	adds	r3, r7, r3
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	9302      	str	r3, [sp, #8]
 80126a4:	23b0      	movs	r3, #176	; 0xb0
 80126a6:	18fb      	adds	r3, r7, r3
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	9301      	str	r3, [sp, #4]
 80126ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126ae:	9300      	str	r3, [sp, #0]
 80126b0:	002b      	movs	r3, r5
 80126b2:	f7ff fc37 	bl	8011f24 <VL53L0X_calc_dmax>
 80126b6:	0003      	movs	r3, r0
 80126b8:	7023      	strb	r3, [r4, #0]
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80126ba:	239f      	movs	r3, #159	; 0x9f
 80126bc:	18fb      	adds	r3, r7, r3
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	b25b      	sxtb	r3, r3
}
 80126c2:	0018      	movs	r0, r3
 80126c4:	46bd      	mov	sp, r7
 80126c6:	b030      	add	sp, #192	; 0xc0
 80126c8:	bdb0      	pop	{r4, r5, r7, pc}
 80126ca:	46c0      	nop			; (mov r8, r8)
 80126cc:	00000bb5 	.word	0x00000bb5
 80126d0:	00001388 	.word	0x00001388
 80126d4:	00002710 	.word	0x00002710

080126d8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80126d8:	b5b0      	push	{r4, r5, r7, lr}
 80126da:	b090      	sub	sp, #64	; 0x40
 80126dc:	af00      	add	r7, sp, #0
 80126de:	60f8      	str	r0, [r7, #12]
 80126e0:	0008      	movs	r0, r1
 80126e2:	607a      	str	r2, [r7, #4]
 80126e4:	0019      	movs	r1, r3
 80126e6:	240b      	movs	r4, #11
 80126e8:	193b      	adds	r3, r7, r4
 80126ea:	1c02      	adds	r2, r0, #0
 80126ec:	701a      	strb	r2, [r3, #0]
 80126ee:	2308      	movs	r3, #8
 80126f0:	18fb      	adds	r3, r7, r3
 80126f2:	1c0a      	adds	r2, r1, #0
 80126f4:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80126f6:	233f      	movs	r3, #63	; 0x3f
 80126f8:	18fb      	adds	r3, r7, r3
 80126fa:	2200      	movs	r2, #0
 80126fc:	701a      	strb	r2, [r3, #0]
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80126fe:	233d      	movs	r3, #61	; 0x3d
 8012700:	18fb      	adds	r3, r7, r3
 8012702:	2200      	movs	r2, #0
 8012704:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRefClipflag = 0;
 8012706:	233c      	movs	r3, #60	; 0x3c
 8012708:	18fb      	adds	r3, r7, r3
 801270a:	2200      	movs	r2, #0
 801270c:	701a      	strb	r2, [r3, #0]
	uint8_t RangeIgnoreThresholdflag = 0;
 801270e:	233b      	movs	r3, #59	; 0x3b
 8012710:	18fb      	adds	r3, r7, r3
 8012712:	2200      	movs	r2, #0
 8012714:	701a      	strb	r2, [r3, #0]
	uint8_t SigmaLimitCheckEnable = 0;
 8012716:	232b      	movs	r3, #43	; 0x2b
 8012718:	18fb      	adds	r3, r7, r3
 801271a:	2200      	movs	r2, #0
 801271c:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 801271e:	232a      	movs	r3, #42	; 0x2a
 8012720:	18fb      	adds	r3, r7, r3
 8012722:	2200      	movs	r2, #0
 8012724:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8012726:	2329      	movs	r3, #41	; 0x29
 8012728:	18fb      	adds	r3, r7, r3
 801272a:	2200      	movs	r2, #0
 801272c:	701a      	strb	r2, [r3, #0]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 801272e:	2328      	movs	r3, #40	; 0x28
 8012730:	18fb      	adds	r3, r7, r3
 8012732:	2200      	movs	r2, #0
 8012734:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8012736:	2132      	movs	r1, #50	; 0x32
 8012738:	187b      	adds	r3, r7, r1
 801273a:	2200      	movs	r2, #0
 801273c:	701a      	strb	r2, [r3, #0]
	uint16_t tmpWord = 0;
 801273e:	2316      	movs	r3, #22
 8012740:	18fb      	adds	r3, r7, r3
 8012742:	2200      	movs	r2, #0
 8012744:	801a      	strh	r2, [r3, #0]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8012746:	2300      	movs	r3, #0
 8012748:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 801274a:	193b      	adds	r3, r7, r4
 801274c:	781b      	ldrb	r3, [r3, #0]
 801274e:	10db      	asrs	r3, r3, #3
 8012750:	b2da      	uxtb	r2, r3
 8012752:	0008      	movs	r0, r1
 8012754:	187b      	adds	r3, r7, r1
 8012756:	210f      	movs	r1, #15
 8012758:	400a      	ands	r2, r1
 801275a:	701a      	strb	r2, [r3, #0]

	if (DeviceRangeStatusInternal == 0 ||
 801275c:	0002      	movs	r2, r0
 801275e:	18bb      	adds	r3, r7, r2
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d017      	beq.n	8012796 <VL53L0X_get_pal_range_status+0xbe>
 8012766:	18bb      	adds	r3, r7, r2
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	2b05      	cmp	r3, #5
 801276c:	d013      	beq.n	8012796 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 5 ||
 801276e:	18bb      	adds	r3, r7, r2
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	2b07      	cmp	r3, #7
 8012774:	d00f      	beq.n	8012796 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 7 ||
 8012776:	18bb      	adds	r3, r7, r2
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	2b0c      	cmp	r3, #12
 801277c:	d00b      	beq.n	8012796 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 12 ||
 801277e:	18bb      	adds	r3, r7, r2
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	2b0d      	cmp	r3, #13
 8012784:	d007      	beq.n	8012796 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 13 ||
 8012786:	18bb      	adds	r3, r7, r2
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	2b0e      	cmp	r3, #14
 801278c:	d003      	beq.n	8012796 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 14 ||
 801278e:	18bb      	adds	r3, r7, r2
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	2b0f      	cmp	r3, #15
 8012794:	d104      	bne.n	80127a0 <VL53L0X_get_pal_range_status+0xc8>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8012796:	233e      	movs	r3, #62	; 0x3e
 8012798:	18fb      	adds	r3, r7, r3
 801279a:	2201      	movs	r2, #1
 801279c:	701a      	strb	r2, [r3, #0]
 801279e:	e003      	b.n	80127a8 <VL53L0X_get_pal_range_status+0xd0>
	} else {
		NoneFlag = 0;
 80127a0:	233e      	movs	r3, #62	; 0x3e
 80127a2:	18fb      	adds	r3, r7, r3
 80127a4:	2200      	movs	r2, #0
 80127a6:	701a      	strb	r2, [r3, #0]

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80127a8:	223f      	movs	r2, #63	; 0x3f
 80127aa:	18bb      	adds	r3, r7, r2
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	b25b      	sxtb	r3, r3
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d109      	bne.n	80127c8 <VL53L0X_get_pal_range_status+0xf0>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80127b4:	18bc      	adds	r4, r7, r2
 80127b6:	232b      	movs	r3, #43	; 0x2b
 80127b8:	18fa      	adds	r2, r7, r3
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	2100      	movs	r1, #0
 80127be:	0018      	movs	r0, r3
 80127c0:	f7fb fbec 	bl	800df9c <VL53L0X_GetLimitCheckEnable>
 80127c4:	0003      	movs	r3, r0
 80127c6:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80127c8:	232b      	movs	r3, #43	; 0x2b
 80127ca:	18fb      	adds	r3, r7, r3
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d034      	beq.n	801283c <VL53L0X_get_pal_range_status+0x164>
 80127d2:	253f      	movs	r5, #63	; 0x3f
 80127d4:	197b      	adds	r3, r7, r5
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	b25b      	sxtb	r3, r3
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d12e      	bne.n	801283c <VL53L0X_get_pal_range_status+0x164>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80127de:	197c      	adds	r4, r7, r5
 80127e0:	2310      	movs	r3, #16
 80127e2:	18fb      	adds	r3, r7, r3
 80127e4:	2224      	movs	r2, #36	; 0x24
 80127e6:	18ba      	adds	r2, r7, r2
 80127e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127ea:	68f8      	ldr	r0, [r7, #12]
 80127ec:	f7ff fcce 	bl	801218c <VL53L0X_calc_sigma_estimate>
 80127f0:	0003      	movs	r3, r0
 80127f2:	7023      	strb	r3, [r4, #0]
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80127f4:	197b      	adds	r3, r7, r5
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	b25b      	sxtb	r3, r3
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d103      	bne.n	8012806 <VL53L0X_get_pal_range_status+0x12e>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	b29a      	uxth	r2, r3
 8012802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012804:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8012806:	223f      	movs	r2, #63	; 0x3f
 8012808:	18bb      	adds	r3, r7, r2
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	b25b      	sxtb	r3, r3
 801280e:	2b00      	cmp	r3, #0
 8012810:	d114      	bne.n	801283c <VL53L0X_get_pal_range_status+0x164>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8012812:	18bc      	adds	r4, r7, r2
 8012814:	2320      	movs	r3, #32
 8012816:	18fa      	adds	r2, r7, r3
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2100      	movs	r1, #0
 801281c:	0018      	movs	r0, r3
 801281e:	f7fb fc61 	bl	800e0e4 <VL53L0X_GetLimitCheckValue>
 8012822:	0003      	movs	r3, r0
 8012824:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8012826:	6a3b      	ldr	r3, [r7, #32]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d007      	beq.n	801283c <VL53L0X_get_pal_range_status+0x164>
				(SigmaEstimate > SigmaLimitValue))
 801282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801282e:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8012830:	429a      	cmp	r2, r3
 8012832:	d903      	bls.n	801283c <VL53L0X_get_pal_range_status+0x164>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8012834:	233d      	movs	r3, #61	; 0x3d
 8012836:	18fb      	adds	r3, r7, r3
 8012838:	2201      	movs	r2, #1
 801283a:	701a      	strb	r2, [r3, #0]

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 801283c:	223f      	movs	r2, #63	; 0x3f
 801283e:	18bb      	adds	r3, r7, r2
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	b25b      	sxtb	r3, r3
 8012844:	2b00      	cmp	r3, #0
 8012846:	d109      	bne.n	801285c <VL53L0X_get_pal_range_status+0x184>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8012848:	18bc      	adds	r4, r7, r2
 801284a:	2329      	movs	r3, #41	; 0x29
 801284c:	18fa      	adds	r2, r7, r3
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2102      	movs	r1, #2
 8012852:	0018      	movs	r0, r3
 8012854:	f7fb fba2 	bl	800df9c <VL53L0X_GetLimitCheckEnable>
 8012858:	0003      	movs	r3, r0
 801285a:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 801285c:	2329      	movs	r3, #41	; 0x29
 801285e:	18fb      	adds	r3, r7, r3
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d051      	beq.n	801290a <VL53L0X_get_pal_range_status+0x232>
 8012866:	253f      	movs	r5, #63	; 0x3f
 8012868:	197b      	adds	r3, r7, r5
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	b25b      	sxtb	r3, r3
 801286e:	2b00      	cmp	r3, #0
 8012870:	d14b      	bne.n	801290a <VL53L0X_get_pal_range_status+0x232>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8012872:	197c      	adds	r4, r7, r5
 8012874:	231c      	movs	r3, #28
 8012876:	18fa      	adds	r2, r7, r3
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	2102      	movs	r1, #2
 801287c:	0018      	movs	r0, r3
 801287e:	f7fb fc31 	bl	800e0e4 <VL53L0X_GetLimitCheckValue>
 8012882:	0003      	movs	r3, r0
 8012884:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8012886:	197b      	adds	r3, r7, r5
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	b25b      	sxtb	r3, r3
 801288c:	2b00      	cmp	r3, #0
 801288e:	d108      	bne.n	80128a2 <VL53L0X_get_pal_range_status+0x1ca>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8012890:	197c      	adds	r4, r7, r5
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	2201      	movs	r2, #1
 8012896:	21ff      	movs	r1, #255	; 0xff
 8012898:	0018      	movs	r0, r3
 801289a:	f000 fa0d 	bl	8012cb8 <VL53L0X_WrByte>
 801289e:	0003      	movs	r3, r0
 80128a0:	7023      	strb	r3, [r4, #0]

		if (Status == VL53L0X_ERROR_NONE)
 80128a2:	223f      	movs	r2, #63	; 0x3f
 80128a4:	18bb      	adds	r3, r7, r2
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	b25b      	sxtb	r3, r3
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d109      	bne.n	80128c2 <VL53L0X_get_pal_range_status+0x1ea>
			Status = VL53L0X_RdWord(Dev,
 80128ae:	18bc      	adds	r4, r7, r2
 80128b0:	2316      	movs	r3, #22
 80128b2:	18fa      	adds	r2, r7, r3
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	21b6      	movs	r1, #182	; 0xb6
 80128b8:	0018      	movs	r0, r3
 80128ba:	f000 fae1 	bl	8012e80 <VL53L0X_RdWord>
 80128be:	0003      	movs	r3, r0
 80128c0:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80128c2:	223f      	movs	r2, #63	; 0x3f
 80128c4:	18bb      	adds	r3, r7, r2
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	b25b      	sxtb	r3, r3
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d108      	bne.n	80128e0 <VL53L0X_get_pal_range_status+0x208>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80128ce:	18bc      	adds	r4, r7, r2
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2200      	movs	r2, #0
 80128d4:	21ff      	movs	r1, #255	; 0xff
 80128d6:	0018      	movs	r0, r3
 80128d8:	f000 f9ee 	bl	8012cb8 <VL53L0X_WrByte>
 80128dc:	0003      	movs	r3, r0
 80128de:	7023      	strb	r3, [r4, #0]

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80128e0:	2316      	movs	r3, #22
 80128e2:	18fb      	adds	r3, r7, r3
 80128e4:	881b      	ldrh	r3, [r3, #0]
 80128e6:	025b      	lsls	r3, r3, #9
 80128e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80128ea:	68fa      	ldr	r2, [r7, #12]
 80128ec:	23a4      	movs	r3, #164	; 0xa4
 80128ee:	005b      	lsls	r3, r3, #1
 80128f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128f2:	50d1      	str	r1, [r2, r3]

		if ((SignalRefClipValue > 0) &&
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d007      	beq.n	801290a <VL53L0X_get_pal_range_status+0x232>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80128fa:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80128fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128fe:	429a      	cmp	r2, r3
 8012900:	d903      	bls.n	801290a <VL53L0X_get_pal_range_status+0x232>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8012902:	233c      	movs	r3, #60	; 0x3c
 8012904:	18fb      	adds	r3, r7, r3
 8012906:	2201      	movs	r2, #1
 8012908:	701a      	strb	r2, [r3, #0]
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 801290a:	223f      	movs	r2, #63	; 0x3f
 801290c:	18bb      	adds	r3, r7, r2
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	b25b      	sxtb	r3, r3
 8012912:	2b00      	cmp	r3, #0
 8012914:	d109      	bne.n	801292a <VL53L0X_get_pal_range_status+0x252>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8012916:	18bc      	adds	r4, r7, r2
 8012918:	2328      	movs	r3, #40	; 0x28
 801291a:	18fa      	adds	r2, r7, r3
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2103      	movs	r1, #3
 8012920:	0018      	movs	r0, r3
 8012922:	f7fb fb3b 	bl	800df9c <VL53L0X_GetLimitCheckEnable>
 8012926:	0003      	movs	r3, r0
 8012928:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 801292a:	2328      	movs	r3, #40	; 0x28
 801292c:	18fb      	adds	r3, r7, r3
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d02e      	beq.n	8012992 <VL53L0X_get_pal_range_status+0x2ba>
 8012934:	233f      	movs	r3, #63	; 0x3f
 8012936:	18fb      	adds	r3, r7, r3
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	b25b      	sxtb	r3, r3
 801293c:	2b00      	cmp	r3, #0
 801293e:	d128      	bne.n	8012992 <VL53L0X_get_pal_range_status+0x2ba>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8012940:	2308      	movs	r3, #8
 8012942:	18fb      	adds	r3, r7, r3
 8012944:	881b      	ldrh	r3, [r3, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d102      	bne.n	8012950 <VL53L0X_get_pal_range_status+0x278>
			SignalRatePerSpad = 0;
 801294a:	2300      	movs	r3, #0
 801294c:	637b      	str	r3, [r7, #52]	; 0x34
 801294e:	e00a      	b.n	8012966 <VL53L0X_get_pal_range_status+0x28e>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	021a      	lsls	r2, r3, #8
 8012954:	2308      	movs	r3, #8
 8012956:	18fb      	adds	r3, r7, r3
 8012958:	881b      	ldrh	r3, [r3, #0]
 801295a:	0019      	movs	r1, r3
 801295c:	0010      	movs	r0, r2
 801295e:	f7ed fbf9 	bl	8000154 <__udivsi3>
 8012962:	0003      	movs	r3, r0
 8012964:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8012966:	233f      	movs	r3, #63	; 0x3f
 8012968:	18fc      	adds	r4, r7, r3
 801296a:	2318      	movs	r3, #24
 801296c:	18fa      	adds	r2, r7, r3
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2103      	movs	r1, #3
 8012972:	0018      	movs	r0, r3
 8012974:	f7fb fbb6 	bl	800e0e4 <VL53L0X_GetLimitCheckValue>
 8012978:	0003      	movs	r3, r0
 801297a:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 801297c:	69bb      	ldr	r3, [r7, #24]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d007      	beq.n	8012992 <VL53L0X_get_pal_range_status+0x2ba>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8012982:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8012984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012986:	429a      	cmp	r2, r3
 8012988:	d203      	bcs.n	8012992 <VL53L0X_get_pal_range_status+0x2ba>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 801298a:	233b      	movs	r3, #59	; 0x3b
 801298c:	18fb      	adds	r3, r7, r3
 801298e:	2201      	movs	r2, #1
 8012990:	701a      	strb	r2, [r3, #0]
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8012992:	233f      	movs	r3, #63	; 0x3f
 8012994:	18fb      	adds	r3, r7, r3
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	b25b      	sxtb	r3, r3
 801299a:	2b00      	cmp	r3, #0
 801299c:	d152      	bne.n	8012a44 <VL53L0X_get_pal_range_status+0x36c>
		if (NoneFlag == 1) {
 801299e:	233e      	movs	r3, #62	; 0x3e
 80129a0:	18fb      	adds	r3, r7, r3
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	2b01      	cmp	r3, #1
 80129a6:	d103      	bne.n	80129b0 <VL53L0X_get_pal_range_status+0x2d8>
			*pPalRangeStatus = 255;	 /* NONE */
 80129a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129aa:	22ff      	movs	r2, #255	; 0xff
 80129ac:	701a      	strb	r2, [r3, #0]
 80129ae:	e049      	b.n	8012a44 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 1 ||
 80129b0:	2232      	movs	r2, #50	; 0x32
 80129b2:	18bb      	adds	r3, r7, r2
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	d007      	beq.n	80129ca <VL53L0X_get_pal_range_status+0x2f2>
 80129ba:	18bb      	adds	r3, r7, r2
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	2b02      	cmp	r3, #2
 80129c0:	d003      	beq.n	80129ca <VL53L0X_get_pal_range_status+0x2f2>
					DeviceRangeStatusInternal == 2 ||
 80129c2:	18bb      	adds	r3, r7, r2
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	2b03      	cmp	r3, #3
 80129c8:	d103      	bne.n	80129d2 <VL53L0X_get_pal_range_status+0x2fa>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80129ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129cc:	2205      	movs	r2, #5
 80129ce:	701a      	strb	r2, [r3, #0]
 80129d0:	e038      	b.n	8012a44 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 6 ||
 80129d2:	2232      	movs	r2, #50	; 0x32
 80129d4:	18bb      	adds	r3, r7, r2
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	2b06      	cmp	r3, #6
 80129da:	d003      	beq.n	80129e4 <VL53L0X_get_pal_range_status+0x30c>
 80129dc:	18bb      	adds	r3, r7, r2
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	2b09      	cmp	r3, #9
 80129e2:	d103      	bne.n	80129ec <VL53L0X_get_pal_range_status+0x314>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80129e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129e6:	2204      	movs	r2, #4
 80129e8:	701a      	strb	r2, [r3, #0]
 80129ea:	e02b      	b.n	8012a44 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 8 ||
 80129ec:	2232      	movs	r2, #50	; 0x32
 80129ee:	18bb      	adds	r3, r7, r2
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	2b08      	cmp	r3, #8
 80129f4:	d008      	beq.n	8012a08 <VL53L0X_get_pal_range_status+0x330>
 80129f6:	18bb      	adds	r3, r7, r2
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	2b0a      	cmp	r3, #10
 80129fc:	d004      	beq.n	8012a08 <VL53L0X_get_pal_range_status+0x330>
					DeviceRangeStatusInternal == 10 ||
 80129fe:	233c      	movs	r3, #60	; 0x3c
 8012a00:	18fb      	adds	r3, r7, r3
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	d103      	bne.n	8012a10 <VL53L0X_get_pal_range_status+0x338>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8012a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a0a:	2203      	movs	r2, #3
 8012a0c:	701a      	strb	r2, [r3, #0]
 8012a0e:	e019      	b.n	8012a44 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 4 ||
 8012a10:	2332      	movs	r3, #50	; 0x32
 8012a12:	18fb      	adds	r3, r7, r3
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	2b04      	cmp	r3, #4
 8012a18:	d004      	beq.n	8012a24 <VL53L0X_get_pal_range_status+0x34c>
 8012a1a:	233b      	movs	r3, #59	; 0x3b
 8012a1c:	18fb      	adds	r3, r7, r3
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d103      	bne.n	8012a2c <VL53L0X_get_pal_range_status+0x354>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8012a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a26:	2202      	movs	r2, #2
 8012a28:	701a      	strb	r2, [r3, #0]
 8012a2a:	e00b      	b.n	8012a44 <VL53L0X_get_pal_range_status+0x36c>
		} else if (SigmaLimitflag == 1) {
 8012a2c:	233d      	movs	r3, #61	; 0x3d
 8012a2e:	18fb      	adds	r3, r7, r3
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	2b01      	cmp	r3, #1
 8012a34:	d103      	bne.n	8012a3e <VL53L0X_get_pal_range_status+0x366>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8012a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a38:	2201      	movs	r2, #1
 8012a3a:	701a      	strb	r2, [r3, #0]
 8012a3c:	e002      	b.n	8012a44 <VL53L0X_get_pal_range_status+0x36c>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8012a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a40:	2200      	movs	r2, #0
 8012a42:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8012a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d102      	bne.n	8012a52 <VL53L0X_get_pal_range_status+0x37a>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8012a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a4e:	2200      	movs	r2, #0
 8012a50:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8012a52:	253f      	movs	r5, #63	; 0x3f
 8012a54:	197c      	adds	r4, r7, r5
 8012a56:	232a      	movs	r3, #42	; 0x2a
 8012a58:	18fa      	adds	r2, r7, r3
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	2101      	movs	r1, #1
 8012a5e:	0018      	movs	r0, r3
 8012a60:	f7fb fa9c 	bl	800df9c <VL53L0X_GetLimitCheckEnable>
 8012a64:	0003      	movs	r3, r0
 8012a66:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8012a68:	197b      	adds	r3, r7, r5
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	b25b      	sxtb	r3, r3
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d163      	bne.n	8012b3a <VL53L0X_get_pal_range_status+0x462>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8012a72:	232b      	movs	r3, #43	; 0x2b
 8012a74:	18fb      	adds	r3, r7, r3
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d004      	beq.n	8012a86 <VL53L0X_get_pal_range_status+0x3ae>
 8012a7c:	233d      	movs	r3, #61	; 0x3d
 8012a7e:	18fb      	adds	r3, r7, r3
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	2b01      	cmp	r3, #1
 8012a84:	d104      	bne.n	8012a90 <VL53L0X_get_pal_range_status+0x3b8>
			Temp8 = 1;
 8012a86:	2333      	movs	r3, #51	; 0x33
 8012a88:	18fb      	adds	r3, r7, r3
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	701a      	strb	r2, [r3, #0]
 8012a8e:	e003      	b.n	8012a98 <VL53L0X_get_pal_range_status+0x3c0>
		else
			Temp8 = 0;
 8012a90:	2333      	movs	r3, #51	; 0x33
 8012a92:	18fb      	adds	r3, r7, r3
 8012a94:	2200      	movs	r2, #0
 8012a96:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	2233      	movs	r2, #51	; 0x33
 8012a9c:	18ba      	adds	r2, r7, r2
 8012a9e:	212e      	movs	r1, #46	; 0x2e
 8012aa0:	7812      	ldrb	r2, [r2, #0]
 8012aa2:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8012aa4:	2332      	movs	r3, #50	; 0x32
 8012aa6:	18fb      	adds	r3, r7, r3
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	2b04      	cmp	r3, #4
 8012aac:	d004      	beq.n	8012ab8 <VL53L0X_get_pal_range_status+0x3e0>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8012aae:	232a      	movs	r3, #42	; 0x2a
 8012ab0:	18fb      	adds	r3, r7, r3
 8012ab2:	781b      	ldrb	r3, [r3, #0]
		if ((DeviceRangeStatusInternal == 4) ||
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d104      	bne.n	8012ac2 <VL53L0X_get_pal_range_status+0x3ea>
			Temp8 = 1;
 8012ab8:	2333      	movs	r3, #51	; 0x33
 8012aba:	18fb      	adds	r3, r7, r3
 8012abc:	2201      	movs	r2, #1
 8012abe:	701a      	strb	r2, [r3, #0]
 8012ac0:	e003      	b.n	8012aca <VL53L0X_get_pal_range_status+0x3f2>
		else
			Temp8 = 0;
 8012ac2:	2333      	movs	r3, #51	; 0x33
 8012ac4:	18fb      	adds	r3, r7, r3
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2233      	movs	r2, #51	; 0x33
 8012ace:	18ba      	adds	r2, r7, r2
 8012ad0:	212f      	movs	r1, #47	; 0x2f
 8012ad2:	7812      	ldrb	r2, [r2, #0]
 8012ad4:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8012ad6:	2329      	movs	r3, #41	; 0x29
 8012ad8:	18fb      	adds	r3, r7, r3
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d004      	beq.n	8012aea <VL53L0X_get_pal_range_status+0x412>
 8012ae0:	233c      	movs	r3, #60	; 0x3c
 8012ae2:	18fb      	adds	r3, r7, r3
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	2b01      	cmp	r3, #1
 8012ae8:	d104      	bne.n	8012af4 <VL53L0X_get_pal_range_status+0x41c>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8012aea:	2333      	movs	r3, #51	; 0x33
 8012aec:	18fb      	adds	r3, r7, r3
 8012aee:	2201      	movs	r2, #1
 8012af0:	701a      	strb	r2, [r3, #0]
 8012af2:	e003      	b.n	8012afc <VL53L0X_get_pal_range_status+0x424>
		else
			Temp8 = 0;
 8012af4:	2333      	movs	r3, #51	; 0x33
 8012af6:	18fb      	adds	r3, r7, r3
 8012af8:	2200      	movs	r2, #0
 8012afa:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	2233      	movs	r2, #51	; 0x33
 8012b00:	18ba      	adds	r2, r7, r2
 8012b02:	2130      	movs	r1, #48	; 0x30
 8012b04:	7812      	ldrb	r2, [r2, #0]
 8012b06:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8012b08:	2328      	movs	r3, #40	; 0x28
 8012b0a:	18fb      	adds	r3, r7, r3
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d004      	beq.n	8012b1c <VL53L0X_get_pal_range_status+0x444>
 8012b12:	233b      	movs	r3, #59	; 0x3b
 8012b14:	18fb      	adds	r3, r7, r3
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d104      	bne.n	8012b26 <VL53L0X_get_pal_range_status+0x44e>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8012b1c:	2333      	movs	r3, #51	; 0x33
 8012b1e:	18fb      	adds	r3, r7, r3
 8012b20:	2201      	movs	r2, #1
 8012b22:	701a      	strb	r2, [r3, #0]
 8012b24:	e003      	b.n	8012b2e <VL53L0X_get_pal_range_status+0x456>
		else
			Temp8 = 0;
 8012b26:	2333      	movs	r3, #51	; 0x33
 8012b28:	18fb      	adds	r3, r7, r3
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2233      	movs	r2, #51	; 0x33
 8012b32:	18ba      	adds	r2, r7, r2
 8012b34:	2131      	movs	r1, #49	; 0x31
 8012b36:	7812      	ldrb	r2, [r2, #0]
 8012b38:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8012b3a:	233f      	movs	r3, #63	; 0x3f
 8012b3c:	18fb      	adds	r3, r7, r3
 8012b3e:	781b      	ldrb	r3, [r3, #0]
 8012b40:	b25b      	sxtb	r3, r3

}
 8012b42:	0018      	movs	r0, r3
 8012b44:	46bd      	mov	sp, r7
 8012b46:	b010      	add	sp, #64	; 0x40
 8012b48:	bdb0      	pop	{r4, r5, r7, pc}

08012b4a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8012b4a:	b590      	push	{r4, r7, lr}
 8012b4c:	b089      	sub	sp, #36	; 0x24
 8012b4e:	af02      	add	r7, sp, #8
 8012b50:	60f8      	str	r0, [r7, #12]
 8012b52:	60b9      	str	r1, [r7, #8]
 8012b54:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	330a      	adds	r3, #10
 8012b5a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8012b5c:	68fa      	ldr	r2, [r7, #12]
 8012b5e:	23ae      	movs	r3, #174	; 0xae
 8012b60:	005b      	lsls	r3, r3, #1
 8012b62:	58d0      	ldr	r0, [r2, r3]
 8012b64:	68fa      	ldr	r2, [r7, #12]
 8012b66:	23b0      	movs	r3, #176	; 0xb0
 8012b68:	005b      	lsls	r3, r3, #1
 8012b6a:	5cd3      	ldrb	r3, [r2, r3]
 8012b6c:	b299      	uxth	r1, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	b29c      	uxth	r4, r3
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	68ba      	ldr	r2, [r7, #8]
 8012b76:	9300      	str	r3, [sp, #0]
 8012b78:	0023      	movs	r3, r4
 8012b7a:	f7f4 fb7d 	bl	8007278 <HAL_I2C_Master_Transmit>
 8012b7e:	0003      	movs	r3, r0
 8012b80:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8012b82:	693b      	ldr	r3, [r7, #16]
}
 8012b84:	0018      	movs	r0, r3
 8012b86:	46bd      	mov	sp, r7
 8012b88:	b007      	add	sp, #28
 8012b8a:	bd90      	pop	{r4, r7, pc}

08012b8c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8012b8c:	b590      	push	{r4, r7, lr}
 8012b8e:	b089      	sub	sp, #36	; 0x24
 8012b90:	af02      	add	r7, sp, #8
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	330a      	adds	r3, #10
 8012b9c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8012b9e:	68fa      	ldr	r2, [r7, #12]
 8012ba0:	23ae      	movs	r3, #174	; 0xae
 8012ba2:	005b      	lsls	r3, r3, #1
 8012ba4:	58d0      	ldr	r0, [r2, r3]
 8012ba6:	68fa      	ldr	r2, [r7, #12]
 8012ba8:	23b0      	movs	r3, #176	; 0xb0
 8012baa:	005b      	lsls	r3, r3, #1
 8012bac:	5cd3      	ldrb	r3, [r2, r3]
 8012bae:	2201      	movs	r2, #1
 8012bb0:	4313      	orrs	r3, r2
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	b299      	uxth	r1, r3
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	b29c      	uxth	r4, r3
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	68ba      	ldr	r2, [r7, #8]
 8012bbe:	9300      	str	r3, [sp, #0]
 8012bc0:	0023      	movs	r3, r4
 8012bc2:	f7f4 fc61 	bl	8007488 <HAL_I2C_Master_Receive>
 8012bc6:	0003      	movs	r3, r0
 8012bc8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8012bca:	693b      	ldr	r3, [r7, #16]
}
 8012bcc:	0018      	movs	r0, r3
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	b007      	add	sp, #28
 8012bd2:	bd90      	pop	{r4, r7, pc}

08012bd4 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b086      	sub	sp, #24
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	60f8      	str	r0, [r7, #12]
 8012bdc:	607a      	str	r2, [r7, #4]
 8012bde:	603b      	str	r3, [r7, #0]
 8012be0:	230b      	movs	r3, #11
 8012be2:	18fb      	adds	r3, r7, r3
 8012be4:	1c0a      	adds	r2, r1, #0
 8012be6:	701a      	strb	r2, [r3, #0]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012be8:	2317      	movs	r3, #23
 8012bea:	18fb      	adds	r3, r7, r3
 8012bec:	2200      	movs	r2, #0
 8012bee:	701a      	strb	r2, [r3, #0]
    if (count > sizeof(_I2CBuffer) - 1) {
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	2b3f      	cmp	r3, #63	; 0x3f
 8012bf4:	d902      	bls.n	8012bfc <VL53L0X_WriteMulti+0x28>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8012bf6:	2304      	movs	r3, #4
 8012bf8:	425b      	negs	r3, r3
 8012bfa:	e01e      	b.n	8012c3a <VL53L0X_WriteMulti+0x66>
    }
    _I2CBuffer[0] = index;
 8012bfc:	4b11      	ldr	r3, [pc, #68]	; (8012c44 <VL53L0X_WriteMulti+0x70>)
 8012bfe:	220b      	movs	r2, #11
 8012c00:	18ba      	adds	r2, r7, r2
 8012c02:	7812      	ldrb	r2, [r2, #0]
 8012c04:	701a      	strb	r2, [r3, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8012c06:	683a      	ldr	r2, [r7, #0]
 8012c08:	6879      	ldr	r1, [r7, #4]
 8012c0a:	4b0f      	ldr	r3, [pc, #60]	; (8012c48 <VL53L0X_WriteMulti+0x74>)
 8012c0c:	0018      	movs	r0, r3
 8012c0e:	f002 f93f 	bl	8014e90 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	1c5a      	adds	r2, r3, #1
 8012c16:	490b      	ldr	r1, [pc, #44]	; (8012c44 <VL53L0X_WriteMulti+0x70>)
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	0018      	movs	r0, r3
 8012c1c:	f7ff ff95 	bl	8012b4a <_I2CWrite>
 8012c20:	0003      	movs	r3, r0
 8012c22:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d003      	beq.n	8012c32 <VL53L0X_WriteMulti+0x5e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012c2a:	2317      	movs	r3, #23
 8012c2c:	18fb      	adds	r3, r7, r3
 8012c2e:	22ec      	movs	r2, #236	; 0xec
 8012c30:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8012c32:	2317      	movs	r3, #23
 8012c34:	18fb      	adds	r3, r7, r3
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	b25b      	sxtb	r3, r3
}
 8012c3a:	0018      	movs	r0, r3
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	b006      	add	sp, #24
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	46c0      	nop			; (mov r8, r8)
 8012c44:	20001294 	.word	0x20001294
 8012c48:	20001295 	.word	0x20001295

08012c4c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8012c4c:	b590      	push	{r4, r7, lr}
 8012c4e:	b087      	sub	sp, #28
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	607a      	str	r2, [r7, #4]
 8012c56:	603b      	str	r3, [r7, #0]
 8012c58:	200b      	movs	r0, #11
 8012c5a:	183b      	adds	r3, r7, r0
 8012c5c:	1c0a      	adds	r2, r1, #0
 8012c5e:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012c60:	2417      	movs	r4, #23
 8012c62:	193b      	adds	r3, r7, r4
 8012c64:	2200      	movs	r2, #0
 8012c66:	701a      	strb	r2, [r3, #0]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8012c68:	1839      	adds	r1, r7, r0
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	0018      	movs	r0, r3
 8012c70:	f7ff ff6b 	bl	8012b4a <_I2CWrite>
 8012c74:	0003      	movs	r3, r0
 8012c76:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d003      	beq.n	8012c86 <VL53L0X_ReadMulti+0x3a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012c7e:	193b      	adds	r3, r7, r4
 8012c80:	22ec      	movs	r2, #236	; 0xec
 8012c82:	701a      	strb	r2, [r3, #0]
        goto done;
 8012c84:	e010      	b.n	8012ca8 <VL53L0X_ReadMulti+0x5c>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8012c86:	683a      	ldr	r2, [r7, #0]
 8012c88:	6879      	ldr	r1, [r7, #4]
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	0018      	movs	r0, r3
 8012c8e:	f7ff ff7d 	bl	8012b8c <_I2CRead>
 8012c92:	0003      	movs	r3, r0
 8012c94:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d004      	beq.n	8012ca6 <VL53L0X_ReadMulti+0x5a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012c9c:	2317      	movs	r3, #23
 8012c9e:	18fb      	adds	r3, r7, r3
 8012ca0:	22ec      	movs	r2, #236	; 0xec
 8012ca2:	701a      	strb	r2, [r3, #0]
 8012ca4:	e000      	b.n	8012ca8 <VL53L0X_ReadMulti+0x5c>
    }
done:
 8012ca6:	46c0      	nop			; (mov r8, r8)
    VL53L0X_PutI2cBus();
    return Status;
 8012ca8:	2317      	movs	r3, #23
 8012caa:	18fb      	adds	r3, r7, r3
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	b25b      	sxtb	r3, r3
}
 8012cb0:	0018      	movs	r0, r3
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	b007      	add	sp, #28
 8012cb6:	bd90      	pop	{r4, r7, pc}

08012cb8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8012cb8:	b590      	push	{r4, r7, lr}
 8012cba:	b085      	sub	sp, #20
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	0008      	movs	r0, r1
 8012cc2:	0011      	movs	r1, r2
 8012cc4:	1cfb      	adds	r3, r7, #3
 8012cc6:	1c02      	adds	r2, r0, #0
 8012cc8:	701a      	strb	r2, [r3, #0]
 8012cca:	1cbb      	adds	r3, r7, #2
 8012ccc:	1c0a      	adds	r2, r1, #0
 8012cce:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012cd0:	240f      	movs	r4, #15
 8012cd2:	193b      	adds	r3, r7, r4
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8012cd8:	4b0e      	ldr	r3, [pc, #56]	; (8012d14 <VL53L0X_WrByte+0x5c>)
 8012cda:	1cfa      	adds	r2, r7, #3
 8012cdc:	7812      	ldrb	r2, [r2, #0]
 8012cde:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = data;
 8012ce0:	4b0c      	ldr	r3, [pc, #48]	; (8012d14 <VL53L0X_WrByte+0x5c>)
 8012ce2:	1cba      	adds	r2, r7, #2
 8012ce4:	7812      	ldrb	r2, [r2, #0]
 8012ce6:	705a      	strb	r2, [r3, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8012ce8:	490a      	ldr	r1, [pc, #40]	; (8012d14 <VL53L0X_WrByte+0x5c>)
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2202      	movs	r2, #2
 8012cee:	0018      	movs	r0, r3
 8012cf0:	f7ff ff2b 	bl	8012b4a <_I2CWrite>
 8012cf4:	0003      	movs	r3, r0
 8012cf6:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d002      	beq.n	8012d04 <VL53L0X_WrByte+0x4c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012cfe:	193b      	adds	r3, r7, r4
 8012d00:	22ec      	movs	r2, #236	; 0xec
 8012d02:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8012d04:	230f      	movs	r3, #15
 8012d06:	18fb      	adds	r3, r7, r3
 8012d08:	781b      	ldrb	r3, [r3, #0]
 8012d0a:	b25b      	sxtb	r3, r3
}
 8012d0c:	0018      	movs	r0, r3
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	b005      	add	sp, #20
 8012d12:	bd90      	pop	{r4, r7, pc}
 8012d14:	20001294 	.word	0x20001294

08012d18 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8012d18:	b590      	push	{r4, r7, lr}
 8012d1a:	b085      	sub	sp, #20
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	0008      	movs	r0, r1
 8012d22:	0011      	movs	r1, r2
 8012d24:	1cfb      	adds	r3, r7, #3
 8012d26:	1c02      	adds	r2, r0, #0
 8012d28:	701a      	strb	r2, [r3, #0]
 8012d2a:	003b      	movs	r3, r7
 8012d2c:	1c0a      	adds	r2, r1, #0
 8012d2e:	801a      	strh	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012d30:	240f      	movs	r4, #15
 8012d32:	193b      	adds	r3, r7, r4
 8012d34:	2200      	movs	r2, #0
 8012d36:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8012d38:	4b12      	ldr	r3, [pc, #72]	; (8012d84 <VL53L0X_WrWord+0x6c>)
 8012d3a:	1cfa      	adds	r2, r7, #3
 8012d3c:	7812      	ldrb	r2, [r2, #0]
 8012d3e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 8012d40:	003b      	movs	r3, r7
 8012d42:	881b      	ldrh	r3, [r3, #0]
 8012d44:	0a1b      	lsrs	r3, r3, #8
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	b2da      	uxtb	r2, r3
 8012d4a:	4b0e      	ldr	r3, [pc, #56]	; (8012d84 <VL53L0X_WrWord+0x6c>)
 8012d4c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8012d4e:	003b      	movs	r3, r7
 8012d50:	881b      	ldrh	r3, [r3, #0]
 8012d52:	b2da      	uxtb	r2, r3
 8012d54:	4b0b      	ldr	r3, [pc, #44]	; (8012d84 <VL53L0X_WrWord+0x6c>)
 8012d56:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8012d58:	490a      	ldr	r1, [pc, #40]	; (8012d84 <VL53L0X_WrWord+0x6c>)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2203      	movs	r2, #3
 8012d5e:	0018      	movs	r0, r3
 8012d60:	f7ff fef3 	bl	8012b4a <_I2CWrite>
 8012d64:	0003      	movs	r3, r0
 8012d66:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d002      	beq.n	8012d74 <VL53L0X_WrWord+0x5c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012d6e:	193b      	adds	r3, r7, r4
 8012d70:	22ec      	movs	r2, #236	; 0xec
 8012d72:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8012d74:	230f      	movs	r3, #15
 8012d76:	18fb      	adds	r3, r7, r3
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	b25b      	sxtb	r3, r3
}
 8012d7c:	0018      	movs	r0, r3
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	b005      	add	sp, #20
 8012d82:	bd90      	pop	{r4, r7, pc}
 8012d84:	20001294 	.word	0x20001294

08012d88 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8012d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	000c      	movs	r4, r1
 8012d92:	0010      	movs	r0, r2
 8012d94:	0019      	movs	r1, r3
 8012d96:	1cfb      	adds	r3, r7, #3
 8012d98:	1c22      	adds	r2, r4, #0
 8012d9a:	701a      	strb	r2, [r3, #0]
 8012d9c:	1cbb      	adds	r3, r7, #2
 8012d9e:	1c02      	adds	r2, r0, #0
 8012da0:	701a      	strb	r2, [r3, #0]
 8012da2:	1c7b      	adds	r3, r7, #1
 8012da4:	1c0a      	adds	r2, r1, #0
 8012da6:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012da8:	250f      	movs	r5, #15
 8012daa:	197b      	adds	r3, r7, r5
 8012dac:	2200      	movs	r2, #0
 8012dae:	701a      	strb	r2, [r3, #0]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8012db0:	197c      	adds	r4, r7, r5
 8012db2:	260e      	movs	r6, #14
 8012db4:	19ba      	adds	r2, r7, r6
 8012db6:	1cfb      	adds	r3, r7, #3
 8012db8:	7819      	ldrb	r1, [r3, #0]
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	0018      	movs	r0, r3
 8012dbe:	f000 f82a 	bl	8012e16 <VL53L0X_RdByte>
 8012dc2:	0003      	movs	r3, r0
 8012dc4:	7023      	strb	r3, [r4, #0]
    if (Status) {
 8012dc6:	0029      	movs	r1, r5
 8012dc8:	187b      	adds	r3, r7, r1
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	b25b      	sxtb	r3, r3
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d118      	bne.n	8012e04 <VL53L0X_UpdateByte+0x7c>
        goto done;
    }
    data = (data & AndData) | OrData;
 8012dd2:	0030      	movs	r0, r6
 8012dd4:	183b      	adds	r3, r7, r0
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	1cba      	adds	r2, r7, #2
 8012dda:	7812      	ldrb	r2, [r2, #0]
 8012ddc:	4013      	ands	r3, r2
 8012dde:	b2da      	uxtb	r2, r3
 8012de0:	1c7b      	adds	r3, r7, #1
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	4313      	orrs	r3, r2
 8012de6:	b2da      	uxtb	r2, r3
 8012de8:	183b      	adds	r3, r7, r0
 8012dea:	701a      	strb	r2, [r3, #0]
    Status = VL53L0X_WrByte(Dev, index, data);
 8012dec:	183b      	adds	r3, r7, r0
 8012dee:	781a      	ldrb	r2, [r3, #0]
 8012df0:	187c      	adds	r4, r7, r1
 8012df2:	1cfb      	adds	r3, r7, #3
 8012df4:	7819      	ldrb	r1, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	0018      	movs	r0, r3
 8012dfa:	f7ff ff5d 	bl	8012cb8 <VL53L0X_WrByte>
 8012dfe:	0003      	movs	r3, r0
 8012e00:	7023      	strb	r3, [r4, #0]
 8012e02:	e000      	b.n	8012e06 <VL53L0X_UpdateByte+0x7e>
        goto done;
 8012e04:	46c0      	nop			; (mov r8, r8)
done:
    return Status;
 8012e06:	230f      	movs	r3, #15
 8012e08:	18fb      	adds	r3, r7, r3
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	b25b      	sxtb	r3, r3
}
 8012e0e:	0018      	movs	r0, r3
 8012e10:	46bd      	mov	sp, r7
 8012e12:	b005      	add	sp, #20
 8012e14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012e16 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8012e16:	b590      	push	{r4, r7, lr}
 8012e18:	b087      	sub	sp, #28
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	60f8      	str	r0, [r7, #12]
 8012e1e:	607a      	str	r2, [r7, #4]
 8012e20:	200b      	movs	r0, #11
 8012e22:	183b      	adds	r3, r7, r0
 8012e24:	1c0a      	adds	r2, r1, #0
 8012e26:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012e28:	2417      	movs	r4, #23
 8012e2a:	193b      	adds	r3, r7, r4
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8012e30:	1839      	adds	r1, r7, r0
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	2201      	movs	r2, #1
 8012e36:	0018      	movs	r0, r3
 8012e38:	f7ff fe87 	bl	8012b4a <_I2CWrite>
 8012e3c:	0003      	movs	r3, r0
 8012e3e:	613b      	str	r3, [r7, #16]
    if( status_int ){
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d003      	beq.n	8012e4e <VL53L0X_RdByte+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012e46:	193b      	adds	r3, r7, r4
 8012e48:	22ec      	movs	r2, #236	; 0xec
 8012e4a:	701a      	strb	r2, [r3, #0]
        goto done;
 8012e4c:	e010      	b.n	8012e70 <VL53L0X_RdByte+0x5a>
    }
    status_int = _I2CRead(Dev, data, 1);
 8012e4e:	6879      	ldr	r1, [r7, #4]
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	2201      	movs	r2, #1
 8012e54:	0018      	movs	r0, r3
 8012e56:	f7ff fe99 	bl	8012b8c <_I2CRead>
 8012e5a:	0003      	movs	r3, r0
 8012e5c:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d004      	beq.n	8012e6e <VL53L0X_RdByte+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012e64:	2317      	movs	r3, #23
 8012e66:	18fb      	adds	r3, r7, r3
 8012e68:	22ec      	movs	r2, #236	; 0xec
 8012e6a:	701a      	strb	r2, [r3, #0]
 8012e6c:	e000      	b.n	8012e70 <VL53L0X_RdByte+0x5a>
    }
done:
 8012e6e:	46c0      	nop			; (mov r8, r8)
    VL53L0X_PutI2cBus();
    return Status;
 8012e70:	2317      	movs	r3, #23
 8012e72:	18fb      	adds	r3, r7, r3
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	b25b      	sxtb	r3, r3
}
 8012e78:	0018      	movs	r0, r3
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	b007      	add	sp, #28
 8012e7e:	bd90      	pop	{r4, r7, pc}

08012e80 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8012e80:	b590      	push	{r4, r7, lr}
 8012e82:	b087      	sub	sp, #28
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	60f8      	str	r0, [r7, #12]
 8012e88:	607a      	str	r2, [r7, #4]
 8012e8a:	200b      	movs	r0, #11
 8012e8c:	183b      	adds	r3, r7, r0
 8012e8e:	1c0a      	adds	r2, r1, #0
 8012e90:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012e92:	2417      	movs	r4, #23
 8012e94:	193b      	adds	r3, r7, r4
 8012e96:	2200      	movs	r2, #0
 8012e98:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8012e9a:	1839      	adds	r1, r7, r0
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	0018      	movs	r0, r3
 8012ea2:	f7ff fe52 	bl	8012b4a <_I2CWrite>
 8012ea6:	0003      	movs	r3, r0
 8012ea8:	613b      	str	r3, [r7, #16]

    if( status_int ){
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d003      	beq.n	8012eb8 <VL53L0X_RdWord+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012eb0:	193b      	adds	r3, r7, r4
 8012eb2:	22ec      	movs	r2, #236	; 0xec
 8012eb4:	701a      	strb	r2, [r3, #0]
        goto done;
 8012eb6:	e01b      	b.n	8012ef0 <VL53L0X_RdWord+0x70>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8012eb8:	4911      	ldr	r1, [pc, #68]	; (8012f00 <VL53L0X_RdWord+0x80>)
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	2202      	movs	r2, #2
 8012ebe:	0018      	movs	r0, r3
 8012ec0:	f7ff fe64 	bl	8012b8c <_I2CRead>
 8012ec4:	0003      	movs	r3, r0
 8012ec6:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d004      	beq.n	8012ed8 <VL53L0X_RdWord+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012ece:	2317      	movs	r3, #23
 8012ed0:	18fb      	adds	r3, r7, r3
 8012ed2:	22ec      	movs	r2, #236	; 0xec
 8012ed4:	701a      	strb	r2, [r3, #0]
        goto done;
 8012ed6:	e00b      	b.n	8012ef0 <VL53L0X_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8012ed8:	4b09      	ldr	r3, [pc, #36]	; (8012f00 <VL53L0X_RdWord+0x80>)
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	b29b      	uxth	r3, r3
 8012ede:	021b      	lsls	r3, r3, #8
 8012ee0:	b29a      	uxth	r2, r3
 8012ee2:	4b07      	ldr	r3, [pc, #28]	; (8012f00 <VL53L0X_RdWord+0x80>)
 8012ee4:	785b      	ldrb	r3, [r3, #1]
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	18d3      	adds	r3, r2, r3
 8012eea:	b29a      	uxth	r2, r3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8012ef0:	2317      	movs	r3, #23
 8012ef2:	18fb      	adds	r3, r7, r3
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	b25b      	sxtb	r3, r3
}
 8012ef8:	0018      	movs	r0, r3
 8012efa:	46bd      	mov	sp, r7
 8012efc:	b007      	add	sp, #28
 8012efe:	bd90      	pop	{r4, r7, pc}
 8012f00:	20001294 	.word	0x20001294

08012f04 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8012f04:	b590      	push	{r4, r7, lr}
 8012f06:	b087      	sub	sp, #28
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	60f8      	str	r0, [r7, #12]
 8012f0c:	607a      	str	r2, [r7, #4]
 8012f0e:	200b      	movs	r0, #11
 8012f10:	183b      	adds	r3, r7, r0
 8012f12:	1c0a      	adds	r2, r1, #0
 8012f14:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8012f16:	2417      	movs	r4, #23
 8012f18:	193b      	adds	r3, r7, r4
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8012f1e:	1839      	adds	r1, r7, r0
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2201      	movs	r2, #1
 8012f24:	0018      	movs	r0, r3
 8012f26:	f7ff fe10 	bl	8012b4a <_I2CWrite>
 8012f2a:	0003      	movs	r3, r0
 8012f2c:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d003      	beq.n	8012f3c <VL53L0X_RdDWord+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012f34:	193b      	adds	r3, r7, r4
 8012f36:	22ec      	movs	r2, #236	; 0xec
 8012f38:	701a      	strb	r2, [r3, #0]
        goto done;
 8012f3a:	e01f      	b.n	8012f7c <VL53L0X_RdDWord+0x78>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8012f3c:	4913      	ldr	r1, [pc, #76]	; (8012f8c <VL53L0X_RdDWord+0x88>)
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	2204      	movs	r2, #4
 8012f42:	0018      	movs	r0, r3
 8012f44:	f7ff fe22 	bl	8012b8c <_I2CRead>
 8012f48:	0003      	movs	r3, r0
 8012f4a:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d004      	beq.n	8012f5c <VL53L0X_RdDWord+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8012f52:	2317      	movs	r3, #23
 8012f54:	18fb      	adds	r3, r7, r3
 8012f56:	22ec      	movs	r2, #236	; 0xec
 8012f58:	701a      	strb	r2, [r3, #0]
        goto done;
 8012f5a:	e00f      	b.n	8012f7c <VL53L0X_RdDWord+0x78>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8012f5c:	4b0b      	ldr	r3, [pc, #44]	; (8012f8c <VL53L0X_RdDWord+0x88>)
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	061a      	lsls	r2, r3, #24
 8012f62:	4b0a      	ldr	r3, [pc, #40]	; (8012f8c <VL53L0X_RdDWord+0x88>)
 8012f64:	785b      	ldrb	r3, [r3, #1]
 8012f66:	041b      	lsls	r3, r3, #16
 8012f68:	18d2      	adds	r2, r2, r3
 8012f6a:	4b08      	ldr	r3, [pc, #32]	; (8012f8c <VL53L0X_RdDWord+0x88>)
 8012f6c:	789b      	ldrb	r3, [r3, #2]
 8012f6e:	021b      	lsls	r3, r3, #8
 8012f70:	18d3      	adds	r3, r2, r3
 8012f72:	4a06      	ldr	r2, [pc, #24]	; (8012f8c <VL53L0X_RdDWord+0x88>)
 8012f74:	78d2      	ldrb	r2, [r2, #3]
 8012f76:	189a      	adds	r2, r3, r2
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8012f7c:	2317      	movs	r3, #23
 8012f7e:	18fb      	adds	r3, r7, r3
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	b25b      	sxtb	r3, r3
}
 8012f84:	0018      	movs	r0, r3
 8012f86:	46bd      	mov	sp, r7
 8012f88:	b007      	add	sp, #28
 8012f8a:	bd90      	pop	{r4, r7, pc}
 8012f8c:	20001294 	.word	0x20001294

08012f90 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8012f90:	b590      	push	{r4, r7, lr}
 8012f92:	b085      	sub	sp, #20
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8012f98:	240f      	movs	r4, #15
 8012f9a:	193b      	adds	r3, r7, r4
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	701a      	strb	r2, [r3, #0]

    // do nothing
    VL53L0X_OsDelay();
 8012fa0:	2002      	movs	r0, #2
 8012fa2:	f7f3 fd89 	bl	8006ab8 <HAL_Delay>
    return status;
 8012fa6:	193b      	adds	r3, r7, r4
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	b25b      	sxtb	r3, r3
}
 8012fac:	0018      	movs	r0, r3
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	b005      	add	sp, #20
 8012fb2:	bd90      	pop	{r4, r7, pc}

08012fb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	0002      	movs	r2, r0
 8012fbc:	1dbb      	adds	r3, r7, #6
 8012fbe:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012fc4:	1dbb      	adds	r3, r7, #6
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	5e9b      	ldrsh	r3, [r3, r2]
 8012fca:	2b84      	cmp	r3, #132	; 0x84
 8012fcc:	d006      	beq.n	8012fdc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8012fce:	1dbb      	adds	r3, r7, #6
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	5e9a      	ldrsh	r2, [r3, r2]
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	18d3      	adds	r3, r2, r3
 8012fd8:	3303      	adds	r3, #3
 8012fda:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
}
 8012fde:	0018      	movs	r0, r3
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	b004      	add	sp, #16
 8012fe4:	bd80      	pop	{r7, pc}

08012fe6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012fe6:	b580      	push	{r7, lr}
 8012fe8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012fea:	f000 fd2b 	bl	8013a44 <vTaskStartScheduler>
  
  return osOK;
 8012fee:	2300      	movs	r3, #0
}
 8012ff0:	0018      	movs	r0, r3
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ff8:	b087      	sub	sp, #28
 8012ffa:	af02      	add	r7, sp, #8
 8012ffc:	6078      	str	r0, [r7, #4]
 8012ffe:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	685c      	ldr	r4, [r3, #4]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801300c:	b29e      	uxth	r6, r3
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2208      	movs	r2, #8
 8013012:	5e9b      	ldrsh	r3, [r3, r2]
 8013014:	0018      	movs	r0, r3
 8013016:	f7ff ffcd 	bl	8012fb4 <makeFreeRtosPriority>
 801301a:	0001      	movs	r1, r0
 801301c:	683a      	ldr	r2, [r7, #0]
 801301e:	230c      	movs	r3, #12
 8013020:	18fb      	adds	r3, r7, r3
 8013022:	9301      	str	r3, [sp, #4]
 8013024:	9100      	str	r1, [sp, #0]
 8013026:	0013      	movs	r3, r2
 8013028:	0032      	movs	r2, r6
 801302a:	0029      	movs	r1, r5
 801302c:	0020      	movs	r0, r4
 801302e:	f000 fb39 	bl	80136a4 <xTaskCreate>
 8013032:	0003      	movs	r3, r0
 8013034:	2b01      	cmp	r3, #1
 8013036:	d001      	beq.n	801303c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8013038:	2300      	movs	r3, #0
 801303a:	e000      	b.n	801303e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 801303c:	68fb      	ldr	r3, [r7, #12]
}
 801303e:	0018      	movs	r0, r3
 8013040:	46bd      	mov	sp, r7
 8013042:	b005      	add	sp, #20
 8013044:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013046 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013046:	b580      	push	{r7, lr}
 8013048:	b084      	sub	sp, #16
 801304a:	af00      	add	r7, sp, #0
 801304c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d001      	beq.n	801305c <osDelay+0x16>
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	e000      	b.n	801305e <osDelay+0x18>
 801305c:	2301      	movs	r3, #1
 801305e:	0018      	movs	r0, r3
 8013060:	f000 fc5c 	bl	801391c <vTaskDelay>
  
  return osOK;
 8013064:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013066:	0018      	movs	r0, r3
 8013068:	46bd      	mov	sp, r7
 801306a:	b004      	add	sp, #16
 801306c:	bd80      	pop	{r7, pc}

0801306e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801306e:	b580      	push	{r7, lr}
 8013070:	b082      	sub	sp, #8
 8013072:	af00      	add	r7, sp, #0
 8013074:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	3308      	adds	r3, #8
 801307a:	001a      	movs	r2, r3
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2201      	movs	r2, #1
 8013084:	4252      	negs	r2, r2
 8013086:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	3308      	adds	r3, #8
 801308c:	001a      	movs	r2, r3
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	3308      	adds	r3, #8
 8013096:	001a      	movs	r2, r3
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2200      	movs	r2, #0
 80130a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80130a2:	46c0      	nop			; (mov r8, r8)
 80130a4:	46bd      	mov	sp, r7
 80130a6:	b002      	add	sp, #8
 80130a8:	bd80      	pop	{r7, pc}

080130aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80130aa:	b580      	push	{r7, lr}
 80130ac:	b082      	sub	sp, #8
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2200      	movs	r2, #0
 80130b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80130b8:	46c0      	nop			; (mov r8, r8)
 80130ba:	46bd      	mov	sp, r7
 80130bc:	b002      	add	sp, #8
 80130be:	bd80      	pop	{r7, pc}

080130c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	68fa      	ldr	r2, [r7, #12]
 80130d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	689a      	ldr	r2, [r3, #8]
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	689b      	ldr	r3, [r3, #8]
 80130e2:	683a      	ldr	r2, [r7, #0]
 80130e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	683a      	ldr	r2, [r7, #0]
 80130ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	1c5a      	adds	r2, r3, #1
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	601a      	str	r2, [r3, #0]
}
 80130fc:	46c0      	nop			; (mov r8, r8)
 80130fe:	46bd      	mov	sp, r7
 8013100:	b004      	add	sp, #16
 8013102:	bd80      	pop	{r7, pc}

08013104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	3301      	adds	r3, #1
 8013118:	d103      	bne.n	8013122 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	691b      	ldr	r3, [r3, #16]
 801311e:	60fb      	str	r3, [r7, #12]
 8013120:	e00c      	b.n	801313c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	3308      	adds	r3, #8
 8013126:	60fb      	str	r3, [r7, #12]
 8013128:	e002      	b.n	8013130 <vListInsert+0x2c>
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	60fb      	str	r3, [r7, #12]
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	685b      	ldr	r3, [r3, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	68ba      	ldr	r2, [r7, #8]
 8013138:	429a      	cmp	r2, r3
 801313a:	d2f6      	bcs.n	801312a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	685a      	ldr	r2, [r3, #4]
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	683a      	ldr	r2, [r7, #0]
 801314a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	68fa      	ldr	r2, [r7, #12]
 8013150:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	683a      	ldr	r2, [r7, #0]
 8013156:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	687a      	ldr	r2, [r7, #4]
 801315c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	1c5a      	adds	r2, r3, #1
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	601a      	str	r2, [r3, #0]
}
 8013168:	46c0      	nop			; (mov r8, r8)
 801316a:	46bd      	mov	sp, r7
 801316c:	b004      	add	sp, #16
 801316e:	bd80      	pop	{r7, pc}

08013170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	691b      	ldr	r3, [r3, #16]
 801317c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	6892      	ldr	r2, [r2, #8]
 8013186:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	689b      	ldr	r3, [r3, #8]
 801318c:	687a      	ldr	r2, [r7, #4]
 801318e:	6852      	ldr	r2, [r2, #4]
 8013190:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	687a      	ldr	r2, [r7, #4]
 8013198:	429a      	cmp	r2, r3
 801319a:	d103      	bne.n	80131a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	689a      	ldr	r2, [r3, #8]
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	1e5a      	subs	r2, r3, #1
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	681b      	ldr	r3, [r3, #0]
}
 80131b8:	0018      	movs	r0, r3
 80131ba:	46bd      	mov	sp, r7
 80131bc:	b004      	add	sp, #16
 80131be:	bd80      	pop	{r7, pc}

080131c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b084      	sub	sp, #16
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d101      	bne.n	80131d8 <xQueueGenericReset+0x18>
 80131d4:	b672      	cpsid	i
 80131d6:	e7fe      	b.n	80131d6 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80131d8:	f001 fbd2 	bl	8014980 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	681a      	ldr	r2, [r3, #0]
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131e8:	434b      	muls	r3, r1
 80131ea:	18d2      	adds	r2, r2, r3
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2200      	movs	r2, #0
 80131f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	681a      	ldr	r2, [r3, #0]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681a      	ldr	r2, [r3, #0]
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013206:	1e59      	subs	r1, r3, #1
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801320c:	434b      	muls	r3, r1
 801320e:	18d2      	adds	r2, r2, r3
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2244      	movs	r2, #68	; 0x44
 8013218:	21ff      	movs	r1, #255	; 0xff
 801321a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2245      	movs	r2, #69	; 0x45
 8013220:	21ff      	movs	r1, #255	; 0xff
 8013222:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d10d      	bne.n	8013246 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	691b      	ldr	r3, [r3, #16]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d013      	beq.n	801325a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	3310      	adds	r3, #16
 8013236:	0018      	movs	r0, r3
 8013238:	f000 fea0 	bl	8013f7c <xTaskRemoveFromEventList>
 801323c:	1e03      	subs	r3, r0, #0
 801323e:	d00c      	beq.n	801325a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013240:	f001 fb8e 	bl	8014960 <vPortYield>
 8013244:	e009      	b.n	801325a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	3310      	adds	r3, #16
 801324a:	0018      	movs	r0, r3
 801324c:	f7ff ff0f 	bl	801306e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	3324      	adds	r3, #36	; 0x24
 8013254:	0018      	movs	r0, r3
 8013256:	f7ff ff0a 	bl	801306e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801325a:	f001 fba3 	bl	80149a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801325e:	2301      	movs	r3, #1
}
 8013260:	0018      	movs	r0, r3
 8013262:	46bd      	mov	sp, r7
 8013264:	b004      	add	sp, #16
 8013266:	bd80      	pop	{r7, pc}

08013268 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013268:	b590      	push	{r4, r7, lr}
 801326a:	b08b      	sub	sp, #44	; 0x2c
 801326c:	af02      	add	r7, sp, #8
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	1dfb      	adds	r3, r7, #7
 8013274:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d101      	bne.n	8013280 <xQueueGenericCreate+0x18>
 801327c:	b672      	cpsid	i
 801327e:	e7fe      	b.n	801327e <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	68ba      	ldr	r2, [r7, #8]
 8013284:	4353      	muls	r3, r2
 8013286:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013288:	69fb      	ldr	r3, [r7, #28]
 801328a:	3350      	adds	r3, #80	; 0x50
 801328c:	0018      	movs	r0, r3
 801328e:	f001 fc0f 	bl	8014ab0 <pvPortMalloc>
 8013292:	0003      	movs	r3, r0
 8013294:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8013296:	69bb      	ldr	r3, [r7, #24]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d00e      	beq.n	80132ba <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801329c:	69bb      	ldr	r3, [r7, #24]
 801329e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	3350      	adds	r3, #80	; 0x50
 80132a4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80132a6:	1dfb      	adds	r3, r7, #7
 80132a8:	781c      	ldrb	r4, [r3, #0]
 80132aa:	697a      	ldr	r2, [r7, #20]
 80132ac:	68b9      	ldr	r1, [r7, #8]
 80132ae:	68f8      	ldr	r0, [r7, #12]
 80132b0:	69bb      	ldr	r3, [r7, #24]
 80132b2:	9300      	str	r3, [sp, #0]
 80132b4:	0023      	movs	r3, r4
 80132b6:	f000 f805 	bl	80132c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80132ba:	69bb      	ldr	r3, [r7, #24]
	}
 80132bc:	0018      	movs	r0, r3
 80132be:	46bd      	mov	sp, r7
 80132c0:	b009      	add	sp, #36	; 0x24
 80132c2:	bd90      	pop	{r4, r7, pc}

080132c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b084      	sub	sp, #16
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
 80132d0:	001a      	movs	r2, r3
 80132d2:	1cfb      	adds	r3, r7, #3
 80132d4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d103      	bne.n	80132e4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80132dc:	69bb      	ldr	r3, [r7, #24]
 80132de:	69ba      	ldr	r2, [r7, #24]
 80132e0:	601a      	str	r2, [r3, #0]
 80132e2:	e002      	b.n	80132ea <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80132e4:	69bb      	ldr	r3, [r7, #24]
 80132e6:	687a      	ldr	r2, [r7, #4]
 80132e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80132ea:	69bb      	ldr	r3, [r7, #24]
 80132ec:	68fa      	ldr	r2, [r7, #12]
 80132ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	68ba      	ldr	r2, [r7, #8]
 80132f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	2101      	movs	r1, #1
 80132fa:	0018      	movs	r0, r3
 80132fc:	f7ff ff60 	bl	80131c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013300:	69bb      	ldr	r3, [r7, #24]
 8013302:	1cfa      	adds	r2, r7, #3
 8013304:	214c      	movs	r1, #76	; 0x4c
 8013306:	7812      	ldrb	r2, [r2, #0]
 8013308:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801330a:	46c0      	nop			; (mov r8, r8)
 801330c:	46bd      	mov	sp, r7
 801330e:	b004      	add	sp, #16
 8013310:	bd80      	pop	{r7, pc}

08013312 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013312:	b580      	push	{r7, lr}
 8013314:	b088      	sub	sp, #32
 8013316:	af00      	add	r7, sp, #0
 8013318:	6078      	str	r0, [r7, #4]
 801331a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d101      	bne.n	801332a <xQueueGiveFromISR+0x18>
 8013326:	b672      	cpsid	i
 8013328:	e7fe      	b.n	8013328 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801332a:	69bb      	ldr	r3, [r7, #24]
 801332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801332e:	2b00      	cmp	r3, #0
 8013330:	d001      	beq.n	8013336 <xQueueGiveFromISR+0x24>
 8013332:	b672      	cpsid	i
 8013334:	e7fe      	b.n	8013334 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013336:	69bb      	ldr	r3, [r7, #24]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d103      	bne.n	8013346 <xQueueGiveFromISR+0x34>
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	689b      	ldr	r3, [r3, #8]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d101      	bne.n	801334a <xQueueGiveFromISR+0x38>
 8013346:	2301      	movs	r3, #1
 8013348:	e000      	b.n	801334c <xQueueGiveFromISR+0x3a>
 801334a:	2300      	movs	r3, #0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d101      	bne.n	8013354 <xQueueGiveFromISR+0x42>
 8013350:	b672      	cpsid	i
 8013352:	e7fe      	b.n	8013352 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013354:	f001 fb3e 	bl	80149d4 <ulSetInterruptMaskFromISR>
 8013358:	0003      	movs	r3, r0
 801335a:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801335c:	69bb      	ldr	r3, [r7, #24]
 801335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013360:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013362:	69bb      	ldr	r3, [r7, #24]
 8013364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013366:	693a      	ldr	r2, [r7, #16]
 8013368:	429a      	cmp	r2, r3
 801336a:	d22c      	bcs.n	80133c6 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801336c:	200f      	movs	r0, #15
 801336e:	183b      	adds	r3, r7, r0
 8013370:	69ba      	ldr	r2, [r7, #24]
 8013372:	2145      	movs	r1, #69	; 0x45
 8013374:	5c52      	ldrb	r2, [r2, r1]
 8013376:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	1c5a      	adds	r2, r3, #1
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013380:	183b      	adds	r3, r7, r0
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	b25b      	sxtb	r3, r3
 8013386:	3301      	adds	r3, #1
 8013388:	d111      	bne.n	80133ae <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801338a:	69bb      	ldr	r3, [r7, #24]
 801338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801338e:	2b00      	cmp	r3, #0
 8013390:	d016      	beq.n	80133c0 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	3324      	adds	r3, #36	; 0x24
 8013396:	0018      	movs	r0, r3
 8013398:	f000 fdf0 	bl	8013f7c <xTaskRemoveFromEventList>
 801339c:	1e03      	subs	r3, r0, #0
 801339e:	d00f      	beq.n	80133c0 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d00c      	beq.n	80133c0 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	2201      	movs	r2, #1
 80133aa:	601a      	str	r2, [r3, #0]
 80133ac:	e008      	b.n	80133c0 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80133ae:	230f      	movs	r3, #15
 80133b0:	18fb      	adds	r3, r7, r3
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	3301      	adds	r3, #1
 80133b6:	b2db      	uxtb	r3, r3
 80133b8:	b259      	sxtb	r1, r3
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	2245      	movs	r2, #69	; 0x45
 80133be:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80133c0:	2301      	movs	r3, #1
 80133c2:	61fb      	str	r3, [r7, #28]
 80133c4:	e001      	b.n	80133ca <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80133c6:	2300      	movs	r3, #0
 80133c8:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	0018      	movs	r0, r3
 80133ce:	f001 fb07 	bl	80149e0 <vClearInterruptMaskFromISR>

	return xReturn;
 80133d2:	69fb      	ldr	r3, [r7, #28]
}
 80133d4:	0018      	movs	r0, r3
 80133d6:	46bd      	mov	sp, r7
 80133d8:	b008      	add	sp, #32
 80133da:	bd80      	pop	{r7, pc}

080133dc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b08a      	sub	sp, #40	; 0x28
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80133e6:	2300      	movs	r3, #0
 80133e8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80133ee:	2300      	movs	r3, #0
 80133f0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80133f2:	69fb      	ldr	r3, [r7, #28]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d101      	bne.n	80133fc <xQueueSemaphoreTake+0x20>
 80133f8:	b672      	cpsid	i
 80133fa:	e7fe      	b.n	80133fa <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80133fc:	69fb      	ldr	r3, [r7, #28]
 80133fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013400:	2b00      	cmp	r3, #0
 8013402:	d001      	beq.n	8013408 <xQueueSemaphoreTake+0x2c>
 8013404:	b672      	cpsid	i
 8013406:	e7fe      	b.n	8013406 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013408:	f001 f80c 	bl	8014424 <xTaskGetSchedulerState>
 801340c:	1e03      	subs	r3, r0, #0
 801340e:	d102      	bne.n	8013416 <xQueueSemaphoreTake+0x3a>
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d101      	bne.n	801341a <xQueueSemaphoreTake+0x3e>
 8013416:	2301      	movs	r3, #1
 8013418:	e000      	b.n	801341c <xQueueSemaphoreTake+0x40>
 801341a:	2300      	movs	r3, #0
 801341c:	2b00      	cmp	r3, #0
 801341e:	d101      	bne.n	8013424 <xQueueSemaphoreTake+0x48>
 8013420:	b672      	cpsid	i
 8013422:	e7fe      	b.n	8013422 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013424:	f001 faac 	bl	8014980 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801342c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d01d      	beq.n	8013470 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013434:	69bb      	ldr	r3, [r7, #24]
 8013436:	1e5a      	subs	r2, r3, #1
 8013438:	69fb      	ldr	r3, [r7, #28]
 801343a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801343c:	69fb      	ldr	r3, [r7, #28]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d104      	bne.n	801344e <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013444:	f001 f998 	bl	8014778 <pvTaskIncrementMutexHeldCount>
 8013448:	0002      	movs	r2, r0
 801344a:	69fb      	ldr	r3, [r7, #28]
 801344c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	691b      	ldr	r3, [r3, #16]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d008      	beq.n	8013468 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013456:	69fb      	ldr	r3, [r7, #28]
 8013458:	3310      	adds	r3, #16
 801345a:	0018      	movs	r0, r3
 801345c:	f000 fd8e 	bl	8013f7c <xTaskRemoveFromEventList>
 8013460:	1e03      	subs	r3, r0, #0
 8013462:	d001      	beq.n	8013468 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013464:	f001 fa7c 	bl	8014960 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013468:	f001 fa9c 	bl	80149a4 <vPortExitCritical>
				return pdPASS;
 801346c:	2301      	movs	r3, #1
 801346e:	e08b      	b.n	8013588 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d108      	bne.n	8013488 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013476:	6a3b      	ldr	r3, [r7, #32]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d001      	beq.n	8013480 <xQueueSemaphoreTake+0xa4>
 801347c:	b672      	cpsid	i
 801347e:	e7fe      	b.n	801347e <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013480:	f001 fa90 	bl	80149a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013484:	2300      	movs	r3, #0
 8013486:	e07f      	b.n	8013588 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348a:	2b00      	cmp	r3, #0
 801348c:	d106      	bne.n	801349c <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801348e:	230c      	movs	r3, #12
 8013490:	18fb      	adds	r3, r7, r3
 8013492:	0018      	movs	r0, r3
 8013494:	f000 fdce 	bl	8014034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013498:	2301      	movs	r3, #1
 801349a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801349c:	f001 fa82 	bl	80149a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80134a0:	f000 fb08 	bl	8013ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80134a4:	f001 fa6c 	bl	8014980 <vPortEnterCritical>
 80134a8:	69fb      	ldr	r3, [r7, #28]
 80134aa:	2244      	movs	r2, #68	; 0x44
 80134ac:	5c9b      	ldrb	r3, [r3, r2]
 80134ae:	b25b      	sxtb	r3, r3
 80134b0:	3301      	adds	r3, #1
 80134b2:	d103      	bne.n	80134bc <xQueueSemaphoreTake+0xe0>
 80134b4:	69fb      	ldr	r3, [r7, #28]
 80134b6:	2244      	movs	r2, #68	; 0x44
 80134b8:	2100      	movs	r1, #0
 80134ba:	5499      	strb	r1, [r3, r2]
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	2245      	movs	r2, #69	; 0x45
 80134c0:	5c9b      	ldrb	r3, [r3, r2]
 80134c2:	b25b      	sxtb	r3, r3
 80134c4:	3301      	adds	r3, #1
 80134c6:	d103      	bne.n	80134d0 <xQueueSemaphoreTake+0xf4>
 80134c8:	69fb      	ldr	r3, [r7, #28]
 80134ca:	2245      	movs	r2, #69	; 0x45
 80134cc:	2100      	movs	r1, #0
 80134ce:	5499      	strb	r1, [r3, r2]
 80134d0:	f001 fa68 	bl	80149a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80134d4:	003a      	movs	r2, r7
 80134d6:	230c      	movs	r3, #12
 80134d8:	18fb      	adds	r3, r7, r3
 80134da:	0011      	movs	r1, r2
 80134dc:	0018      	movs	r0, r3
 80134de:	f000 fdbd 	bl	801405c <xTaskCheckForTimeOut>
 80134e2:	1e03      	subs	r3, r0, #0
 80134e4:	d12e      	bne.n	8013544 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134e6:	69fb      	ldr	r3, [r7, #28]
 80134e8:	0018      	movs	r0, r3
 80134ea:	f000 f8c5 	bl	8013678 <prvIsQueueEmpty>
 80134ee:	1e03      	subs	r3, r0, #0
 80134f0:	d021      	beq.n	8013536 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134f2:	69fb      	ldr	r3, [r7, #28]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d10a      	bne.n	8013510 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 80134fa:	f001 fa41 	bl	8014980 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80134fe:	69fb      	ldr	r3, [r7, #28]
 8013500:	689b      	ldr	r3, [r3, #8]
 8013502:	0018      	movs	r0, r3
 8013504:	f000 ffaa 	bl	801445c <xTaskPriorityInherit>
 8013508:	0003      	movs	r3, r0
 801350a:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 801350c:	f001 fa4a 	bl	80149a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013510:	69fb      	ldr	r3, [r7, #28]
 8013512:	3324      	adds	r3, #36	; 0x24
 8013514:	683a      	ldr	r2, [r7, #0]
 8013516:	0011      	movs	r1, r2
 8013518:	0018      	movs	r0, r3
 801351a:	f000 fd11 	bl	8013f40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	0018      	movs	r0, r3
 8013522:	f000 f84b 	bl	80135bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013526:	f000 fad1 	bl	8013acc <xTaskResumeAll>
 801352a:	1e03      	subs	r3, r0, #0
 801352c:	d000      	beq.n	8013530 <xQueueSemaphoreTake+0x154>
 801352e:	e779      	b.n	8013424 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8013530:	f001 fa16 	bl	8014960 <vPortYield>
 8013534:	e776      	b.n	8013424 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013536:	69fb      	ldr	r3, [r7, #28]
 8013538:	0018      	movs	r0, r3
 801353a:	f000 f83f 	bl	80135bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801353e:	f000 fac5 	bl	8013acc <xTaskResumeAll>
 8013542:	e76f      	b.n	8013424 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013544:	69fb      	ldr	r3, [r7, #28]
 8013546:	0018      	movs	r0, r3
 8013548:	f000 f838 	bl	80135bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801354c:	f000 fabe 	bl	8013acc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013550:	69fb      	ldr	r3, [r7, #28]
 8013552:	0018      	movs	r0, r3
 8013554:	f000 f890 	bl	8013678 <prvIsQueueEmpty>
 8013558:	1e03      	subs	r3, r0, #0
 801355a:	d100      	bne.n	801355e <xQueueSemaphoreTake+0x182>
 801355c:	e762      	b.n	8013424 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801355e:	6a3b      	ldr	r3, [r7, #32]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d010      	beq.n	8013586 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8013564:	f001 fa0c 	bl	8014980 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	0018      	movs	r0, r3
 801356c:	f000 f810 	bl	8013590 <prvGetDisinheritPriorityAfterTimeout>
 8013570:	0003      	movs	r3, r0
 8013572:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013574:	69fb      	ldr	r3, [r7, #28]
 8013576:	689b      	ldr	r3, [r3, #8]
 8013578:	697a      	ldr	r2, [r7, #20]
 801357a:	0011      	movs	r1, r2
 801357c:	0018      	movs	r0, r3
 801357e:	f000 ffd5 	bl	801452c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013582:	f001 fa0f 	bl	80149a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013586:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013588:	0018      	movs	r0, r3
 801358a:	46bd      	mov	sp, r7
 801358c:	b00a      	add	sp, #40	; 0x28
 801358e:	bd80      	pop	{r7, pc}

08013590 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013590:	b580      	push	{r7, lr}
 8013592:	b084      	sub	sp, #16
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801359c:	2b00      	cmp	r3, #0
 801359e:	d006      	beq.n	80135ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2207      	movs	r2, #7
 80135a8:	1ad3      	subs	r3, r2, r3
 80135aa:	60fb      	str	r3, [r7, #12]
 80135ac:	e001      	b.n	80135b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80135ae:	2300      	movs	r3, #0
 80135b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80135b2:	68fb      	ldr	r3, [r7, #12]
	}
 80135b4:	0018      	movs	r0, r3
 80135b6:	46bd      	mov	sp, r7
 80135b8:	b004      	add	sp, #16
 80135ba:	bd80      	pop	{r7, pc}

080135bc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80135c4:	f001 f9dc 	bl	8014980 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80135c8:	230f      	movs	r3, #15
 80135ca:	18fb      	adds	r3, r7, r3
 80135cc:	687a      	ldr	r2, [r7, #4]
 80135ce:	2145      	movs	r1, #69	; 0x45
 80135d0:	5c52      	ldrb	r2, [r2, r1]
 80135d2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135d4:	e013      	b.n	80135fe <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d016      	beq.n	801360c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	3324      	adds	r3, #36	; 0x24
 80135e2:	0018      	movs	r0, r3
 80135e4:	f000 fcca 	bl	8013f7c <xTaskRemoveFromEventList>
 80135e8:	1e03      	subs	r3, r0, #0
 80135ea:	d001      	beq.n	80135f0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80135ec:	f000 fd86 	bl	80140fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80135f0:	210f      	movs	r1, #15
 80135f2:	187b      	adds	r3, r7, r1
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	3b01      	subs	r3, #1
 80135f8:	b2da      	uxtb	r2, r3
 80135fa:	187b      	adds	r3, r7, r1
 80135fc:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135fe:	230f      	movs	r3, #15
 8013600:	18fb      	adds	r3, r7, r3
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	b25b      	sxtb	r3, r3
 8013606:	2b00      	cmp	r3, #0
 8013608:	dce5      	bgt.n	80135d6 <prvUnlockQueue+0x1a>
 801360a:	e000      	b.n	801360e <prvUnlockQueue+0x52>
					break;
 801360c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2245      	movs	r2, #69	; 0x45
 8013612:	21ff      	movs	r1, #255	; 0xff
 8013614:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8013616:	f001 f9c5 	bl	80149a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801361a:	f001 f9b1 	bl	8014980 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801361e:	230e      	movs	r3, #14
 8013620:	18fb      	adds	r3, r7, r3
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	2144      	movs	r1, #68	; 0x44
 8013626:	5c52      	ldrb	r2, [r2, r1]
 8013628:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801362a:	e013      	b.n	8013654 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	691b      	ldr	r3, [r3, #16]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d016      	beq.n	8013662 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	3310      	adds	r3, #16
 8013638:	0018      	movs	r0, r3
 801363a:	f000 fc9f 	bl	8013f7c <xTaskRemoveFromEventList>
 801363e:	1e03      	subs	r3, r0, #0
 8013640:	d001      	beq.n	8013646 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8013642:	f000 fd5b 	bl	80140fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013646:	210e      	movs	r1, #14
 8013648:	187b      	adds	r3, r7, r1
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	3b01      	subs	r3, #1
 801364e:	b2da      	uxtb	r2, r3
 8013650:	187b      	adds	r3, r7, r1
 8013652:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013654:	230e      	movs	r3, #14
 8013656:	18fb      	adds	r3, r7, r3
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	b25b      	sxtb	r3, r3
 801365c:	2b00      	cmp	r3, #0
 801365e:	dce5      	bgt.n	801362c <prvUnlockQueue+0x70>
 8013660:	e000      	b.n	8013664 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8013662:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2244      	movs	r2, #68	; 0x44
 8013668:	21ff      	movs	r1, #255	; 0xff
 801366a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 801366c:	f001 f99a 	bl	80149a4 <vPortExitCritical>
}
 8013670:	46c0      	nop			; (mov r8, r8)
 8013672:	46bd      	mov	sp, r7
 8013674:	b004      	add	sp, #16
 8013676:	bd80      	pop	{r7, pc}

08013678 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b084      	sub	sp, #16
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013680:	f001 f97e 	bl	8014980 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013688:	2b00      	cmp	r3, #0
 801368a:	d102      	bne.n	8013692 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801368c:	2301      	movs	r3, #1
 801368e:	60fb      	str	r3, [r7, #12]
 8013690:	e001      	b.n	8013696 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013692:	2300      	movs	r3, #0
 8013694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013696:	f001 f985 	bl	80149a4 <vPortExitCritical>

	return xReturn;
 801369a:	68fb      	ldr	r3, [r7, #12]
}
 801369c:	0018      	movs	r0, r3
 801369e:	46bd      	mov	sp, r7
 80136a0:	b004      	add	sp, #16
 80136a2:	bd80      	pop	{r7, pc}

080136a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80136a4:	b590      	push	{r4, r7, lr}
 80136a6:	b08d      	sub	sp, #52	; 0x34
 80136a8:	af04      	add	r7, sp, #16
 80136aa:	60f8      	str	r0, [r7, #12]
 80136ac:	60b9      	str	r1, [r7, #8]
 80136ae:	603b      	str	r3, [r7, #0]
 80136b0:	1dbb      	adds	r3, r7, #6
 80136b2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80136b4:	1dbb      	adds	r3, r7, #6
 80136b6:	881b      	ldrh	r3, [r3, #0]
 80136b8:	009b      	lsls	r3, r3, #2
 80136ba:	0018      	movs	r0, r3
 80136bc:	f001 f9f8 	bl	8014ab0 <pvPortMalloc>
 80136c0:	0003      	movs	r3, r0
 80136c2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d010      	beq.n	80136ec <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80136ca:	2060      	movs	r0, #96	; 0x60
 80136cc:	f001 f9f0 	bl	8014ab0 <pvPortMalloc>
 80136d0:	0003      	movs	r3, r0
 80136d2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d003      	beq.n	80136e2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	697a      	ldr	r2, [r7, #20]
 80136de:	631a      	str	r2, [r3, #48]	; 0x30
 80136e0:	e006      	b.n	80136f0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	0018      	movs	r0, r3
 80136e6:	f001 fa8f 	bl	8014c08 <vPortFree>
 80136ea:	e001      	b.n	80136f0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80136ec:	2300      	movs	r3, #0
 80136ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d016      	beq.n	8013724 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80136f6:	1dbb      	adds	r3, r7, #6
 80136f8:	881a      	ldrh	r2, [r3, #0]
 80136fa:	683c      	ldr	r4, [r7, #0]
 80136fc:	68b9      	ldr	r1, [r7, #8]
 80136fe:	68f8      	ldr	r0, [r7, #12]
 8013700:	2300      	movs	r3, #0
 8013702:	9303      	str	r3, [sp, #12]
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	9302      	str	r3, [sp, #8]
 8013708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801370a:	9301      	str	r3, [sp, #4]
 801370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370e:	9300      	str	r3, [sp, #0]
 8013710:	0023      	movs	r3, r4
 8013712:	f000 f80f 	bl	8013734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	0018      	movs	r0, r3
 801371a:	f000 f897 	bl	801384c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801371e:	2301      	movs	r3, #1
 8013720:	61bb      	str	r3, [r7, #24]
 8013722:	e002      	b.n	801372a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013724:	2301      	movs	r3, #1
 8013726:	425b      	negs	r3, r3
 8013728:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801372a:	69bb      	ldr	r3, [r7, #24]
	}
 801372c:	0018      	movs	r0, r3
 801372e:	46bd      	mov	sp, r7
 8013730:	b009      	add	sp, #36	; 0x24
 8013732:	bd90      	pop	{r4, r7, pc}

08013734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b086      	sub	sp, #24
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
 8013740:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013744:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	009b      	lsls	r3, r3, #2
 801374a:	001a      	movs	r2, r3
 801374c:	21a5      	movs	r1, #165	; 0xa5
 801374e:	f001 fba8 	bl	8014ea2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	493b      	ldr	r1, [pc, #236]	; (8013848 <prvInitialiseNewTask+0x114>)
 801375a:	468c      	mov	ip, r1
 801375c:	4463      	add	r3, ip
 801375e:	009b      	lsls	r3, r3, #2
 8013760:	18d3      	adds	r3, r2, r3
 8013762:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	2207      	movs	r2, #7
 8013768:	4393      	bics	r3, r2
 801376a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	2207      	movs	r2, #7
 8013770:	4013      	ands	r3, r2
 8013772:	d001      	beq.n	8013778 <prvInitialiseNewTask+0x44>
 8013774:	b672      	cpsid	i
 8013776:	e7fe      	b.n	8013776 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d020      	beq.n	80137c0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801377e:	2300      	movs	r3, #0
 8013780:	617b      	str	r3, [r7, #20]
 8013782:	e013      	b.n	80137ac <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013784:	68ba      	ldr	r2, [r7, #8]
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	18d3      	adds	r3, r2, r3
 801378a:	7818      	ldrb	r0, [r3, #0]
 801378c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801378e:	2134      	movs	r1, #52	; 0x34
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	18d3      	adds	r3, r2, r3
 8013794:	185b      	adds	r3, r3, r1
 8013796:	1c02      	adds	r2, r0, #0
 8013798:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801379a:	68ba      	ldr	r2, [r7, #8]
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	18d3      	adds	r3, r2, r3
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d006      	beq.n	80137b4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	3301      	adds	r3, #1
 80137aa:	617b      	str	r3, [r7, #20]
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	2b0f      	cmp	r3, #15
 80137b0:	d9e8      	bls.n	8013784 <prvInitialiseNewTask+0x50>
 80137b2:	e000      	b.n	80137b6 <prvInitialiseNewTask+0x82>
			{
				break;
 80137b4:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80137b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b8:	2243      	movs	r2, #67	; 0x43
 80137ba:	2100      	movs	r1, #0
 80137bc:	5499      	strb	r1, [r3, r2]
 80137be:	e003      	b.n	80137c8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80137c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c2:	2234      	movs	r2, #52	; 0x34
 80137c4:	2100      	movs	r1, #0
 80137c6:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80137c8:	6a3b      	ldr	r3, [r7, #32]
 80137ca:	2b06      	cmp	r3, #6
 80137cc:	d901      	bls.n	80137d2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80137ce:	2306      	movs	r3, #6
 80137d0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80137d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d4:	6a3a      	ldr	r2, [r7, #32]
 80137d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80137d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137da:	6a3a      	ldr	r2, [r7, #32]
 80137dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80137de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e0:	2200      	movs	r2, #0
 80137e2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80137e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e6:	3304      	adds	r3, #4
 80137e8:	0018      	movs	r0, r3
 80137ea:	f7ff fc5e 	bl	80130aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80137ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f0:	3318      	adds	r3, #24
 80137f2:	0018      	movs	r0, r3
 80137f4:	f7ff fc59 	bl	80130aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80137f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137fe:	6a3b      	ldr	r3, [r7, #32]
 8013800:	2207      	movs	r2, #7
 8013802:	1ad2      	subs	r2, r2, r3
 8013804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013806:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801380a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801380c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 801380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013810:	2200      	movs	r2, #0
 8013812:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013816:	2200      	movs	r2, #0
 8013818:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801381c:	225c      	movs	r2, #92	; 0x5c
 801381e:	2100      	movs	r1, #0
 8013820:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013822:	683a      	ldr	r2, [r7, #0]
 8013824:	68f9      	ldr	r1, [r7, #12]
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	0018      	movs	r0, r3
 801382a:	f001 f80b 	bl	8014844 <pxPortInitialiseStack>
 801382e:	0002      	movs	r2, r0
 8013830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013832:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013836:	2b00      	cmp	r3, #0
 8013838:	d002      	beq.n	8013840 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801383e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013840:	46c0      	nop			; (mov r8, r8)
 8013842:	46bd      	mov	sp, r7
 8013844:	b006      	add	sp, #24
 8013846:	bd80      	pop	{r7, pc}
 8013848:	3fffffff 	.word	0x3fffffff

0801384c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013854:	f001 f894 	bl	8014980 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013858:	4b2a      	ldr	r3, [pc, #168]	; (8013904 <prvAddNewTaskToReadyList+0xb8>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	1c5a      	adds	r2, r3, #1
 801385e:	4b29      	ldr	r3, [pc, #164]	; (8013904 <prvAddNewTaskToReadyList+0xb8>)
 8013860:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8013862:	4b29      	ldr	r3, [pc, #164]	; (8013908 <prvAddNewTaskToReadyList+0xbc>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d109      	bne.n	801387e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801386a:	4b27      	ldr	r3, [pc, #156]	; (8013908 <prvAddNewTaskToReadyList+0xbc>)
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013870:	4b24      	ldr	r3, [pc, #144]	; (8013904 <prvAddNewTaskToReadyList+0xb8>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	2b01      	cmp	r3, #1
 8013876:	d110      	bne.n	801389a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013878:	f000 fc5a 	bl	8014130 <prvInitialiseTaskLists>
 801387c:	e00d      	b.n	801389a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801387e:	4b23      	ldr	r3, [pc, #140]	; (801390c <prvAddNewTaskToReadyList+0xc0>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d109      	bne.n	801389a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013886:	4b20      	ldr	r3, [pc, #128]	; (8013908 <prvAddNewTaskToReadyList+0xbc>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013890:	429a      	cmp	r2, r3
 8013892:	d802      	bhi.n	801389a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013894:	4b1c      	ldr	r3, [pc, #112]	; (8013908 <prvAddNewTaskToReadyList+0xbc>)
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801389a:	4b1d      	ldr	r3, [pc, #116]	; (8013910 <prvAddNewTaskToReadyList+0xc4>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	1c5a      	adds	r2, r3, #1
 80138a0:	4b1b      	ldr	r3, [pc, #108]	; (8013910 <prvAddNewTaskToReadyList+0xc4>)
 80138a2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80138a4:	4b1a      	ldr	r3, [pc, #104]	; (8013910 <prvAddNewTaskToReadyList+0xc4>)
 80138a6:	681a      	ldr	r2, [r3, #0]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138b0:	4b18      	ldr	r3, [pc, #96]	; (8013914 <prvAddNewTaskToReadyList+0xc8>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d903      	bls.n	80138c0 <prvAddNewTaskToReadyList+0x74>
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138bc:	4b15      	ldr	r3, [pc, #84]	; (8013914 <prvAddNewTaskToReadyList+0xc8>)
 80138be:	601a      	str	r2, [r3, #0]
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138c4:	0013      	movs	r3, r2
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	189b      	adds	r3, r3, r2
 80138ca:	009b      	lsls	r3, r3, #2
 80138cc:	4a12      	ldr	r2, [pc, #72]	; (8013918 <prvAddNewTaskToReadyList+0xcc>)
 80138ce:	189a      	adds	r2, r3, r2
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	3304      	adds	r3, #4
 80138d4:	0019      	movs	r1, r3
 80138d6:	0010      	movs	r0, r2
 80138d8:	f7ff fbf2 	bl	80130c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80138dc:	f001 f862 	bl	80149a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80138e0:	4b0a      	ldr	r3, [pc, #40]	; (801390c <prvAddNewTaskToReadyList+0xc0>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d008      	beq.n	80138fa <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80138e8:	4b07      	ldr	r3, [pc, #28]	; (8013908 <prvAddNewTaskToReadyList+0xbc>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d201      	bcs.n	80138fa <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80138f6:	f001 f833 	bl	8014960 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80138fa:	46c0      	nop			; (mov r8, r8)
 80138fc:	46bd      	mov	sp, r7
 80138fe:	b002      	add	sp, #8
 8013900:	bd80      	pop	{r7, pc}
 8013902:	46c0      	nop			; (mov r8, r8)
 8013904:	200013d4 	.word	0x200013d4
 8013908:	200012d4 	.word	0x200012d4
 801390c:	200013e0 	.word	0x200013e0
 8013910:	200013f0 	.word	0x200013f0
 8013914:	200013dc 	.word	0x200013dc
 8013918:	200012d8 	.word	0x200012d8

0801391c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013924:	2300      	movs	r3, #0
 8013926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d010      	beq.n	8013950 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801392e:	4b0d      	ldr	r3, [pc, #52]	; (8013964 <vTaskDelay+0x48>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d001      	beq.n	801393a <vTaskDelay+0x1e>
 8013936:	b672      	cpsid	i
 8013938:	e7fe      	b.n	8013938 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801393a:	f000 f8bb 	bl	8013ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2100      	movs	r1, #0
 8013942:	0018      	movs	r0, r3
 8013944:	f000 ff2a 	bl	801479c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013948:	f000 f8c0 	bl	8013acc <xTaskResumeAll>
 801394c:	0003      	movs	r3, r0
 801394e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d101      	bne.n	801395a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8013956:	f001 f803 	bl	8014960 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801395a:	46c0      	nop			; (mov r8, r8)
 801395c:	46bd      	mov	sp, r7
 801395e:	b004      	add	sp, #16
 8013960:	bd80      	pop	{r7, pc}
 8013962:	46c0      	nop			; (mov r8, r8)
 8013964:	200013fc 	.word	0x200013fc

08013968 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8013968:	b580      	push	{r7, lr}
 801396a:	b088      	sub	sp, #32
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8013974:	69bb      	ldr	r3, [r7, #24]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d101      	bne.n	801397e <eTaskGetState+0x16>
 801397a:	b672      	cpsid	i
 801397c:	e7fe      	b.n	801397c <eTaskGetState+0x14>

		if( pxTCB == pxCurrentTCB )
 801397e:	4b2c      	ldr	r3, [pc, #176]	; (8013a30 <eTaskGetState+0xc8>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	69ba      	ldr	r2, [r7, #24]
 8013984:	429a      	cmp	r2, r3
 8013986:	d104      	bne.n	8013992 <eTaskGetState+0x2a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8013988:	231f      	movs	r3, #31
 801398a:	18fb      	adds	r3, r7, r3
 801398c:	2200      	movs	r2, #0
 801398e:	701a      	strb	r2, [r3, #0]
 8013990:	e046      	b.n	8013a20 <eTaskGetState+0xb8>
		}
		else
		{
			taskENTER_CRITICAL();
 8013992:	f000 fff5 	bl	8014980 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8013996:	69bb      	ldr	r3, [r7, #24]
 8013998:	695b      	ldr	r3, [r3, #20]
 801399a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801399c:	4b25      	ldr	r3, [pc, #148]	; (8013a34 <eTaskGetState+0xcc>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80139a2:	4b25      	ldr	r3, [pc, #148]	; (8013a38 <eTaskGetState+0xd0>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80139a8:	f000 fffc 	bl	80149a4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80139ac:	697a      	ldr	r2, [r7, #20]
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d003      	beq.n	80139bc <eTaskGetState+0x54>
 80139b4:	697a      	ldr	r2, [r7, #20]
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d104      	bne.n	80139c6 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80139bc:	231f      	movs	r3, #31
 80139be:	18fb      	adds	r3, r7, r3
 80139c0:	2202      	movs	r2, #2
 80139c2:	701a      	strb	r2, [r3, #0]
 80139c4:	e02c      	b.n	8013a20 <eTaskGetState+0xb8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80139c6:	697a      	ldr	r2, [r7, #20]
 80139c8:	4b1c      	ldr	r3, [pc, #112]	; (8013a3c <eTaskGetState+0xd4>)
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d118      	bne.n	8013a00 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80139ce:	69bb      	ldr	r3, [r7, #24]
 80139d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d10f      	bne.n	80139f6 <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80139d6:	69bb      	ldr	r3, [r7, #24]
 80139d8:	225c      	movs	r2, #92	; 0x5c
 80139da:	5c9b      	ldrb	r3, [r3, r2]
 80139dc:	b2db      	uxtb	r3, r3
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d104      	bne.n	80139ec <eTaskGetState+0x84>
							{
								eReturn = eBlocked;
 80139e2:	231f      	movs	r3, #31
 80139e4:	18fb      	adds	r3, r7, r3
 80139e6:	2202      	movs	r2, #2
 80139e8:	701a      	strb	r2, [r3, #0]
 80139ea:	e019      	b.n	8013a20 <eTaskGetState+0xb8>
							}
							else
							{
								eReturn = eSuspended;
 80139ec:	231f      	movs	r3, #31
 80139ee:	18fb      	adds	r3, r7, r3
 80139f0:	2203      	movs	r2, #3
 80139f2:	701a      	strb	r2, [r3, #0]
 80139f4:	e014      	b.n	8013a20 <eTaskGetState+0xb8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80139f6:	231f      	movs	r3, #31
 80139f8:	18fb      	adds	r3, r7, r3
 80139fa:	2202      	movs	r2, #2
 80139fc:	701a      	strb	r2, [r3, #0]
 80139fe:	e00f      	b.n	8013a20 <eTaskGetState+0xb8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8013a00:	697a      	ldr	r2, [r7, #20]
 8013a02:	4b0f      	ldr	r3, [pc, #60]	; (8013a40 <eTaskGetState+0xd8>)
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d002      	beq.n	8013a0e <eTaskGetState+0xa6>
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d104      	bne.n	8013a18 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8013a0e:	231f      	movs	r3, #31
 8013a10:	18fb      	adds	r3, r7, r3
 8013a12:	2204      	movs	r2, #4
 8013a14:	701a      	strb	r2, [r3, #0]
 8013a16:	e003      	b.n	8013a20 <eTaskGetState+0xb8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8013a18:	231f      	movs	r3, #31
 8013a1a:	18fb      	adds	r3, r7, r3
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	701a      	strb	r2, [r3, #0]
			}
		}

		return eReturn;
 8013a20:	231f      	movs	r3, #31
 8013a22:	18fb      	adds	r3, r7, r3
 8013a24:	781b      	ldrb	r3, [r3, #0]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013a26:	0018      	movs	r0, r3
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	b008      	add	sp, #32
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	46c0      	nop			; (mov r8, r8)
 8013a30:	200012d4 	.word	0x200012d4
 8013a34:	2000138c 	.word	0x2000138c
 8013a38:	20001390 	.word	0x20001390
 8013a3c:	200013c0 	.word	0x200013c0
 8013a40:	200013a8 	.word	0x200013a8

08013a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b084      	sub	sp, #16
 8013a48:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8013a4a:	4914      	ldr	r1, [pc, #80]	; (8013a9c <vTaskStartScheduler+0x58>)
 8013a4c:	4814      	ldr	r0, [pc, #80]	; (8013aa0 <vTaskStartScheduler+0x5c>)
 8013a4e:	4b15      	ldr	r3, [pc, #84]	; (8013aa4 <vTaskStartScheduler+0x60>)
 8013a50:	9301      	str	r3, [sp, #4]
 8013a52:	2300      	movs	r3, #0
 8013a54:	9300      	str	r3, [sp, #0]
 8013a56:	2300      	movs	r3, #0
 8013a58:	2280      	movs	r2, #128	; 0x80
 8013a5a:	f7ff fe23 	bl	80136a4 <xTaskCreate>
 8013a5e:	0003      	movs	r3, r0
 8013a60:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2b01      	cmp	r3, #1
 8013a66:	d10f      	bne.n	8013a88 <vTaskStartScheduler+0x44>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8013a68:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013a6a:	4b0f      	ldr	r3, [pc, #60]	; (8013aa8 <vTaskStartScheduler+0x64>)
 8013a6c:	2201      	movs	r2, #1
 8013a6e:	4252      	negs	r2, r2
 8013a70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013a72:	4b0e      	ldr	r3, [pc, #56]	; (8013aac <vTaskStartScheduler+0x68>)
 8013a74:	2201      	movs	r2, #1
 8013a76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013a78:	4b0d      	ldr	r3, [pc, #52]	; (8013ab0 <vTaskStartScheduler+0x6c>)
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013a7e:	f7f1 fc75 	bl	800536c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013a82:	f000 ff49 	bl	8014918 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013a86:	e004      	b.n	8013a92 <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	3301      	adds	r3, #1
 8013a8c:	d101      	bne.n	8013a92 <vTaskStartScheduler+0x4e>
 8013a8e:	b672      	cpsid	i
 8013a90:	e7fe      	b.n	8013a90 <vTaskStartScheduler+0x4c>
}
 8013a92:	46c0      	nop			; (mov r8, r8)
 8013a94:	46bd      	mov	sp, r7
 8013a96:	b002      	add	sp, #8
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	46c0      	nop			; (mov r8, r8)
 8013a9c:	0801b5a8 	.word	0x0801b5a8
 8013aa0:	08014111 	.word	0x08014111
 8013aa4:	200013f8 	.word	0x200013f8
 8013aa8:	200013f4 	.word	0x200013f4
 8013aac:	200013e0 	.word	0x200013e0
 8013ab0:	200013d8 	.word	0x200013d8

08013ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013ab8:	4b03      	ldr	r3, [pc, #12]	; (8013ac8 <vTaskSuspendAll+0x14>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	1c5a      	adds	r2, r3, #1
 8013abe:	4b02      	ldr	r3, [pc, #8]	; (8013ac8 <vTaskSuspendAll+0x14>)
 8013ac0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013ac2:	46c0      	nop			; (mov r8, r8)
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	200013fc 	.word	0x200013fc

08013acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b084      	sub	sp, #16
 8013ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ada:	4b3a      	ldr	r3, [pc, #232]	; (8013bc4 <xTaskResumeAll+0xf8>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d101      	bne.n	8013ae6 <xTaskResumeAll+0x1a>
 8013ae2:	b672      	cpsid	i
 8013ae4:	e7fe      	b.n	8013ae4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013ae6:	f000 ff4b 	bl	8014980 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013aea:	4b36      	ldr	r3, [pc, #216]	; (8013bc4 <xTaskResumeAll+0xf8>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	1e5a      	subs	r2, r3, #1
 8013af0:	4b34      	ldr	r3, [pc, #208]	; (8013bc4 <xTaskResumeAll+0xf8>)
 8013af2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013af4:	4b33      	ldr	r3, [pc, #204]	; (8013bc4 <xTaskResumeAll+0xf8>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d15b      	bne.n	8013bb4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013afc:	4b32      	ldr	r3, [pc, #200]	; (8013bc8 <xTaskResumeAll+0xfc>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d057      	beq.n	8013bb4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b04:	e02f      	b.n	8013b66 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b06:	4b31      	ldr	r3, [pc, #196]	; (8013bcc <xTaskResumeAll+0x100>)
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	68db      	ldr	r3, [r3, #12]
 8013b0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	3318      	adds	r3, #24
 8013b12:	0018      	movs	r0, r3
 8013b14:	f7ff fb2c 	bl	8013170 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	3304      	adds	r3, #4
 8013b1c:	0018      	movs	r0, r3
 8013b1e:	f7ff fb27 	bl	8013170 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b26:	4b2a      	ldr	r3, [pc, #168]	; (8013bd0 <xTaskResumeAll+0x104>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d903      	bls.n	8013b36 <xTaskResumeAll+0x6a>
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b32:	4b27      	ldr	r3, [pc, #156]	; (8013bd0 <xTaskResumeAll+0x104>)
 8013b34:	601a      	str	r2, [r3, #0]
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b3a:	0013      	movs	r3, r2
 8013b3c:	009b      	lsls	r3, r3, #2
 8013b3e:	189b      	adds	r3, r3, r2
 8013b40:	009b      	lsls	r3, r3, #2
 8013b42:	4a24      	ldr	r2, [pc, #144]	; (8013bd4 <xTaskResumeAll+0x108>)
 8013b44:	189a      	adds	r2, r3, r2
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	3304      	adds	r3, #4
 8013b4a:	0019      	movs	r1, r3
 8013b4c:	0010      	movs	r0, r2
 8013b4e:	f7ff fab7 	bl	80130c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b56:	4b20      	ldr	r3, [pc, #128]	; (8013bd8 <xTaskResumeAll+0x10c>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d302      	bcc.n	8013b66 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8013b60:	4b1e      	ldr	r3, [pc, #120]	; (8013bdc <xTaskResumeAll+0x110>)
 8013b62:	2201      	movs	r2, #1
 8013b64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b66:	4b19      	ldr	r3, [pc, #100]	; (8013bcc <xTaskResumeAll+0x100>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d1cb      	bne.n	8013b06 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d001      	beq.n	8013b78 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013b74:	f000 fc38 	bl	80143e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013b78:	4b19      	ldr	r3, [pc, #100]	; (8013be0 <xTaskResumeAll+0x114>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d00f      	beq.n	8013ba4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013b84:	f000 f8be 	bl	8013d04 <xTaskIncrementTick>
 8013b88:	1e03      	subs	r3, r0, #0
 8013b8a:	d002      	beq.n	8013b92 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8013b8c:	4b13      	ldr	r3, [pc, #76]	; (8013bdc <xTaskResumeAll+0x110>)
 8013b8e:	2201      	movs	r2, #1
 8013b90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	3b01      	subs	r3, #1
 8013b96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d1f2      	bne.n	8013b84 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8013b9e:	4b10      	ldr	r3, [pc, #64]	; (8013be0 <xTaskResumeAll+0x114>)
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013ba4:	4b0d      	ldr	r3, [pc, #52]	; (8013bdc <xTaskResumeAll+0x110>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d003      	beq.n	8013bb4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013bac:	2301      	movs	r3, #1
 8013bae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013bb0:	f000 fed6 	bl	8014960 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013bb4:	f000 fef6 	bl	80149a4 <vPortExitCritical>

	return xAlreadyYielded;
 8013bb8:	68bb      	ldr	r3, [r7, #8]
}
 8013bba:	0018      	movs	r0, r3
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	b004      	add	sp, #16
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	46c0      	nop			; (mov r8, r8)
 8013bc4:	200013fc 	.word	0x200013fc
 8013bc8:	200013d4 	.word	0x200013d4
 8013bcc:	20001394 	.word	0x20001394
 8013bd0:	200013dc 	.word	0x200013dc
 8013bd4:	200012d8 	.word	0x200012d8
 8013bd8:	200012d4 	.word	0x200012d4
 8013bdc:	200013e8 	.word	0x200013e8
 8013be0:	200013e4 	.word	0x200013e4

08013be4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b086      	sub	sp, #24
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	60b9      	str	r1, [r7, #8]
 8013bee:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	617b      	str	r3, [r7, #20]
 8013bf4:	2307      	movs	r3, #7
 8013bf6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8013bf8:	f7ff ff5c 	bl	8013ab4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8013bfc:	4b3b      	ldr	r3, [pc, #236]	; (8013cec <uxTaskGetSystemState+0x108>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	68ba      	ldr	r2, [r7, #8]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d36a      	bcc.n	8013cdc <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	3b01      	subs	r3, #1
 8013c0a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8013c0c:	697a      	ldr	r2, [r7, #20]
 8013c0e:	0013      	movs	r3, r2
 8013c10:	00db      	lsls	r3, r3, #3
 8013c12:	189b      	adds	r3, r3, r2
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	001a      	movs	r2, r3
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	1898      	adds	r0, r3, r2
 8013c1c:	693a      	ldr	r2, [r7, #16]
 8013c1e:	0013      	movs	r3, r2
 8013c20:	009b      	lsls	r3, r3, #2
 8013c22:	189b      	adds	r3, r3, r2
 8013c24:	009b      	lsls	r3, r3, #2
 8013c26:	4a32      	ldr	r2, [pc, #200]	; (8013cf0 <uxTaskGetSystemState+0x10c>)
 8013c28:	189b      	adds	r3, r3, r2
 8013c2a:	2201      	movs	r2, #1
 8013c2c:	0019      	movs	r1, r3
 8013c2e:	f000 fb5d 	bl	80142ec <prvListTasksWithinSingleList>
 8013c32:	0002      	movs	r2, r0
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	189b      	adds	r3, r3, r2
 8013c38:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c3a:	693b      	ldr	r3, [r7, #16]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d1e2      	bne.n	8013c06 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8013c40:	697a      	ldr	r2, [r7, #20]
 8013c42:	0013      	movs	r3, r2
 8013c44:	00db      	lsls	r3, r3, #3
 8013c46:	189b      	adds	r3, r3, r2
 8013c48:	009b      	lsls	r3, r3, #2
 8013c4a:	001a      	movs	r2, r3
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	1898      	adds	r0, r3, r2
 8013c50:	4b28      	ldr	r3, [pc, #160]	; (8013cf4 <uxTaskGetSystemState+0x110>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	2202      	movs	r2, #2
 8013c56:	0019      	movs	r1, r3
 8013c58:	f000 fb48 	bl	80142ec <prvListTasksWithinSingleList>
 8013c5c:	0002      	movs	r2, r0
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	189b      	adds	r3, r3, r2
 8013c62:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8013c64:	697a      	ldr	r2, [r7, #20]
 8013c66:	0013      	movs	r3, r2
 8013c68:	00db      	lsls	r3, r3, #3
 8013c6a:	189b      	adds	r3, r3, r2
 8013c6c:	009b      	lsls	r3, r3, #2
 8013c6e:	001a      	movs	r2, r3
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	1898      	adds	r0, r3, r2
 8013c74:	4b20      	ldr	r3, [pc, #128]	; (8013cf8 <uxTaskGetSystemState+0x114>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	2202      	movs	r2, #2
 8013c7a:	0019      	movs	r1, r3
 8013c7c:	f000 fb36 	bl	80142ec <prvListTasksWithinSingleList>
 8013c80:	0002      	movs	r2, r0
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	189b      	adds	r3, r3, r2
 8013c86:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8013c88:	697a      	ldr	r2, [r7, #20]
 8013c8a:	0013      	movs	r3, r2
 8013c8c:	00db      	lsls	r3, r3, #3
 8013c8e:	189b      	adds	r3, r3, r2
 8013c90:	009b      	lsls	r3, r3, #2
 8013c92:	001a      	movs	r2, r3
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	189b      	adds	r3, r3, r2
 8013c98:	4918      	ldr	r1, [pc, #96]	; (8013cfc <uxTaskGetSystemState+0x118>)
 8013c9a:	2204      	movs	r2, #4
 8013c9c:	0018      	movs	r0, r3
 8013c9e:	f000 fb25 	bl	80142ec <prvListTasksWithinSingleList>
 8013ca2:	0002      	movs	r2, r0
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	189b      	adds	r3, r3, r2
 8013ca8:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8013caa:	697a      	ldr	r2, [r7, #20]
 8013cac:	0013      	movs	r3, r2
 8013cae:	00db      	lsls	r3, r3, #3
 8013cb0:	189b      	adds	r3, r3, r2
 8013cb2:	009b      	lsls	r3, r3, #2
 8013cb4:	001a      	movs	r2, r3
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	189b      	adds	r3, r3, r2
 8013cba:	4911      	ldr	r1, [pc, #68]	; (8013d00 <uxTaskGetSystemState+0x11c>)
 8013cbc:	2203      	movs	r2, #3
 8013cbe:	0018      	movs	r0, r3
 8013cc0:	f000 fb14 	bl	80142ec <prvListTasksWithinSingleList>
 8013cc4:	0002      	movs	r2, r0
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	189b      	adds	r3, r3, r2
 8013cca:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d004      	beq.n	8013cdc <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013cd2:	f7f1 fb50 	bl	8005376 <getRunTimeCounterValue>
 8013cd6:	0002      	movs	r2, r0
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8013cdc:	f7ff fef6 	bl	8013acc <xTaskResumeAll>

		return uxTask;
 8013ce0:	697b      	ldr	r3, [r7, #20]
	}
 8013ce2:	0018      	movs	r0, r3
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	b006      	add	sp, #24
 8013ce8:	bd80      	pop	{r7, pc}
 8013cea:	46c0      	nop			; (mov r8, r8)
 8013cec:	200013d4 	.word	0x200013d4
 8013cf0:	200012d8 	.word	0x200012d8
 8013cf4:	2000138c 	.word	0x2000138c
 8013cf8:	20001390 	.word	0x20001390
 8013cfc:	200013a8 	.word	0x200013a8
 8013d00:	200013c0 	.word	0x200013c0

08013d04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b086      	sub	sp, #24
 8013d08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d0e:	4b4a      	ldr	r3, [pc, #296]	; (8013e38 <xTaskIncrementTick+0x134>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d000      	beq.n	8013d18 <xTaskIncrementTick+0x14>
 8013d16:	e084      	b.n	8013e22 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013d18:	4b48      	ldr	r3, [pc, #288]	; (8013e3c <xTaskIncrementTick+0x138>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	3301      	adds	r3, #1
 8013d1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013d20:	4b46      	ldr	r3, [pc, #280]	; (8013e3c <xTaskIncrementTick+0x138>)
 8013d22:	693a      	ldr	r2, [r7, #16]
 8013d24:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d117      	bne.n	8013d5c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8013d2c:	4b44      	ldr	r3, [pc, #272]	; (8013e40 <xTaskIncrementTick+0x13c>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d001      	beq.n	8013d3a <xTaskIncrementTick+0x36>
 8013d36:	b672      	cpsid	i
 8013d38:	e7fe      	b.n	8013d38 <xTaskIncrementTick+0x34>
 8013d3a:	4b41      	ldr	r3, [pc, #260]	; (8013e40 <xTaskIncrementTick+0x13c>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	60fb      	str	r3, [r7, #12]
 8013d40:	4b40      	ldr	r3, [pc, #256]	; (8013e44 <xTaskIncrementTick+0x140>)
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	4b3e      	ldr	r3, [pc, #248]	; (8013e40 <xTaskIncrementTick+0x13c>)
 8013d46:	601a      	str	r2, [r3, #0]
 8013d48:	4b3e      	ldr	r3, [pc, #248]	; (8013e44 <xTaskIncrementTick+0x140>)
 8013d4a:	68fa      	ldr	r2, [r7, #12]
 8013d4c:	601a      	str	r2, [r3, #0]
 8013d4e:	4b3e      	ldr	r3, [pc, #248]	; (8013e48 <xTaskIncrementTick+0x144>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	1c5a      	adds	r2, r3, #1
 8013d54:	4b3c      	ldr	r3, [pc, #240]	; (8013e48 <xTaskIncrementTick+0x144>)
 8013d56:	601a      	str	r2, [r3, #0]
 8013d58:	f000 fb46 	bl	80143e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d5c:	4b3b      	ldr	r3, [pc, #236]	; (8013e4c <xTaskIncrementTick+0x148>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	693a      	ldr	r2, [r7, #16]
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d349      	bcc.n	8013dfa <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d66:	4b36      	ldr	r3, [pc, #216]	; (8013e40 <xTaskIncrementTick+0x13c>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d104      	bne.n	8013d7a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d70:	4b36      	ldr	r3, [pc, #216]	; (8013e4c <xTaskIncrementTick+0x148>)
 8013d72:	2201      	movs	r2, #1
 8013d74:	4252      	negs	r2, r2
 8013d76:	601a      	str	r2, [r3, #0]
					break;
 8013d78:	e03f      	b.n	8013dfa <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d7a:	4b31      	ldr	r3, [pc, #196]	; (8013e40 <xTaskIncrementTick+0x13c>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	68db      	ldr	r3, [r3, #12]
 8013d80:	68db      	ldr	r3, [r3, #12]
 8013d82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013d8a:	693a      	ldr	r2, [r7, #16]
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d203      	bcs.n	8013d9a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d92:	4b2e      	ldr	r3, [pc, #184]	; (8013e4c <xTaskIncrementTick+0x148>)
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013d98:	e02f      	b.n	8013dfa <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	3304      	adds	r3, #4
 8013d9e:	0018      	movs	r0, r3
 8013da0:	f7ff f9e6 	bl	8013170 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d004      	beq.n	8013db6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	3318      	adds	r3, #24
 8013db0:	0018      	movs	r0, r3
 8013db2:	f7ff f9dd 	bl	8013170 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013db6:	68bb      	ldr	r3, [r7, #8]
 8013db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dba:	4b25      	ldr	r3, [pc, #148]	; (8013e50 <xTaskIncrementTick+0x14c>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d903      	bls.n	8013dca <xTaskIncrementTick+0xc6>
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dc6:	4b22      	ldr	r3, [pc, #136]	; (8013e50 <xTaskIncrementTick+0x14c>)
 8013dc8:	601a      	str	r2, [r3, #0]
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dce:	0013      	movs	r3, r2
 8013dd0:	009b      	lsls	r3, r3, #2
 8013dd2:	189b      	adds	r3, r3, r2
 8013dd4:	009b      	lsls	r3, r3, #2
 8013dd6:	4a1f      	ldr	r2, [pc, #124]	; (8013e54 <xTaskIncrementTick+0x150>)
 8013dd8:	189a      	adds	r2, r3, r2
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	3304      	adds	r3, #4
 8013dde:	0019      	movs	r1, r3
 8013de0:	0010      	movs	r0, r2
 8013de2:	f7ff f96d 	bl	80130c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dea:	4b1b      	ldr	r3, [pc, #108]	; (8013e58 <xTaskIncrementTick+0x154>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d3b8      	bcc.n	8013d66 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8013df4:	2301      	movs	r3, #1
 8013df6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013df8:	e7b5      	b.n	8013d66 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013dfa:	4b17      	ldr	r3, [pc, #92]	; (8013e58 <xTaskIncrementTick+0x154>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e00:	4914      	ldr	r1, [pc, #80]	; (8013e54 <xTaskIncrementTick+0x150>)
 8013e02:	0013      	movs	r3, r2
 8013e04:	009b      	lsls	r3, r3, #2
 8013e06:	189b      	adds	r3, r3, r2
 8013e08:	009b      	lsls	r3, r3, #2
 8013e0a:	585b      	ldr	r3, [r3, r1]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d901      	bls.n	8013e14 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8013e10:	2301      	movs	r3, #1
 8013e12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013e14:	4b11      	ldr	r3, [pc, #68]	; (8013e5c <xTaskIncrementTick+0x158>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d007      	beq.n	8013e2c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	617b      	str	r3, [r7, #20]
 8013e20:	e004      	b.n	8013e2c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013e22:	4b0f      	ldr	r3, [pc, #60]	; (8013e60 <xTaskIncrementTick+0x15c>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	1c5a      	adds	r2, r3, #1
 8013e28:	4b0d      	ldr	r3, [pc, #52]	; (8013e60 <xTaskIncrementTick+0x15c>)
 8013e2a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013e2c:	697b      	ldr	r3, [r7, #20]
}
 8013e2e:	0018      	movs	r0, r3
 8013e30:	46bd      	mov	sp, r7
 8013e32:	b006      	add	sp, #24
 8013e34:	bd80      	pop	{r7, pc}
 8013e36:	46c0      	nop			; (mov r8, r8)
 8013e38:	200013fc 	.word	0x200013fc
 8013e3c:	200013d8 	.word	0x200013d8
 8013e40:	2000138c 	.word	0x2000138c
 8013e44:	20001390 	.word	0x20001390
 8013e48:	200013ec 	.word	0x200013ec
 8013e4c:	200013f4 	.word	0x200013f4
 8013e50:	200013dc 	.word	0x200013dc
 8013e54:	200012d8 	.word	0x200012d8
 8013e58:	200012d4 	.word	0x200012d4
 8013e5c:	200013e8 	.word	0x200013e8
 8013e60:	200013e4 	.word	0x200013e4

08013e64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013e6a:	4b2e      	ldr	r3, [pc, #184]	; (8013f24 <vTaskSwitchContext+0xc0>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d003      	beq.n	8013e7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013e72:	4b2d      	ldr	r3, [pc, #180]	; (8013f28 <vTaskSwitchContext+0xc4>)
 8013e74:	2201      	movs	r2, #1
 8013e76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e78:	e050      	b.n	8013f1c <vTaskSwitchContext+0xb8>
		xYieldPending = pdFALSE;
 8013e7a:	4b2b      	ldr	r3, [pc, #172]	; (8013f28 <vTaskSwitchContext+0xc4>)
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013e80:	f7f1 fa79 	bl	8005376 <getRunTimeCounterValue>
 8013e84:	0002      	movs	r2, r0
 8013e86:	4b29      	ldr	r3, [pc, #164]	; (8013f2c <vTaskSwitchContext+0xc8>)
 8013e88:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8013e8a:	4b28      	ldr	r3, [pc, #160]	; (8013f2c <vTaskSwitchContext+0xc8>)
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	4b28      	ldr	r3, [pc, #160]	; (8013f30 <vTaskSwitchContext+0xcc>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d909      	bls.n	8013eaa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8013e96:	4b27      	ldr	r3, [pc, #156]	; (8013f34 <vTaskSwitchContext+0xd0>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013e9c:	4a23      	ldr	r2, [pc, #140]	; (8013f2c <vTaskSwitchContext+0xc8>)
 8013e9e:	6810      	ldr	r0, [r2, #0]
 8013ea0:	4a23      	ldr	r2, [pc, #140]	; (8013f30 <vTaskSwitchContext+0xcc>)
 8013ea2:	6812      	ldr	r2, [r2, #0]
 8013ea4:	1a82      	subs	r2, r0, r2
 8013ea6:	188a      	adds	r2, r1, r2
 8013ea8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8013eaa:	4b20      	ldr	r3, [pc, #128]	; (8013f2c <vTaskSwitchContext+0xc8>)
 8013eac:	681a      	ldr	r2, [r3, #0]
 8013eae:	4b20      	ldr	r3, [pc, #128]	; (8013f30 <vTaskSwitchContext+0xcc>)
 8013eb0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013eb2:	4b21      	ldr	r3, [pc, #132]	; (8013f38 <vTaskSwitchContext+0xd4>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	607b      	str	r3, [r7, #4]
 8013eb8:	e007      	b.n	8013eca <vTaskSwitchContext+0x66>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d101      	bne.n	8013ec4 <vTaskSwitchContext+0x60>
 8013ec0:	b672      	cpsid	i
 8013ec2:	e7fe      	b.n	8013ec2 <vTaskSwitchContext+0x5e>
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	3b01      	subs	r3, #1
 8013ec8:	607b      	str	r3, [r7, #4]
 8013eca:	491c      	ldr	r1, [pc, #112]	; (8013f3c <vTaskSwitchContext+0xd8>)
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	0013      	movs	r3, r2
 8013ed0:	009b      	lsls	r3, r3, #2
 8013ed2:	189b      	adds	r3, r3, r2
 8013ed4:	009b      	lsls	r3, r3, #2
 8013ed6:	585b      	ldr	r3, [r3, r1]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d0ee      	beq.n	8013eba <vTaskSwitchContext+0x56>
 8013edc:	687a      	ldr	r2, [r7, #4]
 8013ede:	0013      	movs	r3, r2
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	189b      	adds	r3, r3, r2
 8013ee4:	009b      	lsls	r3, r3, #2
 8013ee6:	4a15      	ldr	r2, [pc, #84]	; (8013f3c <vTaskSwitchContext+0xd8>)
 8013ee8:	189b      	adds	r3, r3, r2
 8013eea:	603b      	str	r3, [r7, #0]
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	685b      	ldr	r3, [r3, #4]
 8013ef0:	685a      	ldr	r2, [r3, #4]
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	605a      	str	r2, [r3, #4]
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	685a      	ldr	r2, [r3, #4]
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	3308      	adds	r3, #8
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d104      	bne.n	8013f0c <vTaskSwitchContext+0xa8>
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	685a      	ldr	r2, [r3, #4]
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	605a      	str	r2, [r3, #4]
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	68da      	ldr	r2, [r3, #12]
 8013f12:	4b08      	ldr	r3, [pc, #32]	; (8013f34 <vTaskSwitchContext+0xd0>)
 8013f14:	601a      	str	r2, [r3, #0]
 8013f16:	4b08      	ldr	r3, [pc, #32]	; (8013f38 <vTaskSwitchContext+0xd4>)
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	601a      	str	r2, [r3, #0]
}
 8013f1c:	46c0      	nop			; (mov r8, r8)
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	b002      	add	sp, #8
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	200013fc 	.word	0x200013fc
 8013f28:	200013e8 	.word	0x200013e8
 8013f2c:	20001404 	.word	0x20001404
 8013f30:	20001400 	.word	0x20001400
 8013f34:	200012d4 	.word	0x200012d4
 8013f38:	200013dc 	.word	0x200013dc
 8013f3c:	200012d8 	.word	0x200012d8

08013f40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d101      	bne.n	8013f54 <vTaskPlaceOnEventList+0x14>
 8013f50:	b672      	cpsid	i
 8013f52:	e7fe      	b.n	8013f52 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f54:	4b08      	ldr	r3, [pc, #32]	; (8013f78 <vTaskPlaceOnEventList+0x38>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	3318      	adds	r3, #24
 8013f5a:	001a      	movs	r2, r3
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	0011      	movs	r1, r2
 8013f60:	0018      	movs	r0, r3
 8013f62:	f7ff f8cf 	bl	8013104 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	2101      	movs	r1, #1
 8013f6a:	0018      	movs	r0, r3
 8013f6c:	f000 fc16 	bl	801479c <prvAddCurrentTaskToDelayedList>
}
 8013f70:	46c0      	nop			; (mov r8, r8)
 8013f72:	46bd      	mov	sp, r7
 8013f74:	b002      	add	sp, #8
 8013f76:	bd80      	pop	{r7, pc}
 8013f78:	200012d4 	.word	0x200012d4

08013f7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	68db      	ldr	r3, [r3, #12]
 8013f8a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d101      	bne.n	8013f96 <xTaskRemoveFromEventList+0x1a>
 8013f92:	b672      	cpsid	i
 8013f94:	e7fe      	b.n	8013f94 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	3318      	adds	r3, #24
 8013f9a:	0018      	movs	r0, r3
 8013f9c:	f7ff f8e8 	bl	8013170 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fa0:	4b1e      	ldr	r3, [pc, #120]	; (801401c <xTaskRemoveFromEventList+0xa0>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d11d      	bne.n	8013fe4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	3304      	adds	r3, #4
 8013fac:	0018      	movs	r0, r3
 8013fae:	f7ff f8df 	bl	8013170 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fb6:	4b1a      	ldr	r3, [pc, #104]	; (8014020 <xTaskRemoveFromEventList+0xa4>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d903      	bls.n	8013fc6 <xTaskRemoveFromEventList+0x4a>
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fc2:	4b17      	ldr	r3, [pc, #92]	; (8014020 <xTaskRemoveFromEventList+0xa4>)
 8013fc4:	601a      	str	r2, [r3, #0]
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fca:	0013      	movs	r3, r2
 8013fcc:	009b      	lsls	r3, r3, #2
 8013fce:	189b      	adds	r3, r3, r2
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	4a14      	ldr	r2, [pc, #80]	; (8014024 <xTaskRemoveFromEventList+0xa8>)
 8013fd4:	189a      	adds	r2, r3, r2
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	3304      	adds	r3, #4
 8013fda:	0019      	movs	r1, r3
 8013fdc:	0010      	movs	r0, r2
 8013fde:	f7ff f86f 	bl	80130c0 <vListInsertEnd>
 8013fe2:	e007      	b.n	8013ff4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	3318      	adds	r3, #24
 8013fe8:	001a      	movs	r2, r3
 8013fea:	4b0f      	ldr	r3, [pc, #60]	; (8014028 <xTaskRemoveFromEventList+0xac>)
 8013fec:	0011      	movs	r1, r2
 8013fee:	0018      	movs	r0, r3
 8013ff0:	f7ff f866 	bl	80130c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ff8:	4b0c      	ldr	r3, [pc, #48]	; (801402c <xTaskRemoveFromEventList+0xb0>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d905      	bls.n	801400e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014002:	2301      	movs	r3, #1
 8014004:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014006:	4b0a      	ldr	r3, [pc, #40]	; (8014030 <xTaskRemoveFromEventList+0xb4>)
 8014008:	2201      	movs	r2, #1
 801400a:	601a      	str	r2, [r3, #0]
 801400c:	e001      	b.n	8014012 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 801400e:	2300      	movs	r3, #0
 8014010:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8014012:	68fb      	ldr	r3, [r7, #12]
}
 8014014:	0018      	movs	r0, r3
 8014016:	46bd      	mov	sp, r7
 8014018:	b004      	add	sp, #16
 801401a:	bd80      	pop	{r7, pc}
 801401c:	200013fc 	.word	0x200013fc
 8014020:	200013dc 	.word	0x200013dc
 8014024:	200012d8 	.word	0x200012d8
 8014028:	20001394 	.word	0x20001394
 801402c:	200012d4 	.word	0x200012d4
 8014030:	200013e8 	.word	0x200013e8

08014034 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801403c:	4b05      	ldr	r3, [pc, #20]	; (8014054 <vTaskInternalSetTimeOutState+0x20>)
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014044:	4b04      	ldr	r3, [pc, #16]	; (8014058 <vTaskInternalSetTimeOutState+0x24>)
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	605a      	str	r2, [r3, #4]
}
 801404c:	46c0      	nop			; (mov r8, r8)
 801404e:	46bd      	mov	sp, r7
 8014050:	b002      	add	sp, #8
 8014052:	bd80      	pop	{r7, pc}
 8014054:	200013ec 	.word	0x200013ec
 8014058:	200013d8 	.word	0x200013d8

0801405c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b086      	sub	sp, #24
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d101      	bne.n	8014070 <xTaskCheckForTimeOut+0x14>
 801406c:	b672      	cpsid	i
 801406e:	e7fe      	b.n	801406e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d101      	bne.n	801407a <xTaskCheckForTimeOut+0x1e>
 8014076:	b672      	cpsid	i
 8014078:	e7fe      	b.n	8014078 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 801407a:	f000 fc81 	bl	8014980 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801407e:	4b1d      	ldr	r3, [pc, #116]	; (80140f4 <xTaskCheckForTimeOut+0x98>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	685b      	ldr	r3, [r3, #4]
 8014088:	693a      	ldr	r2, [r7, #16]
 801408a:	1ad3      	subs	r3, r2, r3
 801408c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	3301      	adds	r3, #1
 8014094:	d102      	bne.n	801409c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014096:	2300      	movs	r3, #0
 8014098:	617b      	str	r3, [r7, #20]
 801409a:	e024      	b.n	80140e6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	4b15      	ldr	r3, [pc, #84]	; (80140f8 <xTaskCheckForTimeOut+0x9c>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d007      	beq.n	80140b8 <xTaskCheckForTimeOut+0x5c>
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	685b      	ldr	r3, [r3, #4]
 80140ac:	693a      	ldr	r2, [r7, #16]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d302      	bcc.n	80140b8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80140b2:	2301      	movs	r3, #1
 80140b4:	617b      	str	r3, [r7, #20]
 80140b6:	e016      	b.n	80140e6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	68fa      	ldr	r2, [r7, #12]
 80140be:	429a      	cmp	r2, r3
 80140c0:	d20c      	bcs.n	80140dc <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	1ad2      	subs	r2, r2, r3
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	0018      	movs	r0, r3
 80140d2:	f7ff ffaf 	bl	8014034 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80140d6:	2300      	movs	r3, #0
 80140d8:	617b      	str	r3, [r7, #20]
 80140da:	e004      	b.n	80140e6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	2200      	movs	r2, #0
 80140e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80140e2:	2301      	movs	r3, #1
 80140e4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80140e6:	f000 fc5d 	bl	80149a4 <vPortExitCritical>

	return xReturn;
 80140ea:	697b      	ldr	r3, [r7, #20]
}
 80140ec:	0018      	movs	r0, r3
 80140ee:	46bd      	mov	sp, r7
 80140f0:	b006      	add	sp, #24
 80140f2:	bd80      	pop	{r7, pc}
 80140f4:	200013d8 	.word	0x200013d8
 80140f8:	200013ec 	.word	0x200013ec

080140fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014100:	4b02      	ldr	r3, [pc, #8]	; (801410c <vTaskMissedYield+0x10>)
 8014102:	2201      	movs	r2, #1
 8014104:	601a      	str	r2, [r3, #0]
}
 8014106:	46c0      	nop			; (mov r8, r8)
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}
 801410c:	200013e8 	.word	0x200013e8

08014110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014118:	f000 f84e 	bl	80141b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801411c:	4b03      	ldr	r3, [pc, #12]	; (801412c <prvIdleTask+0x1c>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	2b01      	cmp	r3, #1
 8014122:	d9f9      	bls.n	8014118 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014124:	f000 fc1c 	bl	8014960 <vPortYield>
		prvCheckTasksWaitingTermination();
 8014128:	e7f6      	b.n	8014118 <prvIdleTask+0x8>
 801412a:	46c0      	nop			; (mov r8, r8)
 801412c:	200012d8 	.word	0x200012d8

08014130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b082      	sub	sp, #8
 8014134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014136:	2300      	movs	r3, #0
 8014138:	607b      	str	r3, [r7, #4]
 801413a:	e00c      	b.n	8014156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801413c:	687a      	ldr	r2, [r7, #4]
 801413e:	0013      	movs	r3, r2
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	189b      	adds	r3, r3, r2
 8014144:	009b      	lsls	r3, r3, #2
 8014146:	4a14      	ldr	r2, [pc, #80]	; (8014198 <prvInitialiseTaskLists+0x68>)
 8014148:	189b      	adds	r3, r3, r2
 801414a:	0018      	movs	r0, r3
 801414c:	f7fe ff8f 	bl	801306e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	3301      	adds	r3, #1
 8014154:	607b      	str	r3, [r7, #4]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2b06      	cmp	r3, #6
 801415a:	d9ef      	bls.n	801413c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801415c:	4b0f      	ldr	r3, [pc, #60]	; (801419c <prvInitialiseTaskLists+0x6c>)
 801415e:	0018      	movs	r0, r3
 8014160:	f7fe ff85 	bl	801306e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014164:	4b0e      	ldr	r3, [pc, #56]	; (80141a0 <prvInitialiseTaskLists+0x70>)
 8014166:	0018      	movs	r0, r3
 8014168:	f7fe ff81 	bl	801306e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801416c:	4b0d      	ldr	r3, [pc, #52]	; (80141a4 <prvInitialiseTaskLists+0x74>)
 801416e:	0018      	movs	r0, r3
 8014170:	f7fe ff7d 	bl	801306e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014174:	4b0c      	ldr	r3, [pc, #48]	; (80141a8 <prvInitialiseTaskLists+0x78>)
 8014176:	0018      	movs	r0, r3
 8014178:	f7fe ff79 	bl	801306e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801417c:	4b0b      	ldr	r3, [pc, #44]	; (80141ac <prvInitialiseTaskLists+0x7c>)
 801417e:	0018      	movs	r0, r3
 8014180:	f7fe ff75 	bl	801306e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014184:	4b0a      	ldr	r3, [pc, #40]	; (80141b0 <prvInitialiseTaskLists+0x80>)
 8014186:	4a05      	ldr	r2, [pc, #20]	; (801419c <prvInitialiseTaskLists+0x6c>)
 8014188:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801418a:	4b0a      	ldr	r3, [pc, #40]	; (80141b4 <prvInitialiseTaskLists+0x84>)
 801418c:	4a04      	ldr	r2, [pc, #16]	; (80141a0 <prvInitialiseTaskLists+0x70>)
 801418e:	601a      	str	r2, [r3, #0]
}
 8014190:	46c0      	nop			; (mov r8, r8)
 8014192:	46bd      	mov	sp, r7
 8014194:	b002      	add	sp, #8
 8014196:	bd80      	pop	{r7, pc}
 8014198:	200012d8 	.word	0x200012d8
 801419c:	20001364 	.word	0x20001364
 80141a0:	20001378 	.word	0x20001378
 80141a4:	20001394 	.word	0x20001394
 80141a8:	200013a8 	.word	0x200013a8
 80141ac:	200013c0 	.word	0x200013c0
 80141b0:	2000138c 	.word	0x2000138c
 80141b4:	20001390 	.word	0x20001390

080141b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141be:	e01a      	b.n	80141f6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80141c0:	f000 fbde 	bl	8014980 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141c4:	4b10      	ldr	r3, [pc, #64]	; (8014208 <prvCheckTasksWaitingTermination+0x50>)
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	68db      	ldr	r3, [r3, #12]
 80141ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	3304      	adds	r3, #4
 80141d0:	0018      	movs	r0, r3
 80141d2:	f7fe ffcd 	bl	8013170 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80141d6:	4b0d      	ldr	r3, [pc, #52]	; (801420c <prvCheckTasksWaitingTermination+0x54>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	1e5a      	subs	r2, r3, #1
 80141dc:	4b0b      	ldr	r3, [pc, #44]	; (801420c <prvCheckTasksWaitingTermination+0x54>)
 80141de:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80141e0:	4b0b      	ldr	r3, [pc, #44]	; (8014210 <prvCheckTasksWaitingTermination+0x58>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	1e5a      	subs	r2, r3, #1
 80141e6:	4b0a      	ldr	r3, [pc, #40]	; (8014210 <prvCheckTasksWaitingTermination+0x58>)
 80141e8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80141ea:	f000 fbdb 	bl	80149a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	0018      	movs	r0, r3
 80141f2:	f000 f8e8 	bl	80143c6 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141f6:	4b06      	ldr	r3, [pc, #24]	; (8014210 <prvCheckTasksWaitingTermination+0x58>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d1e0      	bne.n	80141c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80141fe:	46c0      	nop			; (mov r8, r8)
 8014200:	46c0      	nop			; (mov r8, r8)
 8014202:	46bd      	mov	sp, r7
 8014204:	b002      	add	sp, #8
 8014206:	bd80      	pop	{r7, pc}
 8014208:	200013a8 	.word	0x200013a8
 801420c:	200013d4 	.word	0x200013d4
 8014210:	200013bc 	.word	0x200013bc

08014214 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8014214:	b580      	push	{r7, lr}
 8014216:	b086      	sub	sp, #24
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	607a      	str	r2, [r7, #4]
 8014220:	001a      	movs	r2, r3
 8014222:	1cfb      	adds	r3, r7, #3
 8014224:	701a      	strb	r2, [r3, #0]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d102      	bne.n	8014232 <vTaskGetInfo+0x1e>
 801422c:	4b2e      	ldr	r3, [pc, #184]	; (80142e8 <vTaskGetInfo+0xd4>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	e000      	b.n	8014234 <vTaskGetInfo+0x20>
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	697a      	ldr	r2, [r7, #20]
 801423a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	3334      	adds	r3, #52	; 0x34
 8014240:	001a      	movs	r2, r3
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 801424e:	697b      	ldr	r3, [r7, #20]
 8014250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 801426e:	1cfb      	adds	r3, r7, #3
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	2b05      	cmp	r3, #5
 8014274:	d01c      	beq.n	80142b0 <vTaskGetInfo+0x9c>
		{
			if( pxTCB == pxCurrentTCB )
 8014276:	4b1c      	ldr	r3, [pc, #112]	; (80142e8 <vTaskGetInfo+0xd4>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	697a      	ldr	r2, [r7, #20]
 801427c:	429a      	cmp	r2, r3
 801427e:	d103      	bne.n	8014288 <vTaskGetInfo+0x74>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	2200      	movs	r2, #0
 8014284:	731a      	strb	r2, [r3, #12]
 8014286:	e01b      	b.n	80142c0 <vTaskGetInfo+0xac>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	1cfa      	adds	r2, r7, #3
 801428c:	7812      	ldrb	r2, [r2, #0]
 801428e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8014290:	1cfb      	adds	r3, r7, #3
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	2b03      	cmp	r3, #3
 8014296:	d113      	bne.n	80142c0 <vTaskGetInfo+0xac>
					{
						vTaskSuspendAll();
 8014298:	f7ff fc0c 	bl	8013ab4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d002      	beq.n	80142aa <vTaskGetInfo+0x96>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	2202      	movs	r2, #2
 80142a8:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80142aa:	f7ff fc0f 	bl	8013acc <xTaskResumeAll>
 80142ae:	e007      	b.n	80142c0 <vTaskGetInfo+0xac>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80142b0:	697b      	ldr	r3, [r7, #20]
 80142b2:	0018      	movs	r0, r3
 80142b4:	f7ff fb58 	bl	8013968 <eTaskGetState>
 80142b8:	0003      	movs	r3, r0
 80142ba:	001a      	movs	r2, r3
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d009      	beq.n	80142da <vTaskGetInfo+0xc6>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142ca:	0018      	movs	r0, r3
 80142cc:	f000 f861 	bl	8014392 <prvTaskCheckFreeStackSpace>
 80142d0:	0003      	movs	r3, r0
 80142d2:	001a      	movs	r2, r3
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80142d8:	e002      	b.n	80142e0 <vTaskGetInfo+0xcc>
			pxTaskStatus->usStackHighWaterMark = 0;
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	2200      	movs	r2, #0
 80142de:	841a      	strh	r2, [r3, #32]
	}
 80142e0:	46c0      	nop			; (mov r8, r8)
 80142e2:	46bd      	mov	sp, r7
 80142e4:	b006      	add	sp, #24
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	200012d4 	.word	0x200012d4

080142ec <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b08a      	sub	sp, #40	; 0x28
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	60f8      	str	r0, [r7, #12]
 80142f4:	60b9      	str	r1, [r7, #8]
 80142f6:	1dfb      	adds	r3, r7, #7
 80142f8:	701a      	strb	r2, [r3, #0]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80142fa:	2300      	movs	r3, #0
 80142fc:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d040      	beq.n	8014388 <prvListTasksWithinSingleList+0x9c>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	623b      	str	r3, [r7, #32]
 801430a:	6a3b      	ldr	r3, [r7, #32]
 801430c:	685b      	ldr	r3, [r3, #4]
 801430e:	685a      	ldr	r2, [r3, #4]
 8014310:	6a3b      	ldr	r3, [r7, #32]
 8014312:	605a      	str	r2, [r3, #4]
 8014314:	6a3b      	ldr	r3, [r7, #32]
 8014316:	685a      	ldr	r2, [r3, #4]
 8014318:	6a3b      	ldr	r3, [r7, #32]
 801431a:	3308      	adds	r3, #8
 801431c:	429a      	cmp	r2, r3
 801431e:	d104      	bne.n	801432a <prvListTasksWithinSingleList+0x3e>
 8014320:	6a3b      	ldr	r3, [r7, #32]
 8014322:	685b      	ldr	r3, [r3, #4]
 8014324:	685a      	ldr	r2, [r3, #4]
 8014326:	6a3b      	ldr	r3, [r7, #32]
 8014328:	605a      	str	r2, [r3, #4]
 801432a:	6a3b      	ldr	r3, [r7, #32]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	61bb      	str	r3, [r7, #24]
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	685a      	ldr	r2, [r3, #4]
 801433c:	69bb      	ldr	r3, [r7, #24]
 801433e:	605a      	str	r2, [r3, #4]
 8014340:	69bb      	ldr	r3, [r7, #24]
 8014342:	685a      	ldr	r2, [r3, #4]
 8014344:	69bb      	ldr	r3, [r7, #24]
 8014346:	3308      	adds	r3, #8
 8014348:	429a      	cmp	r2, r3
 801434a:	d104      	bne.n	8014356 <prvListTasksWithinSingleList+0x6a>
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	685a      	ldr	r2, [r3, #4]
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	605a      	str	r2, [r3, #4]
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	685b      	ldr	r3, [r3, #4]
 801435a:	68db      	ldr	r3, [r3, #12]
 801435c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 801435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014360:	0013      	movs	r3, r2
 8014362:	00db      	lsls	r3, r3, #3
 8014364:	189b      	adds	r3, r3, r2
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	001a      	movs	r2, r3
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	1899      	adds	r1, r3, r2
 801436e:	1dfb      	adds	r3, r7, #7
 8014370:	781b      	ldrb	r3, [r3, #0]
 8014372:	6978      	ldr	r0, [r7, #20]
 8014374:	2201      	movs	r2, #1
 8014376:	f7ff ff4d 	bl	8014214 <vTaskGetInfo>
				uxTask++;
 801437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437c:	3301      	adds	r3, #1
 801437e:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8014380:	697a      	ldr	r2, [r7, #20]
 8014382:	69fb      	ldr	r3, [r7, #28]
 8014384:	429a      	cmp	r2, r3
 8014386:	d1d4      	bne.n	8014332 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8014388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801438a:	0018      	movs	r0, r3
 801438c:	46bd      	mov	sp, r7
 801438e:	b00a      	add	sp, #40	; 0x28
 8014390:	bd80      	pop	{r7, pc}

08014392 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8014392:	b580      	push	{r7, lr}
 8014394:	b084      	sub	sp, #16
 8014396:	af00      	add	r7, sp, #0
 8014398:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 801439a:	2300      	movs	r3, #0
 801439c:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801439e:	e005      	b.n	80143ac <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	3301      	adds	r3, #1
 80143a4:	607b      	str	r3, [r7, #4]
			ulCount++;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	3301      	adds	r3, #1
 80143aa:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	2ba5      	cmp	r3, #165	; 0xa5
 80143b2:	d0f5      	beq.n	80143a0 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	089b      	lsrs	r3, r3, #2
 80143b8:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	b29b      	uxth	r3, r3
	}
 80143be:	0018      	movs	r0, r3
 80143c0:	46bd      	mov	sp, r7
 80143c2:	b004      	add	sp, #16
 80143c4:	bd80      	pop	{r7, pc}

080143c6 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80143c6:	b580      	push	{r7, lr}
 80143c8:	b082      	sub	sp, #8
 80143ca:	af00      	add	r7, sp, #0
 80143cc:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143d2:	0018      	movs	r0, r3
 80143d4:	f000 fc18 	bl	8014c08 <vPortFree>
			vPortFree( pxTCB );
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	0018      	movs	r0, r3
 80143dc:	f000 fc14 	bl	8014c08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80143e0:	46c0      	nop			; (mov r8, r8)
 80143e2:	46bd      	mov	sp, r7
 80143e4:	b002      	add	sp, #8
 80143e6:	bd80      	pop	{r7, pc}

080143e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b082      	sub	sp, #8
 80143ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143ee:	4b0b      	ldr	r3, [pc, #44]	; (801441c <prvResetNextTaskUnblockTime+0x34>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d104      	bne.n	8014402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80143f8:	4b09      	ldr	r3, [pc, #36]	; (8014420 <prvResetNextTaskUnblockTime+0x38>)
 80143fa:	2201      	movs	r2, #1
 80143fc:	4252      	negs	r2, r2
 80143fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014400:	e008      	b.n	8014414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014402:	4b06      	ldr	r3, [pc, #24]	; (801441c <prvResetNextTaskUnblockTime+0x34>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	68db      	ldr	r3, [r3, #12]
 8014408:	68db      	ldr	r3, [r3, #12]
 801440a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	685a      	ldr	r2, [r3, #4]
 8014410:	4b03      	ldr	r3, [pc, #12]	; (8014420 <prvResetNextTaskUnblockTime+0x38>)
 8014412:	601a      	str	r2, [r3, #0]
}
 8014414:	46c0      	nop			; (mov r8, r8)
 8014416:	46bd      	mov	sp, r7
 8014418:	b002      	add	sp, #8
 801441a:	bd80      	pop	{r7, pc}
 801441c:	2000138c 	.word	0x2000138c
 8014420:	200013f4 	.word	0x200013f4

08014424 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014424:	b580      	push	{r7, lr}
 8014426:	b082      	sub	sp, #8
 8014428:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801442a:	4b0a      	ldr	r3, [pc, #40]	; (8014454 <xTaskGetSchedulerState+0x30>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d102      	bne.n	8014438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014432:	2301      	movs	r3, #1
 8014434:	607b      	str	r3, [r7, #4]
 8014436:	e008      	b.n	801444a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014438:	4b07      	ldr	r3, [pc, #28]	; (8014458 <xTaskGetSchedulerState+0x34>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d102      	bne.n	8014446 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014440:	2302      	movs	r3, #2
 8014442:	607b      	str	r3, [r7, #4]
 8014444:	e001      	b.n	801444a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014446:	2300      	movs	r3, #0
 8014448:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801444a:	687b      	ldr	r3, [r7, #4]
	}
 801444c:	0018      	movs	r0, r3
 801444e:	46bd      	mov	sp, r7
 8014450:	b002      	add	sp, #8
 8014452:	bd80      	pop	{r7, pc}
 8014454:	200013e0 	.word	0x200013e0
 8014458:	200013fc 	.word	0x200013fc

0801445c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801445c:	b580      	push	{r7, lr}
 801445e:	b084      	sub	sp, #16
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014468:	2300      	movs	r3, #0
 801446a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d051      	beq.n	8014516 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014476:	4b2a      	ldr	r3, [pc, #168]	; (8014520 <xTaskPriorityInherit+0xc4>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801447c:	429a      	cmp	r2, r3
 801447e:	d241      	bcs.n	8014504 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	699b      	ldr	r3, [r3, #24]
 8014484:	2b00      	cmp	r3, #0
 8014486:	db06      	blt.n	8014496 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014488:	4b25      	ldr	r3, [pc, #148]	; (8014520 <xTaskPriorityInherit+0xc4>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801448e:	2207      	movs	r2, #7
 8014490:	1ad2      	subs	r2, r2, r3
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	6959      	ldr	r1, [r3, #20]
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801449e:	0013      	movs	r3, r2
 80144a0:	009b      	lsls	r3, r3, #2
 80144a2:	189b      	adds	r3, r3, r2
 80144a4:	009b      	lsls	r3, r3, #2
 80144a6:	4a1f      	ldr	r2, [pc, #124]	; (8014524 <xTaskPriorityInherit+0xc8>)
 80144a8:	189b      	adds	r3, r3, r2
 80144aa:	4299      	cmp	r1, r3
 80144ac:	d122      	bne.n	80144f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	3304      	adds	r3, #4
 80144b2:	0018      	movs	r0, r3
 80144b4:	f7fe fe5c 	bl	8013170 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80144b8:	4b19      	ldr	r3, [pc, #100]	; (8014520 <xTaskPriorityInherit+0xc4>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144c6:	4b18      	ldr	r3, [pc, #96]	; (8014528 <xTaskPriorityInherit+0xcc>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d903      	bls.n	80144d6 <xTaskPriorityInherit+0x7a>
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144d2:	4b15      	ldr	r3, [pc, #84]	; (8014528 <xTaskPriorityInherit+0xcc>)
 80144d4:	601a      	str	r2, [r3, #0]
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144da:	0013      	movs	r3, r2
 80144dc:	009b      	lsls	r3, r3, #2
 80144de:	189b      	adds	r3, r3, r2
 80144e0:	009b      	lsls	r3, r3, #2
 80144e2:	4a10      	ldr	r2, [pc, #64]	; (8014524 <xTaskPriorityInherit+0xc8>)
 80144e4:	189a      	adds	r2, r3, r2
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	3304      	adds	r3, #4
 80144ea:	0019      	movs	r1, r3
 80144ec:	0010      	movs	r0, r2
 80144ee:	f7fe fde7 	bl	80130c0 <vListInsertEnd>
 80144f2:	e004      	b.n	80144fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80144f4:	4b0a      	ldr	r3, [pc, #40]	; (8014520 <xTaskPriorityInherit+0xc4>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80144fe:	2301      	movs	r3, #1
 8014500:	60fb      	str	r3, [r7, #12]
 8014502:	e008      	b.n	8014516 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014508:	4b05      	ldr	r3, [pc, #20]	; (8014520 <xTaskPriorityInherit+0xc4>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801450e:	429a      	cmp	r2, r3
 8014510:	d201      	bcs.n	8014516 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014512:	2301      	movs	r3, #1
 8014514:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014516:	68fb      	ldr	r3, [r7, #12]
	}
 8014518:	0018      	movs	r0, r3
 801451a:	46bd      	mov	sp, r7
 801451c:	b004      	add	sp, #16
 801451e:	bd80      	pop	{r7, pc}
 8014520:	200012d4 	.word	0x200012d4
 8014524:	200012d8 	.word	0x200012d8
 8014528:	200013dc 	.word	0x200013dc

0801452c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801452c:	b580      	push	{r7, lr}
 801452e:	b086      	sub	sp, #24
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801453a:	2301      	movs	r3, #1
 801453c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d058      	beq.n	80145f6 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014548:	2b00      	cmp	r3, #0
 801454a:	d101      	bne.n	8014550 <vTaskPriorityDisinheritAfterTimeout+0x24>
 801454c:	b672      	cpsid	i
 801454e:	e7fe      	b.n	801454e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014550:	693b      	ldr	r3, [r7, #16]
 8014552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014554:	683a      	ldr	r2, [r7, #0]
 8014556:	429a      	cmp	r2, r3
 8014558:	d902      	bls.n	8014560 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	617b      	str	r3, [r7, #20]
 801455e:	e002      	b.n	8014566 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014560:	693b      	ldr	r3, [r7, #16]
 8014562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014564:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801456a:	697a      	ldr	r2, [r7, #20]
 801456c:	429a      	cmp	r2, r3
 801456e:	d042      	beq.n	80145f6 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014570:	693b      	ldr	r3, [r7, #16]
 8014572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014574:	68fa      	ldr	r2, [r7, #12]
 8014576:	429a      	cmp	r2, r3
 8014578:	d13d      	bne.n	80145f6 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801457a:	4b21      	ldr	r3, [pc, #132]	; (8014600 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	693a      	ldr	r2, [r7, #16]
 8014580:	429a      	cmp	r2, r3
 8014582:	d101      	bne.n	8014588 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8014584:	b672      	cpsid	i
 8014586:	e7fe      	b.n	8014586 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014588:	693b      	ldr	r3, [r7, #16]
 801458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801458c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	697a      	ldr	r2, [r7, #20]
 8014592:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	699b      	ldr	r3, [r3, #24]
 8014598:	2b00      	cmp	r3, #0
 801459a:	db04      	blt.n	80145a6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	2207      	movs	r2, #7
 80145a0:	1ad2      	subs	r2, r2, r3
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	6959      	ldr	r1, [r3, #20]
 80145aa:	68ba      	ldr	r2, [r7, #8]
 80145ac:	0013      	movs	r3, r2
 80145ae:	009b      	lsls	r3, r3, #2
 80145b0:	189b      	adds	r3, r3, r2
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	4a13      	ldr	r2, [pc, #76]	; (8014604 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80145b6:	189b      	adds	r3, r3, r2
 80145b8:	4299      	cmp	r1, r3
 80145ba:	d11c      	bne.n	80145f6 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	3304      	adds	r3, #4
 80145c0:	0018      	movs	r0, r3
 80145c2:	f7fe fdd5 	bl	8013170 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145ca:	4b0f      	ldr	r3, [pc, #60]	; (8014608 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d903      	bls.n	80145da <vTaskPriorityDisinheritAfterTimeout+0xae>
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145d6:	4b0c      	ldr	r3, [pc, #48]	; (8014608 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80145d8:	601a      	str	r2, [r3, #0]
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145de:	0013      	movs	r3, r2
 80145e0:	009b      	lsls	r3, r3, #2
 80145e2:	189b      	adds	r3, r3, r2
 80145e4:	009b      	lsls	r3, r3, #2
 80145e6:	4a07      	ldr	r2, [pc, #28]	; (8014604 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 80145e8:	189a      	adds	r2, r3, r2
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	3304      	adds	r3, #4
 80145ee:	0019      	movs	r1, r3
 80145f0:	0010      	movs	r0, r2
 80145f2:	f7fe fd65 	bl	80130c0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80145f6:	46c0      	nop			; (mov r8, r8)
 80145f8:	46bd      	mov	sp, r7
 80145fa:	b006      	add	sp, #24
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	46c0      	nop			; (mov r8, r8)
 8014600:	200012d4 	.word	0x200012d4
 8014604:	200012d8 	.word	0x200012d8
 8014608:	200013dc 	.word	0x200013dc

0801460c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 801460c:	b580      	push	{r7, lr}
 801460e:	b084      	sub	sp, #16
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8014616:	683a      	ldr	r2, [r7, #0]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	0011      	movs	r1, r2
 801461c:	0018      	movs	r0, r3
 801461e:	f001 fd69 	bl	80160f4 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	0018      	movs	r0, r3
 8014626:	f7eb fd79 	bl	800011c <strlen>
 801462a:	0003      	movs	r3, r0
 801462c:	60fb      	str	r3, [r7, #12]
 801462e:	e007      	b.n	8014640 <prvWriteNameToBuffer+0x34>
		{
			pcBuffer[ x ] = ' ';
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	18d3      	adds	r3, r2, r3
 8014636:	2220      	movs	r2, #32
 8014638:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	3301      	adds	r3, #1
 801463e:	60fb      	str	r3, [r7, #12]
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2b0e      	cmp	r3, #14
 8014644:	d9f4      	bls.n	8014630 <prvWriteNameToBuffer+0x24>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8014646:	687a      	ldr	r2, [r7, #4]
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	18d3      	adds	r3, r2, r3
 801464c:	2200      	movs	r2, #0
 801464e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	18d3      	adds	r3, r2, r3
	}
 8014656:	0018      	movs	r0, r3
 8014658:	46bd      	mov	sp, r7
 801465a:	b004      	add	sp, #16
 801465c:	bd80      	pop	{r7, pc}
	...

08014660 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8014660:	b580      	push	{r7, lr}
 8014662:	b088      	sub	sp, #32
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2200      	movs	r2, #0
 801466c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801466e:	4b3f      	ldr	r3, [pc, #252]	; (801476c <vTaskGetRunTimeStats+0x10c>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8014674:	4b3d      	ldr	r3, [pc, #244]	; (801476c <vTaskGetRunTimeStats+0x10c>)
 8014676:	681a      	ldr	r2, [r3, #0]
 8014678:	0013      	movs	r3, r2
 801467a:	00db      	lsls	r3, r3, #3
 801467c:	189b      	adds	r3, r3, r2
 801467e:	009b      	lsls	r3, r3, #2
 8014680:	0018      	movs	r0, r3
 8014682:	f000 fa15 	bl	8014ab0 <pvPortMalloc>
 8014686:	0003      	movs	r3, r0
 8014688:	617b      	str	r3, [r7, #20]

		if( pxTaskStatusArray != NULL )
 801468a:	697b      	ldr	r3, [r7, #20]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d068      	beq.n	8014762 <vTaskGetRunTimeStats+0x102>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8014690:	230c      	movs	r3, #12
 8014692:	18fa      	adds	r2, r7, r3
 8014694:	69b9      	ldr	r1, [r7, #24]
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	0018      	movs	r0, r3
 801469a:	f7ff faa3 	bl	8013be4 <uxTaskGetSystemState>
 801469e:	0003      	movs	r3, r0
 80146a0:	61bb      	str	r3, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	2164      	movs	r1, #100	; 0x64
 80146a6:	0018      	movs	r0, r3
 80146a8:	f7eb fd54 	bl	8000154 <__udivsi3>
 80146ac:	0003      	movs	r3, r0
 80146ae:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d051      	beq.n	801475a <vTaskGetRunTimeStats+0xfa>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 80146b6:	2300      	movs	r3, #0
 80146b8:	61fb      	str	r3, [r7, #28]
 80146ba:	e04a      	b.n	8014752 <vTaskGetRunTimeStats+0xf2>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80146bc:	69fa      	ldr	r2, [r7, #28]
 80146be:	0013      	movs	r3, r2
 80146c0:	00db      	lsls	r3, r3, #3
 80146c2:	189b      	adds	r3, r3, r2
 80146c4:	009b      	lsls	r3, r3, #2
 80146c6:	001a      	movs	r2, r3
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	189b      	adds	r3, r3, r2
 80146cc:	699b      	ldr	r3, [r3, #24]
 80146ce:	68fa      	ldr	r2, [r7, #12]
 80146d0:	0011      	movs	r1, r2
 80146d2:	0018      	movs	r0, r3
 80146d4:	f7eb fd3e 	bl	8000154 <__udivsi3>
 80146d8:	0003      	movs	r3, r0
 80146da:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80146dc:	69fa      	ldr	r2, [r7, #28]
 80146de:	0013      	movs	r3, r2
 80146e0:	00db      	lsls	r3, r3, #3
 80146e2:	189b      	adds	r3, r3, r2
 80146e4:	009b      	lsls	r3, r3, #2
 80146e6:	001a      	movs	r2, r3
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	189b      	adds	r3, r3, r2
 80146ec:	685a      	ldr	r2, [r3, #4]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	0011      	movs	r1, r2
 80146f2:	0018      	movs	r0, r3
 80146f4:	f7ff ff8a 	bl	801460c <prvWriteNameToBuffer>
 80146f8:	0003      	movs	r3, r0
 80146fa:	607b      	str	r3, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 80146fc:	693b      	ldr	r3, [r7, #16]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d00e      	beq.n	8014720 <vTaskGetRunTimeStats+0xc0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8014702:	69fa      	ldr	r2, [r7, #28]
 8014704:	0013      	movs	r3, r2
 8014706:	00db      	lsls	r3, r3, #3
 8014708:	189b      	adds	r3, r3, r2
 801470a:	009b      	lsls	r3, r3, #2
 801470c:	001a      	movs	r2, r3
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	189b      	adds	r3, r3, r2
 8014712:	699a      	ldr	r2, [r3, #24]
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	4916      	ldr	r1, [pc, #88]	; (8014770 <vTaskGetRunTimeStats+0x110>)
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	f001 fccb 	bl	80160b4 <siprintf>
 801471e:	e00d      	b.n	801473c <vTaskGetRunTimeStats+0xdc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8014720:	69fa      	ldr	r2, [r7, #28]
 8014722:	0013      	movs	r3, r2
 8014724:	00db      	lsls	r3, r3, #3
 8014726:	189b      	adds	r3, r3, r2
 8014728:	009b      	lsls	r3, r3, #2
 801472a:	001a      	movs	r2, r3
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	189b      	adds	r3, r3, r2
 8014730:	699a      	ldr	r2, [r3, #24]
 8014732:	4910      	ldr	r1, [pc, #64]	; (8014774 <vTaskGetRunTimeStats+0x114>)
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	0018      	movs	r0, r3
 8014738:	f001 fcbc 	bl	80160b4 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	0018      	movs	r0, r3
 8014740:	f7eb fcec 	bl	800011c <strlen>
 8014744:	0002      	movs	r2, r0
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	189b      	adds	r3, r3, r2
 801474a:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	3301      	adds	r3, #1
 8014750:	61fb      	str	r3, [r7, #28]
 8014752:	69fa      	ldr	r2, [r7, #28]
 8014754:	69bb      	ldr	r3, [r7, #24]
 8014756:	429a      	cmp	r2, r3
 8014758:	d3b0      	bcc.n	80146bc <vTaskGetRunTimeStats+0x5c>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	0018      	movs	r0, r3
 801475e:	f000 fa53 	bl	8014c08 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014762:	46c0      	nop			; (mov r8, r8)
 8014764:	46bd      	mov	sp, r7
 8014766:	b008      	add	sp, #32
 8014768:	bd80      	pop	{r7, pc}
 801476a:	46c0      	nop			; (mov r8, r8)
 801476c:	200013d4 	.word	0x200013d4
 8014770:	0801b5c0 	.word	0x0801b5c0
 8014774:	0801b5cc 	.word	0x0801b5cc

08014778 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014778:	b580      	push	{r7, lr}
 801477a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801477c:	4b06      	ldr	r3, [pc, #24]	; (8014798 <pvTaskIncrementMutexHeldCount+0x20>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d004      	beq.n	801478e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014784:	4b04      	ldr	r3, [pc, #16]	; (8014798 <pvTaskIncrementMutexHeldCount+0x20>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801478a:	3201      	adds	r2, #1
 801478c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801478e:	4b02      	ldr	r3, [pc, #8]	; (8014798 <pvTaskIncrementMutexHeldCount+0x20>)
 8014790:	681b      	ldr	r3, [r3, #0]
	}
 8014792:	0018      	movs	r0, r3
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	200012d4 	.word	0x200012d4

0801479c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b084      	sub	sp, #16
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
 80147a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80147a6:	4b21      	ldr	r3, [pc, #132]	; (801482c <prvAddCurrentTaskToDelayedList+0x90>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147ac:	4b20      	ldr	r3, [pc, #128]	; (8014830 <prvAddCurrentTaskToDelayedList+0x94>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	3304      	adds	r3, #4
 80147b2:	0018      	movs	r0, r3
 80147b4:	f7fe fcdc 	bl	8013170 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	3301      	adds	r3, #1
 80147bc:	d10b      	bne.n	80147d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d008      	beq.n	80147d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147c4:	4b1a      	ldr	r3, [pc, #104]	; (8014830 <prvAddCurrentTaskToDelayedList+0x94>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	1d1a      	adds	r2, r3, #4
 80147ca:	4b1a      	ldr	r3, [pc, #104]	; (8014834 <prvAddCurrentTaskToDelayedList+0x98>)
 80147cc:	0011      	movs	r1, r2
 80147ce:	0018      	movs	r0, r3
 80147d0:	f7fe fc76 	bl	80130c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80147d4:	e026      	b.n	8014824 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80147d6:	68fa      	ldr	r2, [r7, #12]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	18d3      	adds	r3, r2, r3
 80147dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80147de:	4b14      	ldr	r3, [pc, #80]	; (8014830 <prvAddCurrentTaskToDelayedList+0x94>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	68ba      	ldr	r2, [r7, #8]
 80147e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80147e6:	68ba      	ldr	r2, [r7, #8]
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d209      	bcs.n	8014802 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147ee:	4b12      	ldr	r3, [pc, #72]	; (8014838 <prvAddCurrentTaskToDelayedList+0x9c>)
 80147f0:	681a      	ldr	r2, [r3, #0]
 80147f2:	4b0f      	ldr	r3, [pc, #60]	; (8014830 <prvAddCurrentTaskToDelayedList+0x94>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	3304      	adds	r3, #4
 80147f8:	0019      	movs	r1, r3
 80147fa:	0010      	movs	r0, r2
 80147fc:	f7fe fc82 	bl	8013104 <vListInsert>
}
 8014800:	e010      	b.n	8014824 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014802:	4b0e      	ldr	r3, [pc, #56]	; (801483c <prvAddCurrentTaskToDelayedList+0xa0>)
 8014804:	681a      	ldr	r2, [r3, #0]
 8014806:	4b0a      	ldr	r3, [pc, #40]	; (8014830 <prvAddCurrentTaskToDelayedList+0x94>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	3304      	adds	r3, #4
 801480c:	0019      	movs	r1, r3
 801480e:	0010      	movs	r0, r2
 8014810:	f7fe fc78 	bl	8013104 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014814:	4b0a      	ldr	r3, [pc, #40]	; (8014840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	68ba      	ldr	r2, [r7, #8]
 801481a:	429a      	cmp	r2, r3
 801481c:	d202      	bcs.n	8014824 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801481e:	4b08      	ldr	r3, [pc, #32]	; (8014840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014820:	68ba      	ldr	r2, [r7, #8]
 8014822:	601a      	str	r2, [r3, #0]
}
 8014824:	46c0      	nop			; (mov r8, r8)
 8014826:	46bd      	mov	sp, r7
 8014828:	b004      	add	sp, #16
 801482a:	bd80      	pop	{r7, pc}
 801482c:	200013d8 	.word	0x200013d8
 8014830:	200012d4 	.word	0x200012d4
 8014834:	200013c0 	.word	0x200013c0
 8014838:	20001390 	.word	0x20001390
 801483c:	2000138c 	.word	0x2000138c
 8014840:	200013f4 	.word	0x200013f4

08014844 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b084      	sub	sp, #16
 8014848:	af00      	add	r7, sp, #0
 801484a:	60f8      	str	r0, [r7, #12]
 801484c:	60b9      	str	r1, [r7, #8]
 801484e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	3b04      	subs	r3, #4
 8014854:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	2280      	movs	r2, #128	; 0x80
 801485a:	0452      	lsls	r2, r2, #17
 801485c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	3b04      	subs	r3, #4
 8014862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8014864:	68ba      	ldr	r2, [r7, #8]
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	3b04      	subs	r3, #4
 801486e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014870:	4a08      	ldr	r2, [pc, #32]	; (8014894 <pxPortInitialiseStack+0x50>)
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	3b14      	subs	r3, #20
 801487a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801487c:	687a      	ldr	r2, [r7, #4]
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	3b20      	subs	r3, #32
 8014886:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014888:	68fb      	ldr	r3, [r7, #12]
}
 801488a:	0018      	movs	r0, r3
 801488c:	46bd      	mov	sp, r7
 801488e:	b004      	add	sp, #16
 8014890:	bd80      	pop	{r7, pc}
 8014892:	46c0      	nop			; (mov r8, r8)
 8014894:	08014899 	.word	0x08014899

08014898 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801489e:	2300      	movs	r3, #0
 80148a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80148a2:	4b08      	ldr	r3, [pc, #32]	; (80148c4 <prvTaskExitError+0x2c>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	3301      	adds	r3, #1
 80148a8:	d001      	beq.n	80148ae <prvTaskExitError+0x16>
 80148aa:	b672      	cpsid	i
 80148ac:	e7fe      	b.n	80148ac <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80148ae:	b672      	cpsid	i
	while( ulDummy == 0 )
 80148b0:	46c0      	nop			; (mov r8, r8)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d0fc      	beq.n	80148b2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80148b8:	46c0      	nop			; (mov r8, r8)
 80148ba:	46c0      	nop			; (mov r8, r8)
 80148bc:	46bd      	mov	sp, r7
 80148be:	b002      	add	sp, #8
 80148c0:	bd80      	pop	{r7, pc}
 80148c2:	46c0      	nop			; (mov r8, r8)
 80148c4:	200002d4 	.word	0x200002d4

080148c8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80148cc:	46c0      	nop			; (mov r8, r8)
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
	...

080148e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80148e0:	4a0b      	ldr	r2, [pc, #44]	; (8014910 <pxCurrentTCBConst2>)
 80148e2:	6813      	ldr	r3, [r2, #0]
 80148e4:	6818      	ldr	r0, [r3, #0]
 80148e6:	3020      	adds	r0, #32
 80148e8:	f380 8809 	msr	PSP, r0
 80148ec:	2002      	movs	r0, #2
 80148ee:	f380 8814 	msr	CONTROL, r0
 80148f2:	f3bf 8f6f 	isb	sy
 80148f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80148f8:	46ae      	mov	lr, r5
 80148fa:	bc08      	pop	{r3}
 80148fc:	bc04      	pop	{r2}
 80148fe:	b662      	cpsie	i
 8014900:	4718      	bx	r3
 8014902:	46c0      	nop			; (mov r8, r8)
 8014904:	46c0      	nop			; (mov r8, r8)
 8014906:	46c0      	nop			; (mov r8, r8)
 8014908:	46c0      	nop			; (mov r8, r8)
 801490a:	46c0      	nop			; (mov r8, r8)
 801490c:	46c0      	nop			; (mov r8, r8)
 801490e:	46c0      	nop			; (mov r8, r8)

08014910 <pxCurrentTCBConst2>:
 8014910:	200012d4 	.word	0x200012d4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8014914:	46c0      	nop			; (mov r8, r8)
 8014916:	46c0      	nop			; (mov r8, r8)

08014918 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014918:	b580      	push	{r7, lr}
 801491a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801491c:	4b0e      	ldr	r3, [pc, #56]	; (8014958 <xPortStartScheduler+0x40>)
 801491e:	681a      	ldr	r2, [r3, #0]
 8014920:	4b0d      	ldr	r3, [pc, #52]	; (8014958 <xPortStartScheduler+0x40>)
 8014922:	21ff      	movs	r1, #255	; 0xff
 8014924:	0409      	lsls	r1, r1, #16
 8014926:	430a      	orrs	r2, r1
 8014928:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801492a:	4b0b      	ldr	r3, [pc, #44]	; (8014958 <xPortStartScheduler+0x40>)
 801492c:	681a      	ldr	r2, [r3, #0]
 801492e:	4b0a      	ldr	r3, [pc, #40]	; (8014958 <xPortStartScheduler+0x40>)
 8014930:	21ff      	movs	r1, #255	; 0xff
 8014932:	0609      	lsls	r1, r1, #24
 8014934:	430a      	orrs	r2, r1
 8014936:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014938:	f000 f898 	bl	8014a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801493c:	4b07      	ldr	r3, [pc, #28]	; (801495c <xPortStartScheduler+0x44>)
 801493e:	2200      	movs	r2, #0
 8014940:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8014942:	f7ff ffcd 	bl	80148e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014946:	f7ff fa8d 	bl	8013e64 <vTaskSwitchContext>
	prvTaskExitError();
 801494a:	f7ff ffa5 	bl	8014898 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801494e:	2300      	movs	r3, #0
}
 8014950:	0018      	movs	r0, r3
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
 8014956:	46c0      	nop			; (mov r8, r8)
 8014958:	e000ed20 	.word	0xe000ed20
 801495c:	200002d4 	.word	0x200002d4

08014960 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8014960:	b580      	push	{r7, lr}
 8014962:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014964:	4b05      	ldr	r3, [pc, #20]	; (801497c <vPortYield+0x1c>)
 8014966:	2280      	movs	r2, #128	; 0x80
 8014968:	0552      	lsls	r2, r2, #21
 801496a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801496c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8014970:	f3bf 8f6f 	isb	sy
}
 8014974:	46c0      	nop			; (mov r8, r8)
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	46c0      	nop			; (mov r8, r8)
 801497c:	e000ed04 	.word	0xe000ed04

08014980 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014980:	b580      	push	{r7, lr}
 8014982:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8014984:	b672      	cpsid	i
	uxCriticalNesting++;
 8014986:	4b06      	ldr	r3, [pc, #24]	; (80149a0 <vPortEnterCritical+0x20>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	1c5a      	adds	r2, r3, #1
 801498c:	4b04      	ldr	r3, [pc, #16]	; (80149a0 <vPortEnterCritical+0x20>)
 801498e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8014990:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8014994:	f3bf 8f6f 	isb	sy
}
 8014998:	46c0      	nop			; (mov r8, r8)
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}
 801499e:	46c0      	nop			; (mov r8, r8)
 80149a0:	200002d4 	.word	0x200002d4

080149a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80149a8:	4b09      	ldr	r3, [pc, #36]	; (80149d0 <vPortExitCritical+0x2c>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d101      	bne.n	80149b4 <vPortExitCritical+0x10>
 80149b0:	b672      	cpsid	i
 80149b2:	e7fe      	b.n	80149b2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80149b4:	4b06      	ldr	r3, [pc, #24]	; (80149d0 <vPortExitCritical+0x2c>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	1e5a      	subs	r2, r3, #1
 80149ba:	4b05      	ldr	r3, [pc, #20]	; (80149d0 <vPortExitCritical+0x2c>)
 80149bc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80149be:	4b04      	ldr	r3, [pc, #16]	; (80149d0 <vPortExitCritical+0x2c>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d100      	bne.n	80149c8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80149c6:	b662      	cpsie	i
	}
}
 80149c8:	46c0      	nop			; (mov r8, r8)
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}
 80149ce:	46c0      	nop			; (mov r8, r8)
 80149d0:	200002d4 	.word	0x200002d4

080149d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80149d4:	f3ef 8010 	mrs	r0, PRIMASK
 80149d8:	b672      	cpsid	i
 80149da:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80149dc:	46c0      	nop			; (mov r8, r8)
 80149de:	0018      	movs	r0, r3

080149e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80149e0:	f380 8810 	msr	PRIMASK, r0
 80149e4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80149e6:	46c0      	nop			; (mov r8, r8)
	...

080149f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80149f0:	f3ef 8009 	mrs	r0, PSP
 80149f4:	4b0e      	ldr	r3, [pc, #56]	; (8014a30 <pxCurrentTCBConst>)
 80149f6:	681a      	ldr	r2, [r3, #0]
 80149f8:	3820      	subs	r0, #32
 80149fa:	6010      	str	r0, [r2, #0]
 80149fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80149fe:	4644      	mov	r4, r8
 8014a00:	464d      	mov	r5, r9
 8014a02:	4656      	mov	r6, sl
 8014a04:	465f      	mov	r7, fp
 8014a06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8014a08:	b508      	push	{r3, lr}
 8014a0a:	b672      	cpsid	i
 8014a0c:	f7ff fa2a 	bl	8013e64 <vTaskSwitchContext>
 8014a10:	b662      	cpsie	i
 8014a12:	bc0c      	pop	{r2, r3}
 8014a14:	6811      	ldr	r1, [r2, #0]
 8014a16:	6808      	ldr	r0, [r1, #0]
 8014a18:	3010      	adds	r0, #16
 8014a1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8014a1c:	46a0      	mov	r8, r4
 8014a1e:	46a9      	mov	r9, r5
 8014a20:	46b2      	mov	sl, r6
 8014a22:	46bb      	mov	fp, r7
 8014a24:	f380 8809 	msr	PSP, r0
 8014a28:	3820      	subs	r0, #32
 8014a2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8014a2c:	4718      	bx	r3
 8014a2e:	46c0      	nop			; (mov r8, r8)

08014a30 <pxCurrentTCBConst>:
 8014a30:	200012d4 	.word	0x200012d4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8014a34:	46c0      	nop			; (mov r8, r8)
 8014a36:	46c0      	nop			; (mov r8, r8)

08014a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b082      	sub	sp, #8
 8014a3c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8014a3e:	f7ff ffc9 	bl	80149d4 <ulSetInterruptMaskFromISR>
 8014a42:	0003      	movs	r3, r0
 8014a44:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014a46:	f7ff f95d 	bl	8013d04 <xTaskIncrementTick>
 8014a4a:	1e03      	subs	r3, r0, #0
 8014a4c:	d003      	beq.n	8014a56 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014a4e:	4b06      	ldr	r3, [pc, #24]	; (8014a68 <SysTick_Handler+0x30>)
 8014a50:	2280      	movs	r2, #128	; 0x80
 8014a52:	0552      	lsls	r2, r2, #21
 8014a54:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	0018      	movs	r0, r3
 8014a5a:	f7ff ffc1 	bl	80149e0 <vClearInterruptMaskFromISR>
}
 8014a5e:	46c0      	nop			; (mov r8, r8)
 8014a60:	46bd      	mov	sp, r7
 8014a62:	b002      	add	sp, #8
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	46c0      	nop			; (mov r8, r8)
 8014a68:	e000ed04 	.word	0xe000ed04

08014a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014a70:	4b0b      	ldr	r3, [pc, #44]	; (8014aa0 <vPortSetupTimerInterrupt+0x34>)
 8014a72:	2200      	movs	r2, #0
 8014a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014a76:	4b0b      	ldr	r3, [pc, #44]	; (8014aa4 <vPortSetupTimerInterrupt+0x38>)
 8014a78:	2200      	movs	r2, #0
 8014a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014a7c:	4b0a      	ldr	r3, [pc, #40]	; (8014aa8 <vPortSetupTimerInterrupt+0x3c>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	22fa      	movs	r2, #250	; 0xfa
 8014a82:	0091      	lsls	r1, r2, #2
 8014a84:	0018      	movs	r0, r3
 8014a86:	f7eb fb65 	bl	8000154 <__udivsi3>
 8014a8a:	0003      	movs	r3, r0
 8014a8c:	001a      	movs	r2, r3
 8014a8e:	4b07      	ldr	r3, [pc, #28]	; (8014aac <vPortSetupTimerInterrupt+0x40>)
 8014a90:	3a01      	subs	r2, #1
 8014a92:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8014a94:	4b02      	ldr	r3, [pc, #8]	; (8014aa0 <vPortSetupTimerInterrupt+0x34>)
 8014a96:	2207      	movs	r2, #7
 8014a98:	601a      	str	r2, [r3, #0]
}
 8014a9a:	46c0      	nop			; (mov r8, r8)
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}
 8014aa0:	e000e010 	.word	0xe000e010
 8014aa4:	e000e018 	.word	0xe000e018
 8014aa8:	2000000c 	.word	0x2000000c
 8014aac:	e000e014 	.word	0xe000e014

08014ab0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b086      	sub	sp, #24
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014ab8:	2300      	movs	r3, #0
 8014aba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8014abc:	f7fe fffa 	bl	8013ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014ac0:	4b4b      	ldr	r3, [pc, #300]	; (8014bf0 <pvPortMalloc+0x140>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d101      	bne.n	8014acc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014ac8:	f000 f8ec 	bl	8014ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014acc:	4b49      	ldr	r3, [pc, #292]	; (8014bf4 <pvPortMalloc+0x144>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	4013      	ands	r3, r2
 8014ad4:	d000      	beq.n	8014ad8 <pvPortMalloc+0x28>
 8014ad6:	e07e      	b.n	8014bd6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d012      	beq.n	8014b04 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8014ade:	2208      	movs	r2, #8
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	189b      	adds	r3, r3, r2
 8014ae4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	2207      	movs	r2, #7
 8014aea:	4013      	ands	r3, r2
 8014aec:	d00a      	beq.n	8014b04 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	2207      	movs	r2, #7
 8014af2:	4393      	bics	r3, r2
 8014af4:	3308      	adds	r3, #8
 8014af6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2207      	movs	r2, #7
 8014afc:	4013      	ands	r3, r2
 8014afe:	d001      	beq.n	8014b04 <pvPortMalloc+0x54>
 8014b00:	b672      	cpsid	i
 8014b02:	e7fe      	b.n	8014b02 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d065      	beq.n	8014bd6 <pvPortMalloc+0x126>
 8014b0a:	4b3b      	ldr	r3, [pc, #236]	; (8014bf8 <pvPortMalloc+0x148>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	687a      	ldr	r2, [r7, #4]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d860      	bhi.n	8014bd6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014b14:	4b39      	ldr	r3, [pc, #228]	; (8014bfc <pvPortMalloc+0x14c>)
 8014b16:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8014b18:	4b38      	ldr	r3, [pc, #224]	; (8014bfc <pvPortMalloc+0x14c>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014b1e:	e004      	b.n	8014b2a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014b24:	697b      	ldr	r3, [r7, #20]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	687a      	ldr	r2, [r7, #4]
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d903      	bls.n	8014b3c <pvPortMalloc+0x8c>
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d1f1      	bne.n	8014b20 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014b3c:	4b2c      	ldr	r3, [pc, #176]	; (8014bf0 <pvPortMalloc+0x140>)
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	697a      	ldr	r2, [r7, #20]
 8014b42:	429a      	cmp	r2, r3
 8014b44:	d047      	beq.n	8014bd6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014b46:	693b      	ldr	r3, [r7, #16]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	2208      	movs	r2, #8
 8014b4c:	189b      	adds	r3, r3, r2
 8014b4e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014b50:	697b      	ldr	r3, [r7, #20]
 8014b52:	681a      	ldr	r2, [r3, #0]
 8014b54:	693b      	ldr	r3, [r7, #16]
 8014b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	685a      	ldr	r2, [r3, #4]
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	1ad2      	subs	r2, r2, r3
 8014b60:	2308      	movs	r3, #8
 8014b62:	005b      	lsls	r3, r3, #1
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d916      	bls.n	8014b96 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014b68:	697a      	ldr	r2, [r7, #20]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	18d3      	adds	r3, r2, r3
 8014b6e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	2207      	movs	r2, #7
 8014b74:	4013      	ands	r3, r2
 8014b76:	d001      	beq.n	8014b7c <pvPortMalloc+0xcc>
 8014b78:	b672      	cpsid	i
 8014b7a:	e7fe      	b.n	8014b7a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	685a      	ldr	r2, [r3, #4]
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	1ad2      	subs	r2, r2, r3
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	687a      	ldr	r2, [r7, #4]
 8014b8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014b8e:	68bb      	ldr	r3, [r7, #8]
 8014b90:	0018      	movs	r0, r3
 8014b92:	f000 f8e7 	bl	8014d64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014b96:	4b18      	ldr	r3, [pc, #96]	; (8014bf8 <pvPortMalloc+0x148>)
 8014b98:	681a      	ldr	r2, [r3, #0]
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	1ad2      	subs	r2, r2, r3
 8014ba0:	4b15      	ldr	r3, [pc, #84]	; (8014bf8 <pvPortMalloc+0x148>)
 8014ba2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014ba4:	4b14      	ldr	r3, [pc, #80]	; (8014bf8 <pvPortMalloc+0x148>)
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	4b15      	ldr	r3, [pc, #84]	; (8014c00 <pvPortMalloc+0x150>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d203      	bcs.n	8014bb8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014bb0:	4b11      	ldr	r3, [pc, #68]	; (8014bf8 <pvPortMalloc+0x148>)
 8014bb2:	681a      	ldr	r2, [r3, #0]
 8014bb4:	4b12      	ldr	r3, [pc, #72]	; (8014c00 <pvPortMalloc+0x150>)
 8014bb6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	685a      	ldr	r2, [r3, #4]
 8014bbc:	4b0d      	ldr	r3, [pc, #52]	; (8014bf4 <pvPortMalloc+0x144>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	431a      	orrs	r2, r3
 8014bc2:	697b      	ldr	r3, [r7, #20]
 8014bc4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014bcc:	4b0d      	ldr	r3, [pc, #52]	; (8014c04 <pvPortMalloc+0x154>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	1c5a      	adds	r2, r3, #1
 8014bd2:	4b0c      	ldr	r3, [pc, #48]	; (8014c04 <pvPortMalloc+0x154>)
 8014bd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014bd6:	f7fe ff79 	bl	8013acc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	2207      	movs	r2, #7
 8014bde:	4013      	ands	r3, r2
 8014be0:	d001      	beq.n	8014be6 <pvPortMalloc+0x136>
 8014be2:	b672      	cpsid	i
 8014be4:	e7fe      	b.n	8014be4 <pvPortMalloc+0x134>
	return pvReturn;
 8014be6:	68fb      	ldr	r3, [r7, #12]
}
 8014be8:	0018      	movs	r0, r3
 8014bea:	46bd      	mov	sp, r7
 8014bec:	b006      	add	sp, #24
 8014bee:	bd80      	pop	{r7, pc}
 8014bf0:	20005410 	.word	0x20005410
 8014bf4:	20005424 	.word	0x20005424
 8014bf8:	20005414 	.word	0x20005414
 8014bfc:	20005408 	.word	0x20005408
 8014c00:	20005418 	.word	0x20005418
 8014c04:	2000541c 	.word	0x2000541c

08014c08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d03a      	beq.n	8014c90 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014c1a:	2308      	movs	r3, #8
 8014c1c:	425b      	negs	r3, r3
 8014c1e:	68fa      	ldr	r2, [r7, #12]
 8014c20:	18d3      	adds	r3, r2, r3
 8014c22:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014c28:	68bb      	ldr	r3, [r7, #8]
 8014c2a:	685a      	ldr	r2, [r3, #4]
 8014c2c:	4b1a      	ldr	r3, [pc, #104]	; (8014c98 <vPortFree+0x90>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	4013      	ands	r3, r2
 8014c32:	d101      	bne.n	8014c38 <vPortFree+0x30>
 8014c34:	b672      	cpsid	i
 8014c36:	e7fe      	b.n	8014c36 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014c38:	68bb      	ldr	r3, [r7, #8]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d001      	beq.n	8014c44 <vPortFree+0x3c>
 8014c40:	b672      	cpsid	i
 8014c42:	e7fe      	b.n	8014c42 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	685a      	ldr	r2, [r3, #4]
 8014c48:	4b13      	ldr	r3, [pc, #76]	; (8014c98 <vPortFree+0x90>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	4013      	ands	r3, r2
 8014c4e:	d01f      	beq.n	8014c90 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d11b      	bne.n	8014c90 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	685a      	ldr	r2, [r3, #4]
 8014c5c:	4b0e      	ldr	r3, [pc, #56]	; (8014c98 <vPortFree+0x90>)
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	43db      	mvns	r3, r3
 8014c62:	401a      	ands	r2, r3
 8014c64:	68bb      	ldr	r3, [r7, #8]
 8014c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014c68:	f7fe ff24 	bl	8013ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	685a      	ldr	r2, [r3, #4]
 8014c70:	4b0a      	ldr	r3, [pc, #40]	; (8014c9c <vPortFree+0x94>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	18d2      	adds	r2, r2, r3
 8014c76:	4b09      	ldr	r3, [pc, #36]	; (8014c9c <vPortFree+0x94>)
 8014c78:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	0018      	movs	r0, r3
 8014c7e:	f000 f871 	bl	8014d64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014c82:	4b07      	ldr	r3, [pc, #28]	; (8014ca0 <vPortFree+0x98>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	1c5a      	adds	r2, r3, #1
 8014c88:	4b05      	ldr	r3, [pc, #20]	; (8014ca0 <vPortFree+0x98>)
 8014c8a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8014c8c:	f7fe ff1e 	bl	8013acc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014c90:	46c0      	nop			; (mov r8, r8)
 8014c92:	46bd      	mov	sp, r7
 8014c94:	b004      	add	sp, #16
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	20005424 	.word	0x20005424
 8014c9c:	20005414 	.word	0x20005414
 8014ca0:	20005420 	.word	0x20005420

08014ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b084      	sub	sp, #16
 8014ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014caa:	2380      	movs	r3, #128	; 0x80
 8014cac:	01db      	lsls	r3, r3, #7
 8014cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014cb0:	4b26      	ldr	r3, [pc, #152]	; (8014d4c <prvHeapInit+0xa8>)
 8014cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2207      	movs	r2, #7
 8014cb8:	4013      	ands	r3, r2
 8014cba:	d00c      	beq.n	8014cd6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	3307      	adds	r3, #7
 8014cc0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	2207      	movs	r2, #7
 8014cc6:	4393      	bics	r3, r2
 8014cc8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014cca:	68ba      	ldr	r2, [r7, #8]
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	1ad2      	subs	r2, r2, r3
 8014cd0:	4b1e      	ldr	r3, [pc, #120]	; (8014d4c <prvHeapInit+0xa8>)
 8014cd2:	18d3      	adds	r3, r2, r3
 8014cd4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014cda:	4b1d      	ldr	r3, [pc, #116]	; (8014d50 <prvHeapInit+0xac>)
 8014cdc:	687a      	ldr	r2, [r7, #4]
 8014cde:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014ce0:	4b1b      	ldr	r3, [pc, #108]	; (8014d50 <prvHeapInit+0xac>)
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	68ba      	ldr	r2, [r7, #8]
 8014cea:	18d3      	adds	r3, r2, r3
 8014cec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014cee:	2208      	movs	r2, #8
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	1a9b      	subs	r3, r3, r2
 8014cf4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	2207      	movs	r2, #7
 8014cfa:	4393      	bics	r3, r2
 8014cfc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014cfe:	68fa      	ldr	r2, [r7, #12]
 8014d00:	4b14      	ldr	r3, [pc, #80]	; (8014d54 <prvHeapInit+0xb0>)
 8014d02:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8014d04:	4b13      	ldr	r3, [pc, #76]	; (8014d54 <prvHeapInit+0xb0>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014d0c:	4b11      	ldr	r3, [pc, #68]	; (8014d54 <prvHeapInit+0xb0>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	2200      	movs	r2, #0
 8014d12:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	68fa      	ldr	r2, [r7, #12]
 8014d1c:	1ad2      	subs	r2, r2, r3
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014d22:	4b0c      	ldr	r3, [pc, #48]	; (8014d54 <prvHeapInit+0xb0>)
 8014d24:	681a      	ldr	r2, [r3, #0]
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	685a      	ldr	r2, [r3, #4]
 8014d2e:	4b0a      	ldr	r3, [pc, #40]	; (8014d58 <prvHeapInit+0xb4>)
 8014d30:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	685a      	ldr	r2, [r3, #4]
 8014d36:	4b09      	ldr	r3, [pc, #36]	; (8014d5c <prvHeapInit+0xb8>)
 8014d38:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014d3a:	4b09      	ldr	r3, [pc, #36]	; (8014d60 <prvHeapInit+0xbc>)
 8014d3c:	2280      	movs	r2, #128	; 0x80
 8014d3e:	0612      	lsls	r2, r2, #24
 8014d40:	601a      	str	r2, [r3, #0]
}
 8014d42:	46c0      	nop			; (mov r8, r8)
 8014d44:	46bd      	mov	sp, r7
 8014d46:	b004      	add	sp, #16
 8014d48:	bd80      	pop	{r7, pc}
 8014d4a:	46c0      	nop			; (mov r8, r8)
 8014d4c:	20001408 	.word	0x20001408
 8014d50:	20005408 	.word	0x20005408
 8014d54:	20005410 	.word	0x20005410
 8014d58:	20005418 	.word	0x20005418
 8014d5c:	20005414 	.word	0x20005414
 8014d60:	20005424 	.word	0x20005424

08014d64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014d6c:	4b27      	ldr	r3, [pc, #156]	; (8014e0c <prvInsertBlockIntoFreeList+0xa8>)
 8014d6e:	60fb      	str	r3, [r7, #12]
 8014d70:	e002      	b.n	8014d78 <prvInsertBlockIntoFreeList+0x14>
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	60fb      	str	r3, [r7, #12]
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d8f7      	bhi.n	8014d72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	685b      	ldr	r3, [r3, #4]
 8014d8a:	68ba      	ldr	r2, [r7, #8]
 8014d8c:	18d3      	adds	r3, r2, r3
 8014d8e:	687a      	ldr	r2, [r7, #4]
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d108      	bne.n	8014da6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	685a      	ldr	r2, [r3, #4]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	18d2      	adds	r2, r2, r3
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	68ba      	ldr	r2, [r7, #8]
 8014db0:	18d2      	adds	r2, r2, r3
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	429a      	cmp	r2, r3
 8014db8:	d118      	bne.n	8014dec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	681a      	ldr	r2, [r3, #0]
 8014dbe:	4b14      	ldr	r3, [pc, #80]	; (8014e10 <prvInsertBlockIntoFreeList+0xac>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d00d      	beq.n	8014de2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	685a      	ldr	r2, [r3, #4]
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	18d2      	adds	r2, r2, r3
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	601a      	str	r2, [r3, #0]
 8014de0:	e008      	b.n	8014df4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014de2:	4b0b      	ldr	r3, [pc, #44]	; (8014e10 <prvInsertBlockIntoFreeList+0xac>)
 8014de4:	681a      	ldr	r2, [r3, #0]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	601a      	str	r2, [r3, #0]
 8014dea:	e003      	b.n	8014df4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	681a      	ldr	r2, [r3, #0]
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014df4:	68fa      	ldr	r2, [r7, #12]
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d002      	beq.n	8014e02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e02:	46c0      	nop			; (mov r8, r8)
 8014e04:	46bd      	mov	sp, r7
 8014e06:	b004      	add	sp, #16
 8014e08:	bd80      	pop	{r7, pc}
 8014e0a:	46c0      	nop			; (mov r8, r8)
 8014e0c:	20005408 	.word	0x20005408
 8014e10:	20005410 	.word	0x20005410

08014e14 <__errno>:
 8014e14:	4b01      	ldr	r3, [pc, #4]	; (8014e1c <__errno+0x8>)
 8014e16:	6818      	ldr	r0, [r3, #0]
 8014e18:	4770      	bx	lr
 8014e1a:	46c0      	nop			; (mov r8, r8)
 8014e1c:	200002d8 	.word	0x200002d8

08014e20 <__libc_init_array>:
 8014e20:	b570      	push	{r4, r5, r6, lr}
 8014e22:	2600      	movs	r6, #0
 8014e24:	4d0c      	ldr	r5, [pc, #48]	; (8014e58 <__libc_init_array+0x38>)
 8014e26:	4c0d      	ldr	r4, [pc, #52]	; (8014e5c <__libc_init_array+0x3c>)
 8014e28:	1b64      	subs	r4, r4, r5
 8014e2a:	10a4      	asrs	r4, r4, #2
 8014e2c:	42a6      	cmp	r6, r4
 8014e2e:	d109      	bne.n	8014e44 <__libc_init_array+0x24>
 8014e30:	2600      	movs	r6, #0
 8014e32:	f005 fd2b 	bl	801a88c <_init>
 8014e36:	4d0a      	ldr	r5, [pc, #40]	; (8014e60 <__libc_init_array+0x40>)
 8014e38:	4c0a      	ldr	r4, [pc, #40]	; (8014e64 <__libc_init_array+0x44>)
 8014e3a:	1b64      	subs	r4, r4, r5
 8014e3c:	10a4      	asrs	r4, r4, #2
 8014e3e:	42a6      	cmp	r6, r4
 8014e40:	d105      	bne.n	8014e4e <__libc_init_array+0x2e>
 8014e42:	bd70      	pop	{r4, r5, r6, pc}
 8014e44:	00b3      	lsls	r3, r6, #2
 8014e46:	58eb      	ldr	r3, [r5, r3]
 8014e48:	4798      	blx	r3
 8014e4a:	3601      	adds	r6, #1
 8014e4c:	e7ee      	b.n	8014e2c <__libc_init_array+0xc>
 8014e4e:	00b3      	lsls	r3, r6, #2
 8014e50:	58eb      	ldr	r3, [r5, r3]
 8014e52:	4798      	blx	r3
 8014e54:	3601      	adds	r6, #1
 8014e56:	e7f2      	b.n	8014e3e <__libc_init_array+0x1e>
 8014e58:	0801c0a4 	.word	0x0801c0a4
 8014e5c:	0801c0a4 	.word	0x0801c0a4
 8014e60:	0801c0a4 	.word	0x0801c0a4
 8014e64:	0801c0a8 	.word	0x0801c0a8

08014e68 <malloc>:
 8014e68:	b510      	push	{r4, lr}
 8014e6a:	4b03      	ldr	r3, [pc, #12]	; (8014e78 <malloc+0x10>)
 8014e6c:	0001      	movs	r1, r0
 8014e6e:	6818      	ldr	r0, [r3, #0]
 8014e70:	f000 f88c 	bl	8014f8c <_malloc_r>
 8014e74:	bd10      	pop	{r4, pc}
 8014e76:	46c0      	nop			; (mov r8, r8)
 8014e78:	200002d8 	.word	0x200002d8

08014e7c <free>:
 8014e7c:	b510      	push	{r4, lr}
 8014e7e:	4b03      	ldr	r3, [pc, #12]	; (8014e8c <free+0x10>)
 8014e80:	0001      	movs	r1, r0
 8014e82:	6818      	ldr	r0, [r3, #0]
 8014e84:	f000 f816 	bl	8014eb4 <_free_r>
 8014e88:	bd10      	pop	{r4, pc}
 8014e8a:	46c0      	nop			; (mov r8, r8)
 8014e8c:	200002d8 	.word	0x200002d8

08014e90 <memcpy>:
 8014e90:	2300      	movs	r3, #0
 8014e92:	b510      	push	{r4, lr}
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d100      	bne.n	8014e9a <memcpy+0xa>
 8014e98:	bd10      	pop	{r4, pc}
 8014e9a:	5ccc      	ldrb	r4, [r1, r3]
 8014e9c:	54c4      	strb	r4, [r0, r3]
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	e7f8      	b.n	8014e94 <memcpy+0x4>

08014ea2 <memset>:
 8014ea2:	0003      	movs	r3, r0
 8014ea4:	1882      	adds	r2, r0, r2
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	d100      	bne.n	8014eac <memset+0xa>
 8014eaa:	4770      	bx	lr
 8014eac:	7019      	strb	r1, [r3, #0]
 8014eae:	3301      	adds	r3, #1
 8014eb0:	e7f9      	b.n	8014ea6 <memset+0x4>
	...

08014eb4 <_free_r>:
 8014eb4:	b570      	push	{r4, r5, r6, lr}
 8014eb6:	0005      	movs	r5, r0
 8014eb8:	2900      	cmp	r1, #0
 8014eba:	d010      	beq.n	8014ede <_free_r+0x2a>
 8014ebc:	1f0c      	subs	r4, r1, #4
 8014ebe:	6823      	ldr	r3, [r4, #0]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	da00      	bge.n	8014ec6 <_free_r+0x12>
 8014ec4:	18e4      	adds	r4, r4, r3
 8014ec6:	0028      	movs	r0, r5
 8014ec8:	f003 fd2a 	bl	8018920 <__malloc_lock>
 8014ecc:	4a1d      	ldr	r2, [pc, #116]	; (8014f44 <_free_r+0x90>)
 8014ece:	6813      	ldr	r3, [r2, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d105      	bne.n	8014ee0 <_free_r+0x2c>
 8014ed4:	6063      	str	r3, [r4, #4]
 8014ed6:	6014      	str	r4, [r2, #0]
 8014ed8:	0028      	movs	r0, r5
 8014eda:	f003 fd29 	bl	8018930 <__malloc_unlock>
 8014ede:	bd70      	pop	{r4, r5, r6, pc}
 8014ee0:	42a3      	cmp	r3, r4
 8014ee2:	d908      	bls.n	8014ef6 <_free_r+0x42>
 8014ee4:	6821      	ldr	r1, [r4, #0]
 8014ee6:	1860      	adds	r0, r4, r1
 8014ee8:	4283      	cmp	r3, r0
 8014eea:	d1f3      	bne.n	8014ed4 <_free_r+0x20>
 8014eec:	6818      	ldr	r0, [r3, #0]
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	1841      	adds	r1, r0, r1
 8014ef2:	6021      	str	r1, [r4, #0]
 8014ef4:	e7ee      	b.n	8014ed4 <_free_r+0x20>
 8014ef6:	001a      	movs	r2, r3
 8014ef8:	685b      	ldr	r3, [r3, #4]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d001      	beq.n	8014f02 <_free_r+0x4e>
 8014efe:	42a3      	cmp	r3, r4
 8014f00:	d9f9      	bls.n	8014ef6 <_free_r+0x42>
 8014f02:	6811      	ldr	r1, [r2, #0]
 8014f04:	1850      	adds	r0, r2, r1
 8014f06:	42a0      	cmp	r0, r4
 8014f08:	d10b      	bne.n	8014f22 <_free_r+0x6e>
 8014f0a:	6820      	ldr	r0, [r4, #0]
 8014f0c:	1809      	adds	r1, r1, r0
 8014f0e:	1850      	adds	r0, r2, r1
 8014f10:	6011      	str	r1, [r2, #0]
 8014f12:	4283      	cmp	r3, r0
 8014f14:	d1e0      	bne.n	8014ed8 <_free_r+0x24>
 8014f16:	6818      	ldr	r0, [r3, #0]
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	1841      	adds	r1, r0, r1
 8014f1c:	6011      	str	r1, [r2, #0]
 8014f1e:	6053      	str	r3, [r2, #4]
 8014f20:	e7da      	b.n	8014ed8 <_free_r+0x24>
 8014f22:	42a0      	cmp	r0, r4
 8014f24:	d902      	bls.n	8014f2c <_free_r+0x78>
 8014f26:	230c      	movs	r3, #12
 8014f28:	602b      	str	r3, [r5, #0]
 8014f2a:	e7d5      	b.n	8014ed8 <_free_r+0x24>
 8014f2c:	6821      	ldr	r1, [r4, #0]
 8014f2e:	1860      	adds	r0, r4, r1
 8014f30:	4283      	cmp	r3, r0
 8014f32:	d103      	bne.n	8014f3c <_free_r+0x88>
 8014f34:	6818      	ldr	r0, [r3, #0]
 8014f36:	685b      	ldr	r3, [r3, #4]
 8014f38:	1841      	adds	r1, r0, r1
 8014f3a:	6021      	str	r1, [r4, #0]
 8014f3c:	6063      	str	r3, [r4, #4]
 8014f3e:	6054      	str	r4, [r2, #4]
 8014f40:	e7ca      	b.n	8014ed8 <_free_r+0x24>
 8014f42:	46c0      	nop			; (mov r8, r8)
 8014f44:	20005428 	.word	0x20005428

08014f48 <sbrk_aligned>:
 8014f48:	b570      	push	{r4, r5, r6, lr}
 8014f4a:	4e0f      	ldr	r6, [pc, #60]	; (8014f88 <sbrk_aligned+0x40>)
 8014f4c:	000d      	movs	r5, r1
 8014f4e:	6831      	ldr	r1, [r6, #0]
 8014f50:	0004      	movs	r4, r0
 8014f52:	2900      	cmp	r1, #0
 8014f54:	d102      	bne.n	8014f5c <sbrk_aligned+0x14>
 8014f56:	f000 ff9b 	bl	8015e90 <_sbrk_r>
 8014f5a:	6030      	str	r0, [r6, #0]
 8014f5c:	0029      	movs	r1, r5
 8014f5e:	0020      	movs	r0, r4
 8014f60:	f000 ff96 	bl	8015e90 <_sbrk_r>
 8014f64:	1c43      	adds	r3, r0, #1
 8014f66:	d00a      	beq.n	8014f7e <sbrk_aligned+0x36>
 8014f68:	2303      	movs	r3, #3
 8014f6a:	1cc5      	adds	r5, r0, #3
 8014f6c:	439d      	bics	r5, r3
 8014f6e:	42a8      	cmp	r0, r5
 8014f70:	d007      	beq.n	8014f82 <sbrk_aligned+0x3a>
 8014f72:	1a29      	subs	r1, r5, r0
 8014f74:	0020      	movs	r0, r4
 8014f76:	f000 ff8b 	bl	8015e90 <_sbrk_r>
 8014f7a:	1c43      	adds	r3, r0, #1
 8014f7c:	d101      	bne.n	8014f82 <sbrk_aligned+0x3a>
 8014f7e:	2501      	movs	r5, #1
 8014f80:	426d      	negs	r5, r5
 8014f82:	0028      	movs	r0, r5
 8014f84:	bd70      	pop	{r4, r5, r6, pc}
 8014f86:	46c0      	nop			; (mov r8, r8)
 8014f88:	2000542c 	.word	0x2000542c

08014f8c <_malloc_r>:
 8014f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f8e:	2203      	movs	r2, #3
 8014f90:	1ccb      	adds	r3, r1, #3
 8014f92:	4393      	bics	r3, r2
 8014f94:	3308      	adds	r3, #8
 8014f96:	0006      	movs	r6, r0
 8014f98:	001f      	movs	r7, r3
 8014f9a:	2b0c      	cmp	r3, #12
 8014f9c:	d232      	bcs.n	8015004 <_malloc_r+0x78>
 8014f9e:	270c      	movs	r7, #12
 8014fa0:	42b9      	cmp	r1, r7
 8014fa2:	d831      	bhi.n	8015008 <_malloc_r+0x7c>
 8014fa4:	0030      	movs	r0, r6
 8014fa6:	f003 fcbb 	bl	8018920 <__malloc_lock>
 8014faa:	4d32      	ldr	r5, [pc, #200]	; (8015074 <_malloc_r+0xe8>)
 8014fac:	682b      	ldr	r3, [r5, #0]
 8014fae:	001c      	movs	r4, r3
 8014fb0:	2c00      	cmp	r4, #0
 8014fb2:	d12e      	bne.n	8015012 <_malloc_r+0x86>
 8014fb4:	0039      	movs	r1, r7
 8014fb6:	0030      	movs	r0, r6
 8014fb8:	f7ff ffc6 	bl	8014f48 <sbrk_aligned>
 8014fbc:	0004      	movs	r4, r0
 8014fbe:	1c43      	adds	r3, r0, #1
 8014fc0:	d11e      	bne.n	8015000 <_malloc_r+0x74>
 8014fc2:	682c      	ldr	r4, [r5, #0]
 8014fc4:	0025      	movs	r5, r4
 8014fc6:	2d00      	cmp	r5, #0
 8014fc8:	d14a      	bne.n	8015060 <_malloc_r+0xd4>
 8014fca:	6823      	ldr	r3, [r4, #0]
 8014fcc:	0029      	movs	r1, r5
 8014fce:	18e3      	adds	r3, r4, r3
 8014fd0:	0030      	movs	r0, r6
 8014fd2:	9301      	str	r3, [sp, #4]
 8014fd4:	f000 ff5c 	bl	8015e90 <_sbrk_r>
 8014fd8:	9b01      	ldr	r3, [sp, #4]
 8014fda:	4283      	cmp	r3, r0
 8014fdc:	d143      	bne.n	8015066 <_malloc_r+0xda>
 8014fde:	6823      	ldr	r3, [r4, #0]
 8014fe0:	3703      	adds	r7, #3
 8014fe2:	1aff      	subs	r7, r7, r3
 8014fe4:	2303      	movs	r3, #3
 8014fe6:	439f      	bics	r7, r3
 8014fe8:	3708      	adds	r7, #8
 8014fea:	2f0c      	cmp	r7, #12
 8014fec:	d200      	bcs.n	8014ff0 <_malloc_r+0x64>
 8014fee:	270c      	movs	r7, #12
 8014ff0:	0039      	movs	r1, r7
 8014ff2:	0030      	movs	r0, r6
 8014ff4:	f7ff ffa8 	bl	8014f48 <sbrk_aligned>
 8014ff8:	1c43      	adds	r3, r0, #1
 8014ffa:	d034      	beq.n	8015066 <_malloc_r+0xda>
 8014ffc:	6823      	ldr	r3, [r4, #0]
 8014ffe:	19df      	adds	r7, r3, r7
 8015000:	6027      	str	r7, [r4, #0]
 8015002:	e013      	b.n	801502c <_malloc_r+0xa0>
 8015004:	2b00      	cmp	r3, #0
 8015006:	dacb      	bge.n	8014fa0 <_malloc_r+0x14>
 8015008:	230c      	movs	r3, #12
 801500a:	2500      	movs	r5, #0
 801500c:	6033      	str	r3, [r6, #0]
 801500e:	0028      	movs	r0, r5
 8015010:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015012:	6822      	ldr	r2, [r4, #0]
 8015014:	1bd1      	subs	r1, r2, r7
 8015016:	d420      	bmi.n	801505a <_malloc_r+0xce>
 8015018:	290b      	cmp	r1, #11
 801501a:	d917      	bls.n	801504c <_malloc_r+0xc0>
 801501c:	19e2      	adds	r2, r4, r7
 801501e:	6027      	str	r7, [r4, #0]
 8015020:	42a3      	cmp	r3, r4
 8015022:	d111      	bne.n	8015048 <_malloc_r+0xbc>
 8015024:	602a      	str	r2, [r5, #0]
 8015026:	6863      	ldr	r3, [r4, #4]
 8015028:	6011      	str	r1, [r2, #0]
 801502a:	6053      	str	r3, [r2, #4]
 801502c:	0030      	movs	r0, r6
 801502e:	0025      	movs	r5, r4
 8015030:	f003 fc7e 	bl	8018930 <__malloc_unlock>
 8015034:	2207      	movs	r2, #7
 8015036:	350b      	adds	r5, #11
 8015038:	1d23      	adds	r3, r4, #4
 801503a:	4395      	bics	r5, r2
 801503c:	1aea      	subs	r2, r5, r3
 801503e:	429d      	cmp	r5, r3
 8015040:	d0e5      	beq.n	801500e <_malloc_r+0x82>
 8015042:	1b5b      	subs	r3, r3, r5
 8015044:	50a3      	str	r3, [r4, r2]
 8015046:	e7e2      	b.n	801500e <_malloc_r+0x82>
 8015048:	605a      	str	r2, [r3, #4]
 801504a:	e7ec      	b.n	8015026 <_malloc_r+0x9a>
 801504c:	6862      	ldr	r2, [r4, #4]
 801504e:	42a3      	cmp	r3, r4
 8015050:	d101      	bne.n	8015056 <_malloc_r+0xca>
 8015052:	602a      	str	r2, [r5, #0]
 8015054:	e7ea      	b.n	801502c <_malloc_r+0xa0>
 8015056:	605a      	str	r2, [r3, #4]
 8015058:	e7e8      	b.n	801502c <_malloc_r+0xa0>
 801505a:	0023      	movs	r3, r4
 801505c:	6864      	ldr	r4, [r4, #4]
 801505e:	e7a7      	b.n	8014fb0 <_malloc_r+0x24>
 8015060:	002c      	movs	r4, r5
 8015062:	686d      	ldr	r5, [r5, #4]
 8015064:	e7af      	b.n	8014fc6 <_malloc_r+0x3a>
 8015066:	230c      	movs	r3, #12
 8015068:	0030      	movs	r0, r6
 801506a:	6033      	str	r3, [r6, #0]
 801506c:	f003 fc60 	bl	8018930 <__malloc_unlock>
 8015070:	e7cd      	b.n	801500e <_malloc_r+0x82>
 8015072:	46c0      	nop			; (mov r8, r8)
 8015074:	20005428 	.word	0x20005428

08015078 <__cvt>:
 8015078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801507a:	001e      	movs	r6, r3
 801507c:	2300      	movs	r3, #0
 801507e:	0014      	movs	r4, r2
 8015080:	b08b      	sub	sp, #44	; 0x2c
 8015082:	429e      	cmp	r6, r3
 8015084:	da04      	bge.n	8015090 <__cvt+0x18>
 8015086:	2180      	movs	r1, #128	; 0x80
 8015088:	0609      	lsls	r1, r1, #24
 801508a:	1873      	adds	r3, r6, r1
 801508c:	001e      	movs	r6, r3
 801508e:	232d      	movs	r3, #45	; 0x2d
 8015090:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015092:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8015094:	7013      	strb	r3, [r2, #0]
 8015096:	2320      	movs	r3, #32
 8015098:	2203      	movs	r2, #3
 801509a:	439f      	bics	r7, r3
 801509c:	2f46      	cmp	r7, #70	; 0x46
 801509e:	d007      	beq.n	80150b0 <__cvt+0x38>
 80150a0:	003b      	movs	r3, r7
 80150a2:	3b45      	subs	r3, #69	; 0x45
 80150a4:	4259      	negs	r1, r3
 80150a6:	414b      	adcs	r3, r1
 80150a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80150aa:	3a01      	subs	r2, #1
 80150ac:	18cb      	adds	r3, r1, r3
 80150ae:	9310      	str	r3, [sp, #64]	; 0x40
 80150b0:	ab09      	add	r3, sp, #36	; 0x24
 80150b2:	9304      	str	r3, [sp, #16]
 80150b4:	ab08      	add	r3, sp, #32
 80150b6:	9303      	str	r3, [sp, #12]
 80150b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80150ba:	9200      	str	r2, [sp, #0]
 80150bc:	9302      	str	r3, [sp, #8]
 80150be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150c0:	0022      	movs	r2, r4
 80150c2:	9301      	str	r3, [sp, #4]
 80150c4:	0033      	movs	r3, r6
 80150c6:	f002 f83d 	bl	8017144 <_dtoa_r>
 80150ca:	0005      	movs	r5, r0
 80150cc:	2f47      	cmp	r7, #71	; 0x47
 80150ce:	d102      	bne.n	80150d6 <__cvt+0x5e>
 80150d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150d2:	07db      	lsls	r3, r3, #31
 80150d4:	d528      	bpl.n	8015128 <__cvt+0xb0>
 80150d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150d8:	18eb      	adds	r3, r5, r3
 80150da:	9307      	str	r3, [sp, #28]
 80150dc:	2f46      	cmp	r7, #70	; 0x46
 80150de:	d114      	bne.n	801510a <__cvt+0x92>
 80150e0:	782b      	ldrb	r3, [r5, #0]
 80150e2:	2b30      	cmp	r3, #48	; 0x30
 80150e4:	d10c      	bne.n	8015100 <__cvt+0x88>
 80150e6:	2200      	movs	r2, #0
 80150e8:	2300      	movs	r3, #0
 80150ea:	0020      	movs	r0, r4
 80150ec:	0031      	movs	r1, r6
 80150ee:	f7eb f9b7 	bl	8000460 <__aeabi_dcmpeq>
 80150f2:	2800      	cmp	r0, #0
 80150f4:	d104      	bne.n	8015100 <__cvt+0x88>
 80150f6:	2301      	movs	r3, #1
 80150f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80150fa:	1a9b      	subs	r3, r3, r2
 80150fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80150fe:	6013      	str	r3, [r2, #0]
 8015100:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015102:	9a07      	ldr	r2, [sp, #28]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	18d3      	adds	r3, r2, r3
 8015108:	9307      	str	r3, [sp, #28]
 801510a:	2200      	movs	r2, #0
 801510c:	2300      	movs	r3, #0
 801510e:	0020      	movs	r0, r4
 8015110:	0031      	movs	r1, r6
 8015112:	f7eb f9a5 	bl	8000460 <__aeabi_dcmpeq>
 8015116:	2800      	cmp	r0, #0
 8015118:	d001      	beq.n	801511e <__cvt+0xa6>
 801511a:	9b07      	ldr	r3, [sp, #28]
 801511c:	9309      	str	r3, [sp, #36]	; 0x24
 801511e:	2230      	movs	r2, #48	; 0x30
 8015120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015122:	9907      	ldr	r1, [sp, #28]
 8015124:	428b      	cmp	r3, r1
 8015126:	d306      	bcc.n	8015136 <__cvt+0xbe>
 8015128:	0028      	movs	r0, r5
 801512a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801512c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801512e:	1b5b      	subs	r3, r3, r5
 8015130:	6013      	str	r3, [r2, #0]
 8015132:	b00b      	add	sp, #44	; 0x2c
 8015134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015136:	1c59      	adds	r1, r3, #1
 8015138:	9109      	str	r1, [sp, #36]	; 0x24
 801513a:	701a      	strb	r2, [r3, #0]
 801513c:	e7f0      	b.n	8015120 <__cvt+0xa8>

0801513e <__exponent>:
 801513e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015140:	1c83      	adds	r3, r0, #2
 8015142:	b087      	sub	sp, #28
 8015144:	9303      	str	r3, [sp, #12]
 8015146:	0005      	movs	r5, r0
 8015148:	000c      	movs	r4, r1
 801514a:	232b      	movs	r3, #43	; 0x2b
 801514c:	7002      	strb	r2, [r0, #0]
 801514e:	2900      	cmp	r1, #0
 8015150:	da01      	bge.n	8015156 <__exponent+0x18>
 8015152:	424c      	negs	r4, r1
 8015154:	3302      	adds	r3, #2
 8015156:	706b      	strb	r3, [r5, #1]
 8015158:	2c09      	cmp	r4, #9
 801515a:	dd31      	ble.n	80151c0 <__exponent+0x82>
 801515c:	270a      	movs	r7, #10
 801515e:	ab04      	add	r3, sp, #16
 8015160:	1dde      	adds	r6, r3, #7
 8015162:	0020      	movs	r0, r4
 8015164:	0039      	movs	r1, r7
 8015166:	9601      	str	r6, [sp, #4]
 8015168:	f7eb f964 	bl	8000434 <__aeabi_idivmod>
 801516c:	3e01      	subs	r6, #1
 801516e:	3130      	adds	r1, #48	; 0x30
 8015170:	0020      	movs	r0, r4
 8015172:	7031      	strb	r1, [r6, #0]
 8015174:	0039      	movs	r1, r7
 8015176:	9402      	str	r4, [sp, #8]
 8015178:	f7eb f876 	bl	8000268 <__divsi3>
 801517c:	9b02      	ldr	r3, [sp, #8]
 801517e:	0004      	movs	r4, r0
 8015180:	2b63      	cmp	r3, #99	; 0x63
 8015182:	dcee      	bgt.n	8015162 <__exponent+0x24>
 8015184:	9b01      	ldr	r3, [sp, #4]
 8015186:	3430      	adds	r4, #48	; 0x30
 8015188:	1e9a      	subs	r2, r3, #2
 801518a:	0013      	movs	r3, r2
 801518c:	9903      	ldr	r1, [sp, #12]
 801518e:	7014      	strb	r4, [r2, #0]
 8015190:	a804      	add	r0, sp, #16
 8015192:	3007      	adds	r0, #7
 8015194:	4298      	cmp	r0, r3
 8015196:	d80e      	bhi.n	80151b6 <__exponent+0x78>
 8015198:	ab04      	add	r3, sp, #16
 801519a:	3307      	adds	r3, #7
 801519c:	2000      	movs	r0, #0
 801519e:	429a      	cmp	r2, r3
 80151a0:	d804      	bhi.n	80151ac <__exponent+0x6e>
 80151a2:	ab04      	add	r3, sp, #16
 80151a4:	3009      	adds	r0, #9
 80151a6:	18c0      	adds	r0, r0, r3
 80151a8:	9b01      	ldr	r3, [sp, #4]
 80151aa:	1ac0      	subs	r0, r0, r3
 80151ac:	9b03      	ldr	r3, [sp, #12]
 80151ae:	1818      	adds	r0, r3, r0
 80151b0:	1b40      	subs	r0, r0, r5
 80151b2:	b007      	add	sp, #28
 80151b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151b6:	7818      	ldrb	r0, [r3, #0]
 80151b8:	3301      	adds	r3, #1
 80151ba:	7008      	strb	r0, [r1, #0]
 80151bc:	3101      	adds	r1, #1
 80151be:	e7e7      	b.n	8015190 <__exponent+0x52>
 80151c0:	2330      	movs	r3, #48	; 0x30
 80151c2:	18e4      	adds	r4, r4, r3
 80151c4:	70ab      	strb	r3, [r5, #2]
 80151c6:	1d28      	adds	r0, r5, #4
 80151c8:	70ec      	strb	r4, [r5, #3]
 80151ca:	e7f1      	b.n	80151b0 <__exponent+0x72>

080151cc <_printf_float>:
 80151cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151ce:	b095      	sub	sp, #84	; 0x54
 80151d0:	000c      	movs	r4, r1
 80151d2:	9209      	str	r2, [sp, #36]	; 0x24
 80151d4:	001e      	movs	r6, r3
 80151d6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80151d8:	0007      	movs	r7, r0
 80151da:	f003 fb0f 	bl	80187fc <_localeconv_r>
 80151de:	6803      	ldr	r3, [r0, #0]
 80151e0:	0018      	movs	r0, r3
 80151e2:	930c      	str	r3, [sp, #48]	; 0x30
 80151e4:	f7ea ff9a 	bl	800011c <strlen>
 80151e8:	2300      	movs	r3, #0
 80151ea:	9312      	str	r3, [sp, #72]	; 0x48
 80151ec:	7e23      	ldrb	r3, [r4, #24]
 80151ee:	2207      	movs	r2, #7
 80151f0:	930a      	str	r3, [sp, #40]	; 0x28
 80151f2:	6823      	ldr	r3, [r4, #0]
 80151f4:	900e      	str	r0, [sp, #56]	; 0x38
 80151f6:	930d      	str	r3, [sp, #52]	; 0x34
 80151f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80151fa:	682b      	ldr	r3, [r5, #0]
 80151fc:	05c9      	lsls	r1, r1, #23
 80151fe:	d547      	bpl.n	8015290 <_printf_float+0xc4>
 8015200:	189b      	adds	r3, r3, r2
 8015202:	4393      	bics	r3, r2
 8015204:	001a      	movs	r2, r3
 8015206:	3208      	adds	r2, #8
 8015208:	602a      	str	r2, [r5, #0]
 801520a:	681a      	ldr	r2, [r3, #0]
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	64a2      	str	r2, [r4, #72]	; 0x48
 8015210:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015212:	2201      	movs	r2, #1
 8015214:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8015216:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8015218:	930b      	str	r3, [sp, #44]	; 0x2c
 801521a:	006b      	lsls	r3, r5, #1
 801521c:	085b      	lsrs	r3, r3, #1
 801521e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015220:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015222:	4ba7      	ldr	r3, [pc, #668]	; (80154c0 <_printf_float+0x2f4>)
 8015224:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015226:	4252      	negs	r2, r2
 8015228:	f7ed fcbe 	bl	8002ba8 <__aeabi_dcmpun>
 801522c:	2800      	cmp	r0, #0
 801522e:	d131      	bne.n	8015294 <_printf_float+0xc8>
 8015230:	2201      	movs	r2, #1
 8015232:	4ba3      	ldr	r3, [pc, #652]	; (80154c0 <_printf_float+0x2f4>)
 8015234:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015236:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015238:	4252      	negs	r2, r2
 801523a:	f7eb f921 	bl	8000480 <__aeabi_dcmple>
 801523e:	2800      	cmp	r0, #0
 8015240:	d128      	bne.n	8015294 <_printf_float+0xc8>
 8015242:	2200      	movs	r2, #0
 8015244:	2300      	movs	r3, #0
 8015246:	0029      	movs	r1, r5
 8015248:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801524a:	f7eb f90f 	bl	800046c <__aeabi_dcmplt>
 801524e:	2800      	cmp	r0, #0
 8015250:	d003      	beq.n	801525a <_printf_float+0x8e>
 8015252:	0023      	movs	r3, r4
 8015254:	222d      	movs	r2, #45	; 0x2d
 8015256:	3343      	adds	r3, #67	; 0x43
 8015258:	701a      	strb	r2, [r3, #0]
 801525a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801525c:	4d99      	ldr	r5, [pc, #612]	; (80154c4 <_printf_float+0x2f8>)
 801525e:	2b47      	cmp	r3, #71	; 0x47
 8015260:	d900      	bls.n	8015264 <_printf_float+0x98>
 8015262:	4d99      	ldr	r5, [pc, #612]	; (80154c8 <_printf_float+0x2fc>)
 8015264:	2303      	movs	r3, #3
 8015266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015268:	6123      	str	r3, [r4, #16]
 801526a:	3301      	adds	r3, #1
 801526c:	439a      	bics	r2, r3
 801526e:	2300      	movs	r3, #0
 8015270:	6022      	str	r2, [r4, #0]
 8015272:	930b      	str	r3, [sp, #44]	; 0x2c
 8015274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015276:	0021      	movs	r1, r4
 8015278:	0038      	movs	r0, r7
 801527a:	9600      	str	r6, [sp, #0]
 801527c:	aa13      	add	r2, sp, #76	; 0x4c
 801527e:	f000 f9e7 	bl	8015650 <_printf_common>
 8015282:	1c43      	adds	r3, r0, #1
 8015284:	d000      	beq.n	8015288 <_printf_float+0xbc>
 8015286:	e0a2      	b.n	80153ce <_printf_float+0x202>
 8015288:	2001      	movs	r0, #1
 801528a:	4240      	negs	r0, r0
 801528c:	b015      	add	sp, #84	; 0x54
 801528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015290:	3307      	adds	r3, #7
 8015292:	e7b6      	b.n	8015202 <_printf_float+0x36>
 8015294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015296:	002b      	movs	r3, r5
 8015298:	0010      	movs	r0, r2
 801529a:	0029      	movs	r1, r5
 801529c:	f7ed fc84 	bl	8002ba8 <__aeabi_dcmpun>
 80152a0:	2800      	cmp	r0, #0
 80152a2:	d00b      	beq.n	80152bc <_printf_float+0xf0>
 80152a4:	2d00      	cmp	r5, #0
 80152a6:	da03      	bge.n	80152b0 <_printf_float+0xe4>
 80152a8:	0023      	movs	r3, r4
 80152aa:	222d      	movs	r2, #45	; 0x2d
 80152ac:	3343      	adds	r3, #67	; 0x43
 80152ae:	701a      	strb	r2, [r3, #0]
 80152b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152b2:	4d86      	ldr	r5, [pc, #536]	; (80154cc <_printf_float+0x300>)
 80152b4:	2b47      	cmp	r3, #71	; 0x47
 80152b6:	d9d5      	bls.n	8015264 <_printf_float+0x98>
 80152b8:	4d85      	ldr	r5, [pc, #532]	; (80154d0 <_printf_float+0x304>)
 80152ba:	e7d3      	b.n	8015264 <_printf_float+0x98>
 80152bc:	2220      	movs	r2, #32
 80152be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80152c0:	6863      	ldr	r3, [r4, #4]
 80152c2:	4391      	bics	r1, r2
 80152c4:	910f      	str	r1, [sp, #60]	; 0x3c
 80152c6:	1c5a      	adds	r2, r3, #1
 80152c8:	d149      	bne.n	801535e <_printf_float+0x192>
 80152ca:	3307      	adds	r3, #7
 80152cc:	6063      	str	r3, [r4, #4]
 80152ce:	2380      	movs	r3, #128	; 0x80
 80152d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152d2:	00db      	lsls	r3, r3, #3
 80152d4:	4313      	orrs	r3, r2
 80152d6:	2200      	movs	r2, #0
 80152d8:	9206      	str	r2, [sp, #24]
 80152da:	aa12      	add	r2, sp, #72	; 0x48
 80152dc:	9205      	str	r2, [sp, #20]
 80152de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152e0:	a908      	add	r1, sp, #32
 80152e2:	9204      	str	r2, [sp, #16]
 80152e4:	aa11      	add	r2, sp, #68	; 0x44
 80152e6:	9203      	str	r2, [sp, #12]
 80152e8:	2223      	movs	r2, #35	; 0x23
 80152ea:	6023      	str	r3, [r4, #0]
 80152ec:	9301      	str	r3, [sp, #4]
 80152ee:	6863      	ldr	r3, [r4, #4]
 80152f0:	1852      	adds	r2, r2, r1
 80152f2:	9202      	str	r2, [sp, #8]
 80152f4:	9300      	str	r3, [sp, #0]
 80152f6:	0038      	movs	r0, r7
 80152f8:	002b      	movs	r3, r5
 80152fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152fc:	f7ff febc 	bl	8015078 <__cvt>
 8015300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015302:	0005      	movs	r5, r0
 8015304:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015306:	2b47      	cmp	r3, #71	; 0x47
 8015308:	d108      	bne.n	801531c <_printf_float+0x150>
 801530a:	1ccb      	adds	r3, r1, #3
 801530c:	db02      	blt.n	8015314 <_printf_float+0x148>
 801530e:	6863      	ldr	r3, [r4, #4]
 8015310:	4299      	cmp	r1, r3
 8015312:	dd48      	ble.n	80153a6 <_printf_float+0x1da>
 8015314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015316:	3b02      	subs	r3, #2
 8015318:	b2db      	uxtb	r3, r3
 801531a:	930a      	str	r3, [sp, #40]	; 0x28
 801531c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801531e:	2b65      	cmp	r3, #101	; 0x65
 8015320:	d824      	bhi.n	801536c <_printf_float+0x1a0>
 8015322:	0020      	movs	r0, r4
 8015324:	001a      	movs	r2, r3
 8015326:	3901      	subs	r1, #1
 8015328:	3050      	adds	r0, #80	; 0x50
 801532a:	9111      	str	r1, [sp, #68]	; 0x44
 801532c:	f7ff ff07 	bl	801513e <__exponent>
 8015330:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015332:	900b      	str	r0, [sp, #44]	; 0x2c
 8015334:	1813      	adds	r3, r2, r0
 8015336:	6123      	str	r3, [r4, #16]
 8015338:	2a01      	cmp	r2, #1
 801533a:	dc02      	bgt.n	8015342 <_printf_float+0x176>
 801533c:	6822      	ldr	r2, [r4, #0]
 801533e:	07d2      	lsls	r2, r2, #31
 8015340:	d501      	bpl.n	8015346 <_printf_float+0x17a>
 8015342:	3301      	adds	r3, #1
 8015344:	6123      	str	r3, [r4, #16]
 8015346:	2323      	movs	r3, #35	; 0x23
 8015348:	aa08      	add	r2, sp, #32
 801534a:	189b      	adds	r3, r3, r2
 801534c:	781b      	ldrb	r3, [r3, #0]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d100      	bne.n	8015354 <_printf_float+0x188>
 8015352:	e78f      	b.n	8015274 <_printf_float+0xa8>
 8015354:	0023      	movs	r3, r4
 8015356:	222d      	movs	r2, #45	; 0x2d
 8015358:	3343      	adds	r3, #67	; 0x43
 801535a:	701a      	strb	r2, [r3, #0]
 801535c:	e78a      	b.n	8015274 <_printf_float+0xa8>
 801535e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015360:	2a47      	cmp	r2, #71	; 0x47
 8015362:	d1b4      	bne.n	80152ce <_printf_float+0x102>
 8015364:	2b00      	cmp	r3, #0
 8015366:	d1b2      	bne.n	80152ce <_printf_float+0x102>
 8015368:	3301      	adds	r3, #1
 801536a:	e7af      	b.n	80152cc <_printf_float+0x100>
 801536c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801536e:	2b66      	cmp	r3, #102	; 0x66
 8015370:	d11b      	bne.n	80153aa <_printf_float+0x1de>
 8015372:	6863      	ldr	r3, [r4, #4]
 8015374:	2900      	cmp	r1, #0
 8015376:	dd0d      	ble.n	8015394 <_printf_float+0x1c8>
 8015378:	6121      	str	r1, [r4, #16]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d102      	bne.n	8015384 <_printf_float+0x1b8>
 801537e:	6822      	ldr	r2, [r4, #0]
 8015380:	07d2      	lsls	r2, r2, #31
 8015382:	d502      	bpl.n	801538a <_printf_float+0x1be>
 8015384:	3301      	adds	r3, #1
 8015386:	1859      	adds	r1, r3, r1
 8015388:	6121      	str	r1, [r4, #16]
 801538a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801538c:	65a3      	str	r3, [r4, #88]	; 0x58
 801538e:	2300      	movs	r3, #0
 8015390:	930b      	str	r3, [sp, #44]	; 0x2c
 8015392:	e7d8      	b.n	8015346 <_printf_float+0x17a>
 8015394:	2b00      	cmp	r3, #0
 8015396:	d103      	bne.n	80153a0 <_printf_float+0x1d4>
 8015398:	2201      	movs	r2, #1
 801539a:	6821      	ldr	r1, [r4, #0]
 801539c:	4211      	tst	r1, r2
 801539e:	d000      	beq.n	80153a2 <_printf_float+0x1d6>
 80153a0:	1c9a      	adds	r2, r3, #2
 80153a2:	6122      	str	r2, [r4, #16]
 80153a4:	e7f1      	b.n	801538a <_printf_float+0x1be>
 80153a6:	2367      	movs	r3, #103	; 0x67
 80153a8:	930a      	str	r3, [sp, #40]	; 0x28
 80153aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80153ae:	4293      	cmp	r3, r2
 80153b0:	db06      	blt.n	80153c0 <_printf_float+0x1f4>
 80153b2:	6822      	ldr	r2, [r4, #0]
 80153b4:	6123      	str	r3, [r4, #16]
 80153b6:	07d2      	lsls	r2, r2, #31
 80153b8:	d5e7      	bpl.n	801538a <_printf_float+0x1be>
 80153ba:	3301      	adds	r3, #1
 80153bc:	6123      	str	r3, [r4, #16]
 80153be:	e7e4      	b.n	801538a <_printf_float+0x1be>
 80153c0:	2101      	movs	r1, #1
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	dc01      	bgt.n	80153ca <_printf_float+0x1fe>
 80153c6:	1849      	adds	r1, r1, r1
 80153c8:	1ac9      	subs	r1, r1, r3
 80153ca:	1852      	adds	r2, r2, r1
 80153cc:	e7e9      	b.n	80153a2 <_printf_float+0x1d6>
 80153ce:	6822      	ldr	r2, [r4, #0]
 80153d0:	0553      	lsls	r3, r2, #21
 80153d2:	d407      	bmi.n	80153e4 <_printf_float+0x218>
 80153d4:	6923      	ldr	r3, [r4, #16]
 80153d6:	002a      	movs	r2, r5
 80153d8:	0038      	movs	r0, r7
 80153da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153dc:	47b0      	blx	r6
 80153de:	1c43      	adds	r3, r0, #1
 80153e0:	d128      	bne.n	8015434 <_printf_float+0x268>
 80153e2:	e751      	b.n	8015288 <_printf_float+0xbc>
 80153e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153e6:	2b65      	cmp	r3, #101	; 0x65
 80153e8:	d800      	bhi.n	80153ec <_printf_float+0x220>
 80153ea:	e0e1      	b.n	80155b0 <_printf_float+0x3e4>
 80153ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80153ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80153f0:	2200      	movs	r2, #0
 80153f2:	2300      	movs	r3, #0
 80153f4:	f7eb f834 	bl	8000460 <__aeabi_dcmpeq>
 80153f8:	2800      	cmp	r0, #0
 80153fa:	d031      	beq.n	8015460 <_printf_float+0x294>
 80153fc:	2301      	movs	r3, #1
 80153fe:	0038      	movs	r0, r7
 8015400:	4a34      	ldr	r2, [pc, #208]	; (80154d4 <_printf_float+0x308>)
 8015402:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015404:	47b0      	blx	r6
 8015406:	1c43      	adds	r3, r0, #1
 8015408:	d100      	bne.n	801540c <_printf_float+0x240>
 801540a:	e73d      	b.n	8015288 <_printf_float+0xbc>
 801540c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801540e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015410:	4293      	cmp	r3, r2
 8015412:	db02      	blt.n	801541a <_printf_float+0x24e>
 8015414:	6823      	ldr	r3, [r4, #0]
 8015416:	07db      	lsls	r3, r3, #31
 8015418:	d50c      	bpl.n	8015434 <_printf_float+0x268>
 801541a:	0038      	movs	r0, r7
 801541c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801541e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015420:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015422:	47b0      	blx	r6
 8015424:	2500      	movs	r5, #0
 8015426:	1c43      	adds	r3, r0, #1
 8015428:	d100      	bne.n	801542c <_printf_float+0x260>
 801542a:	e72d      	b.n	8015288 <_printf_float+0xbc>
 801542c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801542e:	3b01      	subs	r3, #1
 8015430:	42ab      	cmp	r3, r5
 8015432:	dc0a      	bgt.n	801544a <_printf_float+0x27e>
 8015434:	6823      	ldr	r3, [r4, #0]
 8015436:	079b      	lsls	r3, r3, #30
 8015438:	d500      	bpl.n	801543c <_printf_float+0x270>
 801543a:	e106      	b.n	801564a <_printf_float+0x47e>
 801543c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801543e:	68e0      	ldr	r0, [r4, #12]
 8015440:	4298      	cmp	r0, r3
 8015442:	db00      	blt.n	8015446 <_printf_float+0x27a>
 8015444:	e722      	b.n	801528c <_printf_float+0xc0>
 8015446:	0018      	movs	r0, r3
 8015448:	e720      	b.n	801528c <_printf_float+0xc0>
 801544a:	0022      	movs	r2, r4
 801544c:	2301      	movs	r3, #1
 801544e:	0038      	movs	r0, r7
 8015450:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015452:	321a      	adds	r2, #26
 8015454:	47b0      	blx	r6
 8015456:	1c43      	adds	r3, r0, #1
 8015458:	d100      	bne.n	801545c <_printf_float+0x290>
 801545a:	e715      	b.n	8015288 <_printf_float+0xbc>
 801545c:	3501      	adds	r5, #1
 801545e:	e7e5      	b.n	801542c <_printf_float+0x260>
 8015460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015462:	2b00      	cmp	r3, #0
 8015464:	dc38      	bgt.n	80154d8 <_printf_float+0x30c>
 8015466:	2301      	movs	r3, #1
 8015468:	0038      	movs	r0, r7
 801546a:	4a1a      	ldr	r2, [pc, #104]	; (80154d4 <_printf_float+0x308>)
 801546c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801546e:	47b0      	blx	r6
 8015470:	1c43      	adds	r3, r0, #1
 8015472:	d100      	bne.n	8015476 <_printf_float+0x2aa>
 8015474:	e708      	b.n	8015288 <_printf_float+0xbc>
 8015476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015478:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801547a:	4313      	orrs	r3, r2
 801547c:	d102      	bne.n	8015484 <_printf_float+0x2b8>
 801547e:	6823      	ldr	r3, [r4, #0]
 8015480:	07db      	lsls	r3, r3, #31
 8015482:	d5d7      	bpl.n	8015434 <_printf_float+0x268>
 8015484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015486:	0038      	movs	r0, r7
 8015488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801548a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801548c:	47b0      	blx	r6
 801548e:	1c43      	adds	r3, r0, #1
 8015490:	d100      	bne.n	8015494 <_printf_float+0x2c8>
 8015492:	e6f9      	b.n	8015288 <_printf_float+0xbc>
 8015494:	2300      	movs	r3, #0
 8015496:	930a      	str	r3, [sp, #40]	; 0x28
 8015498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801549a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801549c:	425b      	negs	r3, r3
 801549e:	4293      	cmp	r3, r2
 80154a0:	dc01      	bgt.n	80154a6 <_printf_float+0x2da>
 80154a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80154a4:	e797      	b.n	80153d6 <_printf_float+0x20a>
 80154a6:	0022      	movs	r2, r4
 80154a8:	2301      	movs	r3, #1
 80154aa:	0038      	movs	r0, r7
 80154ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154ae:	321a      	adds	r2, #26
 80154b0:	47b0      	blx	r6
 80154b2:	1c43      	adds	r3, r0, #1
 80154b4:	d100      	bne.n	80154b8 <_printf_float+0x2ec>
 80154b6:	e6e7      	b.n	8015288 <_printf_float+0xbc>
 80154b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154ba:	3301      	adds	r3, #1
 80154bc:	e7eb      	b.n	8015496 <_printf_float+0x2ca>
 80154be:	46c0      	nop			; (mov r8, r8)
 80154c0:	7fefffff 	.word	0x7fefffff
 80154c4:	0801b828 	.word	0x0801b828
 80154c8:	0801b82c 	.word	0x0801b82c
 80154cc:	0801b830 	.word	0x0801b830
 80154d0:	0801b834 	.word	0x0801b834
 80154d4:	0801b838 	.word	0x0801b838
 80154d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80154da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80154dc:	920a      	str	r2, [sp, #40]	; 0x28
 80154de:	429a      	cmp	r2, r3
 80154e0:	dd00      	ble.n	80154e4 <_printf_float+0x318>
 80154e2:	930a      	str	r3, [sp, #40]	; 0x28
 80154e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	dc3c      	bgt.n	8015564 <_printf_float+0x398>
 80154ea:	2300      	movs	r3, #0
 80154ec:	930d      	str	r3, [sp, #52]	; 0x34
 80154ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154f0:	43db      	mvns	r3, r3
 80154f2:	17db      	asrs	r3, r3, #31
 80154f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80154f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80154f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80154fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80154fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154fe:	4013      	ands	r3, r2
 8015500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015502:	1ad3      	subs	r3, r2, r3
 8015504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015506:	4293      	cmp	r3, r2
 8015508:	dc34      	bgt.n	8015574 <_printf_float+0x3a8>
 801550a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801550c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801550e:	4293      	cmp	r3, r2
 8015510:	db3d      	blt.n	801558e <_printf_float+0x3c2>
 8015512:	6823      	ldr	r3, [r4, #0]
 8015514:	07db      	lsls	r3, r3, #31
 8015516:	d43a      	bmi.n	801558e <_printf_float+0x3c2>
 8015518:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801551a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801551c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801551e:	1ad3      	subs	r3, r2, r3
 8015520:	1a52      	subs	r2, r2, r1
 8015522:	920a      	str	r2, [sp, #40]	; 0x28
 8015524:	429a      	cmp	r2, r3
 8015526:	dd00      	ble.n	801552a <_printf_float+0x35e>
 8015528:	930a      	str	r3, [sp, #40]	; 0x28
 801552a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801552c:	2b00      	cmp	r3, #0
 801552e:	dc36      	bgt.n	801559e <_printf_float+0x3d2>
 8015530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015532:	2500      	movs	r5, #0
 8015534:	43db      	mvns	r3, r3
 8015536:	17db      	asrs	r3, r3, #31
 8015538:	930b      	str	r3, [sp, #44]	; 0x2c
 801553a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801553c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801553e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015540:	1a9b      	subs	r3, r3, r2
 8015542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015544:	400a      	ands	r2, r1
 8015546:	1a9b      	subs	r3, r3, r2
 8015548:	42ab      	cmp	r3, r5
 801554a:	dc00      	bgt.n	801554e <_printf_float+0x382>
 801554c:	e772      	b.n	8015434 <_printf_float+0x268>
 801554e:	0022      	movs	r2, r4
 8015550:	2301      	movs	r3, #1
 8015552:	0038      	movs	r0, r7
 8015554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015556:	321a      	adds	r2, #26
 8015558:	47b0      	blx	r6
 801555a:	1c43      	adds	r3, r0, #1
 801555c:	d100      	bne.n	8015560 <_printf_float+0x394>
 801555e:	e693      	b.n	8015288 <_printf_float+0xbc>
 8015560:	3501      	adds	r5, #1
 8015562:	e7ea      	b.n	801553a <_printf_float+0x36e>
 8015564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015566:	002a      	movs	r2, r5
 8015568:	0038      	movs	r0, r7
 801556a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801556c:	47b0      	blx	r6
 801556e:	1c43      	adds	r3, r0, #1
 8015570:	d1bb      	bne.n	80154ea <_printf_float+0x31e>
 8015572:	e689      	b.n	8015288 <_printf_float+0xbc>
 8015574:	0022      	movs	r2, r4
 8015576:	2301      	movs	r3, #1
 8015578:	0038      	movs	r0, r7
 801557a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801557c:	321a      	adds	r2, #26
 801557e:	47b0      	blx	r6
 8015580:	1c43      	adds	r3, r0, #1
 8015582:	d100      	bne.n	8015586 <_printf_float+0x3ba>
 8015584:	e680      	b.n	8015288 <_printf_float+0xbc>
 8015586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015588:	3301      	adds	r3, #1
 801558a:	930d      	str	r3, [sp, #52]	; 0x34
 801558c:	e7b3      	b.n	80154f6 <_printf_float+0x32a>
 801558e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015590:	0038      	movs	r0, r7
 8015592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015594:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015596:	47b0      	blx	r6
 8015598:	1c43      	adds	r3, r0, #1
 801559a:	d1bd      	bne.n	8015518 <_printf_float+0x34c>
 801559c:	e674      	b.n	8015288 <_printf_float+0xbc>
 801559e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155a0:	0038      	movs	r0, r7
 80155a2:	18ea      	adds	r2, r5, r3
 80155a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80155a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155a8:	47b0      	blx	r6
 80155aa:	1c43      	adds	r3, r0, #1
 80155ac:	d1c0      	bne.n	8015530 <_printf_float+0x364>
 80155ae:	e66b      	b.n	8015288 <_printf_float+0xbc>
 80155b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80155b2:	2b01      	cmp	r3, #1
 80155b4:	dc02      	bgt.n	80155bc <_printf_float+0x3f0>
 80155b6:	2301      	movs	r3, #1
 80155b8:	421a      	tst	r2, r3
 80155ba:	d034      	beq.n	8015626 <_printf_float+0x45a>
 80155bc:	2301      	movs	r3, #1
 80155be:	002a      	movs	r2, r5
 80155c0:	0038      	movs	r0, r7
 80155c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80155c4:	47b0      	blx	r6
 80155c6:	1c43      	adds	r3, r0, #1
 80155c8:	d100      	bne.n	80155cc <_printf_float+0x400>
 80155ca:	e65d      	b.n	8015288 <_printf_float+0xbc>
 80155cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155ce:	0038      	movs	r0, r7
 80155d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80155d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80155d4:	47b0      	blx	r6
 80155d6:	1c43      	adds	r3, r0, #1
 80155d8:	d100      	bne.n	80155dc <_printf_float+0x410>
 80155da:	e655      	b.n	8015288 <_printf_float+0xbc>
 80155dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80155de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80155e0:	2200      	movs	r2, #0
 80155e2:	2300      	movs	r3, #0
 80155e4:	f7ea ff3c 	bl	8000460 <__aeabi_dcmpeq>
 80155e8:	2800      	cmp	r0, #0
 80155ea:	d11a      	bne.n	8015622 <_printf_float+0x456>
 80155ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80155ee:	1c6a      	adds	r2, r5, #1
 80155f0:	3b01      	subs	r3, #1
 80155f2:	0038      	movs	r0, r7
 80155f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80155f6:	47b0      	blx	r6
 80155f8:	1c43      	adds	r3, r0, #1
 80155fa:	d10e      	bne.n	801561a <_printf_float+0x44e>
 80155fc:	e644      	b.n	8015288 <_printf_float+0xbc>
 80155fe:	0022      	movs	r2, r4
 8015600:	2301      	movs	r3, #1
 8015602:	0038      	movs	r0, r7
 8015604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015606:	321a      	adds	r2, #26
 8015608:	47b0      	blx	r6
 801560a:	1c43      	adds	r3, r0, #1
 801560c:	d100      	bne.n	8015610 <_printf_float+0x444>
 801560e:	e63b      	b.n	8015288 <_printf_float+0xbc>
 8015610:	3501      	adds	r5, #1
 8015612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015614:	3b01      	subs	r3, #1
 8015616:	42ab      	cmp	r3, r5
 8015618:	dcf1      	bgt.n	80155fe <_printf_float+0x432>
 801561a:	0022      	movs	r2, r4
 801561c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801561e:	3250      	adds	r2, #80	; 0x50
 8015620:	e6da      	b.n	80153d8 <_printf_float+0x20c>
 8015622:	2500      	movs	r5, #0
 8015624:	e7f5      	b.n	8015612 <_printf_float+0x446>
 8015626:	002a      	movs	r2, r5
 8015628:	e7e3      	b.n	80155f2 <_printf_float+0x426>
 801562a:	0022      	movs	r2, r4
 801562c:	2301      	movs	r3, #1
 801562e:	0038      	movs	r0, r7
 8015630:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015632:	3219      	adds	r2, #25
 8015634:	47b0      	blx	r6
 8015636:	1c43      	adds	r3, r0, #1
 8015638:	d100      	bne.n	801563c <_printf_float+0x470>
 801563a:	e625      	b.n	8015288 <_printf_float+0xbc>
 801563c:	3501      	adds	r5, #1
 801563e:	68e3      	ldr	r3, [r4, #12]
 8015640:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015642:	1a9b      	subs	r3, r3, r2
 8015644:	42ab      	cmp	r3, r5
 8015646:	dcf0      	bgt.n	801562a <_printf_float+0x45e>
 8015648:	e6f8      	b.n	801543c <_printf_float+0x270>
 801564a:	2500      	movs	r5, #0
 801564c:	e7f7      	b.n	801563e <_printf_float+0x472>
 801564e:	46c0      	nop			; (mov r8, r8)

08015650 <_printf_common>:
 8015650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015652:	0015      	movs	r5, r2
 8015654:	9301      	str	r3, [sp, #4]
 8015656:	688a      	ldr	r2, [r1, #8]
 8015658:	690b      	ldr	r3, [r1, #16]
 801565a:	000c      	movs	r4, r1
 801565c:	9000      	str	r0, [sp, #0]
 801565e:	4293      	cmp	r3, r2
 8015660:	da00      	bge.n	8015664 <_printf_common+0x14>
 8015662:	0013      	movs	r3, r2
 8015664:	0022      	movs	r2, r4
 8015666:	602b      	str	r3, [r5, #0]
 8015668:	3243      	adds	r2, #67	; 0x43
 801566a:	7812      	ldrb	r2, [r2, #0]
 801566c:	2a00      	cmp	r2, #0
 801566e:	d001      	beq.n	8015674 <_printf_common+0x24>
 8015670:	3301      	adds	r3, #1
 8015672:	602b      	str	r3, [r5, #0]
 8015674:	6823      	ldr	r3, [r4, #0]
 8015676:	069b      	lsls	r3, r3, #26
 8015678:	d502      	bpl.n	8015680 <_printf_common+0x30>
 801567a:	682b      	ldr	r3, [r5, #0]
 801567c:	3302      	adds	r3, #2
 801567e:	602b      	str	r3, [r5, #0]
 8015680:	6822      	ldr	r2, [r4, #0]
 8015682:	2306      	movs	r3, #6
 8015684:	0017      	movs	r7, r2
 8015686:	401f      	ands	r7, r3
 8015688:	421a      	tst	r2, r3
 801568a:	d027      	beq.n	80156dc <_printf_common+0x8c>
 801568c:	0023      	movs	r3, r4
 801568e:	3343      	adds	r3, #67	; 0x43
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	1e5a      	subs	r2, r3, #1
 8015694:	4193      	sbcs	r3, r2
 8015696:	6822      	ldr	r2, [r4, #0]
 8015698:	0692      	lsls	r2, r2, #26
 801569a:	d430      	bmi.n	80156fe <_printf_common+0xae>
 801569c:	0022      	movs	r2, r4
 801569e:	9901      	ldr	r1, [sp, #4]
 80156a0:	9800      	ldr	r0, [sp, #0]
 80156a2:	9e08      	ldr	r6, [sp, #32]
 80156a4:	3243      	adds	r2, #67	; 0x43
 80156a6:	47b0      	blx	r6
 80156a8:	1c43      	adds	r3, r0, #1
 80156aa:	d025      	beq.n	80156f8 <_printf_common+0xa8>
 80156ac:	2306      	movs	r3, #6
 80156ae:	6820      	ldr	r0, [r4, #0]
 80156b0:	682a      	ldr	r2, [r5, #0]
 80156b2:	68e1      	ldr	r1, [r4, #12]
 80156b4:	2500      	movs	r5, #0
 80156b6:	4003      	ands	r3, r0
 80156b8:	2b04      	cmp	r3, #4
 80156ba:	d103      	bne.n	80156c4 <_printf_common+0x74>
 80156bc:	1a8d      	subs	r5, r1, r2
 80156be:	43eb      	mvns	r3, r5
 80156c0:	17db      	asrs	r3, r3, #31
 80156c2:	401d      	ands	r5, r3
 80156c4:	68a3      	ldr	r3, [r4, #8]
 80156c6:	6922      	ldr	r2, [r4, #16]
 80156c8:	4293      	cmp	r3, r2
 80156ca:	dd01      	ble.n	80156d0 <_printf_common+0x80>
 80156cc:	1a9b      	subs	r3, r3, r2
 80156ce:	18ed      	adds	r5, r5, r3
 80156d0:	2700      	movs	r7, #0
 80156d2:	42bd      	cmp	r5, r7
 80156d4:	d120      	bne.n	8015718 <_printf_common+0xc8>
 80156d6:	2000      	movs	r0, #0
 80156d8:	e010      	b.n	80156fc <_printf_common+0xac>
 80156da:	3701      	adds	r7, #1
 80156dc:	68e3      	ldr	r3, [r4, #12]
 80156de:	682a      	ldr	r2, [r5, #0]
 80156e0:	1a9b      	subs	r3, r3, r2
 80156e2:	42bb      	cmp	r3, r7
 80156e4:	ddd2      	ble.n	801568c <_printf_common+0x3c>
 80156e6:	0022      	movs	r2, r4
 80156e8:	2301      	movs	r3, #1
 80156ea:	9901      	ldr	r1, [sp, #4]
 80156ec:	9800      	ldr	r0, [sp, #0]
 80156ee:	9e08      	ldr	r6, [sp, #32]
 80156f0:	3219      	adds	r2, #25
 80156f2:	47b0      	blx	r6
 80156f4:	1c43      	adds	r3, r0, #1
 80156f6:	d1f0      	bne.n	80156da <_printf_common+0x8a>
 80156f8:	2001      	movs	r0, #1
 80156fa:	4240      	negs	r0, r0
 80156fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80156fe:	2030      	movs	r0, #48	; 0x30
 8015700:	18e1      	adds	r1, r4, r3
 8015702:	3143      	adds	r1, #67	; 0x43
 8015704:	7008      	strb	r0, [r1, #0]
 8015706:	0021      	movs	r1, r4
 8015708:	1c5a      	adds	r2, r3, #1
 801570a:	3145      	adds	r1, #69	; 0x45
 801570c:	7809      	ldrb	r1, [r1, #0]
 801570e:	18a2      	adds	r2, r4, r2
 8015710:	3243      	adds	r2, #67	; 0x43
 8015712:	3302      	adds	r3, #2
 8015714:	7011      	strb	r1, [r2, #0]
 8015716:	e7c1      	b.n	801569c <_printf_common+0x4c>
 8015718:	0022      	movs	r2, r4
 801571a:	2301      	movs	r3, #1
 801571c:	9901      	ldr	r1, [sp, #4]
 801571e:	9800      	ldr	r0, [sp, #0]
 8015720:	9e08      	ldr	r6, [sp, #32]
 8015722:	321a      	adds	r2, #26
 8015724:	47b0      	blx	r6
 8015726:	1c43      	adds	r3, r0, #1
 8015728:	d0e6      	beq.n	80156f8 <_printf_common+0xa8>
 801572a:	3701      	adds	r7, #1
 801572c:	e7d1      	b.n	80156d2 <_printf_common+0x82>
	...

08015730 <_printf_i>:
 8015730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015732:	b08b      	sub	sp, #44	; 0x2c
 8015734:	9206      	str	r2, [sp, #24]
 8015736:	000a      	movs	r2, r1
 8015738:	3243      	adds	r2, #67	; 0x43
 801573a:	9307      	str	r3, [sp, #28]
 801573c:	9005      	str	r0, [sp, #20]
 801573e:	9204      	str	r2, [sp, #16]
 8015740:	7e0a      	ldrb	r2, [r1, #24]
 8015742:	000c      	movs	r4, r1
 8015744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015746:	2a78      	cmp	r2, #120	; 0x78
 8015748:	d807      	bhi.n	801575a <_printf_i+0x2a>
 801574a:	2a62      	cmp	r2, #98	; 0x62
 801574c:	d809      	bhi.n	8015762 <_printf_i+0x32>
 801574e:	2a00      	cmp	r2, #0
 8015750:	d100      	bne.n	8015754 <_printf_i+0x24>
 8015752:	e0c1      	b.n	80158d8 <_printf_i+0x1a8>
 8015754:	2a58      	cmp	r2, #88	; 0x58
 8015756:	d100      	bne.n	801575a <_printf_i+0x2a>
 8015758:	e08c      	b.n	8015874 <_printf_i+0x144>
 801575a:	0026      	movs	r6, r4
 801575c:	3642      	adds	r6, #66	; 0x42
 801575e:	7032      	strb	r2, [r6, #0]
 8015760:	e022      	b.n	80157a8 <_printf_i+0x78>
 8015762:	0010      	movs	r0, r2
 8015764:	3863      	subs	r0, #99	; 0x63
 8015766:	2815      	cmp	r0, #21
 8015768:	d8f7      	bhi.n	801575a <_printf_i+0x2a>
 801576a:	f7ea fce9 	bl	8000140 <__gnu_thumb1_case_shi>
 801576e:	0016      	.short	0x0016
 8015770:	fff6001f 	.word	0xfff6001f
 8015774:	fff6fff6 	.word	0xfff6fff6
 8015778:	001ffff6 	.word	0x001ffff6
 801577c:	fff6fff6 	.word	0xfff6fff6
 8015780:	fff6fff6 	.word	0xfff6fff6
 8015784:	003600a8 	.word	0x003600a8
 8015788:	fff6009a 	.word	0xfff6009a
 801578c:	00b9fff6 	.word	0x00b9fff6
 8015790:	0036fff6 	.word	0x0036fff6
 8015794:	fff6fff6 	.word	0xfff6fff6
 8015798:	009e      	.short	0x009e
 801579a:	0026      	movs	r6, r4
 801579c:	681a      	ldr	r2, [r3, #0]
 801579e:	3642      	adds	r6, #66	; 0x42
 80157a0:	1d11      	adds	r1, r2, #4
 80157a2:	6019      	str	r1, [r3, #0]
 80157a4:	6813      	ldr	r3, [r2, #0]
 80157a6:	7033      	strb	r3, [r6, #0]
 80157a8:	2301      	movs	r3, #1
 80157aa:	e0a7      	b.n	80158fc <_printf_i+0x1cc>
 80157ac:	6808      	ldr	r0, [r1, #0]
 80157ae:	6819      	ldr	r1, [r3, #0]
 80157b0:	1d0a      	adds	r2, r1, #4
 80157b2:	0605      	lsls	r5, r0, #24
 80157b4:	d50b      	bpl.n	80157ce <_printf_i+0x9e>
 80157b6:	680d      	ldr	r5, [r1, #0]
 80157b8:	601a      	str	r2, [r3, #0]
 80157ba:	2d00      	cmp	r5, #0
 80157bc:	da03      	bge.n	80157c6 <_printf_i+0x96>
 80157be:	232d      	movs	r3, #45	; 0x2d
 80157c0:	9a04      	ldr	r2, [sp, #16]
 80157c2:	426d      	negs	r5, r5
 80157c4:	7013      	strb	r3, [r2, #0]
 80157c6:	4b61      	ldr	r3, [pc, #388]	; (801594c <_printf_i+0x21c>)
 80157c8:	270a      	movs	r7, #10
 80157ca:	9303      	str	r3, [sp, #12]
 80157cc:	e01b      	b.n	8015806 <_printf_i+0xd6>
 80157ce:	680d      	ldr	r5, [r1, #0]
 80157d0:	601a      	str	r2, [r3, #0]
 80157d2:	0641      	lsls	r1, r0, #25
 80157d4:	d5f1      	bpl.n	80157ba <_printf_i+0x8a>
 80157d6:	b22d      	sxth	r5, r5
 80157d8:	e7ef      	b.n	80157ba <_printf_i+0x8a>
 80157da:	680d      	ldr	r5, [r1, #0]
 80157dc:	6819      	ldr	r1, [r3, #0]
 80157de:	1d08      	adds	r0, r1, #4
 80157e0:	6018      	str	r0, [r3, #0]
 80157e2:	062e      	lsls	r6, r5, #24
 80157e4:	d501      	bpl.n	80157ea <_printf_i+0xba>
 80157e6:	680d      	ldr	r5, [r1, #0]
 80157e8:	e003      	b.n	80157f2 <_printf_i+0xc2>
 80157ea:	066d      	lsls	r5, r5, #25
 80157ec:	d5fb      	bpl.n	80157e6 <_printf_i+0xb6>
 80157ee:	680d      	ldr	r5, [r1, #0]
 80157f0:	b2ad      	uxth	r5, r5
 80157f2:	4b56      	ldr	r3, [pc, #344]	; (801594c <_printf_i+0x21c>)
 80157f4:	2708      	movs	r7, #8
 80157f6:	9303      	str	r3, [sp, #12]
 80157f8:	2a6f      	cmp	r2, #111	; 0x6f
 80157fa:	d000      	beq.n	80157fe <_printf_i+0xce>
 80157fc:	3702      	adds	r7, #2
 80157fe:	0023      	movs	r3, r4
 8015800:	2200      	movs	r2, #0
 8015802:	3343      	adds	r3, #67	; 0x43
 8015804:	701a      	strb	r2, [r3, #0]
 8015806:	6863      	ldr	r3, [r4, #4]
 8015808:	60a3      	str	r3, [r4, #8]
 801580a:	2b00      	cmp	r3, #0
 801580c:	db03      	blt.n	8015816 <_printf_i+0xe6>
 801580e:	2204      	movs	r2, #4
 8015810:	6821      	ldr	r1, [r4, #0]
 8015812:	4391      	bics	r1, r2
 8015814:	6021      	str	r1, [r4, #0]
 8015816:	2d00      	cmp	r5, #0
 8015818:	d102      	bne.n	8015820 <_printf_i+0xf0>
 801581a:	9e04      	ldr	r6, [sp, #16]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d00c      	beq.n	801583a <_printf_i+0x10a>
 8015820:	9e04      	ldr	r6, [sp, #16]
 8015822:	0028      	movs	r0, r5
 8015824:	0039      	movs	r1, r7
 8015826:	f7ea fd1b 	bl	8000260 <__aeabi_uidivmod>
 801582a:	9b03      	ldr	r3, [sp, #12]
 801582c:	3e01      	subs	r6, #1
 801582e:	5c5b      	ldrb	r3, [r3, r1]
 8015830:	7033      	strb	r3, [r6, #0]
 8015832:	002b      	movs	r3, r5
 8015834:	0005      	movs	r5, r0
 8015836:	429f      	cmp	r7, r3
 8015838:	d9f3      	bls.n	8015822 <_printf_i+0xf2>
 801583a:	2f08      	cmp	r7, #8
 801583c:	d109      	bne.n	8015852 <_printf_i+0x122>
 801583e:	6823      	ldr	r3, [r4, #0]
 8015840:	07db      	lsls	r3, r3, #31
 8015842:	d506      	bpl.n	8015852 <_printf_i+0x122>
 8015844:	6863      	ldr	r3, [r4, #4]
 8015846:	6922      	ldr	r2, [r4, #16]
 8015848:	4293      	cmp	r3, r2
 801584a:	dc02      	bgt.n	8015852 <_printf_i+0x122>
 801584c:	2330      	movs	r3, #48	; 0x30
 801584e:	3e01      	subs	r6, #1
 8015850:	7033      	strb	r3, [r6, #0]
 8015852:	9b04      	ldr	r3, [sp, #16]
 8015854:	1b9b      	subs	r3, r3, r6
 8015856:	6123      	str	r3, [r4, #16]
 8015858:	9b07      	ldr	r3, [sp, #28]
 801585a:	0021      	movs	r1, r4
 801585c:	9300      	str	r3, [sp, #0]
 801585e:	9805      	ldr	r0, [sp, #20]
 8015860:	9b06      	ldr	r3, [sp, #24]
 8015862:	aa09      	add	r2, sp, #36	; 0x24
 8015864:	f7ff fef4 	bl	8015650 <_printf_common>
 8015868:	1c43      	adds	r3, r0, #1
 801586a:	d14c      	bne.n	8015906 <_printf_i+0x1d6>
 801586c:	2001      	movs	r0, #1
 801586e:	4240      	negs	r0, r0
 8015870:	b00b      	add	sp, #44	; 0x2c
 8015872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015874:	3145      	adds	r1, #69	; 0x45
 8015876:	700a      	strb	r2, [r1, #0]
 8015878:	4a34      	ldr	r2, [pc, #208]	; (801594c <_printf_i+0x21c>)
 801587a:	9203      	str	r2, [sp, #12]
 801587c:	681a      	ldr	r2, [r3, #0]
 801587e:	6821      	ldr	r1, [r4, #0]
 8015880:	ca20      	ldmia	r2!, {r5}
 8015882:	601a      	str	r2, [r3, #0]
 8015884:	0608      	lsls	r0, r1, #24
 8015886:	d516      	bpl.n	80158b6 <_printf_i+0x186>
 8015888:	07cb      	lsls	r3, r1, #31
 801588a:	d502      	bpl.n	8015892 <_printf_i+0x162>
 801588c:	2320      	movs	r3, #32
 801588e:	4319      	orrs	r1, r3
 8015890:	6021      	str	r1, [r4, #0]
 8015892:	2710      	movs	r7, #16
 8015894:	2d00      	cmp	r5, #0
 8015896:	d1b2      	bne.n	80157fe <_printf_i+0xce>
 8015898:	2320      	movs	r3, #32
 801589a:	6822      	ldr	r2, [r4, #0]
 801589c:	439a      	bics	r2, r3
 801589e:	6022      	str	r2, [r4, #0]
 80158a0:	e7ad      	b.n	80157fe <_printf_i+0xce>
 80158a2:	2220      	movs	r2, #32
 80158a4:	6809      	ldr	r1, [r1, #0]
 80158a6:	430a      	orrs	r2, r1
 80158a8:	6022      	str	r2, [r4, #0]
 80158aa:	0022      	movs	r2, r4
 80158ac:	2178      	movs	r1, #120	; 0x78
 80158ae:	3245      	adds	r2, #69	; 0x45
 80158b0:	7011      	strb	r1, [r2, #0]
 80158b2:	4a27      	ldr	r2, [pc, #156]	; (8015950 <_printf_i+0x220>)
 80158b4:	e7e1      	b.n	801587a <_printf_i+0x14a>
 80158b6:	0648      	lsls	r0, r1, #25
 80158b8:	d5e6      	bpl.n	8015888 <_printf_i+0x158>
 80158ba:	b2ad      	uxth	r5, r5
 80158bc:	e7e4      	b.n	8015888 <_printf_i+0x158>
 80158be:	681a      	ldr	r2, [r3, #0]
 80158c0:	680d      	ldr	r5, [r1, #0]
 80158c2:	1d10      	adds	r0, r2, #4
 80158c4:	6949      	ldr	r1, [r1, #20]
 80158c6:	6018      	str	r0, [r3, #0]
 80158c8:	6813      	ldr	r3, [r2, #0]
 80158ca:	062e      	lsls	r6, r5, #24
 80158cc:	d501      	bpl.n	80158d2 <_printf_i+0x1a2>
 80158ce:	6019      	str	r1, [r3, #0]
 80158d0:	e002      	b.n	80158d8 <_printf_i+0x1a8>
 80158d2:	066d      	lsls	r5, r5, #25
 80158d4:	d5fb      	bpl.n	80158ce <_printf_i+0x19e>
 80158d6:	8019      	strh	r1, [r3, #0]
 80158d8:	2300      	movs	r3, #0
 80158da:	9e04      	ldr	r6, [sp, #16]
 80158dc:	6123      	str	r3, [r4, #16]
 80158de:	e7bb      	b.n	8015858 <_printf_i+0x128>
 80158e0:	681a      	ldr	r2, [r3, #0]
 80158e2:	1d11      	adds	r1, r2, #4
 80158e4:	6019      	str	r1, [r3, #0]
 80158e6:	6816      	ldr	r6, [r2, #0]
 80158e8:	2100      	movs	r1, #0
 80158ea:	0030      	movs	r0, r6
 80158ec:	6862      	ldr	r2, [r4, #4]
 80158ee:	f003 f80b 	bl	8018908 <memchr>
 80158f2:	2800      	cmp	r0, #0
 80158f4:	d001      	beq.n	80158fa <_printf_i+0x1ca>
 80158f6:	1b80      	subs	r0, r0, r6
 80158f8:	6060      	str	r0, [r4, #4]
 80158fa:	6863      	ldr	r3, [r4, #4]
 80158fc:	6123      	str	r3, [r4, #16]
 80158fe:	2300      	movs	r3, #0
 8015900:	9a04      	ldr	r2, [sp, #16]
 8015902:	7013      	strb	r3, [r2, #0]
 8015904:	e7a8      	b.n	8015858 <_printf_i+0x128>
 8015906:	6923      	ldr	r3, [r4, #16]
 8015908:	0032      	movs	r2, r6
 801590a:	9906      	ldr	r1, [sp, #24]
 801590c:	9805      	ldr	r0, [sp, #20]
 801590e:	9d07      	ldr	r5, [sp, #28]
 8015910:	47a8      	blx	r5
 8015912:	1c43      	adds	r3, r0, #1
 8015914:	d0aa      	beq.n	801586c <_printf_i+0x13c>
 8015916:	6823      	ldr	r3, [r4, #0]
 8015918:	079b      	lsls	r3, r3, #30
 801591a:	d415      	bmi.n	8015948 <_printf_i+0x218>
 801591c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801591e:	68e0      	ldr	r0, [r4, #12]
 8015920:	4298      	cmp	r0, r3
 8015922:	daa5      	bge.n	8015870 <_printf_i+0x140>
 8015924:	0018      	movs	r0, r3
 8015926:	e7a3      	b.n	8015870 <_printf_i+0x140>
 8015928:	0022      	movs	r2, r4
 801592a:	2301      	movs	r3, #1
 801592c:	9906      	ldr	r1, [sp, #24]
 801592e:	9805      	ldr	r0, [sp, #20]
 8015930:	9e07      	ldr	r6, [sp, #28]
 8015932:	3219      	adds	r2, #25
 8015934:	47b0      	blx	r6
 8015936:	1c43      	adds	r3, r0, #1
 8015938:	d098      	beq.n	801586c <_printf_i+0x13c>
 801593a:	3501      	adds	r5, #1
 801593c:	68e3      	ldr	r3, [r4, #12]
 801593e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015940:	1a9b      	subs	r3, r3, r2
 8015942:	42ab      	cmp	r3, r5
 8015944:	dcf0      	bgt.n	8015928 <_printf_i+0x1f8>
 8015946:	e7e9      	b.n	801591c <_printf_i+0x1ec>
 8015948:	2500      	movs	r5, #0
 801594a:	e7f7      	b.n	801593c <_printf_i+0x20c>
 801594c:	0801b83a 	.word	0x0801b83a
 8015950:	0801b84b 	.word	0x0801b84b

08015954 <_scanf_float>:
 8015954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015956:	b08b      	sub	sp, #44	; 0x2c
 8015958:	0015      	movs	r5, r2
 801595a:	9001      	str	r0, [sp, #4]
 801595c:	22ae      	movs	r2, #174	; 0xae
 801595e:	2000      	movs	r0, #0
 8015960:	9306      	str	r3, [sp, #24]
 8015962:	688b      	ldr	r3, [r1, #8]
 8015964:	000e      	movs	r6, r1
 8015966:	1e59      	subs	r1, r3, #1
 8015968:	0052      	lsls	r2, r2, #1
 801596a:	9005      	str	r0, [sp, #20]
 801596c:	4291      	cmp	r1, r2
 801596e:	d905      	bls.n	801597c <_scanf_float+0x28>
 8015970:	3b5e      	subs	r3, #94	; 0x5e
 8015972:	3bff      	subs	r3, #255	; 0xff
 8015974:	9305      	str	r3, [sp, #20]
 8015976:	235e      	movs	r3, #94	; 0x5e
 8015978:	33ff      	adds	r3, #255	; 0xff
 801597a:	60b3      	str	r3, [r6, #8]
 801597c:	23f0      	movs	r3, #240	; 0xf0
 801597e:	6832      	ldr	r2, [r6, #0]
 8015980:	00db      	lsls	r3, r3, #3
 8015982:	4313      	orrs	r3, r2
 8015984:	6033      	str	r3, [r6, #0]
 8015986:	0033      	movs	r3, r6
 8015988:	2400      	movs	r4, #0
 801598a:	331c      	adds	r3, #28
 801598c:	001f      	movs	r7, r3
 801598e:	9303      	str	r3, [sp, #12]
 8015990:	9402      	str	r4, [sp, #8]
 8015992:	9408      	str	r4, [sp, #32]
 8015994:	9407      	str	r4, [sp, #28]
 8015996:	9400      	str	r4, [sp, #0]
 8015998:	9404      	str	r4, [sp, #16]
 801599a:	68b2      	ldr	r2, [r6, #8]
 801599c:	2a00      	cmp	r2, #0
 801599e:	d00a      	beq.n	80159b6 <_scanf_float+0x62>
 80159a0:	682b      	ldr	r3, [r5, #0]
 80159a2:	781b      	ldrb	r3, [r3, #0]
 80159a4:	2b4e      	cmp	r3, #78	; 0x4e
 80159a6:	d844      	bhi.n	8015a32 <_scanf_float+0xde>
 80159a8:	0018      	movs	r0, r3
 80159aa:	2b40      	cmp	r3, #64	; 0x40
 80159ac:	d82c      	bhi.n	8015a08 <_scanf_float+0xb4>
 80159ae:	382b      	subs	r0, #43	; 0x2b
 80159b0:	b2c1      	uxtb	r1, r0
 80159b2:	290e      	cmp	r1, #14
 80159b4:	d92a      	bls.n	8015a0c <_scanf_float+0xb8>
 80159b6:	9b00      	ldr	r3, [sp, #0]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d003      	beq.n	80159c4 <_scanf_float+0x70>
 80159bc:	6832      	ldr	r2, [r6, #0]
 80159be:	4ba4      	ldr	r3, [pc, #656]	; (8015c50 <_scanf_float+0x2fc>)
 80159c0:	4013      	ands	r3, r2
 80159c2:	6033      	str	r3, [r6, #0]
 80159c4:	9b02      	ldr	r3, [sp, #8]
 80159c6:	3b01      	subs	r3, #1
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	d900      	bls.n	80159ce <_scanf_float+0x7a>
 80159cc:	e0f9      	b.n	8015bc2 <_scanf_float+0x26e>
 80159ce:	24be      	movs	r4, #190	; 0xbe
 80159d0:	0064      	lsls	r4, r4, #1
 80159d2:	9b03      	ldr	r3, [sp, #12]
 80159d4:	429f      	cmp	r7, r3
 80159d6:	d900      	bls.n	80159da <_scanf_float+0x86>
 80159d8:	e0e9      	b.n	8015bae <_scanf_float+0x25a>
 80159da:	2301      	movs	r3, #1
 80159dc:	9302      	str	r3, [sp, #8]
 80159de:	e185      	b.n	8015cec <_scanf_float+0x398>
 80159e0:	0018      	movs	r0, r3
 80159e2:	3861      	subs	r0, #97	; 0x61
 80159e4:	280d      	cmp	r0, #13
 80159e6:	d8e6      	bhi.n	80159b6 <_scanf_float+0x62>
 80159e8:	f7ea fbaa 	bl	8000140 <__gnu_thumb1_case_shi>
 80159ec:	ffe50083 	.word	0xffe50083
 80159f0:	ffe5ffe5 	.word	0xffe5ffe5
 80159f4:	00a200b6 	.word	0x00a200b6
 80159f8:	ffe5ffe5 	.word	0xffe5ffe5
 80159fc:	ffe50089 	.word	0xffe50089
 8015a00:	ffe5ffe5 	.word	0xffe5ffe5
 8015a04:	0065ffe5 	.word	0x0065ffe5
 8015a08:	3841      	subs	r0, #65	; 0x41
 8015a0a:	e7eb      	b.n	80159e4 <_scanf_float+0x90>
 8015a0c:	280e      	cmp	r0, #14
 8015a0e:	d8d2      	bhi.n	80159b6 <_scanf_float+0x62>
 8015a10:	f7ea fb96 	bl	8000140 <__gnu_thumb1_case_shi>
 8015a14:	ffd1004b 	.word	0xffd1004b
 8015a18:	0098004b 	.word	0x0098004b
 8015a1c:	0020ffd1 	.word	0x0020ffd1
 8015a20:	00400040 	.word	0x00400040
 8015a24:	00400040 	.word	0x00400040
 8015a28:	00400040 	.word	0x00400040
 8015a2c:	00400040 	.word	0x00400040
 8015a30:	0040      	.short	0x0040
 8015a32:	2b6e      	cmp	r3, #110	; 0x6e
 8015a34:	d809      	bhi.n	8015a4a <_scanf_float+0xf6>
 8015a36:	2b60      	cmp	r3, #96	; 0x60
 8015a38:	d8d2      	bhi.n	80159e0 <_scanf_float+0x8c>
 8015a3a:	2b54      	cmp	r3, #84	; 0x54
 8015a3c:	d07d      	beq.n	8015b3a <_scanf_float+0x1e6>
 8015a3e:	2b59      	cmp	r3, #89	; 0x59
 8015a40:	d1b9      	bne.n	80159b6 <_scanf_float+0x62>
 8015a42:	2c07      	cmp	r4, #7
 8015a44:	d1b7      	bne.n	80159b6 <_scanf_float+0x62>
 8015a46:	2408      	movs	r4, #8
 8015a48:	e02c      	b.n	8015aa4 <_scanf_float+0x150>
 8015a4a:	2b74      	cmp	r3, #116	; 0x74
 8015a4c:	d075      	beq.n	8015b3a <_scanf_float+0x1e6>
 8015a4e:	2b79      	cmp	r3, #121	; 0x79
 8015a50:	d0f7      	beq.n	8015a42 <_scanf_float+0xee>
 8015a52:	e7b0      	b.n	80159b6 <_scanf_float+0x62>
 8015a54:	6831      	ldr	r1, [r6, #0]
 8015a56:	05c8      	lsls	r0, r1, #23
 8015a58:	d51c      	bpl.n	8015a94 <_scanf_float+0x140>
 8015a5a:	2380      	movs	r3, #128	; 0x80
 8015a5c:	4399      	bics	r1, r3
 8015a5e:	9b00      	ldr	r3, [sp, #0]
 8015a60:	6031      	str	r1, [r6, #0]
 8015a62:	3301      	adds	r3, #1
 8015a64:	9300      	str	r3, [sp, #0]
 8015a66:	9b05      	ldr	r3, [sp, #20]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d003      	beq.n	8015a74 <_scanf_float+0x120>
 8015a6c:	3b01      	subs	r3, #1
 8015a6e:	3201      	adds	r2, #1
 8015a70:	9305      	str	r3, [sp, #20]
 8015a72:	60b2      	str	r2, [r6, #8]
 8015a74:	68b3      	ldr	r3, [r6, #8]
 8015a76:	3b01      	subs	r3, #1
 8015a78:	60b3      	str	r3, [r6, #8]
 8015a7a:	6933      	ldr	r3, [r6, #16]
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	6133      	str	r3, [r6, #16]
 8015a80:	686b      	ldr	r3, [r5, #4]
 8015a82:	3b01      	subs	r3, #1
 8015a84:	606b      	str	r3, [r5, #4]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	dc00      	bgt.n	8015a8c <_scanf_float+0x138>
 8015a8a:	e086      	b.n	8015b9a <_scanf_float+0x246>
 8015a8c:	682b      	ldr	r3, [r5, #0]
 8015a8e:	3301      	adds	r3, #1
 8015a90:	602b      	str	r3, [r5, #0]
 8015a92:	e782      	b.n	801599a <_scanf_float+0x46>
 8015a94:	9a02      	ldr	r2, [sp, #8]
 8015a96:	1912      	adds	r2, r2, r4
 8015a98:	2a00      	cmp	r2, #0
 8015a9a:	d18c      	bne.n	80159b6 <_scanf_float+0x62>
 8015a9c:	4a6d      	ldr	r2, [pc, #436]	; (8015c54 <_scanf_float+0x300>)
 8015a9e:	6831      	ldr	r1, [r6, #0]
 8015aa0:	400a      	ands	r2, r1
 8015aa2:	6032      	str	r2, [r6, #0]
 8015aa4:	703b      	strb	r3, [r7, #0]
 8015aa6:	3701      	adds	r7, #1
 8015aa8:	e7e4      	b.n	8015a74 <_scanf_float+0x120>
 8015aaa:	2180      	movs	r1, #128	; 0x80
 8015aac:	6832      	ldr	r2, [r6, #0]
 8015aae:	420a      	tst	r2, r1
 8015ab0:	d081      	beq.n	80159b6 <_scanf_float+0x62>
 8015ab2:	438a      	bics	r2, r1
 8015ab4:	e7f5      	b.n	8015aa2 <_scanf_float+0x14e>
 8015ab6:	9a02      	ldr	r2, [sp, #8]
 8015ab8:	2a00      	cmp	r2, #0
 8015aba:	d10f      	bne.n	8015adc <_scanf_float+0x188>
 8015abc:	9a00      	ldr	r2, [sp, #0]
 8015abe:	2a00      	cmp	r2, #0
 8015ac0:	d10f      	bne.n	8015ae2 <_scanf_float+0x18e>
 8015ac2:	6832      	ldr	r2, [r6, #0]
 8015ac4:	21e0      	movs	r1, #224	; 0xe0
 8015ac6:	0010      	movs	r0, r2
 8015ac8:	00c9      	lsls	r1, r1, #3
 8015aca:	4008      	ands	r0, r1
 8015acc:	4288      	cmp	r0, r1
 8015ace:	d108      	bne.n	8015ae2 <_scanf_float+0x18e>
 8015ad0:	4961      	ldr	r1, [pc, #388]	; (8015c58 <_scanf_float+0x304>)
 8015ad2:	400a      	ands	r2, r1
 8015ad4:	6032      	str	r2, [r6, #0]
 8015ad6:	2201      	movs	r2, #1
 8015ad8:	9202      	str	r2, [sp, #8]
 8015ada:	e7e3      	b.n	8015aa4 <_scanf_float+0x150>
 8015adc:	9a02      	ldr	r2, [sp, #8]
 8015ade:	2a02      	cmp	r2, #2
 8015ae0:	d059      	beq.n	8015b96 <_scanf_float+0x242>
 8015ae2:	2c01      	cmp	r4, #1
 8015ae4:	d002      	beq.n	8015aec <_scanf_float+0x198>
 8015ae6:	2c04      	cmp	r4, #4
 8015ae8:	d000      	beq.n	8015aec <_scanf_float+0x198>
 8015aea:	e764      	b.n	80159b6 <_scanf_float+0x62>
 8015aec:	3401      	adds	r4, #1
 8015aee:	b2e4      	uxtb	r4, r4
 8015af0:	e7d8      	b.n	8015aa4 <_scanf_float+0x150>
 8015af2:	9a02      	ldr	r2, [sp, #8]
 8015af4:	2a01      	cmp	r2, #1
 8015af6:	d000      	beq.n	8015afa <_scanf_float+0x1a6>
 8015af8:	e75d      	b.n	80159b6 <_scanf_float+0x62>
 8015afa:	2202      	movs	r2, #2
 8015afc:	e7ec      	b.n	8015ad8 <_scanf_float+0x184>
 8015afe:	2c00      	cmp	r4, #0
 8015b00:	d110      	bne.n	8015b24 <_scanf_float+0x1d0>
 8015b02:	9a00      	ldr	r2, [sp, #0]
 8015b04:	2a00      	cmp	r2, #0
 8015b06:	d000      	beq.n	8015b0a <_scanf_float+0x1b6>
 8015b08:	e758      	b.n	80159bc <_scanf_float+0x68>
 8015b0a:	6832      	ldr	r2, [r6, #0]
 8015b0c:	21e0      	movs	r1, #224	; 0xe0
 8015b0e:	0010      	movs	r0, r2
 8015b10:	00c9      	lsls	r1, r1, #3
 8015b12:	4008      	ands	r0, r1
 8015b14:	4288      	cmp	r0, r1
 8015b16:	d000      	beq.n	8015b1a <_scanf_float+0x1c6>
 8015b18:	e754      	b.n	80159c4 <_scanf_float+0x70>
 8015b1a:	494f      	ldr	r1, [pc, #316]	; (8015c58 <_scanf_float+0x304>)
 8015b1c:	3401      	adds	r4, #1
 8015b1e:	400a      	ands	r2, r1
 8015b20:	6032      	str	r2, [r6, #0]
 8015b22:	e7bf      	b.n	8015aa4 <_scanf_float+0x150>
 8015b24:	21fd      	movs	r1, #253	; 0xfd
 8015b26:	1ee2      	subs	r2, r4, #3
 8015b28:	420a      	tst	r2, r1
 8015b2a:	d000      	beq.n	8015b2e <_scanf_float+0x1da>
 8015b2c:	e743      	b.n	80159b6 <_scanf_float+0x62>
 8015b2e:	e7dd      	b.n	8015aec <_scanf_float+0x198>
 8015b30:	2c02      	cmp	r4, #2
 8015b32:	d000      	beq.n	8015b36 <_scanf_float+0x1e2>
 8015b34:	e73f      	b.n	80159b6 <_scanf_float+0x62>
 8015b36:	2403      	movs	r4, #3
 8015b38:	e7b4      	b.n	8015aa4 <_scanf_float+0x150>
 8015b3a:	2c06      	cmp	r4, #6
 8015b3c:	d000      	beq.n	8015b40 <_scanf_float+0x1ec>
 8015b3e:	e73a      	b.n	80159b6 <_scanf_float+0x62>
 8015b40:	2407      	movs	r4, #7
 8015b42:	e7af      	b.n	8015aa4 <_scanf_float+0x150>
 8015b44:	6832      	ldr	r2, [r6, #0]
 8015b46:	0591      	lsls	r1, r2, #22
 8015b48:	d400      	bmi.n	8015b4c <_scanf_float+0x1f8>
 8015b4a:	e734      	b.n	80159b6 <_scanf_float+0x62>
 8015b4c:	4943      	ldr	r1, [pc, #268]	; (8015c5c <_scanf_float+0x308>)
 8015b4e:	400a      	ands	r2, r1
 8015b50:	6032      	str	r2, [r6, #0]
 8015b52:	9a00      	ldr	r2, [sp, #0]
 8015b54:	9204      	str	r2, [sp, #16]
 8015b56:	e7a5      	b.n	8015aa4 <_scanf_float+0x150>
 8015b58:	21a0      	movs	r1, #160	; 0xa0
 8015b5a:	2080      	movs	r0, #128	; 0x80
 8015b5c:	6832      	ldr	r2, [r6, #0]
 8015b5e:	00c9      	lsls	r1, r1, #3
 8015b60:	4011      	ands	r1, r2
 8015b62:	00c0      	lsls	r0, r0, #3
 8015b64:	4281      	cmp	r1, r0
 8015b66:	d006      	beq.n	8015b76 <_scanf_float+0x222>
 8015b68:	4202      	tst	r2, r0
 8015b6a:	d100      	bne.n	8015b6e <_scanf_float+0x21a>
 8015b6c:	e723      	b.n	80159b6 <_scanf_float+0x62>
 8015b6e:	9900      	ldr	r1, [sp, #0]
 8015b70:	2900      	cmp	r1, #0
 8015b72:	d100      	bne.n	8015b76 <_scanf_float+0x222>
 8015b74:	e726      	b.n	80159c4 <_scanf_float+0x70>
 8015b76:	0591      	lsls	r1, r2, #22
 8015b78:	d404      	bmi.n	8015b84 <_scanf_float+0x230>
 8015b7a:	9900      	ldr	r1, [sp, #0]
 8015b7c:	9804      	ldr	r0, [sp, #16]
 8015b7e:	9708      	str	r7, [sp, #32]
 8015b80:	1a09      	subs	r1, r1, r0
 8015b82:	9107      	str	r1, [sp, #28]
 8015b84:	4934      	ldr	r1, [pc, #208]	; (8015c58 <_scanf_float+0x304>)
 8015b86:	400a      	ands	r2, r1
 8015b88:	21c0      	movs	r1, #192	; 0xc0
 8015b8a:	0049      	lsls	r1, r1, #1
 8015b8c:	430a      	orrs	r2, r1
 8015b8e:	6032      	str	r2, [r6, #0]
 8015b90:	2200      	movs	r2, #0
 8015b92:	9200      	str	r2, [sp, #0]
 8015b94:	e786      	b.n	8015aa4 <_scanf_float+0x150>
 8015b96:	2203      	movs	r2, #3
 8015b98:	e79e      	b.n	8015ad8 <_scanf_float+0x184>
 8015b9a:	23c0      	movs	r3, #192	; 0xc0
 8015b9c:	005b      	lsls	r3, r3, #1
 8015b9e:	0029      	movs	r1, r5
 8015ba0:	58f3      	ldr	r3, [r6, r3]
 8015ba2:	9801      	ldr	r0, [sp, #4]
 8015ba4:	4798      	blx	r3
 8015ba6:	2800      	cmp	r0, #0
 8015ba8:	d100      	bne.n	8015bac <_scanf_float+0x258>
 8015baa:	e6f6      	b.n	801599a <_scanf_float+0x46>
 8015bac:	e703      	b.n	80159b6 <_scanf_float+0x62>
 8015bae:	3f01      	subs	r7, #1
 8015bb0:	5933      	ldr	r3, [r6, r4]
 8015bb2:	002a      	movs	r2, r5
 8015bb4:	7839      	ldrb	r1, [r7, #0]
 8015bb6:	9801      	ldr	r0, [sp, #4]
 8015bb8:	4798      	blx	r3
 8015bba:	6933      	ldr	r3, [r6, #16]
 8015bbc:	3b01      	subs	r3, #1
 8015bbe:	6133      	str	r3, [r6, #16]
 8015bc0:	e707      	b.n	80159d2 <_scanf_float+0x7e>
 8015bc2:	1e63      	subs	r3, r4, #1
 8015bc4:	2b06      	cmp	r3, #6
 8015bc6:	d80e      	bhi.n	8015be6 <_scanf_float+0x292>
 8015bc8:	9702      	str	r7, [sp, #8]
 8015bca:	2c02      	cmp	r4, #2
 8015bcc:	d920      	bls.n	8015c10 <_scanf_float+0x2bc>
 8015bce:	1be3      	subs	r3, r4, r7
 8015bd0:	b2db      	uxtb	r3, r3
 8015bd2:	9305      	str	r3, [sp, #20]
 8015bd4:	9b02      	ldr	r3, [sp, #8]
 8015bd6:	9a05      	ldr	r2, [sp, #20]
 8015bd8:	189b      	adds	r3, r3, r2
 8015bda:	b2db      	uxtb	r3, r3
 8015bdc:	2b03      	cmp	r3, #3
 8015bde:	d827      	bhi.n	8015c30 <_scanf_float+0x2dc>
 8015be0:	3c03      	subs	r4, #3
 8015be2:	b2e4      	uxtb	r4, r4
 8015be4:	1b3f      	subs	r7, r7, r4
 8015be6:	6833      	ldr	r3, [r6, #0]
 8015be8:	05da      	lsls	r2, r3, #23
 8015bea:	d554      	bpl.n	8015c96 <_scanf_float+0x342>
 8015bec:	055b      	lsls	r3, r3, #21
 8015bee:	d537      	bpl.n	8015c60 <_scanf_float+0x30c>
 8015bf0:	24be      	movs	r4, #190	; 0xbe
 8015bf2:	0064      	lsls	r4, r4, #1
 8015bf4:	9b03      	ldr	r3, [sp, #12]
 8015bf6:	429f      	cmp	r7, r3
 8015bf8:	d800      	bhi.n	8015bfc <_scanf_float+0x2a8>
 8015bfa:	e6ee      	b.n	80159da <_scanf_float+0x86>
 8015bfc:	3f01      	subs	r7, #1
 8015bfe:	5933      	ldr	r3, [r6, r4]
 8015c00:	002a      	movs	r2, r5
 8015c02:	7839      	ldrb	r1, [r7, #0]
 8015c04:	9801      	ldr	r0, [sp, #4]
 8015c06:	4798      	blx	r3
 8015c08:	6933      	ldr	r3, [r6, #16]
 8015c0a:	3b01      	subs	r3, #1
 8015c0c:	6133      	str	r3, [r6, #16]
 8015c0e:	e7f1      	b.n	8015bf4 <_scanf_float+0x2a0>
 8015c10:	24be      	movs	r4, #190	; 0xbe
 8015c12:	0064      	lsls	r4, r4, #1
 8015c14:	9b03      	ldr	r3, [sp, #12]
 8015c16:	429f      	cmp	r7, r3
 8015c18:	d800      	bhi.n	8015c1c <_scanf_float+0x2c8>
 8015c1a:	e6de      	b.n	80159da <_scanf_float+0x86>
 8015c1c:	3f01      	subs	r7, #1
 8015c1e:	5933      	ldr	r3, [r6, r4]
 8015c20:	002a      	movs	r2, r5
 8015c22:	7839      	ldrb	r1, [r7, #0]
 8015c24:	9801      	ldr	r0, [sp, #4]
 8015c26:	4798      	blx	r3
 8015c28:	6933      	ldr	r3, [r6, #16]
 8015c2a:	3b01      	subs	r3, #1
 8015c2c:	6133      	str	r3, [r6, #16]
 8015c2e:	e7f1      	b.n	8015c14 <_scanf_float+0x2c0>
 8015c30:	9b02      	ldr	r3, [sp, #8]
 8015c32:	002a      	movs	r2, r5
 8015c34:	3b01      	subs	r3, #1
 8015c36:	7819      	ldrb	r1, [r3, #0]
 8015c38:	9302      	str	r3, [sp, #8]
 8015c3a:	23be      	movs	r3, #190	; 0xbe
 8015c3c:	005b      	lsls	r3, r3, #1
 8015c3e:	58f3      	ldr	r3, [r6, r3]
 8015c40:	9801      	ldr	r0, [sp, #4]
 8015c42:	9309      	str	r3, [sp, #36]	; 0x24
 8015c44:	4798      	blx	r3
 8015c46:	6933      	ldr	r3, [r6, #16]
 8015c48:	3b01      	subs	r3, #1
 8015c4a:	6133      	str	r3, [r6, #16]
 8015c4c:	e7c2      	b.n	8015bd4 <_scanf_float+0x280>
 8015c4e:	46c0      	nop			; (mov r8, r8)
 8015c50:	fffffeff 	.word	0xfffffeff
 8015c54:	fffffe7f 	.word	0xfffffe7f
 8015c58:	fffff87f 	.word	0xfffff87f
 8015c5c:	fffffd7f 	.word	0xfffffd7f
 8015c60:	6933      	ldr	r3, [r6, #16]
 8015c62:	1e7c      	subs	r4, r7, #1
 8015c64:	7821      	ldrb	r1, [r4, #0]
 8015c66:	3b01      	subs	r3, #1
 8015c68:	6133      	str	r3, [r6, #16]
 8015c6a:	2965      	cmp	r1, #101	; 0x65
 8015c6c:	d00c      	beq.n	8015c88 <_scanf_float+0x334>
 8015c6e:	2945      	cmp	r1, #69	; 0x45
 8015c70:	d00a      	beq.n	8015c88 <_scanf_float+0x334>
 8015c72:	23be      	movs	r3, #190	; 0xbe
 8015c74:	005b      	lsls	r3, r3, #1
 8015c76:	58f3      	ldr	r3, [r6, r3]
 8015c78:	002a      	movs	r2, r5
 8015c7a:	9801      	ldr	r0, [sp, #4]
 8015c7c:	4798      	blx	r3
 8015c7e:	6933      	ldr	r3, [r6, #16]
 8015c80:	1ebc      	subs	r4, r7, #2
 8015c82:	3b01      	subs	r3, #1
 8015c84:	7821      	ldrb	r1, [r4, #0]
 8015c86:	6133      	str	r3, [r6, #16]
 8015c88:	23be      	movs	r3, #190	; 0xbe
 8015c8a:	005b      	lsls	r3, r3, #1
 8015c8c:	002a      	movs	r2, r5
 8015c8e:	58f3      	ldr	r3, [r6, r3]
 8015c90:	9801      	ldr	r0, [sp, #4]
 8015c92:	4798      	blx	r3
 8015c94:	0027      	movs	r7, r4
 8015c96:	6832      	ldr	r2, [r6, #0]
 8015c98:	2310      	movs	r3, #16
 8015c9a:	0011      	movs	r1, r2
 8015c9c:	4019      	ands	r1, r3
 8015c9e:	9102      	str	r1, [sp, #8]
 8015ca0:	421a      	tst	r2, r3
 8015ca2:	d158      	bne.n	8015d56 <_scanf_float+0x402>
 8015ca4:	23c0      	movs	r3, #192	; 0xc0
 8015ca6:	7039      	strb	r1, [r7, #0]
 8015ca8:	6832      	ldr	r2, [r6, #0]
 8015caa:	00db      	lsls	r3, r3, #3
 8015cac:	4013      	ands	r3, r2
 8015cae:	2280      	movs	r2, #128	; 0x80
 8015cb0:	00d2      	lsls	r2, r2, #3
 8015cb2:	4293      	cmp	r3, r2
 8015cb4:	d11d      	bne.n	8015cf2 <_scanf_float+0x39e>
 8015cb6:	9b04      	ldr	r3, [sp, #16]
 8015cb8:	9a00      	ldr	r2, [sp, #0]
 8015cba:	9900      	ldr	r1, [sp, #0]
 8015cbc:	1a9a      	subs	r2, r3, r2
 8015cbe:	428b      	cmp	r3, r1
 8015cc0:	d124      	bne.n	8015d0c <_scanf_float+0x3b8>
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	9903      	ldr	r1, [sp, #12]
 8015cc6:	9801      	ldr	r0, [sp, #4]
 8015cc8:	f001 f848 	bl	8016d5c <_strtod_r>
 8015ccc:	9b06      	ldr	r3, [sp, #24]
 8015cce:	000d      	movs	r5, r1
 8015cd0:	6831      	ldr	r1, [r6, #0]
 8015cd2:	0004      	movs	r4, r0
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	078a      	lsls	r2, r1, #30
 8015cd8:	d525      	bpl.n	8015d26 <_scanf_float+0x3d2>
 8015cda:	1d1a      	adds	r2, r3, #4
 8015cdc:	9906      	ldr	r1, [sp, #24]
 8015cde:	600a      	str	r2, [r1, #0]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	601c      	str	r4, [r3, #0]
 8015ce4:	605d      	str	r5, [r3, #4]
 8015ce6:	68f3      	ldr	r3, [r6, #12]
 8015ce8:	3301      	adds	r3, #1
 8015cea:	60f3      	str	r3, [r6, #12]
 8015cec:	9802      	ldr	r0, [sp, #8]
 8015cee:	b00b      	add	sp, #44	; 0x2c
 8015cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cf2:	9b07      	ldr	r3, [sp, #28]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d0e4      	beq.n	8015cc2 <_scanf_float+0x36e>
 8015cf8:	9b08      	ldr	r3, [sp, #32]
 8015cfa:	9a02      	ldr	r2, [sp, #8]
 8015cfc:	1c59      	adds	r1, r3, #1
 8015cfe:	9801      	ldr	r0, [sp, #4]
 8015d00:	230a      	movs	r3, #10
 8015d02:	f001 f8c1 	bl	8016e88 <_strtol_r>
 8015d06:	9b07      	ldr	r3, [sp, #28]
 8015d08:	9f08      	ldr	r7, [sp, #32]
 8015d0a:	1ac2      	subs	r2, r0, r3
 8015d0c:	0033      	movs	r3, r6
 8015d0e:	3370      	adds	r3, #112	; 0x70
 8015d10:	33ff      	adds	r3, #255	; 0xff
 8015d12:	429f      	cmp	r7, r3
 8015d14:	d302      	bcc.n	8015d1c <_scanf_float+0x3c8>
 8015d16:	0037      	movs	r7, r6
 8015d18:	376f      	adds	r7, #111	; 0x6f
 8015d1a:	37ff      	adds	r7, #255	; 0xff
 8015d1c:	0038      	movs	r0, r7
 8015d1e:	490f      	ldr	r1, [pc, #60]	; (8015d5c <_scanf_float+0x408>)
 8015d20:	f000 f9c8 	bl	80160b4 <siprintf>
 8015d24:	e7cd      	b.n	8015cc2 <_scanf_float+0x36e>
 8015d26:	1d1a      	adds	r2, r3, #4
 8015d28:	0749      	lsls	r1, r1, #29
 8015d2a:	d4d7      	bmi.n	8015cdc <_scanf_float+0x388>
 8015d2c:	9906      	ldr	r1, [sp, #24]
 8015d2e:	0020      	movs	r0, r4
 8015d30:	600a      	str	r2, [r1, #0]
 8015d32:	681f      	ldr	r7, [r3, #0]
 8015d34:	0022      	movs	r2, r4
 8015d36:	002b      	movs	r3, r5
 8015d38:	0029      	movs	r1, r5
 8015d3a:	f7ec ff35 	bl	8002ba8 <__aeabi_dcmpun>
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	d004      	beq.n	8015d4c <_scanf_float+0x3f8>
 8015d42:	4807      	ldr	r0, [pc, #28]	; (8015d60 <_scanf_float+0x40c>)
 8015d44:	f000 f97e 	bl	8016044 <nanf>
 8015d48:	6038      	str	r0, [r7, #0]
 8015d4a:	e7cc      	b.n	8015ce6 <_scanf_float+0x392>
 8015d4c:	0020      	movs	r0, r4
 8015d4e:	0029      	movs	r1, r5
 8015d50:	f7ed f81c 	bl	8002d8c <__aeabi_d2f>
 8015d54:	e7f8      	b.n	8015d48 <_scanf_float+0x3f4>
 8015d56:	2300      	movs	r3, #0
 8015d58:	e640      	b.n	80159dc <_scanf_float+0x88>
 8015d5a:	46c0      	nop			; (mov r8, r8)
 8015d5c:	0801b85c 	.word	0x0801b85c
 8015d60:	0801bcd0 	.word	0x0801bcd0

08015d64 <iprintf>:
 8015d64:	b40f      	push	{r0, r1, r2, r3}
 8015d66:	4b0b      	ldr	r3, [pc, #44]	; (8015d94 <iprintf+0x30>)
 8015d68:	b513      	push	{r0, r1, r4, lr}
 8015d6a:	681c      	ldr	r4, [r3, #0]
 8015d6c:	2c00      	cmp	r4, #0
 8015d6e:	d005      	beq.n	8015d7c <iprintf+0x18>
 8015d70:	69a3      	ldr	r3, [r4, #24]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d102      	bne.n	8015d7c <iprintf+0x18>
 8015d76:	0020      	movs	r0, r4
 8015d78:	f002 f92c 	bl	8017fd4 <__sinit>
 8015d7c:	ab05      	add	r3, sp, #20
 8015d7e:	0020      	movs	r0, r4
 8015d80:	9a04      	ldr	r2, [sp, #16]
 8015d82:	68a1      	ldr	r1, [r4, #8]
 8015d84:	9301      	str	r3, [sp, #4]
 8015d86:	f003 fc5b 	bl	8019640 <_vfiprintf_r>
 8015d8a:	bc16      	pop	{r1, r2, r4}
 8015d8c:	bc08      	pop	{r3}
 8015d8e:	b004      	add	sp, #16
 8015d90:	4718      	bx	r3
 8015d92:	46c0      	nop			; (mov r8, r8)
 8015d94:	200002d8 	.word	0x200002d8

08015d98 <_puts_r>:
 8015d98:	b570      	push	{r4, r5, r6, lr}
 8015d9a:	0005      	movs	r5, r0
 8015d9c:	000e      	movs	r6, r1
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	d004      	beq.n	8015dac <_puts_r+0x14>
 8015da2:	6983      	ldr	r3, [r0, #24]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d101      	bne.n	8015dac <_puts_r+0x14>
 8015da8:	f002 f914 	bl	8017fd4 <__sinit>
 8015dac:	69ab      	ldr	r3, [r5, #24]
 8015dae:	68ac      	ldr	r4, [r5, #8]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d102      	bne.n	8015dba <_puts_r+0x22>
 8015db4:	0028      	movs	r0, r5
 8015db6:	f002 f90d 	bl	8017fd4 <__sinit>
 8015dba:	4b2d      	ldr	r3, [pc, #180]	; (8015e70 <_puts_r+0xd8>)
 8015dbc:	429c      	cmp	r4, r3
 8015dbe:	d122      	bne.n	8015e06 <_puts_r+0x6e>
 8015dc0:	686c      	ldr	r4, [r5, #4]
 8015dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015dc4:	07db      	lsls	r3, r3, #31
 8015dc6:	d405      	bmi.n	8015dd4 <_puts_r+0x3c>
 8015dc8:	89a3      	ldrh	r3, [r4, #12]
 8015dca:	059b      	lsls	r3, r3, #22
 8015dcc:	d402      	bmi.n	8015dd4 <_puts_r+0x3c>
 8015dce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015dd0:	f002 fd19 	bl	8018806 <__retarget_lock_acquire_recursive>
 8015dd4:	89a3      	ldrh	r3, [r4, #12]
 8015dd6:	071b      	lsls	r3, r3, #28
 8015dd8:	d502      	bpl.n	8015de0 <_puts_r+0x48>
 8015dda:	6923      	ldr	r3, [r4, #16]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d129      	bne.n	8015e34 <_puts_r+0x9c>
 8015de0:	0021      	movs	r1, r4
 8015de2:	0028      	movs	r0, r5
 8015de4:	f001 f8aa 	bl	8016f3c <__swsetup_r>
 8015de8:	2800      	cmp	r0, #0
 8015dea:	d023      	beq.n	8015e34 <_puts_r+0x9c>
 8015dec:	2501      	movs	r5, #1
 8015dee:	426d      	negs	r5, r5
 8015df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015df2:	07db      	lsls	r3, r3, #31
 8015df4:	d405      	bmi.n	8015e02 <_puts_r+0x6a>
 8015df6:	89a3      	ldrh	r3, [r4, #12]
 8015df8:	059b      	lsls	r3, r3, #22
 8015dfa:	d402      	bmi.n	8015e02 <_puts_r+0x6a>
 8015dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015dfe:	f002 fd03 	bl	8018808 <__retarget_lock_release_recursive>
 8015e02:	0028      	movs	r0, r5
 8015e04:	bd70      	pop	{r4, r5, r6, pc}
 8015e06:	4b1b      	ldr	r3, [pc, #108]	; (8015e74 <_puts_r+0xdc>)
 8015e08:	429c      	cmp	r4, r3
 8015e0a:	d101      	bne.n	8015e10 <_puts_r+0x78>
 8015e0c:	68ac      	ldr	r4, [r5, #8]
 8015e0e:	e7d8      	b.n	8015dc2 <_puts_r+0x2a>
 8015e10:	4b19      	ldr	r3, [pc, #100]	; (8015e78 <_puts_r+0xe0>)
 8015e12:	429c      	cmp	r4, r3
 8015e14:	d1d5      	bne.n	8015dc2 <_puts_r+0x2a>
 8015e16:	68ec      	ldr	r4, [r5, #12]
 8015e18:	e7d3      	b.n	8015dc2 <_puts_r+0x2a>
 8015e1a:	3601      	adds	r6, #1
 8015e1c:	60a3      	str	r3, [r4, #8]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	da04      	bge.n	8015e2c <_puts_r+0x94>
 8015e22:	69a2      	ldr	r2, [r4, #24]
 8015e24:	429a      	cmp	r2, r3
 8015e26:	dc16      	bgt.n	8015e56 <_puts_r+0xbe>
 8015e28:	290a      	cmp	r1, #10
 8015e2a:	d014      	beq.n	8015e56 <_puts_r+0xbe>
 8015e2c:	6823      	ldr	r3, [r4, #0]
 8015e2e:	1c5a      	adds	r2, r3, #1
 8015e30:	6022      	str	r2, [r4, #0]
 8015e32:	7019      	strb	r1, [r3, #0]
 8015e34:	68a3      	ldr	r3, [r4, #8]
 8015e36:	7831      	ldrb	r1, [r6, #0]
 8015e38:	3b01      	subs	r3, #1
 8015e3a:	2900      	cmp	r1, #0
 8015e3c:	d1ed      	bne.n	8015e1a <_puts_r+0x82>
 8015e3e:	60a3      	str	r3, [r4, #8]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	da0f      	bge.n	8015e64 <_puts_r+0xcc>
 8015e44:	0028      	movs	r0, r5
 8015e46:	0022      	movs	r2, r4
 8015e48:	310a      	adds	r1, #10
 8015e4a:	f001 f821 	bl	8016e90 <__swbuf_r>
 8015e4e:	250a      	movs	r5, #10
 8015e50:	1c43      	adds	r3, r0, #1
 8015e52:	d1cd      	bne.n	8015df0 <_puts_r+0x58>
 8015e54:	e7ca      	b.n	8015dec <_puts_r+0x54>
 8015e56:	0022      	movs	r2, r4
 8015e58:	0028      	movs	r0, r5
 8015e5a:	f001 f819 	bl	8016e90 <__swbuf_r>
 8015e5e:	1c43      	adds	r3, r0, #1
 8015e60:	d1e8      	bne.n	8015e34 <_puts_r+0x9c>
 8015e62:	e7c3      	b.n	8015dec <_puts_r+0x54>
 8015e64:	250a      	movs	r5, #10
 8015e66:	6823      	ldr	r3, [r4, #0]
 8015e68:	1c5a      	adds	r2, r3, #1
 8015e6a:	6022      	str	r2, [r4, #0]
 8015e6c:	701d      	strb	r5, [r3, #0]
 8015e6e:	e7bf      	b.n	8015df0 <_puts_r+0x58>
 8015e70:	0801ba6c 	.word	0x0801ba6c
 8015e74:	0801ba8c 	.word	0x0801ba8c
 8015e78:	0801ba4c 	.word	0x0801ba4c

08015e7c <puts>:
 8015e7c:	b510      	push	{r4, lr}
 8015e7e:	4b03      	ldr	r3, [pc, #12]	; (8015e8c <puts+0x10>)
 8015e80:	0001      	movs	r1, r0
 8015e82:	6818      	ldr	r0, [r3, #0]
 8015e84:	f7ff ff88 	bl	8015d98 <_puts_r>
 8015e88:	bd10      	pop	{r4, pc}
 8015e8a:	46c0      	nop			; (mov r8, r8)
 8015e8c:	200002d8 	.word	0x200002d8

08015e90 <_sbrk_r>:
 8015e90:	2300      	movs	r3, #0
 8015e92:	b570      	push	{r4, r5, r6, lr}
 8015e94:	4d06      	ldr	r5, [pc, #24]	; (8015eb0 <_sbrk_r+0x20>)
 8015e96:	0004      	movs	r4, r0
 8015e98:	0008      	movs	r0, r1
 8015e9a:	602b      	str	r3, [r5, #0]
 8015e9c:	f7ef fc50 	bl	8005740 <_sbrk>
 8015ea0:	1c43      	adds	r3, r0, #1
 8015ea2:	d103      	bne.n	8015eac <_sbrk_r+0x1c>
 8015ea4:	682b      	ldr	r3, [r5, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d000      	beq.n	8015eac <_sbrk_r+0x1c>
 8015eaa:	6023      	str	r3, [r4, #0]
 8015eac:	bd70      	pop	{r4, r5, r6, pc}
 8015eae:	46c0      	nop			; (mov r8, r8)
 8015eb0:	20005434 	.word	0x20005434

08015eb4 <setvbuf>:
 8015eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eb6:	001d      	movs	r5, r3
 8015eb8:	4b5d      	ldr	r3, [pc, #372]	; (8016030 <setvbuf+0x17c>)
 8015eba:	b085      	sub	sp, #20
 8015ebc:	681e      	ldr	r6, [r3, #0]
 8015ebe:	0004      	movs	r4, r0
 8015ec0:	000f      	movs	r7, r1
 8015ec2:	9200      	str	r2, [sp, #0]
 8015ec4:	2e00      	cmp	r6, #0
 8015ec6:	d005      	beq.n	8015ed4 <setvbuf+0x20>
 8015ec8:	69b3      	ldr	r3, [r6, #24]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d102      	bne.n	8015ed4 <setvbuf+0x20>
 8015ece:	0030      	movs	r0, r6
 8015ed0:	f002 f880 	bl	8017fd4 <__sinit>
 8015ed4:	4b57      	ldr	r3, [pc, #348]	; (8016034 <setvbuf+0x180>)
 8015ed6:	429c      	cmp	r4, r3
 8015ed8:	d161      	bne.n	8015f9e <setvbuf+0xea>
 8015eda:	6874      	ldr	r4, [r6, #4]
 8015edc:	9b00      	ldr	r3, [sp, #0]
 8015ede:	2b02      	cmp	r3, #2
 8015ee0:	d005      	beq.n	8015eee <setvbuf+0x3a>
 8015ee2:	2b01      	cmp	r3, #1
 8015ee4:	d900      	bls.n	8015ee8 <setvbuf+0x34>
 8015ee6:	e09d      	b.n	8016024 <setvbuf+0x170>
 8015ee8:	2d00      	cmp	r5, #0
 8015eea:	da00      	bge.n	8015eee <setvbuf+0x3a>
 8015eec:	e09a      	b.n	8016024 <setvbuf+0x170>
 8015eee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ef0:	07db      	lsls	r3, r3, #31
 8015ef2:	d405      	bmi.n	8015f00 <setvbuf+0x4c>
 8015ef4:	89a3      	ldrh	r3, [r4, #12]
 8015ef6:	059b      	lsls	r3, r3, #22
 8015ef8:	d402      	bmi.n	8015f00 <setvbuf+0x4c>
 8015efa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015efc:	f002 fc83 	bl	8018806 <__retarget_lock_acquire_recursive>
 8015f00:	0021      	movs	r1, r4
 8015f02:	0030      	movs	r0, r6
 8015f04:	f001 ffc4 	bl	8017e90 <_fflush_r>
 8015f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f0a:	2900      	cmp	r1, #0
 8015f0c:	d008      	beq.n	8015f20 <setvbuf+0x6c>
 8015f0e:	0023      	movs	r3, r4
 8015f10:	3344      	adds	r3, #68	; 0x44
 8015f12:	4299      	cmp	r1, r3
 8015f14:	d002      	beq.n	8015f1c <setvbuf+0x68>
 8015f16:	0030      	movs	r0, r6
 8015f18:	f7fe ffcc 	bl	8014eb4 <_free_r>
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	6363      	str	r3, [r4, #52]	; 0x34
 8015f20:	2300      	movs	r3, #0
 8015f22:	61a3      	str	r3, [r4, #24]
 8015f24:	6063      	str	r3, [r4, #4]
 8015f26:	89a3      	ldrh	r3, [r4, #12]
 8015f28:	061b      	lsls	r3, r3, #24
 8015f2a:	d503      	bpl.n	8015f34 <setvbuf+0x80>
 8015f2c:	0030      	movs	r0, r6
 8015f2e:	6921      	ldr	r1, [r4, #16]
 8015f30:	f7fe ffc0 	bl	8014eb4 <_free_r>
 8015f34:	89a3      	ldrh	r3, [r4, #12]
 8015f36:	4a40      	ldr	r2, [pc, #256]	; (8016038 <setvbuf+0x184>)
 8015f38:	4013      	ands	r3, r2
 8015f3a:	81a3      	strh	r3, [r4, #12]
 8015f3c:	9b00      	ldr	r3, [sp, #0]
 8015f3e:	2b02      	cmp	r3, #2
 8015f40:	d100      	bne.n	8015f44 <setvbuf+0x90>
 8015f42:	e069      	b.n	8016018 <setvbuf+0x164>
 8015f44:	ab03      	add	r3, sp, #12
 8015f46:	0021      	movs	r1, r4
 8015f48:	0030      	movs	r0, r6
 8015f4a:	aa02      	add	r2, sp, #8
 8015f4c:	f002 fc5e 	bl	801880c <__swhatbuf_r>
 8015f50:	89a3      	ldrh	r3, [r4, #12]
 8015f52:	4303      	orrs	r3, r0
 8015f54:	81a3      	strh	r3, [r4, #12]
 8015f56:	2d00      	cmp	r5, #0
 8015f58:	d12b      	bne.n	8015fb2 <setvbuf+0xfe>
 8015f5a:	9d02      	ldr	r5, [sp, #8]
 8015f5c:	0028      	movs	r0, r5
 8015f5e:	f7fe ff83 	bl	8014e68 <malloc>
 8015f62:	1e07      	subs	r7, r0, #0
 8015f64:	d153      	bne.n	801600e <setvbuf+0x15a>
 8015f66:	9b02      	ldr	r3, [sp, #8]
 8015f68:	9301      	str	r3, [sp, #4]
 8015f6a:	42ab      	cmp	r3, r5
 8015f6c:	d149      	bne.n	8016002 <setvbuf+0x14e>
 8015f6e:	2501      	movs	r5, #1
 8015f70:	426d      	negs	r5, r5
 8015f72:	2302      	movs	r3, #2
 8015f74:	89a2      	ldrh	r2, [r4, #12]
 8015f76:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8015f78:	4313      	orrs	r3, r2
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	60a2      	str	r2, [r4, #8]
 8015f7e:	0022      	movs	r2, r4
 8015f80:	3247      	adds	r2, #71	; 0x47
 8015f82:	6022      	str	r2, [r4, #0]
 8015f84:	6122      	str	r2, [r4, #16]
 8015f86:	2201      	movs	r2, #1
 8015f88:	b21b      	sxth	r3, r3
 8015f8a:	81a3      	strh	r3, [r4, #12]
 8015f8c:	6162      	str	r2, [r4, #20]
 8015f8e:	4211      	tst	r1, r2
 8015f90:	d134      	bne.n	8015ffc <setvbuf+0x148>
 8015f92:	059b      	lsls	r3, r3, #22
 8015f94:	d432      	bmi.n	8015ffc <setvbuf+0x148>
 8015f96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f98:	f002 fc36 	bl	8018808 <__retarget_lock_release_recursive>
 8015f9c:	e02e      	b.n	8015ffc <setvbuf+0x148>
 8015f9e:	4b27      	ldr	r3, [pc, #156]	; (801603c <setvbuf+0x188>)
 8015fa0:	429c      	cmp	r4, r3
 8015fa2:	d101      	bne.n	8015fa8 <setvbuf+0xf4>
 8015fa4:	68b4      	ldr	r4, [r6, #8]
 8015fa6:	e799      	b.n	8015edc <setvbuf+0x28>
 8015fa8:	4b25      	ldr	r3, [pc, #148]	; (8016040 <setvbuf+0x18c>)
 8015faa:	429c      	cmp	r4, r3
 8015fac:	d196      	bne.n	8015edc <setvbuf+0x28>
 8015fae:	68f4      	ldr	r4, [r6, #12]
 8015fb0:	e794      	b.n	8015edc <setvbuf+0x28>
 8015fb2:	2f00      	cmp	r7, #0
 8015fb4:	d0d2      	beq.n	8015f5c <setvbuf+0xa8>
 8015fb6:	69b3      	ldr	r3, [r6, #24]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d102      	bne.n	8015fc2 <setvbuf+0x10e>
 8015fbc:	0030      	movs	r0, r6
 8015fbe:	f002 f809 	bl	8017fd4 <__sinit>
 8015fc2:	9b00      	ldr	r3, [sp, #0]
 8015fc4:	2b01      	cmp	r3, #1
 8015fc6:	d102      	bne.n	8015fce <setvbuf+0x11a>
 8015fc8:	89a2      	ldrh	r2, [r4, #12]
 8015fca:	4313      	orrs	r3, r2
 8015fcc:	81a3      	strh	r3, [r4, #12]
 8015fce:	89a2      	ldrh	r2, [r4, #12]
 8015fd0:	2308      	movs	r3, #8
 8015fd2:	0011      	movs	r1, r2
 8015fd4:	6027      	str	r7, [r4, #0]
 8015fd6:	6127      	str	r7, [r4, #16]
 8015fd8:	6165      	str	r5, [r4, #20]
 8015fda:	4019      	ands	r1, r3
 8015fdc:	421a      	tst	r2, r3
 8015fde:	d01f      	beq.n	8016020 <setvbuf+0x16c>
 8015fe0:	07d3      	lsls	r3, r2, #31
 8015fe2:	d51b      	bpl.n	801601c <setvbuf+0x168>
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	426d      	negs	r5, r5
 8015fe8:	60a3      	str	r3, [r4, #8]
 8015fea:	61a5      	str	r5, [r4, #24]
 8015fec:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8015fee:	2301      	movs	r3, #1
 8015ff0:	000d      	movs	r5, r1
 8015ff2:	401d      	ands	r5, r3
 8015ff4:	4219      	tst	r1, r3
 8015ff6:	d118      	bne.n	801602a <setvbuf+0x176>
 8015ff8:	0593      	lsls	r3, r2, #22
 8015ffa:	d5cc      	bpl.n	8015f96 <setvbuf+0xe2>
 8015ffc:	0028      	movs	r0, r5
 8015ffe:	b005      	add	sp, #20
 8016000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016002:	9801      	ldr	r0, [sp, #4]
 8016004:	f7fe ff30 	bl	8014e68 <malloc>
 8016008:	9d01      	ldr	r5, [sp, #4]
 801600a:	1e07      	subs	r7, r0, #0
 801600c:	d0af      	beq.n	8015f6e <setvbuf+0xba>
 801600e:	2380      	movs	r3, #128	; 0x80
 8016010:	89a2      	ldrh	r2, [r4, #12]
 8016012:	4313      	orrs	r3, r2
 8016014:	81a3      	strh	r3, [r4, #12]
 8016016:	e7ce      	b.n	8015fb6 <setvbuf+0x102>
 8016018:	2500      	movs	r5, #0
 801601a:	e7aa      	b.n	8015f72 <setvbuf+0xbe>
 801601c:	60a5      	str	r5, [r4, #8]
 801601e:	e7e5      	b.n	8015fec <setvbuf+0x138>
 8016020:	60a1      	str	r1, [r4, #8]
 8016022:	e7e3      	b.n	8015fec <setvbuf+0x138>
 8016024:	2501      	movs	r5, #1
 8016026:	426d      	negs	r5, r5
 8016028:	e7e8      	b.n	8015ffc <setvbuf+0x148>
 801602a:	2500      	movs	r5, #0
 801602c:	e7e6      	b.n	8015ffc <setvbuf+0x148>
 801602e:	46c0      	nop			; (mov r8, r8)
 8016030:	200002d8 	.word	0x200002d8
 8016034:	0801ba6c 	.word	0x0801ba6c
 8016038:	fffff35c 	.word	0xfffff35c
 801603c:	0801ba8c 	.word	0x0801ba8c
 8016040:	0801ba4c 	.word	0x0801ba4c

08016044 <nanf>:
 8016044:	4800      	ldr	r0, [pc, #0]	; (8016048 <nanf+0x4>)
 8016046:	4770      	bx	lr
 8016048:	7fc00000 	.word	0x7fc00000

0801604c <sniprintf>:
 801604c:	b40c      	push	{r2, r3}
 801604e:	b530      	push	{r4, r5, lr}
 8016050:	4b17      	ldr	r3, [pc, #92]	; (80160b0 <sniprintf+0x64>)
 8016052:	000c      	movs	r4, r1
 8016054:	681d      	ldr	r5, [r3, #0]
 8016056:	b09d      	sub	sp, #116	; 0x74
 8016058:	2900      	cmp	r1, #0
 801605a:	da08      	bge.n	801606e <sniprintf+0x22>
 801605c:	238b      	movs	r3, #139	; 0x8b
 801605e:	2001      	movs	r0, #1
 8016060:	602b      	str	r3, [r5, #0]
 8016062:	4240      	negs	r0, r0
 8016064:	b01d      	add	sp, #116	; 0x74
 8016066:	bc30      	pop	{r4, r5}
 8016068:	bc08      	pop	{r3}
 801606a:	b002      	add	sp, #8
 801606c:	4718      	bx	r3
 801606e:	2382      	movs	r3, #130	; 0x82
 8016070:	466a      	mov	r2, sp
 8016072:	009b      	lsls	r3, r3, #2
 8016074:	8293      	strh	r3, [r2, #20]
 8016076:	2300      	movs	r3, #0
 8016078:	9002      	str	r0, [sp, #8]
 801607a:	9006      	str	r0, [sp, #24]
 801607c:	4299      	cmp	r1, r3
 801607e:	d000      	beq.n	8016082 <sniprintf+0x36>
 8016080:	1e4b      	subs	r3, r1, #1
 8016082:	9304      	str	r3, [sp, #16]
 8016084:	9307      	str	r3, [sp, #28]
 8016086:	2301      	movs	r3, #1
 8016088:	466a      	mov	r2, sp
 801608a:	425b      	negs	r3, r3
 801608c:	82d3      	strh	r3, [r2, #22]
 801608e:	0028      	movs	r0, r5
 8016090:	ab21      	add	r3, sp, #132	; 0x84
 8016092:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016094:	a902      	add	r1, sp, #8
 8016096:	9301      	str	r3, [sp, #4]
 8016098:	f003 f9aa 	bl	80193f0 <_svfiprintf_r>
 801609c:	1c43      	adds	r3, r0, #1
 801609e:	da01      	bge.n	80160a4 <sniprintf+0x58>
 80160a0:	238b      	movs	r3, #139	; 0x8b
 80160a2:	602b      	str	r3, [r5, #0]
 80160a4:	2c00      	cmp	r4, #0
 80160a6:	d0dd      	beq.n	8016064 <sniprintf+0x18>
 80160a8:	2300      	movs	r3, #0
 80160aa:	9a02      	ldr	r2, [sp, #8]
 80160ac:	7013      	strb	r3, [r2, #0]
 80160ae:	e7d9      	b.n	8016064 <sniprintf+0x18>
 80160b0:	200002d8 	.word	0x200002d8

080160b4 <siprintf>:
 80160b4:	b40e      	push	{r1, r2, r3}
 80160b6:	b500      	push	{lr}
 80160b8:	490b      	ldr	r1, [pc, #44]	; (80160e8 <siprintf+0x34>)
 80160ba:	b09c      	sub	sp, #112	; 0x70
 80160bc:	ab1d      	add	r3, sp, #116	; 0x74
 80160be:	9002      	str	r0, [sp, #8]
 80160c0:	9006      	str	r0, [sp, #24]
 80160c2:	9107      	str	r1, [sp, #28]
 80160c4:	9104      	str	r1, [sp, #16]
 80160c6:	4809      	ldr	r0, [pc, #36]	; (80160ec <siprintf+0x38>)
 80160c8:	4909      	ldr	r1, [pc, #36]	; (80160f0 <siprintf+0x3c>)
 80160ca:	cb04      	ldmia	r3!, {r2}
 80160cc:	9105      	str	r1, [sp, #20]
 80160ce:	6800      	ldr	r0, [r0, #0]
 80160d0:	a902      	add	r1, sp, #8
 80160d2:	9301      	str	r3, [sp, #4]
 80160d4:	f003 f98c 	bl	80193f0 <_svfiprintf_r>
 80160d8:	2300      	movs	r3, #0
 80160da:	9a02      	ldr	r2, [sp, #8]
 80160dc:	7013      	strb	r3, [r2, #0]
 80160de:	b01c      	add	sp, #112	; 0x70
 80160e0:	bc08      	pop	{r3}
 80160e2:	b003      	add	sp, #12
 80160e4:	4718      	bx	r3
 80160e6:	46c0      	nop			; (mov r8, r8)
 80160e8:	7fffffff 	.word	0x7fffffff
 80160ec:	200002d8 	.word	0x200002d8
 80160f0:	ffff0208 	.word	0xffff0208

080160f4 <strcpy>:
 80160f4:	0003      	movs	r3, r0
 80160f6:	780a      	ldrb	r2, [r1, #0]
 80160f8:	3101      	adds	r1, #1
 80160fa:	701a      	strb	r2, [r3, #0]
 80160fc:	3301      	adds	r3, #1
 80160fe:	2a00      	cmp	r2, #0
 8016100:	d1f9      	bne.n	80160f6 <strcpy+0x2>
 8016102:	4770      	bx	lr

08016104 <sulp>:
 8016104:	b570      	push	{r4, r5, r6, lr}
 8016106:	0016      	movs	r6, r2
 8016108:	000d      	movs	r5, r1
 801610a:	f002 ff9d 	bl	8019048 <__ulp>
 801610e:	2e00      	cmp	r6, #0
 8016110:	d00d      	beq.n	801612e <sulp+0x2a>
 8016112:	236b      	movs	r3, #107	; 0x6b
 8016114:	006a      	lsls	r2, r5, #1
 8016116:	0d52      	lsrs	r2, r2, #21
 8016118:	1a9b      	subs	r3, r3, r2
 801611a:	2b00      	cmp	r3, #0
 801611c:	dd07      	ble.n	801612e <sulp+0x2a>
 801611e:	2400      	movs	r4, #0
 8016120:	4a03      	ldr	r2, [pc, #12]	; (8016130 <sulp+0x2c>)
 8016122:	051b      	lsls	r3, r3, #20
 8016124:	189d      	adds	r5, r3, r2
 8016126:	002b      	movs	r3, r5
 8016128:	0022      	movs	r2, r4
 801612a:	f7eb ff3f 	bl	8001fac <__aeabi_dmul>
 801612e:	bd70      	pop	{r4, r5, r6, pc}
 8016130:	3ff00000 	.word	0x3ff00000

08016134 <_strtod_l>:
 8016134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016136:	001d      	movs	r5, r3
 8016138:	2300      	movs	r3, #0
 801613a:	b0a5      	sub	sp, #148	; 0x94
 801613c:	9320      	str	r3, [sp, #128]	; 0x80
 801613e:	4bac      	ldr	r3, [pc, #688]	; (80163f0 <_strtod_l+0x2bc>)
 8016140:	9005      	str	r0, [sp, #20]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	9108      	str	r1, [sp, #32]
 8016146:	0018      	movs	r0, r3
 8016148:	9307      	str	r3, [sp, #28]
 801614a:	921b      	str	r2, [sp, #108]	; 0x6c
 801614c:	f7e9 ffe6 	bl	800011c <strlen>
 8016150:	2600      	movs	r6, #0
 8016152:	0004      	movs	r4, r0
 8016154:	2700      	movs	r7, #0
 8016156:	9b08      	ldr	r3, [sp, #32]
 8016158:	931f      	str	r3, [sp, #124]	; 0x7c
 801615a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801615c:	7813      	ldrb	r3, [r2, #0]
 801615e:	2b2b      	cmp	r3, #43	; 0x2b
 8016160:	d058      	beq.n	8016214 <_strtod_l+0xe0>
 8016162:	d844      	bhi.n	80161ee <_strtod_l+0xba>
 8016164:	2b0d      	cmp	r3, #13
 8016166:	d83d      	bhi.n	80161e4 <_strtod_l+0xb0>
 8016168:	2b08      	cmp	r3, #8
 801616a:	d83d      	bhi.n	80161e8 <_strtod_l+0xb4>
 801616c:	2b00      	cmp	r3, #0
 801616e:	d047      	beq.n	8016200 <_strtod_l+0xcc>
 8016170:	2300      	movs	r3, #0
 8016172:	930e      	str	r3, [sp, #56]	; 0x38
 8016174:	2200      	movs	r2, #0
 8016176:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016178:	920a      	str	r2, [sp, #40]	; 0x28
 801617a:	9306      	str	r3, [sp, #24]
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	2b30      	cmp	r3, #48	; 0x30
 8016180:	d000      	beq.n	8016184 <_strtod_l+0x50>
 8016182:	e07f      	b.n	8016284 <_strtod_l+0x150>
 8016184:	9b06      	ldr	r3, [sp, #24]
 8016186:	3220      	adds	r2, #32
 8016188:	785b      	ldrb	r3, [r3, #1]
 801618a:	4393      	bics	r3, r2
 801618c:	2b58      	cmp	r3, #88	; 0x58
 801618e:	d000      	beq.n	8016192 <_strtod_l+0x5e>
 8016190:	e06e      	b.n	8016270 <_strtod_l+0x13c>
 8016192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016194:	9502      	str	r5, [sp, #8]
 8016196:	9301      	str	r3, [sp, #4]
 8016198:	ab20      	add	r3, sp, #128	; 0x80
 801619a:	9300      	str	r3, [sp, #0]
 801619c:	4a95      	ldr	r2, [pc, #596]	; (80163f4 <_strtod_l+0x2c0>)
 801619e:	ab21      	add	r3, sp, #132	; 0x84
 80161a0:	9805      	ldr	r0, [sp, #20]
 80161a2:	a91f      	add	r1, sp, #124	; 0x7c
 80161a4:	f002 f820 	bl	80181e8 <__gethex>
 80161a8:	2307      	movs	r3, #7
 80161aa:	0005      	movs	r5, r0
 80161ac:	0004      	movs	r4, r0
 80161ae:	401d      	ands	r5, r3
 80161b0:	4218      	tst	r0, r3
 80161b2:	d006      	beq.n	80161c2 <_strtod_l+0x8e>
 80161b4:	2d06      	cmp	r5, #6
 80161b6:	d12f      	bne.n	8016218 <_strtod_l+0xe4>
 80161b8:	9b06      	ldr	r3, [sp, #24]
 80161ba:	3301      	adds	r3, #1
 80161bc:	931f      	str	r3, [sp, #124]	; 0x7c
 80161be:	2300      	movs	r3, #0
 80161c0:	930e      	str	r3, [sp, #56]	; 0x38
 80161c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d002      	beq.n	80161ce <_strtod_l+0x9a>
 80161c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80161cc:	601a      	str	r2, [r3, #0]
 80161ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d01c      	beq.n	801620e <_strtod_l+0xda>
 80161d4:	2380      	movs	r3, #128	; 0x80
 80161d6:	0032      	movs	r2, r6
 80161d8:	061b      	lsls	r3, r3, #24
 80161da:	18fb      	adds	r3, r7, r3
 80161dc:	0010      	movs	r0, r2
 80161de:	0019      	movs	r1, r3
 80161e0:	b025      	add	sp, #148	; 0x94
 80161e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161e4:	2b20      	cmp	r3, #32
 80161e6:	d1c3      	bne.n	8016170 <_strtod_l+0x3c>
 80161e8:	3201      	adds	r2, #1
 80161ea:	921f      	str	r2, [sp, #124]	; 0x7c
 80161ec:	e7b5      	b.n	801615a <_strtod_l+0x26>
 80161ee:	2b2d      	cmp	r3, #45	; 0x2d
 80161f0:	d1be      	bne.n	8016170 <_strtod_l+0x3c>
 80161f2:	3b2c      	subs	r3, #44	; 0x2c
 80161f4:	930e      	str	r3, [sp, #56]	; 0x38
 80161f6:	1c53      	adds	r3, r2, #1
 80161f8:	931f      	str	r3, [sp, #124]	; 0x7c
 80161fa:	7853      	ldrb	r3, [r2, #1]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d1b9      	bne.n	8016174 <_strtod_l+0x40>
 8016200:	9b08      	ldr	r3, [sp, #32]
 8016202:	931f      	str	r3, [sp, #124]	; 0x7c
 8016204:	2300      	movs	r3, #0
 8016206:	930e      	str	r3, [sp, #56]	; 0x38
 8016208:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801620a:	2b00      	cmp	r3, #0
 801620c:	d1dc      	bne.n	80161c8 <_strtod_l+0x94>
 801620e:	0032      	movs	r2, r6
 8016210:	003b      	movs	r3, r7
 8016212:	e7e3      	b.n	80161dc <_strtod_l+0xa8>
 8016214:	2300      	movs	r3, #0
 8016216:	e7ed      	b.n	80161f4 <_strtod_l+0xc0>
 8016218:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801621a:	2a00      	cmp	r2, #0
 801621c:	d007      	beq.n	801622e <_strtod_l+0xfa>
 801621e:	2135      	movs	r1, #53	; 0x35
 8016220:	a822      	add	r0, sp, #136	; 0x88
 8016222:	f003 f812 	bl	801924a <__copybits>
 8016226:	9920      	ldr	r1, [sp, #128]	; 0x80
 8016228:	9805      	ldr	r0, [sp, #20]
 801622a:	f002 fbcd 	bl	80189c8 <_Bfree>
 801622e:	1e68      	subs	r0, r5, #1
 8016230:	2804      	cmp	r0, #4
 8016232:	d806      	bhi.n	8016242 <_strtod_l+0x10e>
 8016234:	f7e9 ff7a 	bl	800012c <__gnu_thumb1_case_uqi>
 8016238:	1816030b 	.word	0x1816030b
 801623c:	0b          	.byte	0x0b
 801623d:	00          	.byte	0x00
 801623e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8016240:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8016242:	0723      	lsls	r3, r4, #28
 8016244:	d5bd      	bpl.n	80161c2 <_strtod_l+0x8e>
 8016246:	2380      	movs	r3, #128	; 0x80
 8016248:	061b      	lsls	r3, r3, #24
 801624a:	431f      	orrs	r7, r3
 801624c:	e7b9      	b.n	80161c2 <_strtod_l+0x8e>
 801624e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016250:	4a69      	ldr	r2, [pc, #420]	; (80163f8 <_strtod_l+0x2c4>)
 8016252:	496a      	ldr	r1, [pc, #424]	; (80163fc <_strtod_l+0x2c8>)
 8016254:	401a      	ands	r2, r3
 8016256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016258:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801625a:	185b      	adds	r3, r3, r1
 801625c:	051b      	lsls	r3, r3, #20
 801625e:	431a      	orrs	r2, r3
 8016260:	0017      	movs	r7, r2
 8016262:	e7ee      	b.n	8016242 <_strtod_l+0x10e>
 8016264:	4f66      	ldr	r7, [pc, #408]	; (8016400 <_strtod_l+0x2cc>)
 8016266:	e7ec      	b.n	8016242 <_strtod_l+0x10e>
 8016268:	2601      	movs	r6, #1
 801626a:	4f66      	ldr	r7, [pc, #408]	; (8016404 <_strtod_l+0x2d0>)
 801626c:	4276      	negs	r6, r6
 801626e:	e7e8      	b.n	8016242 <_strtod_l+0x10e>
 8016270:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016272:	1c5a      	adds	r2, r3, #1
 8016274:	921f      	str	r2, [sp, #124]	; 0x7c
 8016276:	785b      	ldrb	r3, [r3, #1]
 8016278:	2b30      	cmp	r3, #48	; 0x30
 801627a:	d0f9      	beq.n	8016270 <_strtod_l+0x13c>
 801627c:	2b00      	cmp	r3, #0
 801627e:	d0a0      	beq.n	80161c2 <_strtod_l+0x8e>
 8016280:	2301      	movs	r3, #1
 8016282:	930a      	str	r3, [sp, #40]	; 0x28
 8016284:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016286:	220a      	movs	r2, #10
 8016288:	9310      	str	r3, [sp, #64]	; 0x40
 801628a:	2300      	movs	r3, #0
 801628c:	930f      	str	r3, [sp, #60]	; 0x3c
 801628e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016290:	9309      	str	r3, [sp, #36]	; 0x24
 8016292:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8016294:	7805      	ldrb	r5, [r0, #0]
 8016296:	002b      	movs	r3, r5
 8016298:	3b30      	subs	r3, #48	; 0x30
 801629a:	b2d9      	uxtb	r1, r3
 801629c:	2909      	cmp	r1, #9
 801629e:	d927      	bls.n	80162f0 <_strtod_l+0x1bc>
 80162a0:	0022      	movs	r2, r4
 80162a2:	9907      	ldr	r1, [sp, #28]
 80162a4:	f003 fb58 	bl	8019958 <strncmp>
 80162a8:	2800      	cmp	r0, #0
 80162aa:	d033      	beq.n	8016314 <_strtod_l+0x1e0>
 80162ac:	2000      	movs	r0, #0
 80162ae:	002b      	movs	r3, r5
 80162b0:	4684      	mov	ip, r0
 80162b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162b4:	900c      	str	r0, [sp, #48]	; 0x30
 80162b6:	9206      	str	r2, [sp, #24]
 80162b8:	2220      	movs	r2, #32
 80162ba:	0019      	movs	r1, r3
 80162bc:	4391      	bics	r1, r2
 80162be:	000a      	movs	r2, r1
 80162c0:	2100      	movs	r1, #0
 80162c2:	9107      	str	r1, [sp, #28]
 80162c4:	2a45      	cmp	r2, #69	; 0x45
 80162c6:	d000      	beq.n	80162ca <_strtod_l+0x196>
 80162c8:	e0c5      	b.n	8016456 <_strtod_l+0x322>
 80162ca:	9b06      	ldr	r3, [sp, #24]
 80162cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162ce:	4303      	orrs	r3, r0
 80162d0:	4313      	orrs	r3, r2
 80162d2:	428b      	cmp	r3, r1
 80162d4:	d094      	beq.n	8016200 <_strtod_l+0xcc>
 80162d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80162d8:	9308      	str	r3, [sp, #32]
 80162da:	3301      	adds	r3, #1
 80162dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80162de:	9b08      	ldr	r3, [sp, #32]
 80162e0:	785b      	ldrb	r3, [r3, #1]
 80162e2:	2b2b      	cmp	r3, #43	; 0x2b
 80162e4:	d076      	beq.n	80163d4 <_strtod_l+0x2a0>
 80162e6:	000c      	movs	r4, r1
 80162e8:	2b2d      	cmp	r3, #45	; 0x2d
 80162ea:	d179      	bne.n	80163e0 <_strtod_l+0x2ac>
 80162ec:	2401      	movs	r4, #1
 80162ee:	e072      	b.n	80163d6 <_strtod_l+0x2a2>
 80162f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162f2:	2908      	cmp	r1, #8
 80162f4:	dc09      	bgt.n	801630a <_strtod_l+0x1d6>
 80162f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162f8:	4351      	muls	r1, r2
 80162fa:	185b      	adds	r3, r3, r1
 80162fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80162fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016300:	3001      	adds	r0, #1
 8016302:	3301      	adds	r3, #1
 8016304:	9309      	str	r3, [sp, #36]	; 0x24
 8016306:	901f      	str	r0, [sp, #124]	; 0x7c
 8016308:	e7c3      	b.n	8016292 <_strtod_l+0x15e>
 801630a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801630c:	4351      	muls	r1, r2
 801630e:	185b      	adds	r3, r3, r1
 8016310:	930f      	str	r3, [sp, #60]	; 0x3c
 8016312:	e7f4      	b.n	80162fe <_strtod_l+0x1ca>
 8016314:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016318:	191c      	adds	r4, r3, r4
 801631a:	941f      	str	r4, [sp, #124]	; 0x7c
 801631c:	7823      	ldrb	r3, [r4, #0]
 801631e:	2a00      	cmp	r2, #0
 8016320:	d039      	beq.n	8016396 <_strtod_l+0x262>
 8016322:	900c      	str	r0, [sp, #48]	; 0x30
 8016324:	9206      	str	r2, [sp, #24]
 8016326:	001a      	movs	r2, r3
 8016328:	3a30      	subs	r2, #48	; 0x30
 801632a:	2a09      	cmp	r2, #9
 801632c:	d912      	bls.n	8016354 <_strtod_l+0x220>
 801632e:	2201      	movs	r2, #1
 8016330:	4694      	mov	ip, r2
 8016332:	e7c1      	b.n	80162b8 <_strtod_l+0x184>
 8016334:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016336:	3001      	adds	r0, #1
 8016338:	1c5a      	adds	r2, r3, #1
 801633a:	921f      	str	r2, [sp, #124]	; 0x7c
 801633c:	785b      	ldrb	r3, [r3, #1]
 801633e:	2b30      	cmp	r3, #48	; 0x30
 8016340:	d0f8      	beq.n	8016334 <_strtod_l+0x200>
 8016342:	001a      	movs	r2, r3
 8016344:	3a31      	subs	r2, #49	; 0x31
 8016346:	2a08      	cmp	r2, #8
 8016348:	d83f      	bhi.n	80163ca <_strtod_l+0x296>
 801634a:	900c      	str	r0, [sp, #48]	; 0x30
 801634c:	2000      	movs	r0, #0
 801634e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016350:	9006      	str	r0, [sp, #24]
 8016352:	9210      	str	r2, [sp, #64]	; 0x40
 8016354:	001a      	movs	r2, r3
 8016356:	1c41      	adds	r1, r0, #1
 8016358:	3a30      	subs	r2, #48	; 0x30
 801635a:	2b30      	cmp	r3, #48	; 0x30
 801635c:	d015      	beq.n	801638a <_strtod_l+0x256>
 801635e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016360:	185b      	adds	r3, r3, r1
 8016362:	210a      	movs	r1, #10
 8016364:	930c      	str	r3, [sp, #48]	; 0x30
 8016366:	9b06      	ldr	r3, [sp, #24]
 8016368:	18c4      	adds	r4, r0, r3
 801636a:	42a3      	cmp	r3, r4
 801636c:	d115      	bne.n	801639a <_strtod_l+0x266>
 801636e:	9906      	ldr	r1, [sp, #24]
 8016370:	9b06      	ldr	r3, [sp, #24]
 8016372:	3101      	adds	r1, #1
 8016374:	1809      	adds	r1, r1, r0
 8016376:	181b      	adds	r3, r3, r0
 8016378:	9106      	str	r1, [sp, #24]
 801637a:	2b08      	cmp	r3, #8
 801637c:	dc1b      	bgt.n	80163b6 <_strtod_l+0x282>
 801637e:	230a      	movs	r3, #10
 8016380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016382:	434b      	muls	r3, r1
 8016384:	2100      	movs	r1, #0
 8016386:	18d3      	adds	r3, r2, r3
 8016388:	930b      	str	r3, [sp, #44]	; 0x2c
 801638a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801638c:	0008      	movs	r0, r1
 801638e:	1c5a      	adds	r2, r3, #1
 8016390:	921f      	str	r2, [sp, #124]	; 0x7c
 8016392:	785b      	ldrb	r3, [r3, #1]
 8016394:	e7c7      	b.n	8016326 <_strtod_l+0x1f2>
 8016396:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016398:	e7d1      	b.n	801633e <_strtod_l+0x20a>
 801639a:	2b08      	cmp	r3, #8
 801639c:	dc04      	bgt.n	80163a8 <_strtod_l+0x274>
 801639e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80163a0:	434d      	muls	r5, r1
 80163a2:	950b      	str	r5, [sp, #44]	; 0x2c
 80163a4:	3301      	adds	r3, #1
 80163a6:	e7e0      	b.n	801636a <_strtod_l+0x236>
 80163a8:	1c5d      	adds	r5, r3, #1
 80163aa:	2d10      	cmp	r5, #16
 80163ac:	dcfa      	bgt.n	80163a4 <_strtod_l+0x270>
 80163ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80163b0:	434d      	muls	r5, r1
 80163b2:	950f      	str	r5, [sp, #60]	; 0x3c
 80163b4:	e7f6      	b.n	80163a4 <_strtod_l+0x270>
 80163b6:	9b06      	ldr	r3, [sp, #24]
 80163b8:	2100      	movs	r1, #0
 80163ba:	2b10      	cmp	r3, #16
 80163bc:	dce5      	bgt.n	801638a <_strtod_l+0x256>
 80163be:	230a      	movs	r3, #10
 80163c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80163c2:	4343      	muls	r3, r0
 80163c4:	18d3      	adds	r3, r2, r3
 80163c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80163c8:	e7df      	b.n	801638a <_strtod_l+0x256>
 80163ca:	2200      	movs	r2, #0
 80163cc:	920c      	str	r2, [sp, #48]	; 0x30
 80163ce:	9206      	str	r2, [sp, #24]
 80163d0:	3201      	adds	r2, #1
 80163d2:	e7ad      	b.n	8016330 <_strtod_l+0x1fc>
 80163d4:	2400      	movs	r4, #0
 80163d6:	9b08      	ldr	r3, [sp, #32]
 80163d8:	3302      	adds	r3, #2
 80163da:	931f      	str	r3, [sp, #124]	; 0x7c
 80163dc:	9b08      	ldr	r3, [sp, #32]
 80163de:	789b      	ldrb	r3, [r3, #2]
 80163e0:	001a      	movs	r2, r3
 80163e2:	3a30      	subs	r2, #48	; 0x30
 80163e4:	2a09      	cmp	r2, #9
 80163e6:	d913      	bls.n	8016410 <_strtod_l+0x2dc>
 80163e8:	9a08      	ldr	r2, [sp, #32]
 80163ea:	921f      	str	r2, [sp, #124]	; 0x7c
 80163ec:	2200      	movs	r2, #0
 80163ee:	e031      	b.n	8016454 <_strtod_l+0x320>
 80163f0:	0801bb14 	.word	0x0801bb14
 80163f4:	0801b864 	.word	0x0801b864
 80163f8:	ffefffff 	.word	0xffefffff
 80163fc:	00000433 	.word	0x00000433
 8016400:	7ff00000 	.word	0x7ff00000
 8016404:	7fffffff 	.word	0x7fffffff
 8016408:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801640a:	1c5a      	adds	r2, r3, #1
 801640c:	921f      	str	r2, [sp, #124]	; 0x7c
 801640e:	785b      	ldrb	r3, [r3, #1]
 8016410:	2b30      	cmp	r3, #48	; 0x30
 8016412:	d0f9      	beq.n	8016408 <_strtod_l+0x2d4>
 8016414:	2200      	movs	r2, #0
 8016416:	9207      	str	r2, [sp, #28]
 8016418:	001a      	movs	r2, r3
 801641a:	3a31      	subs	r2, #49	; 0x31
 801641c:	2a08      	cmp	r2, #8
 801641e:	d81a      	bhi.n	8016456 <_strtod_l+0x322>
 8016420:	3b30      	subs	r3, #48	; 0x30
 8016422:	001a      	movs	r2, r3
 8016424:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016426:	9307      	str	r3, [sp, #28]
 8016428:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801642a:	1c59      	adds	r1, r3, #1
 801642c:	911f      	str	r1, [sp, #124]	; 0x7c
 801642e:	785b      	ldrb	r3, [r3, #1]
 8016430:	001d      	movs	r5, r3
 8016432:	3d30      	subs	r5, #48	; 0x30
 8016434:	2d09      	cmp	r5, #9
 8016436:	d939      	bls.n	80164ac <_strtod_l+0x378>
 8016438:	9d07      	ldr	r5, [sp, #28]
 801643a:	1b49      	subs	r1, r1, r5
 801643c:	4db0      	ldr	r5, [pc, #704]	; (8016700 <_strtod_l+0x5cc>)
 801643e:	9507      	str	r5, [sp, #28]
 8016440:	2908      	cmp	r1, #8
 8016442:	dc03      	bgt.n	801644c <_strtod_l+0x318>
 8016444:	9207      	str	r2, [sp, #28]
 8016446:	42aa      	cmp	r2, r5
 8016448:	dd00      	ble.n	801644c <_strtod_l+0x318>
 801644a:	9507      	str	r5, [sp, #28]
 801644c:	2c00      	cmp	r4, #0
 801644e:	d002      	beq.n	8016456 <_strtod_l+0x322>
 8016450:	9a07      	ldr	r2, [sp, #28]
 8016452:	4252      	negs	r2, r2
 8016454:	9207      	str	r2, [sp, #28]
 8016456:	9a06      	ldr	r2, [sp, #24]
 8016458:	2a00      	cmp	r2, #0
 801645a:	d14b      	bne.n	80164f4 <_strtod_l+0x3c0>
 801645c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801645e:	4310      	orrs	r0, r2
 8016460:	d000      	beq.n	8016464 <_strtod_l+0x330>
 8016462:	e6ae      	b.n	80161c2 <_strtod_l+0x8e>
 8016464:	4662      	mov	r2, ip
 8016466:	2a00      	cmp	r2, #0
 8016468:	d000      	beq.n	801646c <_strtod_l+0x338>
 801646a:	e6c9      	b.n	8016200 <_strtod_l+0xcc>
 801646c:	2b69      	cmp	r3, #105	; 0x69
 801646e:	d025      	beq.n	80164bc <_strtod_l+0x388>
 8016470:	dc21      	bgt.n	80164b6 <_strtod_l+0x382>
 8016472:	2b49      	cmp	r3, #73	; 0x49
 8016474:	d022      	beq.n	80164bc <_strtod_l+0x388>
 8016476:	2b4e      	cmp	r3, #78	; 0x4e
 8016478:	d000      	beq.n	801647c <_strtod_l+0x348>
 801647a:	e6c1      	b.n	8016200 <_strtod_l+0xcc>
 801647c:	49a1      	ldr	r1, [pc, #644]	; (8016704 <_strtod_l+0x5d0>)
 801647e:	a81f      	add	r0, sp, #124	; 0x7c
 8016480:	f002 f900 	bl	8018684 <__match>
 8016484:	2800      	cmp	r0, #0
 8016486:	d100      	bne.n	801648a <_strtod_l+0x356>
 8016488:	e6ba      	b.n	8016200 <_strtod_l+0xcc>
 801648a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801648c:	781b      	ldrb	r3, [r3, #0]
 801648e:	2b28      	cmp	r3, #40	; 0x28
 8016490:	d12a      	bne.n	80164e8 <_strtod_l+0x3b4>
 8016492:	499d      	ldr	r1, [pc, #628]	; (8016708 <_strtod_l+0x5d4>)
 8016494:	aa22      	add	r2, sp, #136	; 0x88
 8016496:	a81f      	add	r0, sp, #124	; 0x7c
 8016498:	f002 f908 	bl	80186ac <__hexnan>
 801649c:	2805      	cmp	r0, #5
 801649e:	d123      	bne.n	80164e8 <_strtod_l+0x3b4>
 80164a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80164a2:	4a9a      	ldr	r2, [pc, #616]	; (801670c <_strtod_l+0x5d8>)
 80164a4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80164a6:	431a      	orrs	r2, r3
 80164a8:	0017      	movs	r7, r2
 80164aa:	e68a      	b.n	80161c2 <_strtod_l+0x8e>
 80164ac:	210a      	movs	r1, #10
 80164ae:	434a      	muls	r2, r1
 80164b0:	18d2      	adds	r2, r2, r3
 80164b2:	3a30      	subs	r2, #48	; 0x30
 80164b4:	e7b8      	b.n	8016428 <_strtod_l+0x2f4>
 80164b6:	2b6e      	cmp	r3, #110	; 0x6e
 80164b8:	d0e0      	beq.n	801647c <_strtod_l+0x348>
 80164ba:	e6a1      	b.n	8016200 <_strtod_l+0xcc>
 80164bc:	4994      	ldr	r1, [pc, #592]	; (8016710 <_strtod_l+0x5dc>)
 80164be:	a81f      	add	r0, sp, #124	; 0x7c
 80164c0:	f002 f8e0 	bl	8018684 <__match>
 80164c4:	2800      	cmp	r0, #0
 80164c6:	d100      	bne.n	80164ca <_strtod_l+0x396>
 80164c8:	e69a      	b.n	8016200 <_strtod_l+0xcc>
 80164ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80164cc:	4991      	ldr	r1, [pc, #580]	; (8016714 <_strtod_l+0x5e0>)
 80164ce:	3b01      	subs	r3, #1
 80164d0:	a81f      	add	r0, sp, #124	; 0x7c
 80164d2:	931f      	str	r3, [sp, #124]	; 0x7c
 80164d4:	f002 f8d6 	bl	8018684 <__match>
 80164d8:	2800      	cmp	r0, #0
 80164da:	d102      	bne.n	80164e2 <_strtod_l+0x3ae>
 80164dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80164de:	3301      	adds	r3, #1
 80164e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80164e2:	2600      	movs	r6, #0
 80164e4:	4f89      	ldr	r7, [pc, #548]	; (801670c <_strtod_l+0x5d8>)
 80164e6:	e66c      	b.n	80161c2 <_strtod_l+0x8e>
 80164e8:	488b      	ldr	r0, [pc, #556]	; (8016718 <_strtod_l+0x5e4>)
 80164ea:	f003 f9e3 	bl	80198b4 <nan>
 80164ee:	0006      	movs	r6, r0
 80164f0:	000f      	movs	r7, r1
 80164f2:	e666      	b.n	80161c2 <_strtod_l+0x8e>
 80164f4:	9b07      	ldr	r3, [sp, #28]
 80164f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80164f8:	1a9b      	subs	r3, r3, r2
 80164fa:	930a      	str	r3, [sp, #40]	; 0x28
 80164fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d101      	bne.n	8016506 <_strtod_l+0x3d2>
 8016502:	9b06      	ldr	r3, [sp, #24]
 8016504:	9309      	str	r3, [sp, #36]	; 0x24
 8016506:	9c06      	ldr	r4, [sp, #24]
 8016508:	2c10      	cmp	r4, #16
 801650a:	dd00      	ble.n	801650e <_strtod_l+0x3da>
 801650c:	2410      	movs	r4, #16
 801650e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016510:	f7ec fbce 	bl	8002cb0 <__aeabi_ui2d>
 8016514:	9b06      	ldr	r3, [sp, #24]
 8016516:	0006      	movs	r6, r0
 8016518:	000f      	movs	r7, r1
 801651a:	2b09      	cmp	r3, #9
 801651c:	dd15      	ble.n	801654a <_strtod_l+0x416>
 801651e:	0022      	movs	r2, r4
 8016520:	4b7e      	ldr	r3, [pc, #504]	; (801671c <_strtod_l+0x5e8>)
 8016522:	3a09      	subs	r2, #9
 8016524:	00d2      	lsls	r2, r2, #3
 8016526:	189b      	adds	r3, r3, r2
 8016528:	681a      	ldr	r2, [r3, #0]
 801652a:	685b      	ldr	r3, [r3, #4]
 801652c:	f7eb fd3e 	bl	8001fac <__aeabi_dmul>
 8016530:	0006      	movs	r6, r0
 8016532:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016534:	000f      	movs	r7, r1
 8016536:	f7ec fbbb 	bl	8002cb0 <__aeabi_ui2d>
 801653a:	0002      	movs	r2, r0
 801653c:	000b      	movs	r3, r1
 801653e:	0030      	movs	r0, r6
 8016540:	0039      	movs	r1, r7
 8016542:	f7ea fdf5 	bl	8001130 <__aeabi_dadd>
 8016546:	0006      	movs	r6, r0
 8016548:	000f      	movs	r7, r1
 801654a:	9b06      	ldr	r3, [sp, #24]
 801654c:	2b0f      	cmp	r3, #15
 801654e:	dc39      	bgt.n	80165c4 <_strtod_l+0x490>
 8016550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016552:	2b00      	cmp	r3, #0
 8016554:	d100      	bne.n	8016558 <_strtod_l+0x424>
 8016556:	e634      	b.n	80161c2 <_strtod_l+0x8e>
 8016558:	dd24      	ble.n	80165a4 <_strtod_l+0x470>
 801655a:	2b16      	cmp	r3, #22
 801655c:	dc09      	bgt.n	8016572 <_strtod_l+0x43e>
 801655e:	496f      	ldr	r1, [pc, #444]	; (801671c <_strtod_l+0x5e8>)
 8016560:	00db      	lsls	r3, r3, #3
 8016562:	18c9      	adds	r1, r1, r3
 8016564:	0032      	movs	r2, r6
 8016566:	6808      	ldr	r0, [r1, #0]
 8016568:	6849      	ldr	r1, [r1, #4]
 801656a:	003b      	movs	r3, r7
 801656c:	f7eb fd1e 	bl	8001fac <__aeabi_dmul>
 8016570:	e7bd      	b.n	80164ee <_strtod_l+0x3ba>
 8016572:	2325      	movs	r3, #37	; 0x25
 8016574:	9a06      	ldr	r2, [sp, #24]
 8016576:	1a9b      	subs	r3, r3, r2
 8016578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801657a:	4293      	cmp	r3, r2
 801657c:	db22      	blt.n	80165c4 <_strtod_l+0x490>
 801657e:	240f      	movs	r4, #15
 8016580:	9b06      	ldr	r3, [sp, #24]
 8016582:	4d66      	ldr	r5, [pc, #408]	; (801671c <_strtod_l+0x5e8>)
 8016584:	1ae4      	subs	r4, r4, r3
 8016586:	00e1      	lsls	r1, r4, #3
 8016588:	1869      	adds	r1, r5, r1
 801658a:	0032      	movs	r2, r6
 801658c:	6808      	ldr	r0, [r1, #0]
 801658e:	6849      	ldr	r1, [r1, #4]
 8016590:	003b      	movs	r3, r7
 8016592:	f7eb fd0b 	bl	8001fac <__aeabi_dmul>
 8016596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016598:	1b1c      	subs	r4, r3, r4
 801659a:	00e4      	lsls	r4, r4, #3
 801659c:	192c      	adds	r4, r5, r4
 801659e:	6822      	ldr	r2, [r4, #0]
 80165a0:	6863      	ldr	r3, [r4, #4]
 80165a2:	e7e3      	b.n	801656c <_strtod_l+0x438>
 80165a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165a6:	3316      	adds	r3, #22
 80165a8:	db0c      	blt.n	80165c4 <_strtod_l+0x490>
 80165aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165ac:	9a07      	ldr	r2, [sp, #28]
 80165ae:	0030      	movs	r0, r6
 80165b0:	1a9a      	subs	r2, r3, r2
 80165b2:	4b5a      	ldr	r3, [pc, #360]	; (801671c <_strtod_l+0x5e8>)
 80165b4:	00d2      	lsls	r2, r2, #3
 80165b6:	189b      	adds	r3, r3, r2
 80165b8:	0039      	movs	r1, r7
 80165ba:	681a      	ldr	r2, [r3, #0]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	f7eb f8f3 	bl	80017a8 <__aeabi_ddiv>
 80165c2:	e794      	b.n	80164ee <_strtod_l+0x3ba>
 80165c4:	9b06      	ldr	r3, [sp, #24]
 80165c6:	1b1c      	subs	r4, r3, r4
 80165c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165ca:	18e4      	adds	r4, r4, r3
 80165cc:	2c00      	cmp	r4, #0
 80165ce:	dd72      	ble.n	80166b6 <_strtod_l+0x582>
 80165d0:	230f      	movs	r3, #15
 80165d2:	0021      	movs	r1, r4
 80165d4:	4019      	ands	r1, r3
 80165d6:	421c      	tst	r4, r3
 80165d8:	d00a      	beq.n	80165f0 <_strtod_l+0x4bc>
 80165da:	00cb      	lsls	r3, r1, #3
 80165dc:	494f      	ldr	r1, [pc, #316]	; (801671c <_strtod_l+0x5e8>)
 80165de:	0032      	movs	r2, r6
 80165e0:	18c9      	adds	r1, r1, r3
 80165e2:	6808      	ldr	r0, [r1, #0]
 80165e4:	6849      	ldr	r1, [r1, #4]
 80165e6:	003b      	movs	r3, r7
 80165e8:	f7eb fce0 	bl	8001fac <__aeabi_dmul>
 80165ec:	0006      	movs	r6, r0
 80165ee:	000f      	movs	r7, r1
 80165f0:	230f      	movs	r3, #15
 80165f2:	439c      	bics	r4, r3
 80165f4:	d04a      	beq.n	801668c <_strtod_l+0x558>
 80165f6:	3326      	adds	r3, #38	; 0x26
 80165f8:	33ff      	adds	r3, #255	; 0xff
 80165fa:	429c      	cmp	r4, r3
 80165fc:	dd22      	ble.n	8016644 <_strtod_l+0x510>
 80165fe:	2300      	movs	r3, #0
 8016600:	9306      	str	r3, [sp, #24]
 8016602:	9307      	str	r3, [sp, #28]
 8016604:	930b      	str	r3, [sp, #44]	; 0x2c
 8016606:	9309      	str	r3, [sp, #36]	; 0x24
 8016608:	2322      	movs	r3, #34	; 0x22
 801660a:	2600      	movs	r6, #0
 801660c:	9a05      	ldr	r2, [sp, #20]
 801660e:	4f3f      	ldr	r7, [pc, #252]	; (801670c <_strtod_l+0x5d8>)
 8016610:	6013      	str	r3, [r2, #0]
 8016612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016614:	42b3      	cmp	r3, r6
 8016616:	d100      	bne.n	801661a <_strtod_l+0x4e6>
 8016618:	e5d3      	b.n	80161c2 <_strtod_l+0x8e>
 801661a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801661c:	9805      	ldr	r0, [sp, #20]
 801661e:	f002 f9d3 	bl	80189c8 <_Bfree>
 8016622:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016624:	9805      	ldr	r0, [sp, #20]
 8016626:	f002 f9cf 	bl	80189c8 <_Bfree>
 801662a:	9907      	ldr	r1, [sp, #28]
 801662c:	9805      	ldr	r0, [sp, #20]
 801662e:	f002 f9cb 	bl	80189c8 <_Bfree>
 8016632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016634:	9805      	ldr	r0, [sp, #20]
 8016636:	f002 f9c7 	bl	80189c8 <_Bfree>
 801663a:	9906      	ldr	r1, [sp, #24]
 801663c:	9805      	ldr	r0, [sp, #20]
 801663e:	f002 f9c3 	bl	80189c8 <_Bfree>
 8016642:	e5be      	b.n	80161c2 <_strtod_l+0x8e>
 8016644:	2300      	movs	r3, #0
 8016646:	0030      	movs	r0, r6
 8016648:	0039      	movs	r1, r7
 801664a:	4d35      	ldr	r5, [pc, #212]	; (8016720 <_strtod_l+0x5ec>)
 801664c:	1124      	asrs	r4, r4, #4
 801664e:	9308      	str	r3, [sp, #32]
 8016650:	2c01      	cmp	r4, #1
 8016652:	dc1e      	bgt.n	8016692 <_strtod_l+0x55e>
 8016654:	2b00      	cmp	r3, #0
 8016656:	d001      	beq.n	801665c <_strtod_l+0x528>
 8016658:	0006      	movs	r6, r0
 801665a:	000f      	movs	r7, r1
 801665c:	4b31      	ldr	r3, [pc, #196]	; (8016724 <_strtod_l+0x5f0>)
 801665e:	0032      	movs	r2, r6
 8016660:	18ff      	adds	r7, r7, r3
 8016662:	9b08      	ldr	r3, [sp, #32]
 8016664:	00dd      	lsls	r5, r3, #3
 8016666:	4b2e      	ldr	r3, [pc, #184]	; (8016720 <_strtod_l+0x5ec>)
 8016668:	195d      	adds	r5, r3, r5
 801666a:	6828      	ldr	r0, [r5, #0]
 801666c:	6869      	ldr	r1, [r5, #4]
 801666e:	003b      	movs	r3, r7
 8016670:	f7eb fc9c 	bl	8001fac <__aeabi_dmul>
 8016674:	4b25      	ldr	r3, [pc, #148]	; (801670c <_strtod_l+0x5d8>)
 8016676:	4a2c      	ldr	r2, [pc, #176]	; (8016728 <_strtod_l+0x5f4>)
 8016678:	0006      	movs	r6, r0
 801667a:	400b      	ands	r3, r1
 801667c:	4293      	cmp	r3, r2
 801667e:	d8be      	bhi.n	80165fe <_strtod_l+0x4ca>
 8016680:	4a2a      	ldr	r2, [pc, #168]	; (801672c <_strtod_l+0x5f8>)
 8016682:	4293      	cmp	r3, r2
 8016684:	d913      	bls.n	80166ae <_strtod_l+0x57a>
 8016686:	2601      	movs	r6, #1
 8016688:	4f29      	ldr	r7, [pc, #164]	; (8016730 <_strtod_l+0x5fc>)
 801668a:	4276      	negs	r6, r6
 801668c:	2300      	movs	r3, #0
 801668e:	9308      	str	r3, [sp, #32]
 8016690:	e087      	b.n	80167a2 <_strtod_l+0x66e>
 8016692:	2201      	movs	r2, #1
 8016694:	4214      	tst	r4, r2
 8016696:	d004      	beq.n	80166a2 <_strtod_l+0x56e>
 8016698:	682a      	ldr	r2, [r5, #0]
 801669a:	686b      	ldr	r3, [r5, #4]
 801669c:	f7eb fc86 	bl	8001fac <__aeabi_dmul>
 80166a0:	2301      	movs	r3, #1
 80166a2:	9a08      	ldr	r2, [sp, #32]
 80166a4:	1064      	asrs	r4, r4, #1
 80166a6:	3201      	adds	r2, #1
 80166a8:	9208      	str	r2, [sp, #32]
 80166aa:	3508      	adds	r5, #8
 80166ac:	e7d0      	b.n	8016650 <_strtod_l+0x51c>
 80166ae:	23d4      	movs	r3, #212	; 0xd4
 80166b0:	049b      	lsls	r3, r3, #18
 80166b2:	18cf      	adds	r7, r1, r3
 80166b4:	e7ea      	b.n	801668c <_strtod_l+0x558>
 80166b6:	2c00      	cmp	r4, #0
 80166b8:	d0e8      	beq.n	801668c <_strtod_l+0x558>
 80166ba:	4264      	negs	r4, r4
 80166bc:	220f      	movs	r2, #15
 80166be:	0023      	movs	r3, r4
 80166c0:	4013      	ands	r3, r2
 80166c2:	4214      	tst	r4, r2
 80166c4:	d00a      	beq.n	80166dc <_strtod_l+0x5a8>
 80166c6:	00da      	lsls	r2, r3, #3
 80166c8:	4b14      	ldr	r3, [pc, #80]	; (801671c <_strtod_l+0x5e8>)
 80166ca:	0030      	movs	r0, r6
 80166cc:	189b      	adds	r3, r3, r2
 80166ce:	0039      	movs	r1, r7
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	685b      	ldr	r3, [r3, #4]
 80166d4:	f7eb f868 	bl	80017a8 <__aeabi_ddiv>
 80166d8:	0006      	movs	r6, r0
 80166da:	000f      	movs	r7, r1
 80166dc:	1124      	asrs	r4, r4, #4
 80166de:	d0d5      	beq.n	801668c <_strtod_l+0x558>
 80166e0:	2c1f      	cmp	r4, #31
 80166e2:	dd27      	ble.n	8016734 <_strtod_l+0x600>
 80166e4:	2300      	movs	r3, #0
 80166e6:	9306      	str	r3, [sp, #24]
 80166e8:	9307      	str	r3, [sp, #28]
 80166ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80166ec:	9309      	str	r3, [sp, #36]	; 0x24
 80166ee:	2322      	movs	r3, #34	; 0x22
 80166f0:	9a05      	ldr	r2, [sp, #20]
 80166f2:	2600      	movs	r6, #0
 80166f4:	6013      	str	r3, [r2, #0]
 80166f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166f8:	2700      	movs	r7, #0
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d18d      	bne.n	801661a <_strtod_l+0x4e6>
 80166fe:	e560      	b.n	80161c2 <_strtod_l+0x8e>
 8016700:	00004e1f 	.word	0x00004e1f
 8016704:	0801b835 	.word	0x0801b835
 8016708:	0801b878 	.word	0x0801b878
 801670c:	7ff00000 	.word	0x7ff00000
 8016710:	0801b82d 	.word	0x0801b82d
 8016714:	0801b9bc 	.word	0x0801b9bc
 8016718:	0801bcd0 	.word	0x0801bcd0
 801671c:	0801bbb0 	.word	0x0801bbb0
 8016720:	0801bb88 	.word	0x0801bb88
 8016724:	fcb00000 	.word	0xfcb00000
 8016728:	7ca00000 	.word	0x7ca00000
 801672c:	7c900000 	.word	0x7c900000
 8016730:	7fefffff 	.word	0x7fefffff
 8016734:	2310      	movs	r3, #16
 8016736:	0022      	movs	r2, r4
 8016738:	401a      	ands	r2, r3
 801673a:	9208      	str	r2, [sp, #32]
 801673c:	421c      	tst	r4, r3
 801673e:	d001      	beq.n	8016744 <_strtod_l+0x610>
 8016740:	335a      	adds	r3, #90	; 0x5a
 8016742:	9308      	str	r3, [sp, #32]
 8016744:	0030      	movs	r0, r6
 8016746:	0039      	movs	r1, r7
 8016748:	2300      	movs	r3, #0
 801674a:	4dc5      	ldr	r5, [pc, #788]	; (8016a60 <_strtod_l+0x92c>)
 801674c:	2201      	movs	r2, #1
 801674e:	4214      	tst	r4, r2
 8016750:	d004      	beq.n	801675c <_strtod_l+0x628>
 8016752:	682a      	ldr	r2, [r5, #0]
 8016754:	686b      	ldr	r3, [r5, #4]
 8016756:	f7eb fc29 	bl	8001fac <__aeabi_dmul>
 801675a:	2301      	movs	r3, #1
 801675c:	1064      	asrs	r4, r4, #1
 801675e:	3508      	adds	r5, #8
 8016760:	2c00      	cmp	r4, #0
 8016762:	d1f3      	bne.n	801674c <_strtod_l+0x618>
 8016764:	2b00      	cmp	r3, #0
 8016766:	d001      	beq.n	801676c <_strtod_l+0x638>
 8016768:	0006      	movs	r6, r0
 801676a:	000f      	movs	r7, r1
 801676c:	9b08      	ldr	r3, [sp, #32]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d00f      	beq.n	8016792 <_strtod_l+0x65e>
 8016772:	236b      	movs	r3, #107	; 0x6b
 8016774:	007a      	lsls	r2, r7, #1
 8016776:	0d52      	lsrs	r2, r2, #21
 8016778:	0039      	movs	r1, r7
 801677a:	1a9b      	subs	r3, r3, r2
 801677c:	2b00      	cmp	r3, #0
 801677e:	dd08      	ble.n	8016792 <_strtod_l+0x65e>
 8016780:	2b1f      	cmp	r3, #31
 8016782:	dc00      	bgt.n	8016786 <_strtod_l+0x652>
 8016784:	e124      	b.n	80169d0 <_strtod_l+0x89c>
 8016786:	2600      	movs	r6, #0
 8016788:	2b34      	cmp	r3, #52	; 0x34
 801678a:	dc00      	bgt.n	801678e <_strtod_l+0x65a>
 801678c:	e119      	b.n	80169c2 <_strtod_l+0x88e>
 801678e:	27dc      	movs	r7, #220	; 0xdc
 8016790:	04bf      	lsls	r7, r7, #18
 8016792:	2200      	movs	r2, #0
 8016794:	2300      	movs	r3, #0
 8016796:	0030      	movs	r0, r6
 8016798:	0039      	movs	r1, r7
 801679a:	f7e9 fe61 	bl	8000460 <__aeabi_dcmpeq>
 801679e:	2800      	cmp	r0, #0
 80167a0:	d1a0      	bne.n	80166e4 <_strtod_l+0x5b0>
 80167a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80167a6:	9300      	str	r3, [sp, #0]
 80167a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80167aa:	9b06      	ldr	r3, [sp, #24]
 80167ac:	9805      	ldr	r0, [sp, #20]
 80167ae:	f002 f973 	bl	8018a98 <__s2b>
 80167b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80167b4:	2800      	cmp	r0, #0
 80167b6:	d100      	bne.n	80167ba <_strtod_l+0x686>
 80167b8:	e721      	b.n	80165fe <_strtod_l+0x4ca>
 80167ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167bc:	9907      	ldr	r1, [sp, #28]
 80167be:	17da      	asrs	r2, r3, #31
 80167c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167c2:	1a5b      	subs	r3, r3, r1
 80167c4:	401a      	ands	r2, r3
 80167c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167c8:	9215      	str	r2, [sp, #84]	; 0x54
 80167ca:	43db      	mvns	r3, r3
 80167cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80167ce:	17db      	asrs	r3, r3, #31
 80167d0:	401a      	ands	r2, r3
 80167d2:	2300      	movs	r3, #0
 80167d4:	921a      	str	r2, [sp, #104]	; 0x68
 80167d6:	9306      	str	r3, [sp, #24]
 80167d8:	9307      	str	r3, [sp, #28]
 80167da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167dc:	9805      	ldr	r0, [sp, #20]
 80167de:	6859      	ldr	r1, [r3, #4]
 80167e0:	f002 f8ae 	bl	8018940 <_Balloc>
 80167e4:	9009      	str	r0, [sp, #36]	; 0x24
 80167e6:	2800      	cmp	r0, #0
 80167e8:	d100      	bne.n	80167ec <_strtod_l+0x6b8>
 80167ea:	e70d      	b.n	8016608 <_strtod_l+0x4d4>
 80167ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167f0:	691b      	ldr	r3, [r3, #16]
 80167f2:	310c      	adds	r1, #12
 80167f4:	1c9a      	adds	r2, r3, #2
 80167f6:	0092      	lsls	r2, r2, #2
 80167f8:	300c      	adds	r0, #12
 80167fa:	930c      	str	r3, [sp, #48]	; 0x30
 80167fc:	f7fe fb48 	bl	8014e90 <memcpy>
 8016800:	ab22      	add	r3, sp, #136	; 0x88
 8016802:	9301      	str	r3, [sp, #4]
 8016804:	ab21      	add	r3, sp, #132	; 0x84
 8016806:	9300      	str	r3, [sp, #0]
 8016808:	0032      	movs	r2, r6
 801680a:	003b      	movs	r3, r7
 801680c:	9805      	ldr	r0, [sp, #20]
 801680e:	9612      	str	r6, [sp, #72]	; 0x48
 8016810:	9713      	str	r7, [sp, #76]	; 0x4c
 8016812:	f002 fc8d 	bl	8019130 <__d2b>
 8016816:	9020      	str	r0, [sp, #128]	; 0x80
 8016818:	2800      	cmp	r0, #0
 801681a:	d100      	bne.n	801681e <_strtod_l+0x6ea>
 801681c:	e6f4      	b.n	8016608 <_strtod_l+0x4d4>
 801681e:	2101      	movs	r1, #1
 8016820:	9805      	ldr	r0, [sp, #20]
 8016822:	f002 f9cd 	bl	8018bc0 <__i2b>
 8016826:	9007      	str	r0, [sp, #28]
 8016828:	2800      	cmp	r0, #0
 801682a:	d100      	bne.n	801682e <_strtod_l+0x6fa>
 801682c:	e6ec      	b.n	8016608 <_strtod_l+0x4d4>
 801682e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016830:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016832:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8016834:	1ad4      	subs	r4, r2, r3
 8016836:	2b00      	cmp	r3, #0
 8016838:	db01      	blt.n	801683e <_strtod_l+0x70a>
 801683a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801683c:	195d      	adds	r5, r3, r5
 801683e:	9908      	ldr	r1, [sp, #32]
 8016840:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016842:	1a5b      	subs	r3, r3, r1
 8016844:	2136      	movs	r1, #54	; 0x36
 8016846:	189b      	adds	r3, r3, r2
 8016848:	1a8a      	subs	r2, r1, r2
 801684a:	4986      	ldr	r1, [pc, #536]	; (8016a64 <_strtod_l+0x930>)
 801684c:	2001      	movs	r0, #1
 801684e:	468c      	mov	ip, r1
 8016850:	2100      	movs	r1, #0
 8016852:	3b01      	subs	r3, #1
 8016854:	9110      	str	r1, [sp, #64]	; 0x40
 8016856:	9014      	str	r0, [sp, #80]	; 0x50
 8016858:	4563      	cmp	r3, ip
 801685a:	da07      	bge.n	801686c <_strtod_l+0x738>
 801685c:	4661      	mov	r1, ip
 801685e:	1ac9      	subs	r1, r1, r3
 8016860:	1a52      	subs	r2, r2, r1
 8016862:	291f      	cmp	r1, #31
 8016864:	dd00      	ble.n	8016868 <_strtod_l+0x734>
 8016866:	e0b8      	b.n	80169da <_strtod_l+0x8a6>
 8016868:	4088      	lsls	r0, r1
 801686a:	9014      	str	r0, [sp, #80]	; 0x50
 801686c:	18ab      	adds	r3, r5, r2
 801686e:	930c      	str	r3, [sp, #48]	; 0x30
 8016870:	18a4      	adds	r4, r4, r2
 8016872:	9b08      	ldr	r3, [sp, #32]
 8016874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016876:	191c      	adds	r4, r3, r4
 8016878:	002b      	movs	r3, r5
 801687a:	4295      	cmp	r5, r2
 801687c:	dd00      	ble.n	8016880 <_strtod_l+0x74c>
 801687e:	0013      	movs	r3, r2
 8016880:	42a3      	cmp	r3, r4
 8016882:	dd00      	ble.n	8016886 <_strtod_l+0x752>
 8016884:	0023      	movs	r3, r4
 8016886:	2b00      	cmp	r3, #0
 8016888:	dd04      	ble.n	8016894 <_strtod_l+0x760>
 801688a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801688c:	1ae4      	subs	r4, r4, r3
 801688e:	1ad2      	subs	r2, r2, r3
 8016890:	920c      	str	r2, [sp, #48]	; 0x30
 8016892:	1aed      	subs	r5, r5, r3
 8016894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016896:	2b00      	cmp	r3, #0
 8016898:	dd17      	ble.n	80168ca <_strtod_l+0x796>
 801689a:	001a      	movs	r2, r3
 801689c:	9907      	ldr	r1, [sp, #28]
 801689e:	9805      	ldr	r0, [sp, #20]
 80168a0:	f002 fa54 	bl	8018d4c <__pow5mult>
 80168a4:	9007      	str	r0, [sp, #28]
 80168a6:	2800      	cmp	r0, #0
 80168a8:	d100      	bne.n	80168ac <_strtod_l+0x778>
 80168aa:	e6ad      	b.n	8016608 <_strtod_l+0x4d4>
 80168ac:	0001      	movs	r1, r0
 80168ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80168b0:	9805      	ldr	r0, [sp, #20]
 80168b2:	f002 f99b 	bl	8018bec <__multiply>
 80168b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80168b8:	2800      	cmp	r0, #0
 80168ba:	d100      	bne.n	80168be <_strtod_l+0x78a>
 80168bc:	e6a4      	b.n	8016608 <_strtod_l+0x4d4>
 80168be:	9920      	ldr	r1, [sp, #128]	; 0x80
 80168c0:	9805      	ldr	r0, [sp, #20]
 80168c2:	f002 f881 	bl	80189c8 <_Bfree>
 80168c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168c8:	9320      	str	r3, [sp, #128]	; 0x80
 80168ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	dd00      	ble.n	80168d2 <_strtod_l+0x79e>
 80168d0:	e089      	b.n	80169e6 <_strtod_l+0x8b2>
 80168d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	dd08      	ble.n	80168ea <_strtod_l+0x7b6>
 80168d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80168da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80168dc:	9805      	ldr	r0, [sp, #20]
 80168de:	f002 fa35 	bl	8018d4c <__pow5mult>
 80168e2:	9009      	str	r0, [sp, #36]	; 0x24
 80168e4:	2800      	cmp	r0, #0
 80168e6:	d100      	bne.n	80168ea <_strtod_l+0x7b6>
 80168e8:	e68e      	b.n	8016608 <_strtod_l+0x4d4>
 80168ea:	2c00      	cmp	r4, #0
 80168ec:	dd08      	ble.n	8016900 <_strtod_l+0x7cc>
 80168ee:	0022      	movs	r2, r4
 80168f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80168f2:	9805      	ldr	r0, [sp, #20]
 80168f4:	f002 fa86 	bl	8018e04 <__lshift>
 80168f8:	9009      	str	r0, [sp, #36]	; 0x24
 80168fa:	2800      	cmp	r0, #0
 80168fc:	d100      	bne.n	8016900 <_strtod_l+0x7cc>
 80168fe:	e683      	b.n	8016608 <_strtod_l+0x4d4>
 8016900:	2d00      	cmp	r5, #0
 8016902:	dd08      	ble.n	8016916 <_strtod_l+0x7e2>
 8016904:	002a      	movs	r2, r5
 8016906:	9907      	ldr	r1, [sp, #28]
 8016908:	9805      	ldr	r0, [sp, #20]
 801690a:	f002 fa7b 	bl	8018e04 <__lshift>
 801690e:	9007      	str	r0, [sp, #28]
 8016910:	2800      	cmp	r0, #0
 8016912:	d100      	bne.n	8016916 <_strtod_l+0x7e2>
 8016914:	e678      	b.n	8016608 <_strtod_l+0x4d4>
 8016916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016918:	9920      	ldr	r1, [sp, #128]	; 0x80
 801691a:	9805      	ldr	r0, [sp, #20]
 801691c:	f002 fafc 	bl	8018f18 <__mdiff>
 8016920:	9006      	str	r0, [sp, #24]
 8016922:	2800      	cmp	r0, #0
 8016924:	d100      	bne.n	8016928 <_strtod_l+0x7f4>
 8016926:	e66f      	b.n	8016608 <_strtod_l+0x4d4>
 8016928:	2200      	movs	r2, #0
 801692a:	68c3      	ldr	r3, [r0, #12]
 801692c:	9907      	ldr	r1, [sp, #28]
 801692e:	60c2      	str	r2, [r0, #12]
 8016930:	930f      	str	r3, [sp, #60]	; 0x3c
 8016932:	f002 fad5 	bl	8018ee0 <__mcmp>
 8016936:	2800      	cmp	r0, #0
 8016938:	da5f      	bge.n	80169fa <_strtod_l+0x8c6>
 801693a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801693c:	4333      	orrs	r3, r6
 801693e:	d000      	beq.n	8016942 <_strtod_l+0x80e>
 8016940:	e08a      	b.n	8016a58 <_strtod_l+0x924>
 8016942:	033b      	lsls	r3, r7, #12
 8016944:	d000      	beq.n	8016948 <_strtod_l+0x814>
 8016946:	e087      	b.n	8016a58 <_strtod_l+0x924>
 8016948:	22d6      	movs	r2, #214	; 0xd6
 801694a:	4b47      	ldr	r3, [pc, #284]	; (8016a68 <_strtod_l+0x934>)
 801694c:	04d2      	lsls	r2, r2, #19
 801694e:	403b      	ands	r3, r7
 8016950:	4293      	cmp	r3, r2
 8016952:	d800      	bhi.n	8016956 <_strtod_l+0x822>
 8016954:	e080      	b.n	8016a58 <_strtod_l+0x924>
 8016956:	9b06      	ldr	r3, [sp, #24]
 8016958:	695b      	ldr	r3, [r3, #20]
 801695a:	930a      	str	r3, [sp, #40]	; 0x28
 801695c:	2b00      	cmp	r3, #0
 801695e:	d104      	bne.n	801696a <_strtod_l+0x836>
 8016960:	9b06      	ldr	r3, [sp, #24]
 8016962:	691b      	ldr	r3, [r3, #16]
 8016964:	930a      	str	r3, [sp, #40]	; 0x28
 8016966:	2b01      	cmp	r3, #1
 8016968:	dd76      	ble.n	8016a58 <_strtod_l+0x924>
 801696a:	9906      	ldr	r1, [sp, #24]
 801696c:	2201      	movs	r2, #1
 801696e:	9805      	ldr	r0, [sp, #20]
 8016970:	f002 fa48 	bl	8018e04 <__lshift>
 8016974:	9907      	ldr	r1, [sp, #28]
 8016976:	9006      	str	r0, [sp, #24]
 8016978:	f002 fab2 	bl	8018ee0 <__mcmp>
 801697c:	2800      	cmp	r0, #0
 801697e:	dd6b      	ble.n	8016a58 <_strtod_l+0x924>
 8016980:	9908      	ldr	r1, [sp, #32]
 8016982:	003b      	movs	r3, r7
 8016984:	4a38      	ldr	r2, [pc, #224]	; (8016a68 <_strtod_l+0x934>)
 8016986:	2900      	cmp	r1, #0
 8016988:	d100      	bne.n	801698c <_strtod_l+0x858>
 801698a:	e092      	b.n	8016ab2 <_strtod_l+0x97e>
 801698c:	0011      	movs	r1, r2
 801698e:	20d6      	movs	r0, #214	; 0xd6
 8016990:	4039      	ands	r1, r7
 8016992:	04c0      	lsls	r0, r0, #19
 8016994:	4281      	cmp	r1, r0
 8016996:	dd00      	ble.n	801699a <_strtod_l+0x866>
 8016998:	e08b      	b.n	8016ab2 <_strtod_l+0x97e>
 801699a:	23dc      	movs	r3, #220	; 0xdc
 801699c:	049b      	lsls	r3, r3, #18
 801699e:	4299      	cmp	r1, r3
 80169a0:	dc00      	bgt.n	80169a4 <_strtod_l+0x870>
 80169a2:	e6a4      	b.n	80166ee <_strtod_l+0x5ba>
 80169a4:	0030      	movs	r0, r6
 80169a6:	0039      	movs	r1, r7
 80169a8:	2200      	movs	r2, #0
 80169aa:	4b30      	ldr	r3, [pc, #192]	; (8016a6c <_strtod_l+0x938>)
 80169ac:	f7eb fafe 	bl	8001fac <__aeabi_dmul>
 80169b0:	0006      	movs	r6, r0
 80169b2:	000f      	movs	r7, r1
 80169b4:	4308      	orrs	r0, r1
 80169b6:	d000      	beq.n	80169ba <_strtod_l+0x886>
 80169b8:	e62f      	b.n	801661a <_strtod_l+0x4e6>
 80169ba:	2322      	movs	r3, #34	; 0x22
 80169bc:	9a05      	ldr	r2, [sp, #20]
 80169be:	6013      	str	r3, [r2, #0]
 80169c0:	e62b      	b.n	801661a <_strtod_l+0x4e6>
 80169c2:	234b      	movs	r3, #75	; 0x4b
 80169c4:	1a9a      	subs	r2, r3, r2
 80169c6:	3b4c      	subs	r3, #76	; 0x4c
 80169c8:	4093      	lsls	r3, r2
 80169ca:	4019      	ands	r1, r3
 80169cc:	000f      	movs	r7, r1
 80169ce:	e6e0      	b.n	8016792 <_strtod_l+0x65e>
 80169d0:	2201      	movs	r2, #1
 80169d2:	4252      	negs	r2, r2
 80169d4:	409a      	lsls	r2, r3
 80169d6:	4016      	ands	r6, r2
 80169d8:	e6db      	b.n	8016792 <_strtod_l+0x65e>
 80169da:	4925      	ldr	r1, [pc, #148]	; (8016a70 <_strtod_l+0x93c>)
 80169dc:	1acb      	subs	r3, r1, r3
 80169de:	0001      	movs	r1, r0
 80169e0:	4099      	lsls	r1, r3
 80169e2:	9110      	str	r1, [sp, #64]	; 0x40
 80169e4:	e741      	b.n	801686a <_strtod_l+0x736>
 80169e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80169e8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80169ea:	9805      	ldr	r0, [sp, #20]
 80169ec:	f002 fa0a 	bl	8018e04 <__lshift>
 80169f0:	9020      	str	r0, [sp, #128]	; 0x80
 80169f2:	2800      	cmp	r0, #0
 80169f4:	d000      	beq.n	80169f8 <_strtod_l+0x8c4>
 80169f6:	e76c      	b.n	80168d2 <_strtod_l+0x79e>
 80169f8:	e606      	b.n	8016608 <_strtod_l+0x4d4>
 80169fa:	970c      	str	r7, [sp, #48]	; 0x30
 80169fc:	2800      	cmp	r0, #0
 80169fe:	d176      	bne.n	8016aee <_strtod_l+0x9ba>
 8016a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a02:	033b      	lsls	r3, r7, #12
 8016a04:	0b1b      	lsrs	r3, r3, #12
 8016a06:	2a00      	cmp	r2, #0
 8016a08:	d038      	beq.n	8016a7c <_strtod_l+0x948>
 8016a0a:	4a1a      	ldr	r2, [pc, #104]	; (8016a74 <_strtod_l+0x940>)
 8016a0c:	4293      	cmp	r3, r2
 8016a0e:	d138      	bne.n	8016a82 <_strtod_l+0x94e>
 8016a10:	2201      	movs	r2, #1
 8016a12:	9b08      	ldr	r3, [sp, #32]
 8016a14:	4252      	negs	r2, r2
 8016a16:	0031      	movs	r1, r6
 8016a18:	0010      	movs	r0, r2
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d00b      	beq.n	8016a36 <_strtod_l+0x902>
 8016a1e:	24d4      	movs	r4, #212	; 0xd4
 8016a20:	4b11      	ldr	r3, [pc, #68]	; (8016a68 <_strtod_l+0x934>)
 8016a22:	0010      	movs	r0, r2
 8016a24:	403b      	ands	r3, r7
 8016a26:	04e4      	lsls	r4, r4, #19
 8016a28:	42a3      	cmp	r3, r4
 8016a2a:	d804      	bhi.n	8016a36 <_strtod_l+0x902>
 8016a2c:	306c      	adds	r0, #108	; 0x6c
 8016a2e:	0d1b      	lsrs	r3, r3, #20
 8016a30:	1ac3      	subs	r3, r0, r3
 8016a32:	409a      	lsls	r2, r3
 8016a34:	0010      	movs	r0, r2
 8016a36:	4281      	cmp	r1, r0
 8016a38:	d123      	bne.n	8016a82 <_strtod_l+0x94e>
 8016a3a:	4b0f      	ldr	r3, [pc, #60]	; (8016a78 <_strtod_l+0x944>)
 8016a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d102      	bne.n	8016a48 <_strtod_l+0x914>
 8016a42:	1c4b      	adds	r3, r1, #1
 8016a44:	d100      	bne.n	8016a48 <_strtod_l+0x914>
 8016a46:	e5df      	b.n	8016608 <_strtod_l+0x4d4>
 8016a48:	4b07      	ldr	r3, [pc, #28]	; (8016a68 <_strtod_l+0x934>)
 8016a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a4c:	2600      	movs	r6, #0
 8016a4e:	401a      	ands	r2, r3
 8016a50:	0013      	movs	r3, r2
 8016a52:	2280      	movs	r2, #128	; 0x80
 8016a54:	0352      	lsls	r2, r2, #13
 8016a56:	189f      	adds	r7, r3, r2
 8016a58:	9b08      	ldr	r3, [sp, #32]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d1a2      	bne.n	80169a4 <_strtod_l+0x870>
 8016a5e:	e5dc      	b.n	801661a <_strtod_l+0x4e6>
 8016a60:	0801b890 	.word	0x0801b890
 8016a64:	fffffc02 	.word	0xfffffc02
 8016a68:	7ff00000 	.word	0x7ff00000
 8016a6c:	39500000 	.word	0x39500000
 8016a70:	fffffbe2 	.word	0xfffffbe2
 8016a74:	000fffff 	.word	0x000fffff
 8016a78:	7fefffff 	.word	0x7fefffff
 8016a7c:	4333      	orrs	r3, r6
 8016a7e:	d100      	bne.n	8016a82 <_strtod_l+0x94e>
 8016a80:	e77e      	b.n	8016980 <_strtod_l+0x84c>
 8016a82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d01d      	beq.n	8016ac4 <_strtod_l+0x990>
 8016a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016a8c:	4213      	tst	r3, r2
 8016a8e:	d0e3      	beq.n	8016a58 <_strtod_l+0x924>
 8016a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a92:	0030      	movs	r0, r6
 8016a94:	0039      	movs	r1, r7
 8016a96:	9a08      	ldr	r2, [sp, #32]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d017      	beq.n	8016acc <_strtod_l+0x998>
 8016a9c:	f7ff fb32 	bl	8016104 <sulp>
 8016aa0:	0002      	movs	r2, r0
 8016aa2:	000b      	movs	r3, r1
 8016aa4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016aa6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016aa8:	f7ea fb42 	bl	8001130 <__aeabi_dadd>
 8016aac:	0006      	movs	r6, r0
 8016aae:	000f      	movs	r7, r1
 8016ab0:	e7d2      	b.n	8016a58 <_strtod_l+0x924>
 8016ab2:	2601      	movs	r6, #1
 8016ab4:	4013      	ands	r3, r2
 8016ab6:	4a99      	ldr	r2, [pc, #612]	; (8016d1c <_strtod_l+0xbe8>)
 8016ab8:	4276      	negs	r6, r6
 8016aba:	189b      	adds	r3, r3, r2
 8016abc:	4a98      	ldr	r2, [pc, #608]	; (8016d20 <_strtod_l+0xbec>)
 8016abe:	431a      	orrs	r2, r3
 8016ac0:	0017      	movs	r7, r2
 8016ac2:	e7c9      	b.n	8016a58 <_strtod_l+0x924>
 8016ac4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ac6:	4233      	tst	r3, r6
 8016ac8:	d0c6      	beq.n	8016a58 <_strtod_l+0x924>
 8016aca:	e7e1      	b.n	8016a90 <_strtod_l+0x95c>
 8016acc:	f7ff fb1a 	bl	8016104 <sulp>
 8016ad0:	0002      	movs	r2, r0
 8016ad2:	000b      	movs	r3, r1
 8016ad4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016ad6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016ad8:	f7eb fcd4 	bl	8002484 <__aeabi_dsub>
 8016adc:	2200      	movs	r2, #0
 8016ade:	2300      	movs	r3, #0
 8016ae0:	0006      	movs	r6, r0
 8016ae2:	000f      	movs	r7, r1
 8016ae4:	f7e9 fcbc 	bl	8000460 <__aeabi_dcmpeq>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d0b5      	beq.n	8016a58 <_strtod_l+0x924>
 8016aec:	e5ff      	b.n	80166ee <_strtod_l+0x5ba>
 8016aee:	9907      	ldr	r1, [sp, #28]
 8016af0:	9806      	ldr	r0, [sp, #24]
 8016af2:	f002 fb81 	bl	80191f8 <__ratio>
 8016af6:	2380      	movs	r3, #128	; 0x80
 8016af8:	2200      	movs	r2, #0
 8016afa:	05db      	lsls	r3, r3, #23
 8016afc:	0004      	movs	r4, r0
 8016afe:	000d      	movs	r5, r1
 8016b00:	f7e9 fcbe 	bl	8000480 <__aeabi_dcmple>
 8016b04:	2800      	cmp	r0, #0
 8016b06:	d075      	beq.n	8016bf4 <_strtod_l+0xac0>
 8016b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d047      	beq.n	8016b9e <_strtod_l+0xa6a>
 8016b0e:	2300      	movs	r3, #0
 8016b10:	4c84      	ldr	r4, [pc, #528]	; (8016d24 <_strtod_l+0xbf0>)
 8016b12:	2500      	movs	r5, #0
 8016b14:	9310      	str	r3, [sp, #64]	; 0x40
 8016b16:	9411      	str	r4, [sp, #68]	; 0x44
 8016b18:	4c82      	ldr	r4, [pc, #520]	; (8016d24 <_strtod_l+0xbf0>)
 8016b1a:	4a83      	ldr	r2, [pc, #524]	; (8016d28 <_strtod_l+0xbf4>)
 8016b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b1e:	4013      	ands	r3, r2
 8016b20:	9314      	str	r3, [sp, #80]	; 0x50
 8016b22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016b24:	4b81      	ldr	r3, [pc, #516]	; (8016d2c <_strtod_l+0xbf8>)
 8016b26:	429a      	cmp	r2, r3
 8016b28:	d000      	beq.n	8016b2c <_strtod_l+0x9f8>
 8016b2a:	e0ac      	b.n	8016c86 <_strtod_l+0xb52>
 8016b2c:	4a80      	ldr	r2, [pc, #512]	; (8016d30 <_strtod_l+0xbfc>)
 8016b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b30:	4694      	mov	ip, r2
 8016b32:	4463      	add	r3, ip
 8016b34:	001f      	movs	r7, r3
 8016b36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016b38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b3a:	0030      	movs	r0, r6
 8016b3c:	0039      	movs	r1, r7
 8016b3e:	920c      	str	r2, [sp, #48]	; 0x30
 8016b40:	930d      	str	r3, [sp, #52]	; 0x34
 8016b42:	f002 fa81 	bl	8019048 <__ulp>
 8016b46:	0002      	movs	r2, r0
 8016b48:	000b      	movs	r3, r1
 8016b4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016b4c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016b4e:	f7eb fa2d 	bl	8001fac <__aeabi_dmul>
 8016b52:	0032      	movs	r2, r6
 8016b54:	003b      	movs	r3, r7
 8016b56:	f7ea faeb 	bl	8001130 <__aeabi_dadd>
 8016b5a:	4a73      	ldr	r2, [pc, #460]	; (8016d28 <_strtod_l+0xbf4>)
 8016b5c:	4b75      	ldr	r3, [pc, #468]	; (8016d34 <_strtod_l+0xc00>)
 8016b5e:	0006      	movs	r6, r0
 8016b60:	400a      	ands	r2, r1
 8016b62:	429a      	cmp	r2, r3
 8016b64:	d95e      	bls.n	8016c24 <_strtod_l+0xaf0>
 8016b66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016b68:	4b73      	ldr	r3, [pc, #460]	; (8016d38 <_strtod_l+0xc04>)
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d103      	bne.n	8016b76 <_strtod_l+0xa42>
 8016b6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016b70:	3301      	adds	r3, #1
 8016b72:	d100      	bne.n	8016b76 <_strtod_l+0xa42>
 8016b74:	e548      	b.n	8016608 <_strtod_l+0x4d4>
 8016b76:	2601      	movs	r6, #1
 8016b78:	4f6f      	ldr	r7, [pc, #444]	; (8016d38 <_strtod_l+0xc04>)
 8016b7a:	4276      	negs	r6, r6
 8016b7c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8016b7e:	9805      	ldr	r0, [sp, #20]
 8016b80:	f001 ff22 	bl	80189c8 <_Bfree>
 8016b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016b86:	9805      	ldr	r0, [sp, #20]
 8016b88:	f001 ff1e 	bl	80189c8 <_Bfree>
 8016b8c:	9907      	ldr	r1, [sp, #28]
 8016b8e:	9805      	ldr	r0, [sp, #20]
 8016b90:	f001 ff1a 	bl	80189c8 <_Bfree>
 8016b94:	9906      	ldr	r1, [sp, #24]
 8016b96:	9805      	ldr	r0, [sp, #20]
 8016b98:	f001 ff16 	bl	80189c8 <_Bfree>
 8016b9c:	e61d      	b.n	80167da <_strtod_l+0x6a6>
 8016b9e:	2e00      	cmp	r6, #0
 8016ba0:	d11c      	bne.n	8016bdc <_strtod_l+0xaa8>
 8016ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ba4:	031b      	lsls	r3, r3, #12
 8016ba6:	d11f      	bne.n	8016be8 <_strtod_l+0xab4>
 8016ba8:	2200      	movs	r2, #0
 8016baa:	0020      	movs	r0, r4
 8016bac:	0029      	movs	r1, r5
 8016bae:	4b5d      	ldr	r3, [pc, #372]	; (8016d24 <_strtod_l+0xbf0>)
 8016bb0:	f7e9 fc5c 	bl	800046c <__aeabi_dcmplt>
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	d11a      	bne.n	8016bee <_strtod_l+0xaba>
 8016bb8:	0020      	movs	r0, r4
 8016bba:	0029      	movs	r1, r5
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	4b5f      	ldr	r3, [pc, #380]	; (8016d3c <_strtod_l+0xc08>)
 8016bc0:	f7eb f9f4 	bl	8001fac <__aeabi_dmul>
 8016bc4:	0005      	movs	r5, r0
 8016bc6:	000c      	movs	r4, r1
 8016bc8:	2380      	movs	r3, #128	; 0x80
 8016bca:	061b      	lsls	r3, r3, #24
 8016bcc:	18e3      	adds	r3, r4, r3
 8016bce:	951c      	str	r5, [sp, #112]	; 0x70
 8016bd0:	931d      	str	r3, [sp, #116]	; 0x74
 8016bd2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016bd6:	9210      	str	r2, [sp, #64]	; 0x40
 8016bd8:	9311      	str	r3, [sp, #68]	; 0x44
 8016bda:	e79e      	b.n	8016b1a <_strtod_l+0x9e6>
 8016bdc:	2e01      	cmp	r6, #1
 8016bde:	d103      	bne.n	8016be8 <_strtod_l+0xab4>
 8016be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d100      	bne.n	8016be8 <_strtod_l+0xab4>
 8016be6:	e582      	b.n	80166ee <_strtod_l+0x5ba>
 8016be8:	2300      	movs	r3, #0
 8016bea:	4c55      	ldr	r4, [pc, #340]	; (8016d40 <_strtod_l+0xc0c>)
 8016bec:	e791      	b.n	8016b12 <_strtod_l+0x9de>
 8016bee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016bf0:	4c52      	ldr	r4, [pc, #328]	; (8016d3c <_strtod_l+0xc08>)
 8016bf2:	e7e9      	b.n	8016bc8 <_strtod_l+0xa94>
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	0020      	movs	r0, r4
 8016bf8:	0029      	movs	r1, r5
 8016bfa:	4b50      	ldr	r3, [pc, #320]	; (8016d3c <_strtod_l+0xc08>)
 8016bfc:	f7eb f9d6 	bl	8001fac <__aeabi_dmul>
 8016c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c02:	0005      	movs	r5, r0
 8016c04:	000b      	movs	r3, r1
 8016c06:	000c      	movs	r4, r1
 8016c08:	2a00      	cmp	r2, #0
 8016c0a:	d107      	bne.n	8016c1c <_strtod_l+0xae8>
 8016c0c:	2280      	movs	r2, #128	; 0x80
 8016c0e:	0612      	lsls	r2, r2, #24
 8016c10:	188b      	adds	r3, r1, r2
 8016c12:	9016      	str	r0, [sp, #88]	; 0x58
 8016c14:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c1a:	e7dc      	b.n	8016bd6 <_strtod_l+0xaa2>
 8016c1c:	0002      	movs	r2, r0
 8016c1e:	9216      	str	r2, [sp, #88]	; 0x58
 8016c20:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c22:	e7f8      	b.n	8016c16 <_strtod_l+0xae2>
 8016c24:	23d4      	movs	r3, #212	; 0xd4
 8016c26:	049b      	lsls	r3, r3, #18
 8016c28:	18cf      	adds	r7, r1, r3
 8016c2a:	9b08      	ldr	r3, [sp, #32]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d1a5      	bne.n	8016b7c <_strtod_l+0xa48>
 8016c30:	4b3d      	ldr	r3, [pc, #244]	; (8016d28 <_strtod_l+0xbf4>)
 8016c32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016c34:	403b      	ands	r3, r7
 8016c36:	429a      	cmp	r2, r3
 8016c38:	d1a0      	bne.n	8016b7c <_strtod_l+0xa48>
 8016c3a:	0028      	movs	r0, r5
 8016c3c:	0021      	movs	r1, r4
 8016c3e:	f7e9 fc95 	bl	800056c <__aeabi_d2lz>
 8016c42:	f7e9 fccf 	bl	80005e4 <__aeabi_l2d>
 8016c46:	0002      	movs	r2, r0
 8016c48:	000b      	movs	r3, r1
 8016c4a:	0028      	movs	r0, r5
 8016c4c:	0021      	movs	r1, r4
 8016c4e:	f7eb fc19 	bl	8002484 <__aeabi_dsub>
 8016c52:	033b      	lsls	r3, r7, #12
 8016c54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c56:	0b1b      	lsrs	r3, r3, #12
 8016c58:	4333      	orrs	r3, r6
 8016c5a:	4313      	orrs	r3, r2
 8016c5c:	0004      	movs	r4, r0
 8016c5e:	000d      	movs	r5, r1
 8016c60:	4a38      	ldr	r2, [pc, #224]	; (8016d44 <_strtod_l+0xc10>)
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d055      	beq.n	8016d12 <_strtod_l+0xbde>
 8016c66:	4b38      	ldr	r3, [pc, #224]	; (8016d48 <_strtod_l+0xc14>)
 8016c68:	f7e9 fc00 	bl	800046c <__aeabi_dcmplt>
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d000      	beq.n	8016c72 <_strtod_l+0xb3e>
 8016c70:	e4d3      	b.n	801661a <_strtod_l+0x4e6>
 8016c72:	0020      	movs	r0, r4
 8016c74:	0029      	movs	r1, r5
 8016c76:	4a35      	ldr	r2, [pc, #212]	; (8016d4c <_strtod_l+0xc18>)
 8016c78:	4b30      	ldr	r3, [pc, #192]	; (8016d3c <_strtod_l+0xc08>)
 8016c7a:	f7e9 fc0b 	bl	8000494 <__aeabi_dcmpgt>
 8016c7e:	2800      	cmp	r0, #0
 8016c80:	d100      	bne.n	8016c84 <_strtod_l+0xb50>
 8016c82:	e77b      	b.n	8016b7c <_strtod_l+0xa48>
 8016c84:	e4c9      	b.n	801661a <_strtod_l+0x4e6>
 8016c86:	9b08      	ldr	r3, [sp, #32]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d02b      	beq.n	8016ce4 <_strtod_l+0xbb0>
 8016c8c:	23d4      	movs	r3, #212	; 0xd4
 8016c8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016c90:	04db      	lsls	r3, r3, #19
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d826      	bhi.n	8016ce4 <_strtod_l+0xbb0>
 8016c96:	0028      	movs	r0, r5
 8016c98:	0021      	movs	r1, r4
 8016c9a:	4a2d      	ldr	r2, [pc, #180]	; (8016d50 <_strtod_l+0xc1c>)
 8016c9c:	4b2d      	ldr	r3, [pc, #180]	; (8016d54 <_strtod_l+0xc20>)
 8016c9e:	f7e9 fbef 	bl	8000480 <__aeabi_dcmple>
 8016ca2:	2800      	cmp	r0, #0
 8016ca4:	d017      	beq.n	8016cd6 <_strtod_l+0xba2>
 8016ca6:	0028      	movs	r0, r5
 8016ca8:	0021      	movs	r1, r4
 8016caa:	f7e9 fc41 	bl	8000530 <__aeabi_d2uiz>
 8016cae:	2800      	cmp	r0, #0
 8016cb0:	d100      	bne.n	8016cb4 <_strtod_l+0xb80>
 8016cb2:	3001      	adds	r0, #1
 8016cb4:	f7eb fffc 	bl	8002cb0 <__aeabi_ui2d>
 8016cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016cba:	0005      	movs	r5, r0
 8016cbc:	000b      	movs	r3, r1
 8016cbe:	000c      	movs	r4, r1
 8016cc0:	2a00      	cmp	r2, #0
 8016cc2:	d122      	bne.n	8016d0a <_strtod_l+0xbd6>
 8016cc4:	2280      	movs	r2, #128	; 0x80
 8016cc6:	0612      	lsls	r2, r2, #24
 8016cc8:	188b      	adds	r3, r1, r2
 8016cca:	9018      	str	r0, [sp, #96]	; 0x60
 8016ccc:	9319      	str	r3, [sp, #100]	; 0x64
 8016cce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016cd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016cd2:	9210      	str	r2, [sp, #64]	; 0x40
 8016cd4:	9311      	str	r3, [sp, #68]	; 0x44
 8016cd6:	22d6      	movs	r2, #214	; 0xd6
 8016cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016cda:	04d2      	lsls	r2, r2, #19
 8016cdc:	189b      	adds	r3, r3, r2
 8016cde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016ce0:	1a9b      	subs	r3, r3, r2
 8016ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8016ce4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016ce6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016ce8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016cea:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8016cec:	f002 f9ac 	bl	8019048 <__ulp>
 8016cf0:	0002      	movs	r2, r0
 8016cf2:	000b      	movs	r3, r1
 8016cf4:	0030      	movs	r0, r6
 8016cf6:	0039      	movs	r1, r7
 8016cf8:	f7eb f958 	bl	8001fac <__aeabi_dmul>
 8016cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016cfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d00:	f7ea fa16 	bl	8001130 <__aeabi_dadd>
 8016d04:	0006      	movs	r6, r0
 8016d06:	000f      	movs	r7, r1
 8016d08:	e78f      	b.n	8016c2a <_strtod_l+0xaf6>
 8016d0a:	0002      	movs	r2, r0
 8016d0c:	9218      	str	r2, [sp, #96]	; 0x60
 8016d0e:	9319      	str	r3, [sp, #100]	; 0x64
 8016d10:	e7dd      	b.n	8016cce <_strtod_l+0xb9a>
 8016d12:	4b11      	ldr	r3, [pc, #68]	; (8016d58 <_strtod_l+0xc24>)
 8016d14:	f7e9 fbaa 	bl	800046c <__aeabi_dcmplt>
 8016d18:	e7b1      	b.n	8016c7e <_strtod_l+0xb4a>
 8016d1a:	46c0      	nop			; (mov r8, r8)
 8016d1c:	fff00000 	.word	0xfff00000
 8016d20:	000fffff 	.word	0x000fffff
 8016d24:	3ff00000 	.word	0x3ff00000
 8016d28:	7ff00000 	.word	0x7ff00000
 8016d2c:	7fe00000 	.word	0x7fe00000
 8016d30:	fcb00000 	.word	0xfcb00000
 8016d34:	7c9fffff 	.word	0x7c9fffff
 8016d38:	7fefffff 	.word	0x7fefffff
 8016d3c:	3fe00000 	.word	0x3fe00000
 8016d40:	bff00000 	.word	0xbff00000
 8016d44:	94a03595 	.word	0x94a03595
 8016d48:	3fdfffff 	.word	0x3fdfffff
 8016d4c:	35afe535 	.word	0x35afe535
 8016d50:	ffc00000 	.word	0xffc00000
 8016d54:	41dfffff 	.word	0x41dfffff
 8016d58:	3fcfffff 	.word	0x3fcfffff

08016d5c <_strtod_r>:
 8016d5c:	b510      	push	{r4, lr}
 8016d5e:	4b02      	ldr	r3, [pc, #8]	; (8016d68 <_strtod_r+0xc>)
 8016d60:	f7ff f9e8 	bl	8016134 <_strtod_l>
 8016d64:	bd10      	pop	{r4, pc}
 8016d66:	46c0      	nop			; (mov r8, r8)
 8016d68:	20000340 	.word	0x20000340

08016d6c <_strtol_l.constprop.0>:
 8016d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d6e:	b087      	sub	sp, #28
 8016d70:	001e      	movs	r6, r3
 8016d72:	9005      	str	r0, [sp, #20]
 8016d74:	9101      	str	r1, [sp, #4]
 8016d76:	9202      	str	r2, [sp, #8]
 8016d78:	2b01      	cmp	r3, #1
 8016d7a:	d045      	beq.n	8016e08 <_strtol_l.constprop.0+0x9c>
 8016d7c:	000b      	movs	r3, r1
 8016d7e:	2e24      	cmp	r6, #36	; 0x24
 8016d80:	d842      	bhi.n	8016e08 <_strtol_l.constprop.0+0x9c>
 8016d82:	4a3f      	ldr	r2, [pc, #252]	; (8016e80 <_strtol_l.constprop.0+0x114>)
 8016d84:	2108      	movs	r1, #8
 8016d86:	4694      	mov	ip, r2
 8016d88:	001a      	movs	r2, r3
 8016d8a:	4660      	mov	r0, ip
 8016d8c:	7814      	ldrb	r4, [r2, #0]
 8016d8e:	3301      	adds	r3, #1
 8016d90:	5d00      	ldrb	r0, [r0, r4]
 8016d92:	001d      	movs	r5, r3
 8016d94:	0007      	movs	r7, r0
 8016d96:	400f      	ands	r7, r1
 8016d98:	4208      	tst	r0, r1
 8016d9a:	d1f5      	bne.n	8016d88 <_strtol_l.constprop.0+0x1c>
 8016d9c:	2c2d      	cmp	r4, #45	; 0x2d
 8016d9e:	d13a      	bne.n	8016e16 <_strtol_l.constprop.0+0xaa>
 8016da0:	2701      	movs	r7, #1
 8016da2:	781c      	ldrb	r4, [r3, #0]
 8016da4:	1c95      	adds	r5, r2, #2
 8016da6:	2e00      	cmp	r6, #0
 8016da8:	d065      	beq.n	8016e76 <_strtol_l.constprop.0+0x10a>
 8016daa:	2e10      	cmp	r6, #16
 8016dac:	d109      	bne.n	8016dc2 <_strtol_l.constprop.0+0x56>
 8016dae:	2c30      	cmp	r4, #48	; 0x30
 8016db0:	d107      	bne.n	8016dc2 <_strtol_l.constprop.0+0x56>
 8016db2:	2220      	movs	r2, #32
 8016db4:	782b      	ldrb	r3, [r5, #0]
 8016db6:	4393      	bics	r3, r2
 8016db8:	2b58      	cmp	r3, #88	; 0x58
 8016dba:	d157      	bne.n	8016e6c <_strtol_l.constprop.0+0x100>
 8016dbc:	2610      	movs	r6, #16
 8016dbe:	786c      	ldrb	r4, [r5, #1]
 8016dc0:	3502      	adds	r5, #2
 8016dc2:	4b30      	ldr	r3, [pc, #192]	; (8016e84 <_strtol_l.constprop.0+0x118>)
 8016dc4:	0031      	movs	r1, r6
 8016dc6:	18fb      	adds	r3, r7, r3
 8016dc8:	0018      	movs	r0, r3
 8016dca:	9303      	str	r3, [sp, #12]
 8016dcc:	f7e9 fa48 	bl	8000260 <__aeabi_uidivmod>
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	2201      	movs	r2, #1
 8016dd4:	4684      	mov	ip, r0
 8016dd6:	0018      	movs	r0, r3
 8016dd8:	9104      	str	r1, [sp, #16]
 8016dda:	4252      	negs	r2, r2
 8016ddc:	0021      	movs	r1, r4
 8016dde:	3930      	subs	r1, #48	; 0x30
 8016de0:	2909      	cmp	r1, #9
 8016de2:	d81d      	bhi.n	8016e20 <_strtol_l.constprop.0+0xb4>
 8016de4:	000c      	movs	r4, r1
 8016de6:	42a6      	cmp	r6, r4
 8016de8:	dd28      	ble.n	8016e3c <_strtol_l.constprop.0+0xd0>
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	db24      	blt.n	8016e38 <_strtol_l.constprop.0+0xcc>
 8016dee:	0013      	movs	r3, r2
 8016df0:	4584      	cmp	ip, r0
 8016df2:	d306      	bcc.n	8016e02 <_strtol_l.constprop.0+0x96>
 8016df4:	d102      	bne.n	8016dfc <_strtol_l.constprop.0+0x90>
 8016df6:	9904      	ldr	r1, [sp, #16]
 8016df8:	42a1      	cmp	r1, r4
 8016dfa:	db02      	blt.n	8016e02 <_strtol_l.constprop.0+0x96>
 8016dfc:	2301      	movs	r3, #1
 8016dfe:	4370      	muls	r0, r6
 8016e00:	1820      	adds	r0, r4, r0
 8016e02:	782c      	ldrb	r4, [r5, #0]
 8016e04:	3501      	adds	r5, #1
 8016e06:	e7e9      	b.n	8016ddc <_strtol_l.constprop.0+0x70>
 8016e08:	f7fe f804 	bl	8014e14 <__errno>
 8016e0c:	2316      	movs	r3, #22
 8016e0e:	6003      	str	r3, [r0, #0]
 8016e10:	2000      	movs	r0, #0
 8016e12:	b007      	add	sp, #28
 8016e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e16:	2c2b      	cmp	r4, #43	; 0x2b
 8016e18:	d1c5      	bne.n	8016da6 <_strtol_l.constprop.0+0x3a>
 8016e1a:	781c      	ldrb	r4, [r3, #0]
 8016e1c:	1c95      	adds	r5, r2, #2
 8016e1e:	e7c2      	b.n	8016da6 <_strtol_l.constprop.0+0x3a>
 8016e20:	0021      	movs	r1, r4
 8016e22:	3941      	subs	r1, #65	; 0x41
 8016e24:	2919      	cmp	r1, #25
 8016e26:	d801      	bhi.n	8016e2c <_strtol_l.constprop.0+0xc0>
 8016e28:	3c37      	subs	r4, #55	; 0x37
 8016e2a:	e7dc      	b.n	8016de6 <_strtol_l.constprop.0+0x7a>
 8016e2c:	0021      	movs	r1, r4
 8016e2e:	3961      	subs	r1, #97	; 0x61
 8016e30:	2919      	cmp	r1, #25
 8016e32:	d803      	bhi.n	8016e3c <_strtol_l.constprop.0+0xd0>
 8016e34:	3c57      	subs	r4, #87	; 0x57
 8016e36:	e7d6      	b.n	8016de6 <_strtol_l.constprop.0+0x7a>
 8016e38:	0013      	movs	r3, r2
 8016e3a:	e7e2      	b.n	8016e02 <_strtol_l.constprop.0+0x96>
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	da09      	bge.n	8016e54 <_strtol_l.constprop.0+0xe8>
 8016e40:	2322      	movs	r3, #34	; 0x22
 8016e42:	9a05      	ldr	r2, [sp, #20]
 8016e44:	9803      	ldr	r0, [sp, #12]
 8016e46:	6013      	str	r3, [r2, #0]
 8016e48:	9b02      	ldr	r3, [sp, #8]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d0e1      	beq.n	8016e12 <_strtol_l.constprop.0+0xa6>
 8016e4e:	1e6b      	subs	r3, r5, #1
 8016e50:	9301      	str	r3, [sp, #4]
 8016e52:	e007      	b.n	8016e64 <_strtol_l.constprop.0+0xf8>
 8016e54:	2f00      	cmp	r7, #0
 8016e56:	d000      	beq.n	8016e5a <_strtol_l.constprop.0+0xee>
 8016e58:	4240      	negs	r0, r0
 8016e5a:	9a02      	ldr	r2, [sp, #8]
 8016e5c:	2a00      	cmp	r2, #0
 8016e5e:	d0d8      	beq.n	8016e12 <_strtol_l.constprop.0+0xa6>
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d1f4      	bne.n	8016e4e <_strtol_l.constprop.0+0xe2>
 8016e64:	9b02      	ldr	r3, [sp, #8]
 8016e66:	9a01      	ldr	r2, [sp, #4]
 8016e68:	601a      	str	r2, [r3, #0]
 8016e6a:	e7d2      	b.n	8016e12 <_strtol_l.constprop.0+0xa6>
 8016e6c:	2430      	movs	r4, #48	; 0x30
 8016e6e:	2e00      	cmp	r6, #0
 8016e70:	d1a7      	bne.n	8016dc2 <_strtol_l.constprop.0+0x56>
 8016e72:	3608      	adds	r6, #8
 8016e74:	e7a5      	b.n	8016dc2 <_strtol_l.constprop.0+0x56>
 8016e76:	2c30      	cmp	r4, #48	; 0x30
 8016e78:	d09b      	beq.n	8016db2 <_strtol_l.constprop.0+0x46>
 8016e7a:	260a      	movs	r6, #10
 8016e7c:	e7a1      	b.n	8016dc2 <_strtol_l.constprop.0+0x56>
 8016e7e:	46c0      	nop			; (mov r8, r8)
 8016e80:	0801b8b9 	.word	0x0801b8b9
 8016e84:	7fffffff 	.word	0x7fffffff

08016e88 <_strtol_r>:
 8016e88:	b510      	push	{r4, lr}
 8016e8a:	f7ff ff6f 	bl	8016d6c <_strtol_l.constprop.0>
 8016e8e:	bd10      	pop	{r4, pc}

08016e90 <__swbuf_r>:
 8016e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e92:	0005      	movs	r5, r0
 8016e94:	000e      	movs	r6, r1
 8016e96:	0014      	movs	r4, r2
 8016e98:	2800      	cmp	r0, #0
 8016e9a:	d004      	beq.n	8016ea6 <__swbuf_r+0x16>
 8016e9c:	6983      	ldr	r3, [r0, #24]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d101      	bne.n	8016ea6 <__swbuf_r+0x16>
 8016ea2:	f001 f897 	bl	8017fd4 <__sinit>
 8016ea6:	4b22      	ldr	r3, [pc, #136]	; (8016f30 <__swbuf_r+0xa0>)
 8016ea8:	429c      	cmp	r4, r3
 8016eaa:	d12e      	bne.n	8016f0a <__swbuf_r+0x7a>
 8016eac:	686c      	ldr	r4, [r5, #4]
 8016eae:	69a3      	ldr	r3, [r4, #24]
 8016eb0:	60a3      	str	r3, [r4, #8]
 8016eb2:	89a3      	ldrh	r3, [r4, #12]
 8016eb4:	071b      	lsls	r3, r3, #28
 8016eb6:	d532      	bpl.n	8016f1e <__swbuf_r+0x8e>
 8016eb8:	6923      	ldr	r3, [r4, #16]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d02f      	beq.n	8016f1e <__swbuf_r+0x8e>
 8016ebe:	6823      	ldr	r3, [r4, #0]
 8016ec0:	6922      	ldr	r2, [r4, #16]
 8016ec2:	b2f7      	uxtb	r7, r6
 8016ec4:	1a98      	subs	r0, r3, r2
 8016ec6:	6963      	ldr	r3, [r4, #20]
 8016ec8:	b2f6      	uxtb	r6, r6
 8016eca:	4283      	cmp	r3, r0
 8016ecc:	dc05      	bgt.n	8016eda <__swbuf_r+0x4a>
 8016ece:	0021      	movs	r1, r4
 8016ed0:	0028      	movs	r0, r5
 8016ed2:	f000 ffdd 	bl	8017e90 <_fflush_r>
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	d127      	bne.n	8016f2a <__swbuf_r+0x9a>
 8016eda:	68a3      	ldr	r3, [r4, #8]
 8016edc:	3001      	adds	r0, #1
 8016ede:	3b01      	subs	r3, #1
 8016ee0:	60a3      	str	r3, [r4, #8]
 8016ee2:	6823      	ldr	r3, [r4, #0]
 8016ee4:	1c5a      	adds	r2, r3, #1
 8016ee6:	6022      	str	r2, [r4, #0]
 8016ee8:	701f      	strb	r7, [r3, #0]
 8016eea:	6963      	ldr	r3, [r4, #20]
 8016eec:	4283      	cmp	r3, r0
 8016eee:	d004      	beq.n	8016efa <__swbuf_r+0x6a>
 8016ef0:	89a3      	ldrh	r3, [r4, #12]
 8016ef2:	07db      	lsls	r3, r3, #31
 8016ef4:	d507      	bpl.n	8016f06 <__swbuf_r+0x76>
 8016ef6:	2e0a      	cmp	r6, #10
 8016ef8:	d105      	bne.n	8016f06 <__swbuf_r+0x76>
 8016efa:	0021      	movs	r1, r4
 8016efc:	0028      	movs	r0, r5
 8016efe:	f000 ffc7 	bl	8017e90 <_fflush_r>
 8016f02:	2800      	cmp	r0, #0
 8016f04:	d111      	bne.n	8016f2a <__swbuf_r+0x9a>
 8016f06:	0030      	movs	r0, r6
 8016f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f0a:	4b0a      	ldr	r3, [pc, #40]	; (8016f34 <__swbuf_r+0xa4>)
 8016f0c:	429c      	cmp	r4, r3
 8016f0e:	d101      	bne.n	8016f14 <__swbuf_r+0x84>
 8016f10:	68ac      	ldr	r4, [r5, #8]
 8016f12:	e7cc      	b.n	8016eae <__swbuf_r+0x1e>
 8016f14:	4b08      	ldr	r3, [pc, #32]	; (8016f38 <__swbuf_r+0xa8>)
 8016f16:	429c      	cmp	r4, r3
 8016f18:	d1c9      	bne.n	8016eae <__swbuf_r+0x1e>
 8016f1a:	68ec      	ldr	r4, [r5, #12]
 8016f1c:	e7c7      	b.n	8016eae <__swbuf_r+0x1e>
 8016f1e:	0021      	movs	r1, r4
 8016f20:	0028      	movs	r0, r5
 8016f22:	f000 f80b 	bl	8016f3c <__swsetup_r>
 8016f26:	2800      	cmp	r0, #0
 8016f28:	d0c9      	beq.n	8016ebe <__swbuf_r+0x2e>
 8016f2a:	2601      	movs	r6, #1
 8016f2c:	4276      	negs	r6, r6
 8016f2e:	e7ea      	b.n	8016f06 <__swbuf_r+0x76>
 8016f30:	0801ba6c 	.word	0x0801ba6c
 8016f34:	0801ba8c 	.word	0x0801ba8c
 8016f38:	0801ba4c 	.word	0x0801ba4c

08016f3c <__swsetup_r>:
 8016f3c:	4b37      	ldr	r3, [pc, #220]	; (801701c <__swsetup_r+0xe0>)
 8016f3e:	b570      	push	{r4, r5, r6, lr}
 8016f40:	681d      	ldr	r5, [r3, #0]
 8016f42:	0006      	movs	r6, r0
 8016f44:	000c      	movs	r4, r1
 8016f46:	2d00      	cmp	r5, #0
 8016f48:	d005      	beq.n	8016f56 <__swsetup_r+0x1a>
 8016f4a:	69ab      	ldr	r3, [r5, #24]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d102      	bne.n	8016f56 <__swsetup_r+0x1a>
 8016f50:	0028      	movs	r0, r5
 8016f52:	f001 f83f 	bl	8017fd4 <__sinit>
 8016f56:	4b32      	ldr	r3, [pc, #200]	; (8017020 <__swsetup_r+0xe4>)
 8016f58:	429c      	cmp	r4, r3
 8016f5a:	d10f      	bne.n	8016f7c <__swsetup_r+0x40>
 8016f5c:	686c      	ldr	r4, [r5, #4]
 8016f5e:	230c      	movs	r3, #12
 8016f60:	5ee2      	ldrsh	r2, [r4, r3]
 8016f62:	b293      	uxth	r3, r2
 8016f64:	0711      	lsls	r1, r2, #28
 8016f66:	d42d      	bmi.n	8016fc4 <__swsetup_r+0x88>
 8016f68:	06d9      	lsls	r1, r3, #27
 8016f6a:	d411      	bmi.n	8016f90 <__swsetup_r+0x54>
 8016f6c:	2309      	movs	r3, #9
 8016f6e:	2001      	movs	r0, #1
 8016f70:	6033      	str	r3, [r6, #0]
 8016f72:	3337      	adds	r3, #55	; 0x37
 8016f74:	4313      	orrs	r3, r2
 8016f76:	81a3      	strh	r3, [r4, #12]
 8016f78:	4240      	negs	r0, r0
 8016f7a:	bd70      	pop	{r4, r5, r6, pc}
 8016f7c:	4b29      	ldr	r3, [pc, #164]	; (8017024 <__swsetup_r+0xe8>)
 8016f7e:	429c      	cmp	r4, r3
 8016f80:	d101      	bne.n	8016f86 <__swsetup_r+0x4a>
 8016f82:	68ac      	ldr	r4, [r5, #8]
 8016f84:	e7eb      	b.n	8016f5e <__swsetup_r+0x22>
 8016f86:	4b28      	ldr	r3, [pc, #160]	; (8017028 <__swsetup_r+0xec>)
 8016f88:	429c      	cmp	r4, r3
 8016f8a:	d1e8      	bne.n	8016f5e <__swsetup_r+0x22>
 8016f8c:	68ec      	ldr	r4, [r5, #12]
 8016f8e:	e7e6      	b.n	8016f5e <__swsetup_r+0x22>
 8016f90:	075b      	lsls	r3, r3, #29
 8016f92:	d513      	bpl.n	8016fbc <__swsetup_r+0x80>
 8016f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f96:	2900      	cmp	r1, #0
 8016f98:	d008      	beq.n	8016fac <__swsetup_r+0x70>
 8016f9a:	0023      	movs	r3, r4
 8016f9c:	3344      	adds	r3, #68	; 0x44
 8016f9e:	4299      	cmp	r1, r3
 8016fa0:	d002      	beq.n	8016fa8 <__swsetup_r+0x6c>
 8016fa2:	0030      	movs	r0, r6
 8016fa4:	f7fd ff86 	bl	8014eb4 <_free_r>
 8016fa8:	2300      	movs	r3, #0
 8016faa:	6363      	str	r3, [r4, #52]	; 0x34
 8016fac:	2224      	movs	r2, #36	; 0x24
 8016fae:	89a3      	ldrh	r3, [r4, #12]
 8016fb0:	4393      	bics	r3, r2
 8016fb2:	81a3      	strh	r3, [r4, #12]
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	6063      	str	r3, [r4, #4]
 8016fb8:	6923      	ldr	r3, [r4, #16]
 8016fba:	6023      	str	r3, [r4, #0]
 8016fbc:	2308      	movs	r3, #8
 8016fbe:	89a2      	ldrh	r2, [r4, #12]
 8016fc0:	4313      	orrs	r3, r2
 8016fc2:	81a3      	strh	r3, [r4, #12]
 8016fc4:	6923      	ldr	r3, [r4, #16]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d10b      	bne.n	8016fe2 <__swsetup_r+0xa6>
 8016fca:	21a0      	movs	r1, #160	; 0xa0
 8016fcc:	2280      	movs	r2, #128	; 0x80
 8016fce:	89a3      	ldrh	r3, [r4, #12]
 8016fd0:	0089      	lsls	r1, r1, #2
 8016fd2:	0092      	lsls	r2, r2, #2
 8016fd4:	400b      	ands	r3, r1
 8016fd6:	4293      	cmp	r3, r2
 8016fd8:	d003      	beq.n	8016fe2 <__swsetup_r+0xa6>
 8016fda:	0021      	movs	r1, r4
 8016fdc:	0030      	movs	r0, r6
 8016fde:	f001 fc3d 	bl	801885c <__smakebuf_r>
 8016fe2:	220c      	movs	r2, #12
 8016fe4:	5ea3      	ldrsh	r3, [r4, r2]
 8016fe6:	2001      	movs	r0, #1
 8016fe8:	001a      	movs	r2, r3
 8016fea:	b299      	uxth	r1, r3
 8016fec:	4002      	ands	r2, r0
 8016fee:	4203      	tst	r3, r0
 8016ff0:	d00f      	beq.n	8017012 <__swsetup_r+0xd6>
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	60a2      	str	r2, [r4, #8]
 8016ff6:	6962      	ldr	r2, [r4, #20]
 8016ff8:	4252      	negs	r2, r2
 8016ffa:	61a2      	str	r2, [r4, #24]
 8016ffc:	2000      	movs	r0, #0
 8016ffe:	6922      	ldr	r2, [r4, #16]
 8017000:	4282      	cmp	r2, r0
 8017002:	d1ba      	bne.n	8016f7a <__swsetup_r+0x3e>
 8017004:	060a      	lsls	r2, r1, #24
 8017006:	d5b8      	bpl.n	8016f7a <__swsetup_r+0x3e>
 8017008:	2240      	movs	r2, #64	; 0x40
 801700a:	4313      	orrs	r3, r2
 801700c:	81a3      	strh	r3, [r4, #12]
 801700e:	3801      	subs	r0, #1
 8017010:	e7b3      	b.n	8016f7a <__swsetup_r+0x3e>
 8017012:	0788      	lsls	r0, r1, #30
 8017014:	d400      	bmi.n	8017018 <__swsetup_r+0xdc>
 8017016:	6962      	ldr	r2, [r4, #20]
 8017018:	60a2      	str	r2, [r4, #8]
 801701a:	e7ef      	b.n	8016ffc <__swsetup_r+0xc0>
 801701c:	200002d8 	.word	0x200002d8
 8017020:	0801ba6c 	.word	0x0801ba6c
 8017024:	0801ba8c 	.word	0x0801ba8c
 8017028:	0801ba4c 	.word	0x0801ba4c

0801702c <quorem>:
 801702c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801702e:	0006      	movs	r6, r0
 8017030:	690b      	ldr	r3, [r1, #16]
 8017032:	6932      	ldr	r2, [r6, #16]
 8017034:	b087      	sub	sp, #28
 8017036:	2000      	movs	r0, #0
 8017038:	9103      	str	r1, [sp, #12]
 801703a:	429a      	cmp	r2, r3
 801703c:	db65      	blt.n	801710a <quorem+0xde>
 801703e:	3b01      	subs	r3, #1
 8017040:	009c      	lsls	r4, r3, #2
 8017042:	9300      	str	r3, [sp, #0]
 8017044:	000b      	movs	r3, r1
 8017046:	3314      	adds	r3, #20
 8017048:	9305      	str	r3, [sp, #20]
 801704a:	191b      	adds	r3, r3, r4
 801704c:	9304      	str	r3, [sp, #16]
 801704e:	0033      	movs	r3, r6
 8017050:	3314      	adds	r3, #20
 8017052:	9302      	str	r3, [sp, #8]
 8017054:	191c      	adds	r4, r3, r4
 8017056:	9b04      	ldr	r3, [sp, #16]
 8017058:	6827      	ldr	r7, [r4, #0]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	0038      	movs	r0, r7
 801705e:	1c5d      	adds	r5, r3, #1
 8017060:	0029      	movs	r1, r5
 8017062:	9301      	str	r3, [sp, #4]
 8017064:	f7e9 f876 	bl	8000154 <__udivsi3>
 8017068:	9001      	str	r0, [sp, #4]
 801706a:	42af      	cmp	r7, r5
 801706c:	d324      	bcc.n	80170b8 <quorem+0x8c>
 801706e:	2500      	movs	r5, #0
 8017070:	46ac      	mov	ip, r5
 8017072:	9802      	ldr	r0, [sp, #8]
 8017074:	9f05      	ldr	r7, [sp, #20]
 8017076:	cf08      	ldmia	r7!, {r3}
 8017078:	9a01      	ldr	r2, [sp, #4]
 801707a:	b299      	uxth	r1, r3
 801707c:	4351      	muls	r1, r2
 801707e:	0c1b      	lsrs	r3, r3, #16
 8017080:	4353      	muls	r3, r2
 8017082:	1949      	adds	r1, r1, r5
 8017084:	0c0a      	lsrs	r2, r1, #16
 8017086:	189b      	adds	r3, r3, r2
 8017088:	6802      	ldr	r2, [r0, #0]
 801708a:	b289      	uxth	r1, r1
 801708c:	b292      	uxth	r2, r2
 801708e:	4462      	add	r2, ip
 8017090:	1a52      	subs	r2, r2, r1
 8017092:	6801      	ldr	r1, [r0, #0]
 8017094:	0c1d      	lsrs	r5, r3, #16
 8017096:	0c09      	lsrs	r1, r1, #16
 8017098:	b29b      	uxth	r3, r3
 801709a:	1acb      	subs	r3, r1, r3
 801709c:	1411      	asrs	r1, r2, #16
 801709e:	185b      	adds	r3, r3, r1
 80170a0:	1419      	asrs	r1, r3, #16
 80170a2:	b292      	uxth	r2, r2
 80170a4:	041b      	lsls	r3, r3, #16
 80170a6:	431a      	orrs	r2, r3
 80170a8:	9b04      	ldr	r3, [sp, #16]
 80170aa:	468c      	mov	ip, r1
 80170ac:	c004      	stmia	r0!, {r2}
 80170ae:	42bb      	cmp	r3, r7
 80170b0:	d2e1      	bcs.n	8017076 <quorem+0x4a>
 80170b2:	6823      	ldr	r3, [r4, #0]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d030      	beq.n	801711a <quorem+0xee>
 80170b8:	0030      	movs	r0, r6
 80170ba:	9903      	ldr	r1, [sp, #12]
 80170bc:	f001 ff10 	bl	8018ee0 <__mcmp>
 80170c0:	2800      	cmp	r0, #0
 80170c2:	db21      	blt.n	8017108 <quorem+0xdc>
 80170c4:	0030      	movs	r0, r6
 80170c6:	2400      	movs	r4, #0
 80170c8:	9b01      	ldr	r3, [sp, #4]
 80170ca:	9903      	ldr	r1, [sp, #12]
 80170cc:	3301      	adds	r3, #1
 80170ce:	9301      	str	r3, [sp, #4]
 80170d0:	3014      	adds	r0, #20
 80170d2:	3114      	adds	r1, #20
 80170d4:	6803      	ldr	r3, [r0, #0]
 80170d6:	c920      	ldmia	r1!, {r5}
 80170d8:	b29a      	uxth	r2, r3
 80170da:	1914      	adds	r4, r2, r4
 80170dc:	b2aa      	uxth	r2, r5
 80170de:	1aa2      	subs	r2, r4, r2
 80170e0:	0c1b      	lsrs	r3, r3, #16
 80170e2:	0c2d      	lsrs	r5, r5, #16
 80170e4:	1414      	asrs	r4, r2, #16
 80170e6:	1b5b      	subs	r3, r3, r5
 80170e8:	191b      	adds	r3, r3, r4
 80170ea:	141c      	asrs	r4, r3, #16
 80170ec:	b292      	uxth	r2, r2
 80170ee:	041b      	lsls	r3, r3, #16
 80170f0:	4313      	orrs	r3, r2
 80170f2:	c008      	stmia	r0!, {r3}
 80170f4:	9b04      	ldr	r3, [sp, #16]
 80170f6:	428b      	cmp	r3, r1
 80170f8:	d2ec      	bcs.n	80170d4 <quorem+0xa8>
 80170fa:	9b00      	ldr	r3, [sp, #0]
 80170fc:	9a02      	ldr	r2, [sp, #8]
 80170fe:	009b      	lsls	r3, r3, #2
 8017100:	18d3      	adds	r3, r2, r3
 8017102:	681a      	ldr	r2, [r3, #0]
 8017104:	2a00      	cmp	r2, #0
 8017106:	d015      	beq.n	8017134 <quorem+0x108>
 8017108:	9801      	ldr	r0, [sp, #4]
 801710a:	b007      	add	sp, #28
 801710c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801710e:	6823      	ldr	r3, [r4, #0]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d106      	bne.n	8017122 <quorem+0xf6>
 8017114:	9b00      	ldr	r3, [sp, #0]
 8017116:	3b01      	subs	r3, #1
 8017118:	9300      	str	r3, [sp, #0]
 801711a:	9b02      	ldr	r3, [sp, #8]
 801711c:	3c04      	subs	r4, #4
 801711e:	42a3      	cmp	r3, r4
 8017120:	d3f5      	bcc.n	801710e <quorem+0xe2>
 8017122:	9b00      	ldr	r3, [sp, #0]
 8017124:	6133      	str	r3, [r6, #16]
 8017126:	e7c7      	b.n	80170b8 <quorem+0x8c>
 8017128:	681a      	ldr	r2, [r3, #0]
 801712a:	2a00      	cmp	r2, #0
 801712c:	d106      	bne.n	801713c <quorem+0x110>
 801712e:	9a00      	ldr	r2, [sp, #0]
 8017130:	3a01      	subs	r2, #1
 8017132:	9200      	str	r2, [sp, #0]
 8017134:	9a02      	ldr	r2, [sp, #8]
 8017136:	3b04      	subs	r3, #4
 8017138:	429a      	cmp	r2, r3
 801713a:	d3f5      	bcc.n	8017128 <quorem+0xfc>
 801713c:	9b00      	ldr	r3, [sp, #0]
 801713e:	6133      	str	r3, [r6, #16]
 8017140:	e7e2      	b.n	8017108 <quorem+0xdc>
	...

08017144 <_dtoa_r>:
 8017144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017146:	b09d      	sub	sp, #116	; 0x74
 8017148:	9202      	str	r2, [sp, #8]
 801714a:	9303      	str	r3, [sp, #12]
 801714c:	9b02      	ldr	r3, [sp, #8]
 801714e:	9c03      	ldr	r4, [sp, #12]
 8017150:	9308      	str	r3, [sp, #32]
 8017152:	9409      	str	r4, [sp, #36]	; 0x24
 8017154:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017156:	0007      	movs	r7, r0
 8017158:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801715a:	2c00      	cmp	r4, #0
 801715c:	d10e      	bne.n	801717c <_dtoa_r+0x38>
 801715e:	2010      	movs	r0, #16
 8017160:	f7fd fe82 	bl	8014e68 <malloc>
 8017164:	1e02      	subs	r2, r0, #0
 8017166:	6278      	str	r0, [r7, #36]	; 0x24
 8017168:	d104      	bne.n	8017174 <_dtoa_r+0x30>
 801716a:	21ea      	movs	r1, #234	; 0xea
 801716c:	4bc7      	ldr	r3, [pc, #796]	; (801748c <_dtoa_r+0x348>)
 801716e:	48c8      	ldr	r0, [pc, #800]	; (8017490 <_dtoa_r+0x34c>)
 8017170:	f002 fc26 	bl	80199c0 <__assert_func>
 8017174:	6044      	str	r4, [r0, #4]
 8017176:	6084      	str	r4, [r0, #8]
 8017178:	6004      	str	r4, [r0, #0]
 801717a:	60c4      	str	r4, [r0, #12]
 801717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717e:	6819      	ldr	r1, [r3, #0]
 8017180:	2900      	cmp	r1, #0
 8017182:	d00a      	beq.n	801719a <_dtoa_r+0x56>
 8017184:	685a      	ldr	r2, [r3, #4]
 8017186:	2301      	movs	r3, #1
 8017188:	4093      	lsls	r3, r2
 801718a:	604a      	str	r2, [r1, #4]
 801718c:	608b      	str	r3, [r1, #8]
 801718e:	0038      	movs	r0, r7
 8017190:	f001 fc1a 	bl	80189c8 <_Bfree>
 8017194:	2200      	movs	r2, #0
 8017196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017198:	601a      	str	r2, [r3, #0]
 801719a:	9b03      	ldr	r3, [sp, #12]
 801719c:	2b00      	cmp	r3, #0
 801719e:	da20      	bge.n	80171e2 <_dtoa_r+0x9e>
 80171a0:	2301      	movs	r3, #1
 80171a2:	602b      	str	r3, [r5, #0]
 80171a4:	9b03      	ldr	r3, [sp, #12]
 80171a6:	005b      	lsls	r3, r3, #1
 80171a8:	085b      	lsrs	r3, r3, #1
 80171aa:	9309      	str	r3, [sp, #36]	; 0x24
 80171ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80171ae:	4bb9      	ldr	r3, [pc, #740]	; (8017494 <_dtoa_r+0x350>)
 80171b0:	4ab8      	ldr	r2, [pc, #736]	; (8017494 <_dtoa_r+0x350>)
 80171b2:	402b      	ands	r3, r5
 80171b4:	4293      	cmp	r3, r2
 80171b6:	d117      	bne.n	80171e8 <_dtoa_r+0xa4>
 80171b8:	4bb7      	ldr	r3, [pc, #732]	; (8017498 <_dtoa_r+0x354>)
 80171ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80171bc:	0328      	lsls	r0, r5, #12
 80171be:	6013      	str	r3, [r2, #0]
 80171c0:	9b02      	ldr	r3, [sp, #8]
 80171c2:	0b00      	lsrs	r0, r0, #12
 80171c4:	4318      	orrs	r0, r3
 80171c6:	d101      	bne.n	80171cc <_dtoa_r+0x88>
 80171c8:	f000 fdbf 	bl	8017d4a <_dtoa_r+0xc06>
 80171cc:	48b3      	ldr	r0, [pc, #716]	; (801749c <_dtoa_r+0x358>)
 80171ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80171d0:	9006      	str	r0, [sp, #24]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d002      	beq.n	80171dc <_dtoa_r+0x98>
 80171d6:	4bb2      	ldr	r3, [pc, #712]	; (80174a0 <_dtoa_r+0x35c>)
 80171d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80171da:	6013      	str	r3, [r2, #0]
 80171dc:	9806      	ldr	r0, [sp, #24]
 80171de:	b01d      	add	sp, #116	; 0x74
 80171e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171e2:	2300      	movs	r3, #0
 80171e4:	602b      	str	r3, [r5, #0]
 80171e6:	e7e1      	b.n	80171ac <_dtoa_r+0x68>
 80171e8:	9b08      	ldr	r3, [sp, #32]
 80171ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80171ec:	9312      	str	r3, [sp, #72]	; 0x48
 80171ee:	9413      	str	r4, [sp, #76]	; 0x4c
 80171f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80171f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80171f4:	2200      	movs	r2, #0
 80171f6:	2300      	movs	r3, #0
 80171f8:	f7e9 f932 	bl	8000460 <__aeabi_dcmpeq>
 80171fc:	1e04      	subs	r4, r0, #0
 80171fe:	d009      	beq.n	8017214 <_dtoa_r+0xd0>
 8017200:	2301      	movs	r3, #1
 8017202:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017204:	6013      	str	r3, [r2, #0]
 8017206:	4ba7      	ldr	r3, [pc, #668]	; (80174a4 <_dtoa_r+0x360>)
 8017208:	9306      	str	r3, [sp, #24]
 801720a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801720c:	2b00      	cmp	r3, #0
 801720e:	d0e5      	beq.n	80171dc <_dtoa_r+0x98>
 8017210:	4ba5      	ldr	r3, [pc, #660]	; (80174a8 <_dtoa_r+0x364>)
 8017212:	e7e1      	b.n	80171d8 <_dtoa_r+0x94>
 8017214:	ab1a      	add	r3, sp, #104	; 0x68
 8017216:	9301      	str	r3, [sp, #4]
 8017218:	ab1b      	add	r3, sp, #108	; 0x6c
 801721a:	9300      	str	r3, [sp, #0]
 801721c:	0038      	movs	r0, r7
 801721e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017222:	f001 ff85 	bl	8019130 <__d2b>
 8017226:	006e      	lsls	r6, r5, #1
 8017228:	9005      	str	r0, [sp, #20]
 801722a:	0d76      	lsrs	r6, r6, #21
 801722c:	d100      	bne.n	8017230 <_dtoa_r+0xec>
 801722e:	e07c      	b.n	801732a <_dtoa_r+0x1e6>
 8017230:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017232:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017236:	4a9d      	ldr	r2, [pc, #628]	; (80174ac <_dtoa_r+0x368>)
 8017238:	031b      	lsls	r3, r3, #12
 801723a:	0b1b      	lsrs	r3, r3, #12
 801723c:	431a      	orrs	r2, r3
 801723e:	0011      	movs	r1, r2
 8017240:	4b9b      	ldr	r3, [pc, #620]	; (80174b0 <_dtoa_r+0x36c>)
 8017242:	9418      	str	r4, [sp, #96]	; 0x60
 8017244:	18f6      	adds	r6, r6, r3
 8017246:	2200      	movs	r2, #0
 8017248:	4b9a      	ldr	r3, [pc, #616]	; (80174b4 <_dtoa_r+0x370>)
 801724a:	f7eb f91b 	bl	8002484 <__aeabi_dsub>
 801724e:	4a9a      	ldr	r2, [pc, #616]	; (80174b8 <_dtoa_r+0x374>)
 8017250:	4b9a      	ldr	r3, [pc, #616]	; (80174bc <_dtoa_r+0x378>)
 8017252:	f7ea feab 	bl	8001fac <__aeabi_dmul>
 8017256:	4a9a      	ldr	r2, [pc, #616]	; (80174c0 <_dtoa_r+0x37c>)
 8017258:	4b9a      	ldr	r3, [pc, #616]	; (80174c4 <_dtoa_r+0x380>)
 801725a:	f7e9 ff69 	bl	8001130 <__aeabi_dadd>
 801725e:	0004      	movs	r4, r0
 8017260:	0030      	movs	r0, r6
 8017262:	000d      	movs	r5, r1
 8017264:	f7eb fcf4 	bl	8002c50 <__aeabi_i2d>
 8017268:	4a97      	ldr	r2, [pc, #604]	; (80174c8 <_dtoa_r+0x384>)
 801726a:	4b98      	ldr	r3, [pc, #608]	; (80174cc <_dtoa_r+0x388>)
 801726c:	f7ea fe9e 	bl	8001fac <__aeabi_dmul>
 8017270:	0002      	movs	r2, r0
 8017272:	000b      	movs	r3, r1
 8017274:	0020      	movs	r0, r4
 8017276:	0029      	movs	r1, r5
 8017278:	f7e9 ff5a 	bl	8001130 <__aeabi_dadd>
 801727c:	0004      	movs	r4, r0
 801727e:	000d      	movs	r5, r1
 8017280:	f7eb fcb0 	bl	8002be4 <__aeabi_d2iz>
 8017284:	2200      	movs	r2, #0
 8017286:	9002      	str	r0, [sp, #8]
 8017288:	2300      	movs	r3, #0
 801728a:	0020      	movs	r0, r4
 801728c:	0029      	movs	r1, r5
 801728e:	f7e9 f8ed 	bl	800046c <__aeabi_dcmplt>
 8017292:	2800      	cmp	r0, #0
 8017294:	d00b      	beq.n	80172ae <_dtoa_r+0x16a>
 8017296:	9802      	ldr	r0, [sp, #8]
 8017298:	f7eb fcda 	bl	8002c50 <__aeabi_i2d>
 801729c:	002b      	movs	r3, r5
 801729e:	0022      	movs	r2, r4
 80172a0:	f7e9 f8de 	bl	8000460 <__aeabi_dcmpeq>
 80172a4:	4243      	negs	r3, r0
 80172a6:	4158      	adcs	r0, r3
 80172a8:	9b02      	ldr	r3, [sp, #8]
 80172aa:	1a1b      	subs	r3, r3, r0
 80172ac:	9302      	str	r3, [sp, #8]
 80172ae:	2301      	movs	r3, #1
 80172b0:	9316      	str	r3, [sp, #88]	; 0x58
 80172b2:	9b02      	ldr	r3, [sp, #8]
 80172b4:	2b16      	cmp	r3, #22
 80172b6:	d80f      	bhi.n	80172d8 <_dtoa_r+0x194>
 80172b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80172ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80172bc:	00da      	lsls	r2, r3, #3
 80172be:	4b84      	ldr	r3, [pc, #528]	; (80174d0 <_dtoa_r+0x38c>)
 80172c0:	189b      	adds	r3, r3, r2
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	685b      	ldr	r3, [r3, #4]
 80172c6:	f7e9 f8d1 	bl	800046c <__aeabi_dcmplt>
 80172ca:	2800      	cmp	r0, #0
 80172cc:	d049      	beq.n	8017362 <_dtoa_r+0x21e>
 80172ce:	9b02      	ldr	r3, [sp, #8]
 80172d0:	3b01      	subs	r3, #1
 80172d2:	9302      	str	r3, [sp, #8]
 80172d4:	2300      	movs	r3, #0
 80172d6:	9316      	str	r3, [sp, #88]	; 0x58
 80172d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80172da:	1b9e      	subs	r6, r3, r6
 80172dc:	2300      	movs	r3, #0
 80172de:	930a      	str	r3, [sp, #40]	; 0x28
 80172e0:	0033      	movs	r3, r6
 80172e2:	3b01      	subs	r3, #1
 80172e4:	930d      	str	r3, [sp, #52]	; 0x34
 80172e6:	d504      	bpl.n	80172f2 <_dtoa_r+0x1ae>
 80172e8:	2301      	movs	r3, #1
 80172ea:	1b9b      	subs	r3, r3, r6
 80172ec:	930a      	str	r3, [sp, #40]	; 0x28
 80172ee:	2300      	movs	r3, #0
 80172f0:	930d      	str	r3, [sp, #52]	; 0x34
 80172f2:	9b02      	ldr	r3, [sp, #8]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	db36      	blt.n	8017366 <_dtoa_r+0x222>
 80172f8:	9a02      	ldr	r2, [sp, #8]
 80172fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172fc:	4694      	mov	ip, r2
 80172fe:	4463      	add	r3, ip
 8017300:	930d      	str	r3, [sp, #52]	; 0x34
 8017302:	2300      	movs	r3, #0
 8017304:	9215      	str	r2, [sp, #84]	; 0x54
 8017306:	930e      	str	r3, [sp, #56]	; 0x38
 8017308:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801730a:	2401      	movs	r4, #1
 801730c:	2b09      	cmp	r3, #9
 801730e:	d864      	bhi.n	80173da <_dtoa_r+0x296>
 8017310:	2b05      	cmp	r3, #5
 8017312:	dd02      	ble.n	801731a <_dtoa_r+0x1d6>
 8017314:	2400      	movs	r4, #0
 8017316:	3b04      	subs	r3, #4
 8017318:	9322      	str	r3, [sp, #136]	; 0x88
 801731a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801731c:	1e98      	subs	r0, r3, #2
 801731e:	2803      	cmp	r0, #3
 8017320:	d864      	bhi.n	80173ec <_dtoa_r+0x2a8>
 8017322:	f7e8 ff03 	bl	800012c <__gnu_thumb1_case_uqi>
 8017326:	3829      	.short	0x3829
 8017328:	5836      	.short	0x5836
 801732a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801732c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801732e:	189e      	adds	r6, r3, r2
 8017330:	4b68      	ldr	r3, [pc, #416]	; (80174d4 <_dtoa_r+0x390>)
 8017332:	18f2      	adds	r2, r6, r3
 8017334:	2a20      	cmp	r2, #32
 8017336:	dd0f      	ble.n	8017358 <_dtoa_r+0x214>
 8017338:	2340      	movs	r3, #64	; 0x40
 801733a:	1a9b      	subs	r3, r3, r2
 801733c:	409d      	lsls	r5, r3
 801733e:	4b66      	ldr	r3, [pc, #408]	; (80174d8 <_dtoa_r+0x394>)
 8017340:	9802      	ldr	r0, [sp, #8]
 8017342:	18f3      	adds	r3, r6, r3
 8017344:	40d8      	lsrs	r0, r3
 8017346:	4328      	orrs	r0, r5
 8017348:	f7eb fcb2 	bl	8002cb0 <__aeabi_ui2d>
 801734c:	2301      	movs	r3, #1
 801734e:	4c63      	ldr	r4, [pc, #396]	; (80174dc <_dtoa_r+0x398>)
 8017350:	3e01      	subs	r6, #1
 8017352:	1909      	adds	r1, r1, r4
 8017354:	9318      	str	r3, [sp, #96]	; 0x60
 8017356:	e776      	b.n	8017246 <_dtoa_r+0x102>
 8017358:	2320      	movs	r3, #32
 801735a:	9802      	ldr	r0, [sp, #8]
 801735c:	1a9b      	subs	r3, r3, r2
 801735e:	4098      	lsls	r0, r3
 8017360:	e7f2      	b.n	8017348 <_dtoa_r+0x204>
 8017362:	9016      	str	r0, [sp, #88]	; 0x58
 8017364:	e7b8      	b.n	80172d8 <_dtoa_r+0x194>
 8017366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017368:	9a02      	ldr	r2, [sp, #8]
 801736a:	1a9b      	subs	r3, r3, r2
 801736c:	930a      	str	r3, [sp, #40]	; 0x28
 801736e:	4253      	negs	r3, r2
 8017370:	930e      	str	r3, [sp, #56]	; 0x38
 8017372:	2300      	movs	r3, #0
 8017374:	9315      	str	r3, [sp, #84]	; 0x54
 8017376:	e7c7      	b.n	8017308 <_dtoa_r+0x1c4>
 8017378:	2300      	movs	r3, #0
 801737a:	930f      	str	r3, [sp, #60]	; 0x3c
 801737c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801737e:	930c      	str	r3, [sp, #48]	; 0x30
 8017380:	9307      	str	r3, [sp, #28]
 8017382:	2b00      	cmp	r3, #0
 8017384:	dc13      	bgt.n	80173ae <_dtoa_r+0x26a>
 8017386:	2301      	movs	r3, #1
 8017388:	001a      	movs	r2, r3
 801738a:	930c      	str	r3, [sp, #48]	; 0x30
 801738c:	9307      	str	r3, [sp, #28]
 801738e:	9223      	str	r2, [sp, #140]	; 0x8c
 8017390:	e00d      	b.n	80173ae <_dtoa_r+0x26a>
 8017392:	2301      	movs	r3, #1
 8017394:	e7f1      	b.n	801737a <_dtoa_r+0x236>
 8017396:	2300      	movs	r3, #0
 8017398:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801739a:	930f      	str	r3, [sp, #60]	; 0x3c
 801739c:	4694      	mov	ip, r2
 801739e:	9b02      	ldr	r3, [sp, #8]
 80173a0:	4463      	add	r3, ip
 80173a2:	930c      	str	r3, [sp, #48]	; 0x30
 80173a4:	3301      	adds	r3, #1
 80173a6:	9307      	str	r3, [sp, #28]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	dc00      	bgt.n	80173ae <_dtoa_r+0x26a>
 80173ac:	2301      	movs	r3, #1
 80173ae:	2200      	movs	r2, #0
 80173b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80173b2:	6042      	str	r2, [r0, #4]
 80173b4:	3204      	adds	r2, #4
 80173b6:	0015      	movs	r5, r2
 80173b8:	3514      	adds	r5, #20
 80173ba:	6841      	ldr	r1, [r0, #4]
 80173bc:	429d      	cmp	r5, r3
 80173be:	d919      	bls.n	80173f4 <_dtoa_r+0x2b0>
 80173c0:	0038      	movs	r0, r7
 80173c2:	f001 fabd 	bl	8018940 <_Balloc>
 80173c6:	9006      	str	r0, [sp, #24]
 80173c8:	2800      	cmp	r0, #0
 80173ca:	d117      	bne.n	80173fc <_dtoa_r+0x2b8>
 80173cc:	21d5      	movs	r1, #213	; 0xd5
 80173ce:	0002      	movs	r2, r0
 80173d0:	4b43      	ldr	r3, [pc, #268]	; (80174e0 <_dtoa_r+0x39c>)
 80173d2:	0049      	lsls	r1, r1, #1
 80173d4:	e6cb      	b.n	801716e <_dtoa_r+0x2a>
 80173d6:	2301      	movs	r3, #1
 80173d8:	e7de      	b.n	8017398 <_dtoa_r+0x254>
 80173da:	2300      	movs	r3, #0
 80173dc:	940f      	str	r4, [sp, #60]	; 0x3c
 80173de:	9322      	str	r3, [sp, #136]	; 0x88
 80173e0:	3b01      	subs	r3, #1
 80173e2:	930c      	str	r3, [sp, #48]	; 0x30
 80173e4:	9307      	str	r3, [sp, #28]
 80173e6:	2200      	movs	r2, #0
 80173e8:	3313      	adds	r3, #19
 80173ea:	e7d0      	b.n	801738e <_dtoa_r+0x24a>
 80173ec:	2301      	movs	r3, #1
 80173ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80173f0:	3b02      	subs	r3, #2
 80173f2:	e7f6      	b.n	80173e2 <_dtoa_r+0x29e>
 80173f4:	3101      	adds	r1, #1
 80173f6:	6041      	str	r1, [r0, #4]
 80173f8:	0052      	lsls	r2, r2, #1
 80173fa:	e7dc      	b.n	80173b6 <_dtoa_r+0x272>
 80173fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173fe:	9a06      	ldr	r2, [sp, #24]
 8017400:	601a      	str	r2, [r3, #0]
 8017402:	9b07      	ldr	r3, [sp, #28]
 8017404:	2b0e      	cmp	r3, #14
 8017406:	d900      	bls.n	801740a <_dtoa_r+0x2c6>
 8017408:	e0eb      	b.n	80175e2 <_dtoa_r+0x49e>
 801740a:	2c00      	cmp	r4, #0
 801740c:	d100      	bne.n	8017410 <_dtoa_r+0x2cc>
 801740e:	e0e8      	b.n	80175e2 <_dtoa_r+0x49e>
 8017410:	9b02      	ldr	r3, [sp, #8]
 8017412:	2b00      	cmp	r3, #0
 8017414:	dd68      	ble.n	80174e8 <_dtoa_r+0x3a4>
 8017416:	001a      	movs	r2, r3
 8017418:	210f      	movs	r1, #15
 801741a:	4b2d      	ldr	r3, [pc, #180]	; (80174d0 <_dtoa_r+0x38c>)
 801741c:	400a      	ands	r2, r1
 801741e:	00d2      	lsls	r2, r2, #3
 8017420:	189b      	adds	r3, r3, r2
 8017422:	681d      	ldr	r5, [r3, #0]
 8017424:	685e      	ldr	r6, [r3, #4]
 8017426:	9b02      	ldr	r3, [sp, #8]
 8017428:	111c      	asrs	r4, r3, #4
 801742a:	2302      	movs	r3, #2
 801742c:	9310      	str	r3, [sp, #64]	; 0x40
 801742e:	9b02      	ldr	r3, [sp, #8]
 8017430:	05db      	lsls	r3, r3, #23
 8017432:	d50b      	bpl.n	801744c <_dtoa_r+0x308>
 8017434:	4b2b      	ldr	r3, [pc, #172]	; (80174e4 <_dtoa_r+0x3a0>)
 8017436:	400c      	ands	r4, r1
 8017438:	6a1a      	ldr	r2, [r3, #32]
 801743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801743c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801743e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017440:	f7ea f9b2 	bl	80017a8 <__aeabi_ddiv>
 8017444:	2303      	movs	r3, #3
 8017446:	9008      	str	r0, [sp, #32]
 8017448:	9109      	str	r1, [sp, #36]	; 0x24
 801744a:	9310      	str	r3, [sp, #64]	; 0x40
 801744c:	4b25      	ldr	r3, [pc, #148]	; (80174e4 <_dtoa_r+0x3a0>)
 801744e:	9314      	str	r3, [sp, #80]	; 0x50
 8017450:	2c00      	cmp	r4, #0
 8017452:	d108      	bne.n	8017466 <_dtoa_r+0x322>
 8017454:	9808      	ldr	r0, [sp, #32]
 8017456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017458:	002a      	movs	r2, r5
 801745a:	0033      	movs	r3, r6
 801745c:	f7ea f9a4 	bl	80017a8 <__aeabi_ddiv>
 8017460:	9008      	str	r0, [sp, #32]
 8017462:	9109      	str	r1, [sp, #36]	; 0x24
 8017464:	e05c      	b.n	8017520 <_dtoa_r+0x3dc>
 8017466:	2301      	movs	r3, #1
 8017468:	421c      	tst	r4, r3
 801746a:	d00b      	beq.n	8017484 <_dtoa_r+0x340>
 801746c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801746e:	0028      	movs	r0, r5
 8017470:	3301      	adds	r3, #1
 8017472:	9310      	str	r3, [sp, #64]	; 0x40
 8017474:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017476:	0031      	movs	r1, r6
 8017478:	681a      	ldr	r2, [r3, #0]
 801747a:	685b      	ldr	r3, [r3, #4]
 801747c:	f7ea fd96 	bl	8001fac <__aeabi_dmul>
 8017480:	0005      	movs	r5, r0
 8017482:	000e      	movs	r6, r1
 8017484:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017486:	1064      	asrs	r4, r4, #1
 8017488:	3308      	adds	r3, #8
 801748a:	e7e0      	b.n	801744e <_dtoa_r+0x30a>
 801748c:	0801b9c6 	.word	0x0801b9c6
 8017490:	0801b9dd 	.word	0x0801b9dd
 8017494:	7ff00000 	.word	0x7ff00000
 8017498:	0000270f 	.word	0x0000270f
 801749c:	0801b9c2 	.word	0x0801b9c2
 80174a0:	0801b9c5 	.word	0x0801b9c5
 80174a4:	0801b838 	.word	0x0801b838
 80174a8:	0801b839 	.word	0x0801b839
 80174ac:	3ff00000 	.word	0x3ff00000
 80174b0:	fffffc01 	.word	0xfffffc01
 80174b4:	3ff80000 	.word	0x3ff80000
 80174b8:	636f4361 	.word	0x636f4361
 80174bc:	3fd287a7 	.word	0x3fd287a7
 80174c0:	8b60c8b3 	.word	0x8b60c8b3
 80174c4:	3fc68a28 	.word	0x3fc68a28
 80174c8:	509f79fb 	.word	0x509f79fb
 80174cc:	3fd34413 	.word	0x3fd34413
 80174d0:	0801bbb0 	.word	0x0801bbb0
 80174d4:	00000432 	.word	0x00000432
 80174d8:	00000412 	.word	0x00000412
 80174dc:	fe100000 	.word	0xfe100000
 80174e0:	0801ba38 	.word	0x0801ba38
 80174e4:	0801bb88 	.word	0x0801bb88
 80174e8:	2302      	movs	r3, #2
 80174ea:	9310      	str	r3, [sp, #64]	; 0x40
 80174ec:	9b02      	ldr	r3, [sp, #8]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d016      	beq.n	8017520 <_dtoa_r+0x3dc>
 80174f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80174f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80174f6:	425c      	negs	r4, r3
 80174f8:	230f      	movs	r3, #15
 80174fa:	4ab6      	ldr	r2, [pc, #728]	; (80177d4 <_dtoa_r+0x690>)
 80174fc:	4023      	ands	r3, r4
 80174fe:	00db      	lsls	r3, r3, #3
 8017500:	18d3      	adds	r3, r2, r3
 8017502:	681a      	ldr	r2, [r3, #0]
 8017504:	685b      	ldr	r3, [r3, #4]
 8017506:	f7ea fd51 	bl	8001fac <__aeabi_dmul>
 801750a:	2601      	movs	r6, #1
 801750c:	2300      	movs	r3, #0
 801750e:	9008      	str	r0, [sp, #32]
 8017510:	9109      	str	r1, [sp, #36]	; 0x24
 8017512:	4db1      	ldr	r5, [pc, #708]	; (80177d8 <_dtoa_r+0x694>)
 8017514:	1124      	asrs	r4, r4, #4
 8017516:	2c00      	cmp	r4, #0
 8017518:	d000      	beq.n	801751c <_dtoa_r+0x3d8>
 801751a:	e094      	b.n	8017646 <_dtoa_r+0x502>
 801751c:	2b00      	cmp	r3, #0
 801751e:	d19f      	bne.n	8017460 <_dtoa_r+0x31c>
 8017520:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017522:	2b00      	cmp	r3, #0
 8017524:	d100      	bne.n	8017528 <_dtoa_r+0x3e4>
 8017526:	e09b      	b.n	8017660 <_dtoa_r+0x51c>
 8017528:	9c08      	ldr	r4, [sp, #32]
 801752a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801752c:	2200      	movs	r2, #0
 801752e:	0020      	movs	r0, r4
 8017530:	0029      	movs	r1, r5
 8017532:	4baa      	ldr	r3, [pc, #680]	; (80177dc <_dtoa_r+0x698>)
 8017534:	f7e8 ff9a 	bl	800046c <__aeabi_dcmplt>
 8017538:	2800      	cmp	r0, #0
 801753a:	d100      	bne.n	801753e <_dtoa_r+0x3fa>
 801753c:	e090      	b.n	8017660 <_dtoa_r+0x51c>
 801753e:	9b07      	ldr	r3, [sp, #28]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d100      	bne.n	8017546 <_dtoa_r+0x402>
 8017544:	e08c      	b.n	8017660 <_dtoa_r+0x51c>
 8017546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017548:	2b00      	cmp	r3, #0
 801754a:	dd46      	ble.n	80175da <_dtoa_r+0x496>
 801754c:	9b02      	ldr	r3, [sp, #8]
 801754e:	2200      	movs	r2, #0
 8017550:	0020      	movs	r0, r4
 8017552:	0029      	movs	r1, r5
 8017554:	1e5e      	subs	r6, r3, #1
 8017556:	4ba2      	ldr	r3, [pc, #648]	; (80177e0 <_dtoa_r+0x69c>)
 8017558:	f7ea fd28 	bl	8001fac <__aeabi_dmul>
 801755c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801755e:	9008      	str	r0, [sp, #32]
 8017560:	9109      	str	r1, [sp, #36]	; 0x24
 8017562:	3301      	adds	r3, #1
 8017564:	9310      	str	r3, [sp, #64]	; 0x40
 8017566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017568:	9810      	ldr	r0, [sp, #64]	; 0x40
 801756a:	9c08      	ldr	r4, [sp, #32]
 801756c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801756e:	9314      	str	r3, [sp, #80]	; 0x50
 8017570:	f7eb fb6e 	bl	8002c50 <__aeabi_i2d>
 8017574:	0022      	movs	r2, r4
 8017576:	002b      	movs	r3, r5
 8017578:	f7ea fd18 	bl	8001fac <__aeabi_dmul>
 801757c:	2200      	movs	r2, #0
 801757e:	4b99      	ldr	r3, [pc, #612]	; (80177e4 <_dtoa_r+0x6a0>)
 8017580:	f7e9 fdd6 	bl	8001130 <__aeabi_dadd>
 8017584:	9010      	str	r0, [sp, #64]	; 0x40
 8017586:	9111      	str	r1, [sp, #68]	; 0x44
 8017588:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801758a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801758c:	9208      	str	r2, [sp, #32]
 801758e:	9309      	str	r3, [sp, #36]	; 0x24
 8017590:	4a95      	ldr	r2, [pc, #596]	; (80177e8 <_dtoa_r+0x6a4>)
 8017592:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017594:	4694      	mov	ip, r2
 8017596:	4463      	add	r3, ip
 8017598:	9317      	str	r3, [sp, #92]	; 0x5c
 801759a:	9309      	str	r3, [sp, #36]	; 0x24
 801759c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d161      	bne.n	8017666 <_dtoa_r+0x522>
 80175a2:	2200      	movs	r2, #0
 80175a4:	0020      	movs	r0, r4
 80175a6:	0029      	movs	r1, r5
 80175a8:	4b90      	ldr	r3, [pc, #576]	; (80177ec <_dtoa_r+0x6a8>)
 80175aa:	f7ea ff6b 	bl	8002484 <__aeabi_dsub>
 80175ae:	9a08      	ldr	r2, [sp, #32]
 80175b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80175b2:	0004      	movs	r4, r0
 80175b4:	000d      	movs	r5, r1
 80175b6:	f7e8 ff6d 	bl	8000494 <__aeabi_dcmpgt>
 80175ba:	2800      	cmp	r0, #0
 80175bc:	d000      	beq.n	80175c0 <_dtoa_r+0x47c>
 80175be:	e2af      	b.n	8017b20 <_dtoa_r+0x9dc>
 80175c0:	488b      	ldr	r0, [pc, #556]	; (80177f0 <_dtoa_r+0x6ac>)
 80175c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80175c4:	4684      	mov	ip, r0
 80175c6:	4461      	add	r1, ip
 80175c8:	000b      	movs	r3, r1
 80175ca:	0020      	movs	r0, r4
 80175cc:	0029      	movs	r1, r5
 80175ce:	9a08      	ldr	r2, [sp, #32]
 80175d0:	f7e8 ff4c 	bl	800046c <__aeabi_dcmplt>
 80175d4:	2800      	cmp	r0, #0
 80175d6:	d000      	beq.n	80175da <_dtoa_r+0x496>
 80175d8:	e29f      	b.n	8017b1a <_dtoa_r+0x9d6>
 80175da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80175dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80175de:	9308      	str	r3, [sp, #32]
 80175e0:	9409      	str	r4, [sp, #36]	; 0x24
 80175e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	da00      	bge.n	80175ea <_dtoa_r+0x4a6>
 80175e8:	e172      	b.n	80178d0 <_dtoa_r+0x78c>
 80175ea:	9a02      	ldr	r2, [sp, #8]
 80175ec:	2a0e      	cmp	r2, #14
 80175ee:	dd00      	ble.n	80175f2 <_dtoa_r+0x4ae>
 80175f0:	e16e      	b.n	80178d0 <_dtoa_r+0x78c>
 80175f2:	4b78      	ldr	r3, [pc, #480]	; (80177d4 <_dtoa_r+0x690>)
 80175f4:	00d2      	lsls	r2, r2, #3
 80175f6:	189b      	adds	r3, r3, r2
 80175f8:	685c      	ldr	r4, [r3, #4]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	930a      	str	r3, [sp, #40]	; 0x28
 80175fe:	940b      	str	r4, [sp, #44]	; 0x2c
 8017600:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017602:	2b00      	cmp	r3, #0
 8017604:	db00      	blt.n	8017608 <_dtoa_r+0x4c4>
 8017606:	e0f7      	b.n	80177f8 <_dtoa_r+0x6b4>
 8017608:	9b07      	ldr	r3, [sp, #28]
 801760a:	2b00      	cmp	r3, #0
 801760c:	dd00      	ble.n	8017610 <_dtoa_r+0x4cc>
 801760e:	e0f3      	b.n	80177f8 <_dtoa_r+0x6b4>
 8017610:	d000      	beq.n	8017614 <_dtoa_r+0x4d0>
 8017612:	e282      	b.n	8017b1a <_dtoa_r+0x9d6>
 8017614:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017616:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017618:	2200      	movs	r2, #0
 801761a:	4b74      	ldr	r3, [pc, #464]	; (80177ec <_dtoa_r+0x6a8>)
 801761c:	f7ea fcc6 	bl	8001fac <__aeabi_dmul>
 8017620:	9a08      	ldr	r2, [sp, #32]
 8017622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017624:	f7e8 ff40 	bl	80004a8 <__aeabi_dcmpge>
 8017628:	9e07      	ldr	r6, [sp, #28]
 801762a:	0035      	movs	r5, r6
 801762c:	2800      	cmp	r0, #0
 801762e:	d000      	beq.n	8017632 <_dtoa_r+0x4ee>
 8017630:	e259      	b.n	8017ae6 <_dtoa_r+0x9a2>
 8017632:	9b06      	ldr	r3, [sp, #24]
 8017634:	9a06      	ldr	r2, [sp, #24]
 8017636:	3301      	adds	r3, #1
 8017638:	9308      	str	r3, [sp, #32]
 801763a:	2331      	movs	r3, #49	; 0x31
 801763c:	7013      	strb	r3, [r2, #0]
 801763e:	9b02      	ldr	r3, [sp, #8]
 8017640:	3301      	adds	r3, #1
 8017642:	9302      	str	r3, [sp, #8]
 8017644:	e254      	b.n	8017af0 <_dtoa_r+0x9ac>
 8017646:	4234      	tst	r4, r6
 8017648:	d007      	beq.n	801765a <_dtoa_r+0x516>
 801764a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801764c:	3301      	adds	r3, #1
 801764e:	9310      	str	r3, [sp, #64]	; 0x40
 8017650:	682a      	ldr	r2, [r5, #0]
 8017652:	686b      	ldr	r3, [r5, #4]
 8017654:	f7ea fcaa 	bl	8001fac <__aeabi_dmul>
 8017658:	0033      	movs	r3, r6
 801765a:	1064      	asrs	r4, r4, #1
 801765c:	3508      	adds	r5, #8
 801765e:	e75a      	b.n	8017516 <_dtoa_r+0x3d2>
 8017660:	9e02      	ldr	r6, [sp, #8]
 8017662:	9b07      	ldr	r3, [sp, #28]
 8017664:	e780      	b.n	8017568 <_dtoa_r+0x424>
 8017666:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017668:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801766a:	1e5a      	subs	r2, r3, #1
 801766c:	4b59      	ldr	r3, [pc, #356]	; (80177d4 <_dtoa_r+0x690>)
 801766e:	00d2      	lsls	r2, r2, #3
 8017670:	189b      	adds	r3, r3, r2
 8017672:	681a      	ldr	r2, [r3, #0]
 8017674:	685b      	ldr	r3, [r3, #4]
 8017676:	2900      	cmp	r1, #0
 8017678:	d051      	beq.n	801771e <_dtoa_r+0x5da>
 801767a:	2000      	movs	r0, #0
 801767c:	495d      	ldr	r1, [pc, #372]	; (80177f4 <_dtoa_r+0x6b0>)
 801767e:	f7ea f893 	bl	80017a8 <__aeabi_ddiv>
 8017682:	9a08      	ldr	r2, [sp, #32]
 8017684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017686:	f7ea fefd 	bl	8002484 <__aeabi_dsub>
 801768a:	9a06      	ldr	r2, [sp, #24]
 801768c:	9b06      	ldr	r3, [sp, #24]
 801768e:	4694      	mov	ip, r2
 8017690:	9317      	str	r3, [sp, #92]	; 0x5c
 8017692:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017694:	9010      	str	r0, [sp, #64]	; 0x40
 8017696:	9111      	str	r1, [sp, #68]	; 0x44
 8017698:	4463      	add	r3, ip
 801769a:	9319      	str	r3, [sp, #100]	; 0x64
 801769c:	0029      	movs	r1, r5
 801769e:	0020      	movs	r0, r4
 80176a0:	f7eb faa0 	bl	8002be4 <__aeabi_d2iz>
 80176a4:	9014      	str	r0, [sp, #80]	; 0x50
 80176a6:	f7eb fad3 	bl	8002c50 <__aeabi_i2d>
 80176aa:	0002      	movs	r2, r0
 80176ac:	000b      	movs	r3, r1
 80176ae:	0020      	movs	r0, r4
 80176b0:	0029      	movs	r1, r5
 80176b2:	f7ea fee7 	bl	8002484 <__aeabi_dsub>
 80176b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80176b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80176ba:	3301      	adds	r3, #1
 80176bc:	9308      	str	r3, [sp, #32]
 80176be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176c0:	0004      	movs	r4, r0
 80176c2:	3330      	adds	r3, #48	; 0x30
 80176c4:	7013      	strb	r3, [r2, #0]
 80176c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80176c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80176ca:	000d      	movs	r5, r1
 80176cc:	f7e8 fece 	bl	800046c <__aeabi_dcmplt>
 80176d0:	2800      	cmp	r0, #0
 80176d2:	d175      	bne.n	80177c0 <_dtoa_r+0x67c>
 80176d4:	0022      	movs	r2, r4
 80176d6:	002b      	movs	r3, r5
 80176d8:	2000      	movs	r0, #0
 80176da:	4940      	ldr	r1, [pc, #256]	; (80177dc <_dtoa_r+0x698>)
 80176dc:	f7ea fed2 	bl	8002484 <__aeabi_dsub>
 80176e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80176e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80176e4:	f7e8 fec2 	bl	800046c <__aeabi_dcmplt>
 80176e8:	2800      	cmp	r0, #0
 80176ea:	d000      	beq.n	80176ee <_dtoa_r+0x5aa>
 80176ec:	e0d2      	b.n	8017894 <_dtoa_r+0x750>
 80176ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80176f0:	9a08      	ldr	r2, [sp, #32]
 80176f2:	4293      	cmp	r3, r2
 80176f4:	d100      	bne.n	80176f8 <_dtoa_r+0x5b4>
 80176f6:	e770      	b.n	80175da <_dtoa_r+0x496>
 80176f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80176fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80176fc:	2200      	movs	r2, #0
 80176fe:	4b38      	ldr	r3, [pc, #224]	; (80177e0 <_dtoa_r+0x69c>)
 8017700:	f7ea fc54 	bl	8001fac <__aeabi_dmul>
 8017704:	4b36      	ldr	r3, [pc, #216]	; (80177e0 <_dtoa_r+0x69c>)
 8017706:	9010      	str	r0, [sp, #64]	; 0x40
 8017708:	9111      	str	r1, [sp, #68]	; 0x44
 801770a:	2200      	movs	r2, #0
 801770c:	0020      	movs	r0, r4
 801770e:	0029      	movs	r1, r5
 8017710:	f7ea fc4c 	bl	8001fac <__aeabi_dmul>
 8017714:	9b08      	ldr	r3, [sp, #32]
 8017716:	0004      	movs	r4, r0
 8017718:	000d      	movs	r5, r1
 801771a:	9317      	str	r3, [sp, #92]	; 0x5c
 801771c:	e7be      	b.n	801769c <_dtoa_r+0x558>
 801771e:	9808      	ldr	r0, [sp, #32]
 8017720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017722:	f7ea fc43 	bl	8001fac <__aeabi_dmul>
 8017726:	9a06      	ldr	r2, [sp, #24]
 8017728:	9b06      	ldr	r3, [sp, #24]
 801772a:	4694      	mov	ip, r2
 801772c:	9308      	str	r3, [sp, #32]
 801772e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017730:	9010      	str	r0, [sp, #64]	; 0x40
 8017732:	9111      	str	r1, [sp, #68]	; 0x44
 8017734:	4463      	add	r3, ip
 8017736:	9319      	str	r3, [sp, #100]	; 0x64
 8017738:	0029      	movs	r1, r5
 801773a:	0020      	movs	r0, r4
 801773c:	f7eb fa52 	bl	8002be4 <__aeabi_d2iz>
 8017740:	9017      	str	r0, [sp, #92]	; 0x5c
 8017742:	f7eb fa85 	bl	8002c50 <__aeabi_i2d>
 8017746:	0002      	movs	r2, r0
 8017748:	000b      	movs	r3, r1
 801774a:	0020      	movs	r0, r4
 801774c:	0029      	movs	r1, r5
 801774e:	f7ea fe99 	bl	8002484 <__aeabi_dsub>
 8017752:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017754:	9a08      	ldr	r2, [sp, #32]
 8017756:	3330      	adds	r3, #48	; 0x30
 8017758:	7013      	strb	r3, [r2, #0]
 801775a:	0013      	movs	r3, r2
 801775c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801775e:	3301      	adds	r3, #1
 8017760:	0004      	movs	r4, r0
 8017762:	000d      	movs	r5, r1
 8017764:	9308      	str	r3, [sp, #32]
 8017766:	4293      	cmp	r3, r2
 8017768:	d12c      	bne.n	80177c4 <_dtoa_r+0x680>
 801776a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801776c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801776e:	9a06      	ldr	r2, [sp, #24]
 8017770:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017772:	4694      	mov	ip, r2
 8017774:	4463      	add	r3, ip
 8017776:	2200      	movs	r2, #0
 8017778:	9308      	str	r3, [sp, #32]
 801777a:	4b1e      	ldr	r3, [pc, #120]	; (80177f4 <_dtoa_r+0x6b0>)
 801777c:	f7e9 fcd8 	bl	8001130 <__aeabi_dadd>
 8017780:	0002      	movs	r2, r0
 8017782:	000b      	movs	r3, r1
 8017784:	0020      	movs	r0, r4
 8017786:	0029      	movs	r1, r5
 8017788:	f7e8 fe84 	bl	8000494 <__aeabi_dcmpgt>
 801778c:	2800      	cmp	r0, #0
 801778e:	d000      	beq.n	8017792 <_dtoa_r+0x64e>
 8017790:	e080      	b.n	8017894 <_dtoa_r+0x750>
 8017792:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017794:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017796:	2000      	movs	r0, #0
 8017798:	4916      	ldr	r1, [pc, #88]	; (80177f4 <_dtoa_r+0x6b0>)
 801779a:	f7ea fe73 	bl	8002484 <__aeabi_dsub>
 801779e:	0002      	movs	r2, r0
 80177a0:	000b      	movs	r3, r1
 80177a2:	0020      	movs	r0, r4
 80177a4:	0029      	movs	r1, r5
 80177a6:	f7e8 fe61 	bl	800046c <__aeabi_dcmplt>
 80177aa:	2800      	cmp	r0, #0
 80177ac:	d100      	bne.n	80177b0 <_dtoa_r+0x66c>
 80177ae:	e714      	b.n	80175da <_dtoa_r+0x496>
 80177b0:	9b08      	ldr	r3, [sp, #32]
 80177b2:	001a      	movs	r2, r3
 80177b4:	3a01      	subs	r2, #1
 80177b6:	9208      	str	r2, [sp, #32]
 80177b8:	7812      	ldrb	r2, [r2, #0]
 80177ba:	2a30      	cmp	r2, #48	; 0x30
 80177bc:	d0f8      	beq.n	80177b0 <_dtoa_r+0x66c>
 80177be:	9308      	str	r3, [sp, #32]
 80177c0:	9602      	str	r6, [sp, #8]
 80177c2:	e055      	b.n	8017870 <_dtoa_r+0x72c>
 80177c4:	2200      	movs	r2, #0
 80177c6:	4b06      	ldr	r3, [pc, #24]	; (80177e0 <_dtoa_r+0x69c>)
 80177c8:	f7ea fbf0 	bl	8001fac <__aeabi_dmul>
 80177cc:	0004      	movs	r4, r0
 80177ce:	000d      	movs	r5, r1
 80177d0:	e7b2      	b.n	8017738 <_dtoa_r+0x5f4>
 80177d2:	46c0      	nop			; (mov r8, r8)
 80177d4:	0801bbb0 	.word	0x0801bbb0
 80177d8:	0801bb88 	.word	0x0801bb88
 80177dc:	3ff00000 	.word	0x3ff00000
 80177e0:	40240000 	.word	0x40240000
 80177e4:	401c0000 	.word	0x401c0000
 80177e8:	fcc00000 	.word	0xfcc00000
 80177ec:	40140000 	.word	0x40140000
 80177f0:	7cc00000 	.word	0x7cc00000
 80177f4:	3fe00000 	.word	0x3fe00000
 80177f8:	9b07      	ldr	r3, [sp, #28]
 80177fa:	9e06      	ldr	r6, [sp, #24]
 80177fc:	3b01      	subs	r3, #1
 80177fe:	199b      	adds	r3, r3, r6
 8017800:	930c      	str	r3, [sp, #48]	; 0x30
 8017802:	9c08      	ldr	r4, [sp, #32]
 8017804:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801780a:	0020      	movs	r0, r4
 801780c:	0029      	movs	r1, r5
 801780e:	f7e9 ffcb 	bl	80017a8 <__aeabi_ddiv>
 8017812:	f7eb f9e7 	bl	8002be4 <__aeabi_d2iz>
 8017816:	9007      	str	r0, [sp, #28]
 8017818:	f7eb fa1a 	bl	8002c50 <__aeabi_i2d>
 801781c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801781e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017820:	f7ea fbc4 	bl	8001fac <__aeabi_dmul>
 8017824:	0002      	movs	r2, r0
 8017826:	000b      	movs	r3, r1
 8017828:	0020      	movs	r0, r4
 801782a:	0029      	movs	r1, r5
 801782c:	f7ea fe2a 	bl	8002484 <__aeabi_dsub>
 8017830:	0033      	movs	r3, r6
 8017832:	9a07      	ldr	r2, [sp, #28]
 8017834:	3601      	adds	r6, #1
 8017836:	3230      	adds	r2, #48	; 0x30
 8017838:	701a      	strb	r2, [r3, #0]
 801783a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801783c:	9608      	str	r6, [sp, #32]
 801783e:	429a      	cmp	r2, r3
 8017840:	d139      	bne.n	80178b6 <_dtoa_r+0x772>
 8017842:	0002      	movs	r2, r0
 8017844:	000b      	movs	r3, r1
 8017846:	f7e9 fc73 	bl	8001130 <__aeabi_dadd>
 801784a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801784c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801784e:	0004      	movs	r4, r0
 8017850:	000d      	movs	r5, r1
 8017852:	f7e8 fe1f 	bl	8000494 <__aeabi_dcmpgt>
 8017856:	2800      	cmp	r0, #0
 8017858:	d11b      	bne.n	8017892 <_dtoa_r+0x74e>
 801785a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801785c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801785e:	0020      	movs	r0, r4
 8017860:	0029      	movs	r1, r5
 8017862:	f7e8 fdfd 	bl	8000460 <__aeabi_dcmpeq>
 8017866:	2800      	cmp	r0, #0
 8017868:	d002      	beq.n	8017870 <_dtoa_r+0x72c>
 801786a:	9b07      	ldr	r3, [sp, #28]
 801786c:	07db      	lsls	r3, r3, #31
 801786e:	d410      	bmi.n	8017892 <_dtoa_r+0x74e>
 8017870:	0038      	movs	r0, r7
 8017872:	9905      	ldr	r1, [sp, #20]
 8017874:	f001 f8a8 	bl	80189c8 <_Bfree>
 8017878:	2300      	movs	r3, #0
 801787a:	9a08      	ldr	r2, [sp, #32]
 801787c:	9802      	ldr	r0, [sp, #8]
 801787e:	7013      	strb	r3, [r2, #0]
 8017880:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017882:	3001      	adds	r0, #1
 8017884:	6018      	str	r0, [r3, #0]
 8017886:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017888:	2b00      	cmp	r3, #0
 801788a:	d100      	bne.n	801788e <_dtoa_r+0x74a>
 801788c:	e4a6      	b.n	80171dc <_dtoa_r+0x98>
 801788e:	601a      	str	r2, [r3, #0]
 8017890:	e4a4      	b.n	80171dc <_dtoa_r+0x98>
 8017892:	9e02      	ldr	r6, [sp, #8]
 8017894:	9b08      	ldr	r3, [sp, #32]
 8017896:	9308      	str	r3, [sp, #32]
 8017898:	3b01      	subs	r3, #1
 801789a:	781a      	ldrb	r2, [r3, #0]
 801789c:	2a39      	cmp	r2, #57	; 0x39
 801789e:	d106      	bne.n	80178ae <_dtoa_r+0x76a>
 80178a0:	9a06      	ldr	r2, [sp, #24]
 80178a2:	429a      	cmp	r2, r3
 80178a4:	d1f7      	bne.n	8017896 <_dtoa_r+0x752>
 80178a6:	2230      	movs	r2, #48	; 0x30
 80178a8:	9906      	ldr	r1, [sp, #24]
 80178aa:	3601      	adds	r6, #1
 80178ac:	700a      	strb	r2, [r1, #0]
 80178ae:	781a      	ldrb	r2, [r3, #0]
 80178b0:	3201      	adds	r2, #1
 80178b2:	701a      	strb	r2, [r3, #0]
 80178b4:	e784      	b.n	80177c0 <_dtoa_r+0x67c>
 80178b6:	2200      	movs	r2, #0
 80178b8:	4baa      	ldr	r3, [pc, #680]	; (8017b64 <_dtoa_r+0xa20>)
 80178ba:	f7ea fb77 	bl	8001fac <__aeabi_dmul>
 80178be:	2200      	movs	r2, #0
 80178c0:	2300      	movs	r3, #0
 80178c2:	0004      	movs	r4, r0
 80178c4:	000d      	movs	r5, r1
 80178c6:	f7e8 fdcb 	bl	8000460 <__aeabi_dcmpeq>
 80178ca:	2800      	cmp	r0, #0
 80178cc:	d09b      	beq.n	8017806 <_dtoa_r+0x6c2>
 80178ce:	e7cf      	b.n	8017870 <_dtoa_r+0x72c>
 80178d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80178d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80178d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80178d6:	2d00      	cmp	r5, #0
 80178d8:	d012      	beq.n	8017900 <_dtoa_r+0x7bc>
 80178da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80178dc:	2a01      	cmp	r2, #1
 80178de:	dc66      	bgt.n	80179ae <_dtoa_r+0x86a>
 80178e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80178e2:	2a00      	cmp	r2, #0
 80178e4:	d05d      	beq.n	80179a2 <_dtoa_r+0x85e>
 80178e6:	4aa0      	ldr	r2, [pc, #640]	; (8017b68 <_dtoa_r+0xa24>)
 80178e8:	189b      	adds	r3, r3, r2
 80178ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80178ec:	2101      	movs	r1, #1
 80178ee:	18d2      	adds	r2, r2, r3
 80178f0:	920a      	str	r2, [sp, #40]	; 0x28
 80178f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80178f4:	0038      	movs	r0, r7
 80178f6:	18d3      	adds	r3, r2, r3
 80178f8:	930d      	str	r3, [sp, #52]	; 0x34
 80178fa:	f001 f961 	bl	8018bc0 <__i2b>
 80178fe:	0005      	movs	r5, r0
 8017900:	2c00      	cmp	r4, #0
 8017902:	dd0e      	ble.n	8017922 <_dtoa_r+0x7de>
 8017904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017906:	2b00      	cmp	r3, #0
 8017908:	dd0b      	ble.n	8017922 <_dtoa_r+0x7de>
 801790a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801790c:	0023      	movs	r3, r4
 801790e:	4294      	cmp	r4, r2
 8017910:	dd00      	ble.n	8017914 <_dtoa_r+0x7d0>
 8017912:	0013      	movs	r3, r2
 8017914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017916:	1ae4      	subs	r4, r4, r3
 8017918:	1ad2      	subs	r2, r2, r3
 801791a:	920a      	str	r2, [sp, #40]	; 0x28
 801791c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801791e:	1ad3      	subs	r3, r2, r3
 8017920:	930d      	str	r3, [sp, #52]	; 0x34
 8017922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017924:	2b00      	cmp	r3, #0
 8017926:	d01f      	beq.n	8017968 <_dtoa_r+0x824>
 8017928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801792a:	2b00      	cmp	r3, #0
 801792c:	d054      	beq.n	80179d8 <_dtoa_r+0x894>
 801792e:	2e00      	cmp	r6, #0
 8017930:	dd11      	ble.n	8017956 <_dtoa_r+0x812>
 8017932:	0029      	movs	r1, r5
 8017934:	0032      	movs	r2, r6
 8017936:	0038      	movs	r0, r7
 8017938:	f001 fa08 	bl	8018d4c <__pow5mult>
 801793c:	9a05      	ldr	r2, [sp, #20]
 801793e:	0001      	movs	r1, r0
 8017940:	0005      	movs	r5, r0
 8017942:	0038      	movs	r0, r7
 8017944:	f001 f952 	bl	8018bec <__multiply>
 8017948:	9905      	ldr	r1, [sp, #20]
 801794a:	9014      	str	r0, [sp, #80]	; 0x50
 801794c:	0038      	movs	r0, r7
 801794e:	f001 f83b 	bl	80189c8 <_Bfree>
 8017952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017954:	9305      	str	r3, [sp, #20]
 8017956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017958:	1b9a      	subs	r2, r3, r6
 801795a:	42b3      	cmp	r3, r6
 801795c:	d004      	beq.n	8017968 <_dtoa_r+0x824>
 801795e:	0038      	movs	r0, r7
 8017960:	9905      	ldr	r1, [sp, #20]
 8017962:	f001 f9f3 	bl	8018d4c <__pow5mult>
 8017966:	9005      	str	r0, [sp, #20]
 8017968:	2101      	movs	r1, #1
 801796a:	0038      	movs	r0, r7
 801796c:	f001 f928 	bl	8018bc0 <__i2b>
 8017970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017972:	0006      	movs	r6, r0
 8017974:	2b00      	cmp	r3, #0
 8017976:	dd31      	ble.n	80179dc <_dtoa_r+0x898>
 8017978:	001a      	movs	r2, r3
 801797a:	0001      	movs	r1, r0
 801797c:	0038      	movs	r0, r7
 801797e:	f001 f9e5 	bl	8018d4c <__pow5mult>
 8017982:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017984:	0006      	movs	r6, r0
 8017986:	2b01      	cmp	r3, #1
 8017988:	dd2d      	ble.n	80179e6 <_dtoa_r+0x8a2>
 801798a:	2300      	movs	r3, #0
 801798c:	930e      	str	r3, [sp, #56]	; 0x38
 801798e:	6933      	ldr	r3, [r6, #16]
 8017990:	3303      	adds	r3, #3
 8017992:	009b      	lsls	r3, r3, #2
 8017994:	18f3      	adds	r3, r6, r3
 8017996:	6858      	ldr	r0, [r3, #4]
 8017998:	f001 f8ca 	bl	8018b30 <__hi0bits>
 801799c:	2320      	movs	r3, #32
 801799e:	1a18      	subs	r0, r3, r0
 80179a0:	e039      	b.n	8017a16 <_dtoa_r+0x8d2>
 80179a2:	2336      	movs	r3, #54	; 0x36
 80179a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80179a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80179a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80179aa:	1a9b      	subs	r3, r3, r2
 80179ac:	e79d      	b.n	80178ea <_dtoa_r+0x7a6>
 80179ae:	9b07      	ldr	r3, [sp, #28]
 80179b0:	1e5e      	subs	r6, r3, #1
 80179b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179b4:	42b3      	cmp	r3, r6
 80179b6:	db07      	blt.n	80179c8 <_dtoa_r+0x884>
 80179b8:	1b9e      	subs	r6, r3, r6
 80179ba:	9b07      	ldr	r3, [sp, #28]
 80179bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80179be:	2b00      	cmp	r3, #0
 80179c0:	da93      	bge.n	80178ea <_dtoa_r+0x7a6>
 80179c2:	1ae4      	subs	r4, r4, r3
 80179c4:	2300      	movs	r3, #0
 80179c6:	e790      	b.n	80178ea <_dtoa_r+0x7a6>
 80179c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80179cc:	1af3      	subs	r3, r6, r3
 80179ce:	18d3      	adds	r3, r2, r3
 80179d0:	960e      	str	r6, [sp, #56]	; 0x38
 80179d2:	9315      	str	r3, [sp, #84]	; 0x54
 80179d4:	2600      	movs	r6, #0
 80179d6:	e7f0      	b.n	80179ba <_dtoa_r+0x876>
 80179d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179da:	e7c0      	b.n	801795e <_dtoa_r+0x81a>
 80179dc:	2300      	movs	r3, #0
 80179de:	930e      	str	r3, [sp, #56]	; 0x38
 80179e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80179e2:	2b01      	cmp	r3, #1
 80179e4:	dc13      	bgt.n	8017a0e <_dtoa_r+0x8ca>
 80179e6:	2300      	movs	r3, #0
 80179e8:	930e      	str	r3, [sp, #56]	; 0x38
 80179ea:	9b08      	ldr	r3, [sp, #32]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d10e      	bne.n	8017a0e <_dtoa_r+0x8ca>
 80179f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179f2:	031b      	lsls	r3, r3, #12
 80179f4:	d10b      	bne.n	8017a0e <_dtoa_r+0x8ca>
 80179f6:	4b5d      	ldr	r3, [pc, #372]	; (8017b6c <_dtoa_r+0xa28>)
 80179f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179fa:	4213      	tst	r3, r2
 80179fc:	d007      	beq.n	8017a0e <_dtoa_r+0x8ca>
 80179fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a00:	3301      	adds	r3, #1
 8017a02:	930a      	str	r3, [sp, #40]	; 0x28
 8017a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a06:	3301      	adds	r3, #1
 8017a08:	930d      	str	r3, [sp, #52]	; 0x34
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	930e      	str	r3, [sp, #56]	; 0x38
 8017a0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a10:	2001      	movs	r0, #1
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d1bb      	bne.n	801798e <_dtoa_r+0x84a>
 8017a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a18:	221f      	movs	r2, #31
 8017a1a:	1818      	adds	r0, r3, r0
 8017a1c:	0003      	movs	r3, r0
 8017a1e:	4013      	ands	r3, r2
 8017a20:	4210      	tst	r0, r2
 8017a22:	d046      	beq.n	8017ab2 <_dtoa_r+0x96e>
 8017a24:	3201      	adds	r2, #1
 8017a26:	1ad2      	subs	r2, r2, r3
 8017a28:	2a04      	cmp	r2, #4
 8017a2a:	dd3f      	ble.n	8017aac <_dtoa_r+0x968>
 8017a2c:	221c      	movs	r2, #28
 8017a2e:	1ad3      	subs	r3, r2, r3
 8017a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a32:	18e4      	adds	r4, r4, r3
 8017a34:	18d2      	adds	r2, r2, r3
 8017a36:	920a      	str	r2, [sp, #40]	; 0x28
 8017a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017a3a:	18d3      	adds	r3, r2, r3
 8017a3c:	930d      	str	r3, [sp, #52]	; 0x34
 8017a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	dd05      	ble.n	8017a50 <_dtoa_r+0x90c>
 8017a44:	001a      	movs	r2, r3
 8017a46:	0038      	movs	r0, r7
 8017a48:	9905      	ldr	r1, [sp, #20]
 8017a4a:	f001 f9db 	bl	8018e04 <__lshift>
 8017a4e:	9005      	str	r0, [sp, #20]
 8017a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	dd05      	ble.n	8017a62 <_dtoa_r+0x91e>
 8017a56:	0031      	movs	r1, r6
 8017a58:	001a      	movs	r2, r3
 8017a5a:	0038      	movs	r0, r7
 8017a5c:	f001 f9d2 	bl	8018e04 <__lshift>
 8017a60:	0006      	movs	r6, r0
 8017a62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d026      	beq.n	8017ab6 <_dtoa_r+0x972>
 8017a68:	0031      	movs	r1, r6
 8017a6a:	9805      	ldr	r0, [sp, #20]
 8017a6c:	f001 fa38 	bl	8018ee0 <__mcmp>
 8017a70:	2800      	cmp	r0, #0
 8017a72:	da20      	bge.n	8017ab6 <_dtoa_r+0x972>
 8017a74:	9b02      	ldr	r3, [sp, #8]
 8017a76:	220a      	movs	r2, #10
 8017a78:	3b01      	subs	r3, #1
 8017a7a:	9302      	str	r3, [sp, #8]
 8017a7c:	0038      	movs	r0, r7
 8017a7e:	2300      	movs	r3, #0
 8017a80:	9905      	ldr	r1, [sp, #20]
 8017a82:	f000 ffc5 	bl	8018a10 <__multadd>
 8017a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a88:	9005      	str	r0, [sp, #20]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d100      	bne.n	8017a90 <_dtoa_r+0x94c>
 8017a8e:	e166      	b.n	8017d5e <_dtoa_r+0xc1a>
 8017a90:	2300      	movs	r3, #0
 8017a92:	0029      	movs	r1, r5
 8017a94:	220a      	movs	r2, #10
 8017a96:	0038      	movs	r0, r7
 8017a98:	f000 ffba 	bl	8018a10 <__multadd>
 8017a9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a9e:	0005      	movs	r5, r0
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	dc47      	bgt.n	8017b34 <_dtoa_r+0x9f0>
 8017aa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017aa6:	2b02      	cmp	r3, #2
 8017aa8:	dc0d      	bgt.n	8017ac6 <_dtoa_r+0x982>
 8017aaa:	e043      	b.n	8017b34 <_dtoa_r+0x9f0>
 8017aac:	2a04      	cmp	r2, #4
 8017aae:	d0c6      	beq.n	8017a3e <_dtoa_r+0x8fa>
 8017ab0:	0013      	movs	r3, r2
 8017ab2:	331c      	adds	r3, #28
 8017ab4:	e7bc      	b.n	8017a30 <_dtoa_r+0x8ec>
 8017ab6:	9b07      	ldr	r3, [sp, #28]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	dc35      	bgt.n	8017b28 <_dtoa_r+0x9e4>
 8017abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017abe:	2b02      	cmp	r3, #2
 8017ac0:	dd32      	ble.n	8017b28 <_dtoa_r+0x9e4>
 8017ac2:	9b07      	ldr	r3, [sp, #28]
 8017ac4:	930c      	str	r3, [sp, #48]	; 0x30
 8017ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d10c      	bne.n	8017ae6 <_dtoa_r+0x9a2>
 8017acc:	0031      	movs	r1, r6
 8017ace:	2205      	movs	r2, #5
 8017ad0:	0038      	movs	r0, r7
 8017ad2:	f000 ff9d 	bl	8018a10 <__multadd>
 8017ad6:	0006      	movs	r6, r0
 8017ad8:	0001      	movs	r1, r0
 8017ada:	9805      	ldr	r0, [sp, #20]
 8017adc:	f001 fa00 	bl	8018ee0 <__mcmp>
 8017ae0:	2800      	cmp	r0, #0
 8017ae2:	dd00      	ble.n	8017ae6 <_dtoa_r+0x9a2>
 8017ae4:	e5a5      	b.n	8017632 <_dtoa_r+0x4ee>
 8017ae6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017ae8:	43db      	mvns	r3, r3
 8017aea:	9302      	str	r3, [sp, #8]
 8017aec:	9b06      	ldr	r3, [sp, #24]
 8017aee:	9308      	str	r3, [sp, #32]
 8017af0:	2400      	movs	r4, #0
 8017af2:	0031      	movs	r1, r6
 8017af4:	0038      	movs	r0, r7
 8017af6:	f000 ff67 	bl	80189c8 <_Bfree>
 8017afa:	2d00      	cmp	r5, #0
 8017afc:	d100      	bne.n	8017b00 <_dtoa_r+0x9bc>
 8017afe:	e6b7      	b.n	8017870 <_dtoa_r+0x72c>
 8017b00:	2c00      	cmp	r4, #0
 8017b02:	d005      	beq.n	8017b10 <_dtoa_r+0x9cc>
 8017b04:	42ac      	cmp	r4, r5
 8017b06:	d003      	beq.n	8017b10 <_dtoa_r+0x9cc>
 8017b08:	0021      	movs	r1, r4
 8017b0a:	0038      	movs	r0, r7
 8017b0c:	f000 ff5c 	bl	80189c8 <_Bfree>
 8017b10:	0029      	movs	r1, r5
 8017b12:	0038      	movs	r0, r7
 8017b14:	f000 ff58 	bl	80189c8 <_Bfree>
 8017b18:	e6aa      	b.n	8017870 <_dtoa_r+0x72c>
 8017b1a:	2600      	movs	r6, #0
 8017b1c:	0035      	movs	r5, r6
 8017b1e:	e7e2      	b.n	8017ae6 <_dtoa_r+0x9a2>
 8017b20:	9602      	str	r6, [sp, #8]
 8017b22:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8017b24:	0035      	movs	r5, r6
 8017b26:	e584      	b.n	8017632 <_dtoa_r+0x4ee>
 8017b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d100      	bne.n	8017b30 <_dtoa_r+0x9ec>
 8017b2e:	e0ce      	b.n	8017cce <_dtoa_r+0xb8a>
 8017b30:	9b07      	ldr	r3, [sp, #28]
 8017b32:	930c      	str	r3, [sp, #48]	; 0x30
 8017b34:	2c00      	cmp	r4, #0
 8017b36:	dd05      	ble.n	8017b44 <_dtoa_r+0xa00>
 8017b38:	0029      	movs	r1, r5
 8017b3a:	0022      	movs	r2, r4
 8017b3c:	0038      	movs	r0, r7
 8017b3e:	f001 f961 	bl	8018e04 <__lshift>
 8017b42:	0005      	movs	r5, r0
 8017b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b46:	0028      	movs	r0, r5
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d022      	beq.n	8017b92 <_dtoa_r+0xa4e>
 8017b4c:	0038      	movs	r0, r7
 8017b4e:	6869      	ldr	r1, [r5, #4]
 8017b50:	f000 fef6 	bl	8018940 <_Balloc>
 8017b54:	1e04      	subs	r4, r0, #0
 8017b56:	d10f      	bne.n	8017b78 <_dtoa_r+0xa34>
 8017b58:	0002      	movs	r2, r0
 8017b5a:	4b05      	ldr	r3, [pc, #20]	; (8017b70 <_dtoa_r+0xa2c>)
 8017b5c:	4905      	ldr	r1, [pc, #20]	; (8017b74 <_dtoa_r+0xa30>)
 8017b5e:	f7ff fb06 	bl	801716e <_dtoa_r+0x2a>
 8017b62:	46c0      	nop			; (mov r8, r8)
 8017b64:	40240000 	.word	0x40240000
 8017b68:	00000433 	.word	0x00000433
 8017b6c:	7ff00000 	.word	0x7ff00000
 8017b70:	0801ba38 	.word	0x0801ba38
 8017b74:	000002ea 	.word	0x000002ea
 8017b78:	0029      	movs	r1, r5
 8017b7a:	692b      	ldr	r3, [r5, #16]
 8017b7c:	310c      	adds	r1, #12
 8017b7e:	1c9a      	adds	r2, r3, #2
 8017b80:	0092      	lsls	r2, r2, #2
 8017b82:	300c      	adds	r0, #12
 8017b84:	f7fd f984 	bl	8014e90 <memcpy>
 8017b88:	2201      	movs	r2, #1
 8017b8a:	0021      	movs	r1, r4
 8017b8c:	0038      	movs	r0, r7
 8017b8e:	f001 f939 	bl	8018e04 <__lshift>
 8017b92:	9b06      	ldr	r3, [sp, #24]
 8017b94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b96:	930a      	str	r3, [sp, #40]	; 0x28
 8017b98:	3b01      	subs	r3, #1
 8017b9a:	189b      	adds	r3, r3, r2
 8017b9c:	2201      	movs	r2, #1
 8017b9e:	002c      	movs	r4, r5
 8017ba0:	0005      	movs	r5, r0
 8017ba2:	9314      	str	r3, [sp, #80]	; 0x50
 8017ba4:	9b08      	ldr	r3, [sp, #32]
 8017ba6:	4013      	ands	r3, r2
 8017ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8017baa:	0031      	movs	r1, r6
 8017bac:	9805      	ldr	r0, [sp, #20]
 8017bae:	f7ff fa3d 	bl	801702c <quorem>
 8017bb2:	0003      	movs	r3, r0
 8017bb4:	0021      	movs	r1, r4
 8017bb6:	3330      	adds	r3, #48	; 0x30
 8017bb8:	900d      	str	r0, [sp, #52]	; 0x34
 8017bba:	9805      	ldr	r0, [sp, #20]
 8017bbc:	9307      	str	r3, [sp, #28]
 8017bbe:	f001 f98f 	bl	8018ee0 <__mcmp>
 8017bc2:	002a      	movs	r2, r5
 8017bc4:	900e      	str	r0, [sp, #56]	; 0x38
 8017bc6:	0031      	movs	r1, r6
 8017bc8:	0038      	movs	r0, r7
 8017bca:	f001 f9a5 	bl	8018f18 <__mdiff>
 8017bce:	68c3      	ldr	r3, [r0, #12]
 8017bd0:	9008      	str	r0, [sp, #32]
 8017bd2:	9310      	str	r3, [sp, #64]	; 0x40
 8017bd4:	2301      	movs	r3, #1
 8017bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8017bd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d104      	bne.n	8017be8 <_dtoa_r+0xaa4>
 8017bde:	0001      	movs	r1, r0
 8017be0:	9805      	ldr	r0, [sp, #20]
 8017be2:	f001 f97d 	bl	8018ee0 <__mcmp>
 8017be6:	900c      	str	r0, [sp, #48]	; 0x30
 8017be8:	0038      	movs	r0, r7
 8017bea:	9908      	ldr	r1, [sp, #32]
 8017bec:	f000 feec 	bl	80189c8 <_Bfree>
 8017bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	9308      	str	r3, [sp, #32]
 8017bf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017bfa:	4313      	orrs	r3, r2
 8017bfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017bfe:	4313      	orrs	r3, r2
 8017c00:	d10c      	bne.n	8017c1c <_dtoa_r+0xad8>
 8017c02:	9b07      	ldr	r3, [sp, #28]
 8017c04:	2b39      	cmp	r3, #57	; 0x39
 8017c06:	d026      	beq.n	8017c56 <_dtoa_r+0xb12>
 8017c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	dd02      	ble.n	8017c14 <_dtoa_r+0xad0>
 8017c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c10:	3331      	adds	r3, #49	; 0x31
 8017c12:	9307      	str	r3, [sp, #28]
 8017c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c16:	9a07      	ldr	r2, [sp, #28]
 8017c18:	701a      	strb	r2, [r3, #0]
 8017c1a:	e76a      	b.n	8017af2 <_dtoa_r+0x9ae>
 8017c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	db04      	blt.n	8017c2c <_dtoa_r+0xae8>
 8017c22:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017c24:	4313      	orrs	r3, r2
 8017c26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017c28:	4313      	orrs	r3, r2
 8017c2a:	d11f      	bne.n	8017c6c <_dtoa_r+0xb28>
 8017c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	ddf0      	ble.n	8017c14 <_dtoa_r+0xad0>
 8017c32:	9905      	ldr	r1, [sp, #20]
 8017c34:	2201      	movs	r2, #1
 8017c36:	0038      	movs	r0, r7
 8017c38:	f001 f8e4 	bl	8018e04 <__lshift>
 8017c3c:	0031      	movs	r1, r6
 8017c3e:	9005      	str	r0, [sp, #20]
 8017c40:	f001 f94e 	bl	8018ee0 <__mcmp>
 8017c44:	2800      	cmp	r0, #0
 8017c46:	dc03      	bgt.n	8017c50 <_dtoa_r+0xb0c>
 8017c48:	d1e4      	bne.n	8017c14 <_dtoa_r+0xad0>
 8017c4a:	9b07      	ldr	r3, [sp, #28]
 8017c4c:	07db      	lsls	r3, r3, #31
 8017c4e:	d5e1      	bpl.n	8017c14 <_dtoa_r+0xad0>
 8017c50:	9b07      	ldr	r3, [sp, #28]
 8017c52:	2b39      	cmp	r3, #57	; 0x39
 8017c54:	d1db      	bne.n	8017c0e <_dtoa_r+0xaca>
 8017c56:	2339      	movs	r3, #57	; 0x39
 8017c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c5a:	7013      	strb	r3, [r2, #0]
 8017c5c:	9b08      	ldr	r3, [sp, #32]
 8017c5e:	9308      	str	r3, [sp, #32]
 8017c60:	3b01      	subs	r3, #1
 8017c62:	781a      	ldrb	r2, [r3, #0]
 8017c64:	2a39      	cmp	r2, #57	; 0x39
 8017c66:	d068      	beq.n	8017d3a <_dtoa_r+0xbf6>
 8017c68:	3201      	adds	r2, #1
 8017c6a:	e7d5      	b.n	8017c18 <_dtoa_r+0xad4>
 8017c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	dd07      	ble.n	8017c82 <_dtoa_r+0xb3e>
 8017c72:	9b07      	ldr	r3, [sp, #28]
 8017c74:	2b39      	cmp	r3, #57	; 0x39
 8017c76:	d0ee      	beq.n	8017c56 <_dtoa_r+0xb12>
 8017c78:	9b07      	ldr	r3, [sp, #28]
 8017c7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c7c:	3301      	adds	r3, #1
 8017c7e:	7013      	strb	r3, [r2, #0]
 8017c80:	e737      	b.n	8017af2 <_dtoa_r+0x9ae>
 8017c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c84:	9a07      	ldr	r2, [sp, #28]
 8017c86:	701a      	strb	r2, [r3, #0]
 8017c88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c8c:	4293      	cmp	r3, r2
 8017c8e:	d03e      	beq.n	8017d0e <_dtoa_r+0xbca>
 8017c90:	2300      	movs	r3, #0
 8017c92:	220a      	movs	r2, #10
 8017c94:	9905      	ldr	r1, [sp, #20]
 8017c96:	0038      	movs	r0, r7
 8017c98:	f000 feba 	bl	8018a10 <__multadd>
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	9005      	str	r0, [sp, #20]
 8017ca0:	220a      	movs	r2, #10
 8017ca2:	0021      	movs	r1, r4
 8017ca4:	0038      	movs	r0, r7
 8017ca6:	42ac      	cmp	r4, r5
 8017ca8:	d106      	bne.n	8017cb8 <_dtoa_r+0xb74>
 8017caa:	f000 feb1 	bl	8018a10 <__multadd>
 8017cae:	0004      	movs	r4, r0
 8017cb0:	0005      	movs	r5, r0
 8017cb2:	9b08      	ldr	r3, [sp, #32]
 8017cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8017cb6:	e778      	b.n	8017baa <_dtoa_r+0xa66>
 8017cb8:	f000 feaa 	bl	8018a10 <__multadd>
 8017cbc:	0029      	movs	r1, r5
 8017cbe:	0004      	movs	r4, r0
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	220a      	movs	r2, #10
 8017cc4:	0038      	movs	r0, r7
 8017cc6:	f000 fea3 	bl	8018a10 <__multadd>
 8017cca:	0005      	movs	r5, r0
 8017ccc:	e7f1      	b.n	8017cb2 <_dtoa_r+0xb6e>
 8017cce:	9b07      	ldr	r3, [sp, #28]
 8017cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8017cd2:	2400      	movs	r4, #0
 8017cd4:	0031      	movs	r1, r6
 8017cd6:	9805      	ldr	r0, [sp, #20]
 8017cd8:	f7ff f9a8 	bl	801702c <quorem>
 8017cdc:	9b06      	ldr	r3, [sp, #24]
 8017cde:	3030      	adds	r0, #48	; 0x30
 8017ce0:	5518      	strb	r0, [r3, r4]
 8017ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ce4:	3401      	adds	r4, #1
 8017ce6:	9007      	str	r0, [sp, #28]
 8017ce8:	42a3      	cmp	r3, r4
 8017cea:	dd07      	ble.n	8017cfc <_dtoa_r+0xbb8>
 8017cec:	2300      	movs	r3, #0
 8017cee:	220a      	movs	r2, #10
 8017cf0:	0038      	movs	r0, r7
 8017cf2:	9905      	ldr	r1, [sp, #20]
 8017cf4:	f000 fe8c 	bl	8018a10 <__multadd>
 8017cf8:	9005      	str	r0, [sp, #20]
 8017cfa:	e7eb      	b.n	8017cd4 <_dtoa_r+0xb90>
 8017cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017cfe:	2001      	movs	r0, #1
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	dd00      	ble.n	8017d06 <_dtoa_r+0xbc2>
 8017d04:	0018      	movs	r0, r3
 8017d06:	2400      	movs	r4, #0
 8017d08:	9b06      	ldr	r3, [sp, #24]
 8017d0a:	181b      	adds	r3, r3, r0
 8017d0c:	9308      	str	r3, [sp, #32]
 8017d0e:	9905      	ldr	r1, [sp, #20]
 8017d10:	2201      	movs	r2, #1
 8017d12:	0038      	movs	r0, r7
 8017d14:	f001 f876 	bl	8018e04 <__lshift>
 8017d18:	0031      	movs	r1, r6
 8017d1a:	9005      	str	r0, [sp, #20]
 8017d1c:	f001 f8e0 	bl	8018ee0 <__mcmp>
 8017d20:	2800      	cmp	r0, #0
 8017d22:	dc9b      	bgt.n	8017c5c <_dtoa_r+0xb18>
 8017d24:	d102      	bne.n	8017d2c <_dtoa_r+0xbe8>
 8017d26:	9b07      	ldr	r3, [sp, #28]
 8017d28:	07db      	lsls	r3, r3, #31
 8017d2a:	d497      	bmi.n	8017c5c <_dtoa_r+0xb18>
 8017d2c:	9b08      	ldr	r3, [sp, #32]
 8017d2e:	9308      	str	r3, [sp, #32]
 8017d30:	3b01      	subs	r3, #1
 8017d32:	781a      	ldrb	r2, [r3, #0]
 8017d34:	2a30      	cmp	r2, #48	; 0x30
 8017d36:	d0fa      	beq.n	8017d2e <_dtoa_r+0xbea>
 8017d38:	e6db      	b.n	8017af2 <_dtoa_r+0x9ae>
 8017d3a:	9a06      	ldr	r2, [sp, #24]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d18e      	bne.n	8017c5e <_dtoa_r+0xb1a>
 8017d40:	9b02      	ldr	r3, [sp, #8]
 8017d42:	3301      	adds	r3, #1
 8017d44:	9302      	str	r3, [sp, #8]
 8017d46:	2331      	movs	r3, #49	; 0x31
 8017d48:	e799      	b.n	8017c7e <_dtoa_r+0xb3a>
 8017d4a:	4b09      	ldr	r3, [pc, #36]	; (8017d70 <_dtoa_r+0xc2c>)
 8017d4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017d4e:	9306      	str	r3, [sp, #24]
 8017d50:	4b08      	ldr	r3, [pc, #32]	; (8017d74 <_dtoa_r+0xc30>)
 8017d52:	2a00      	cmp	r2, #0
 8017d54:	d001      	beq.n	8017d5a <_dtoa_r+0xc16>
 8017d56:	f7ff fa3f 	bl	80171d8 <_dtoa_r+0x94>
 8017d5a:	f7ff fa3f 	bl	80171dc <_dtoa_r+0x98>
 8017d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	dcb6      	bgt.n	8017cd2 <_dtoa_r+0xb8e>
 8017d64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017d66:	2b02      	cmp	r3, #2
 8017d68:	dd00      	ble.n	8017d6c <_dtoa_r+0xc28>
 8017d6a:	e6ac      	b.n	8017ac6 <_dtoa_r+0x982>
 8017d6c:	e7b1      	b.n	8017cd2 <_dtoa_r+0xb8e>
 8017d6e:	46c0      	nop			; (mov r8, r8)
 8017d70:	0801b9b9 	.word	0x0801b9b9
 8017d74:	0801b9c1 	.word	0x0801b9c1

08017d78 <__sflush_r>:
 8017d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d7a:	898b      	ldrh	r3, [r1, #12]
 8017d7c:	0005      	movs	r5, r0
 8017d7e:	000c      	movs	r4, r1
 8017d80:	071a      	lsls	r2, r3, #28
 8017d82:	d45f      	bmi.n	8017e44 <__sflush_r+0xcc>
 8017d84:	684a      	ldr	r2, [r1, #4]
 8017d86:	2a00      	cmp	r2, #0
 8017d88:	dc04      	bgt.n	8017d94 <__sflush_r+0x1c>
 8017d8a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8017d8c:	2a00      	cmp	r2, #0
 8017d8e:	dc01      	bgt.n	8017d94 <__sflush_r+0x1c>
 8017d90:	2000      	movs	r0, #0
 8017d92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017d94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017d96:	2f00      	cmp	r7, #0
 8017d98:	d0fa      	beq.n	8017d90 <__sflush_r+0x18>
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	2180      	movs	r1, #128	; 0x80
 8017d9e:	682e      	ldr	r6, [r5, #0]
 8017da0:	602a      	str	r2, [r5, #0]
 8017da2:	001a      	movs	r2, r3
 8017da4:	0149      	lsls	r1, r1, #5
 8017da6:	400a      	ands	r2, r1
 8017da8:	420b      	tst	r3, r1
 8017daa:	d034      	beq.n	8017e16 <__sflush_r+0x9e>
 8017dac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017dae:	89a3      	ldrh	r3, [r4, #12]
 8017db0:	075b      	lsls	r3, r3, #29
 8017db2:	d506      	bpl.n	8017dc2 <__sflush_r+0x4a>
 8017db4:	6863      	ldr	r3, [r4, #4]
 8017db6:	1ac0      	subs	r0, r0, r3
 8017db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d001      	beq.n	8017dc2 <__sflush_r+0x4a>
 8017dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017dc0:	1ac0      	subs	r0, r0, r3
 8017dc2:	0002      	movs	r2, r0
 8017dc4:	6a21      	ldr	r1, [r4, #32]
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	0028      	movs	r0, r5
 8017dca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017dcc:	47b8      	blx	r7
 8017dce:	89a1      	ldrh	r1, [r4, #12]
 8017dd0:	1c43      	adds	r3, r0, #1
 8017dd2:	d106      	bne.n	8017de2 <__sflush_r+0x6a>
 8017dd4:	682b      	ldr	r3, [r5, #0]
 8017dd6:	2b1d      	cmp	r3, #29
 8017dd8:	d831      	bhi.n	8017e3e <__sflush_r+0xc6>
 8017dda:	4a2c      	ldr	r2, [pc, #176]	; (8017e8c <__sflush_r+0x114>)
 8017ddc:	40da      	lsrs	r2, r3
 8017dde:	07d3      	lsls	r3, r2, #31
 8017de0:	d52d      	bpl.n	8017e3e <__sflush_r+0xc6>
 8017de2:	2300      	movs	r3, #0
 8017de4:	6063      	str	r3, [r4, #4]
 8017de6:	6923      	ldr	r3, [r4, #16]
 8017de8:	6023      	str	r3, [r4, #0]
 8017dea:	04cb      	lsls	r3, r1, #19
 8017dec:	d505      	bpl.n	8017dfa <__sflush_r+0x82>
 8017dee:	1c43      	adds	r3, r0, #1
 8017df0:	d102      	bne.n	8017df8 <__sflush_r+0x80>
 8017df2:	682b      	ldr	r3, [r5, #0]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d100      	bne.n	8017dfa <__sflush_r+0x82>
 8017df8:	6560      	str	r0, [r4, #84]	; 0x54
 8017dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017dfc:	602e      	str	r6, [r5, #0]
 8017dfe:	2900      	cmp	r1, #0
 8017e00:	d0c6      	beq.n	8017d90 <__sflush_r+0x18>
 8017e02:	0023      	movs	r3, r4
 8017e04:	3344      	adds	r3, #68	; 0x44
 8017e06:	4299      	cmp	r1, r3
 8017e08:	d002      	beq.n	8017e10 <__sflush_r+0x98>
 8017e0a:	0028      	movs	r0, r5
 8017e0c:	f7fd f852 	bl	8014eb4 <_free_r>
 8017e10:	2000      	movs	r0, #0
 8017e12:	6360      	str	r0, [r4, #52]	; 0x34
 8017e14:	e7bd      	b.n	8017d92 <__sflush_r+0x1a>
 8017e16:	2301      	movs	r3, #1
 8017e18:	0028      	movs	r0, r5
 8017e1a:	6a21      	ldr	r1, [r4, #32]
 8017e1c:	47b8      	blx	r7
 8017e1e:	1c43      	adds	r3, r0, #1
 8017e20:	d1c5      	bne.n	8017dae <__sflush_r+0x36>
 8017e22:	682b      	ldr	r3, [r5, #0]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d0c2      	beq.n	8017dae <__sflush_r+0x36>
 8017e28:	2b1d      	cmp	r3, #29
 8017e2a:	d001      	beq.n	8017e30 <__sflush_r+0xb8>
 8017e2c:	2b16      	cmp	r3, #22
 8017e2e:	d101      	bne.n	8017e34 <__sflush_r+0xbc>
 8017e30:	602e      	str	r6, [r5, #0]
 8017e32:	e7ad      	b.n	8017d90 <__sflush_r+0x18>
 8017e34:	2340      	movs	r3, #64	; 0x40
 8017e36:	89a2      	ldrh	r2, [r4, #12]
 8017e38:	4313      	orrs	r3, r2
 8017e3a:	81a3      	strh	r3, [r4, #12]
 8017e3c:	e7a9      	b.n	8017d92 <__sflush_r+0x1a>
 8017e3e:	2340      	movs	r3, #64	; 0x40
 8017e40:	430b      	orrs	r3, r1
 8017e42:	e7fa      	b.n	8017e3a <__sflush_r+0xc2>
 8017e44:	690f      	ldr	r7, [r1, #16]
 8017e46:	2f00      	cmp	r7, #0
 8017e48:	d0a2      	beq.n	8017d90 <__sflush_r+0x18>
 8017e4a:	680a      	ldr	r2, [r1, #0]
 8017e4c:	600f      	str	r7, [r1, #0]
 8017e4e:	1bd2      	subs	r2, r2, r7
 8017e50:	9201      	str	r2, [sp, #4]
 8017e52:	2200      	movs	r2, #0
 8017e54:	079b      	lsls	r3, r3, #30
 8017e56:	d100      	bne.n	8017e5a <__sflush_r+0xe2>
 8017e58:	694a      	ldr	r2, [r1, #20]
 8017e5a:	60a2      	str	r2, [r4, #8]
 8017e5c:	9b01      	ldr	r3, [sp, #4]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	dc00      	bgt.n	8017e64 <__sflush_r+0xec>
 8017e62:	e795      	b.n	8017d90 <__sflush_r+0x18>
 8017e64:	003a      	movs	r2, r7
 8017e66:	0028      	movs	r0, r5
 8017e68:	9b01      	ldr	r3, [sp, #4]
 8017e6a:	6a21      	ldr	r1, [r4, #32]
 8017e6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e6e:	47b0      	blx	r6
 8017e70:	2800      	cmp	r0, #0
 8017e72:	dc06      	bgt.n	8017e82 <__sflush_r+0x10a>
 8017e74:	2340      	movs	r3, #64	; 0x40
 8017e76:	2001      	movs	r0, #1
 8017e78:	89a2      	ldrh	r2, [r4, #12]
 8017e7a:	4240      	negs	r0, r0
 8017e7c:	4313      	orrs	r3, r2
 8017e7e:	81a3      	strh	r3, [r4, #12]
 8017e80:	e787      	b.n	8017d92 <__sflush_r+0x1a>
 8017e82:	9b01      	ldr	r3, [sp, #4]
 8017e84:	183f      	adds	r7, r7, r0
 8017e86:	1a1b      	subs	r3, r3, r0
 8017e88:	9301      	str	r3, [sp, #4]
 8017e8a:	e7e7      	b.n	8017e5c <__sflush_r+0xe4>
 8017e8c:	20400001 	.word	0x20400001

08017e90 <_fflush_r>:
 8017e90:	690b      	ldr	r3, [r1, #16]
 8017e92:	b570      	push	{r4, r5, r6, lr}
 8017e94:	0005      	movs	r5, r0
 8017e96:	000c      	movs	r4, r1
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d102      	bne.n	8017ea2 <_fflush_r+0x12>
 8017e9c:	2500      	movs	r5, #0
 8017e9e:	0028      	movs	r0, r5
 8017ea0:	bd70      	pop	{r4, r5, r6, pc}
 8017ea2:	2800      	cmp	r0, #0
 8017ea4:	d004      	beq.n	8017eb0 <_fflush_r+0x20>
 8017ea6:	6983      	ldr	r3, [r0, #24]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d101      	bne.n	8017eb0 <_fflush_r+0x20>
 8017eac:	f000 f892 	bl	8017fd4 <__sinit>
 8017eb0:	4b14      	ldr	r3, [pc, #80]	; (8017f04 <_fflush_r+0x74>)
 8017eb2:	429c      	cmp	r4, r3
 8017eb4:	d11b      	bne.n	8017eee <_fflush_r+0x5e>
 8017eb6:	686c      	ldr	r4, [r5, #4]
 8017eb8:	220c      	movs	r2, #12
 8017eba:	5ea3      	ldrsh	r3, [r4, r2]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d0ed      	beq.n	8017e9c <_fflush_r+0xc>
 8017ec0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017ec2:	07d2      	lsls	r2, r2, #31
 8017ec4:	d404      	bmi.n	8017ed0 <_fflush_r+0x40>
 8017ec6:	059b      	lsls	r3, r3, #22
 8017ec8:	d402      	bmi.n	8017ed0 <_fflush_r+0x40>
 8017eca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ecc:	f000 fc9b 	bl	8018806 <__retarget_lock_acquire_recursive>
 8017ed0:	0028      	movs	r0, r5
 8017ed2:	0021      	movs	r1, r4
 8017ed4:	f7ff ff50 	bl	8017d78 <__sflush_r>
 8017ed8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017eda:	0005      	movs	r5, r0
 8017edc:	07db      	lsls	r3, r3, #31
 8017ede:	d4de      	bmi.n	8017e9e <_fflush_r+0xe>
 8017ee0:	89a3      	ldrh	r3, [r4, #12]
 8017ee2:	059b      	lsls	r3, r3, #22
 8017ee4:	d4db      	bmi.n	8017e9e <_fflush_r+0xe>
 8017ee6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ee8:	f000 fc8e 	bl	8018808 <__retarget_lock_release_recursive>
 8017eec:	e7d7      	b.n	8017e9e <_fflush_r+0xe>
 8017eee:	4b06      	ldr	r3, [pc, #24]	; (8017f08 <_fflush_r+0x78>)
 8017ef0:	429c      	cmp	r4, r3
 8017ef2:	d101      	bne.n	8017ef8 <_fflush_r+0x68>
 8017ef4:	68ac      	ldr	r4, [r5, #8]
 8017ef6:	e7df      	b.n	8017eb8 <_fflush_r+0x28>
 8017ef8:	4b04      	ldr	r3, [pc, #16]	; (8017f0c <_fflush_r+0x7c>)
 8017efa:	429c      	cmp	r4, r3
 8017efc:	d1dc      	bne.n	8017eb8 <_fflush_r+0x28>
 8017efe:	68ec      	ldr	r4, [r5, #12]
 8017f00:	e7da      	b.n	8017eb8 <_fflush_r+0x28>
 8017f02:	46c0      	nop			; (mov r8, r8)
 8017f04:	0801ba6c 	.word	0x0801ba6c
 8017f08:	0801ba8c 	.word	0x0801ba8c
 8017f0c:	0801ba4c 	.word	0x0801ba4c

08017f10 <std>:
 8017f10:	2300      	movs	r3, #0
 8017f12:	b510      	push	{r4, lr}
 8017f14:	0004      	movs	r4, r0
 8017f16:	6003      	str	r3, [r0, #0]
 8017f18:	6043      	str	r3, [r0, #4]
 8017f1a:	6083      	str	r3, [r0, #8]
 8017f1c:	8181      	strh	r1, [r0, #12]
 8017f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8017f20:	0019      	movs	r1, r3
 8017f22:	81c2      	strh	r2, [r0, #14]
 8017f24:	6103      	str	r3, [r0, #16]
 8017f26:	6143      	str	r3, [r0, #20]
 8017f28:	6183      	str	r3, [r0, #24]
 8017f2a:	2208      	movs	r2, #8
 8017f2c:	305c      	adds	r0, #92	; 0x5c
 8017f2e:	f7fc ffb8 	bl	8014ea2 <memset>
 8017f32:	4b05      	ldr	r3, [pc, #20]	; (8017f48 <std+0x38>)
 8017f34:	6224      	str	r4, [r4, #32]
 8017f36:	6263      	str	r3, [r4, #36]	; 0x24
 8017f38:	4b04      	ldr	r3, [pc, #16]	; (8017f4c <std+0x3c>)
 8017f3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f3c:	4b04      	ldr	r3, [pc, #16]	; (8017f50 <std+0x40>)
 8017f3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f40:	4b04      	ldr	r3, [pc, #16]	; (8017f54 <std+0x44>)
 8017f42:	6323      	str	r3, [r4, #48]	; 0x30
 8017f44:	bd10      	pop	{r4, pc}
 8017f46:	46c0      	nop			; (mov r8, r8)
 8017f48:	080198c1 	.word	0x080198c1
 8017f4c:	080198e9 	.word	0x080198e9
 8017f50:	08019921 	.word	0x08019921
 8017f54:	0801994d 	.word	0x0801994d

08017f58 <_cleanup_r>:
 8017f58:	b510      	push	{r4, lr}
 8017f5a:	4902      	ldr	r1, [pc, #8]	; (8017f64 <_cleanup_r+0xc>)
 8017f5c:	f000 f8ba 	bl	80180d4 <_fwalk_reent>
 8017f60:	bd10      	pop	{r4, pc}
 8017f62:	46c0      	nop			; (mov r8, r8)
 8017f64:	08017e91 	.word	0x08017e91

08017f68 <__sfmoreglue>:
 8017f68:	b570      	push	{r4, r5, r6, lr}
 8017f6a:	2568      	movs	r5, #104	; 0x68
 8017f6c:	1e4a      	subs	r2, r1, #1
 8017f6e:	4355      	muls	r5, r2
 8017f70:	000e      	movs	r6, r1
 8017f72:	0029      	movs	r1, r5
 8017f74:	3174      	adds	r1, #116	; 0x74
 8017f76:	f7fd f809 	bl	8014f8c <_malloc_r>
 8017f7a:	1e04      	subs	r4, r0, #0
 8017f7c:	d008      	beq.n	8017f90 <__sfmoreglue+0x28>
 8017f7e:	2100      	movs	r1, #0
 8017f80:	002a      	movs	r2, r5
 8017f82:	6001      	str	r1, [r0, #0]
 8017f84:	6046      	str	r6, [r0, #4]
 8017f86:	300c      	adds	r0, #12
 8017f88:	60a0      	str	r0, [r4, #8]
 8017f8a:	3268      	adds	r2, #104	; 0x68
 8017f8c:	f7fc ff89 	bl	8014ea2 <memset>
 8017f90:	0020      	movs	r0, r4
 8017f92:	bd70      	pop	{r4, r5, r6, pc}

08017f94 <__sfp_lock_acquire>:
 8017f94:	b510      	push	{r4, lr}
 8017f96:	4802      	ldr	r0, [pc, #8]	; (8017fa0 <__sfp_lock_acquire+0xc>)
 8017f98:	f000 fc35 	bl	8018806 <__retarget_lock_acquire_recursive>
 8017f9c:	bd10      	pop	{r4, pc}
 8017f9e:	46c0      	nop			; (mov r8, r8)
 8017fa0:	20005431 	.word	0x20005431

08017fa4 <__sfp_lock_release>:
 8017fa4:	b510      	push	{r4, lr}
 8017fa6:	4802      	ldr	r0, [pc, #8]	; (8017fb0 <__sfp_lock_release+0xc>)
 8017fa8:	f000 fc2e 	bl	8018808 <__retarget_lock_release_recursive>
 8017fac:	bd10      	pop	{r4, pc}
 8017fae:	46c0      	nop			; (mov r8, r8)
 8017fb0:	20005431 	.word	0x20005431

08017fb4 <__sinit_lock_acquire>:
 8017fb4:	b510      	push	{r4, lr}
 8017fb6:	4802      	ldr	r0, [pc, #8]	; (8017fc0 <__sinit_lock_acquire+0xc>)
 8017fb8:	f000 fc25 	bl	8018806 <__retarget_lock_acquire_recursive>
 8017fbc:	bd10      	pop	{r4, pc}
 8017fbe:	46c0      	nop			; (mov r8, r8)
 8017fc0:	20005432 	.word	0x20005432

08017fc4 <__sinit_lock_release>:
 8017fc4:	b510      	push	{r4, lr}
 8017fc6:	4802      	ldr	r0, [pc, #8]	; (8017fd0 <__sinit_lock_release+0xc>)
 8017fc8:	f000 fc1e 	bl	8018808 <__retarget_lock_release_recursive>
 8017fcc:	bd10      	pop	{r4, pc}
 8017fce:	46c0      	nop			; (mov r8, r8)
 8017fd0:	20005432 	.word	0x20005432

08017fd4 <__sinit>:
 8017fd4:	b513      	push	{r0, r1, r4, lr}
 8017fd6:	0004      	movs	r4, r0
 8017fd8:	f7ff ffec 	bl	8017fb4 <__sinit_lock_acquire>
 8017fdc:	69a3      	ldr	r3, [r4, #24]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d002      	beq.n	8017fe8 <__sinit+0x14>
 8017fe2:	f7ff ffef 	bl	8017fc4 <__sinit_lock_release>
 8017fe6:	bd13      	pop	{r0, r1, r4, pc}
 8017fe8:	64a3      	str	r3, [r4, #72]	; 0x48
 8017fea:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017fec:	6523      	str	r3, [r4, #80]	; 0x50
 8017fee:	4b13      	ldr	r3, [pc, #76]	; (801803c <__sinit+0x68>)
 8017ff0:	4a13      	ldr	r2, [pc, #76]	; (8018040 <__sinit+0x6c>)
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	62a2      	str	r2, [r4, #40]	; 0x28
 8017ff6:	9301      	str	r3, [sp, #4]
 8017ff8:	42a3      	cmp	r3, r4
 8017ffa:	d101      	bne.n	8018000 <__sinit+0x2c>
 8017ffc:	2301      	movs	r3, #1
 8017ffe:	61a3      	str	r3, [r4, #24]
 8018000:	0020      	movs	r0, r4
 8018002:	f000 f81f 	bl	8018044 <__sfp>
 8018006:	6060      	str	r0, [r4, #4]
 8018008:	0020      	movs	r0, r4
 801800a:	f000 f81b 	bl	8018044 <__sfp>
 801800e:	60a0      	str	r0, [r4, #8]
 8018010:	0020      	movs	r0, r4
 8018012:	f000 f817 	bl	8018044 <__sfp>
 8018016:	2200      	movs	r2, #0
 8018018:	2104      	movs	r1, #4
 801801a:	60e0      	str	r0, [r4, #12]
 801801c:	6860      	ldr	r0, [r4, #4]
 801801e:	f7ff ff77 	bl	8017f10 <std>
 8018022:	2201      	movs	r2, #1
 8018024:	2109      	movs	r1, #9
 8018026:	68a0      	ldr	r0, [r4, #8]
 8018028:	f7ff ff72 	bl	8017f10 <std>
 801802c:	2202      	movs	r2, #2
 801802e:	2112      	movs	r1, #18
 8018030:	68e0      	ldr	r0, [r4, #12]
 8018032:	f7ff ff6d 	bl	8017f10 <std>
 8018036:	2301      	movs	r3, #1
 8018038:	61a3      	str	r3, [r4, #24]
 801803a:	e7d2      	b.n	8017fe2 <__sinit+0xe>
 801803c:	0801b824 	.word	0x0801b824
 8018040:	08017f59 	.word	0x08017f59

08018044 <__sfp>:
 8018044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018046:	0007      	movs	r7, r0
 8018048:	f7ff ffa4 	bl	8017f94 <__sfp_lock_acquire>
 801804c:	4b1f      	ldr	r3, [pc, #124]	; (80180cc <__sfp+0x88>)
 801804e:	681e      	ldr	r6, [r3, #0]
 8018050:	69b3      	ldr	r3, [r6, #24]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d102      	bne.n	801805c <__sfp+0x18>
 8018056:	0030      	movs	r0, r6
 8018058:	f7ff ffbc 	bl	8017fd4 <__sinit>
 801805c:	3648      	adds	r6, #72	; 0x48
 801805e:	68b4      	ldr	r4, [r6, #8]
 8018060:	6873      	ldr	r3, [r6, #4]
 8018062:	3b01      	subs	r3, #1
 8018064:	d504      	bpl.n	8018070 <__sfp+0x2c>
 8018066:	6833      	ldr	r3, [r6, #0]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d022      	beq.n	80180b2 <__sfp+0x6e>
 801806c:	6836      	ldr	r6, [r6, #0]
 801806e:	e7f6      	b.n	801805e <__sfp+0x1a>
 8018070:	220c      	movs	r2, #12
 8018072:	5ea5      	ldrsh	r5, [r4, r2]
 8018074:	2d00      	cmp	r5, #0
 8018076:	d11a      	bne.n	80180ae <__sfp+0x6a>
 8018078:	0020      	movs	r0, r4
 801807a:	4b15      	ldr	r3, [pc, #84]	; (80180d0 <__sfp+0x8c>)
 801807c:	3058      	adds	r0, #88	; 0x58
 801807e:	60e3      	str	r3, [r4, #12]
 8018080:	6665      	str	r5, [r4, #100]	; 0x64
 8018082:	f000 fbbf 	bl	8018804 <__retarget_lock_init_recursive>
 8018086:	f7ff ff8d 	bl	8017fa4 <__sfp_lock_release>
 801808a:	0020      	movs	r0, r4
 801808c:	2208      	movs	r2, #8
 801808e:	0029      	movs	r1, r5
 8018090:	6025      	str	r5, [r4, #0]
 8018092:	60a5      	str	r5, [r4, #8]
 8018094:	6065      	str	r5, [r4, #4]
 8018096:	6125      	str	r5, [r4, #16]
 8018098:	6165      	str	r5, [r4, #20]
 801809a:	61a5      	str	r5, [r4, #24]
 801809c:	305c      	adds	r0, #92	; 0x5c
 801809e:	f7fc ff00 	bl	8014ea2 <memset>
 80180a2:	6365      	str	r5, [r4, #52]	; 0x34
 80180a4:	63a5      	str	r5, [r4, #56]	; 0x38
 80180a6:	64a5      	str	r5, [r4, #72]	; 0x48
 80180a8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80180aa:	0020      	movs	r0, r4
 80180ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180ae:	3468      	adds	r4, #104	; 0x68
 80180b0:	e7d7      	b.n	8018062 <__sfp+0x1e>
 80180b2:	2104      	movs	r1, #4
 80180b4:	0038      	movs	r0, r7
 80180b6:	f7ff ff57 	bl	8017f68 <__sfmoreglue>
 80180ba:	1e04      	subs	r4, r0, #0
 80180bc:	6030      	str	r0, [r6, #0]
 80180be:	d1d5      	bne.n	801806c <__sfp+0x28>
 80180c0:	f7ff ff70 	bl	8017fa4 <__sfp_lock_release>
 80180c4:	230c      	movs	r3, #12
 80180c6:	603b      	str	r3, [r7, #0]
 80180c8:	e7ef      	b.n	80180aa <__sfp+0x66>
 80180ca:	46c0      	nop			; (mov r8, r8)
 80180cc:	0801b824 	.word	0x0801b824
 80180d0:	ffff0001 	.word	0xffff0001

080180d4 <_fwalk_reent>:
 80180d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180d6:	0004      	movs	r4, r0
 80180d8:	0006      	movs	r6, r0
 80180da:	2700      	movs	r7, #0
 80180dc:	9101      	str	r1, [sp, #4]
 80180de:	3448      	adds	r4, #72	; 0x48
 80180e0:	6863      	ldr	r3, [r4, #4]
 80180e2:	68a5      	ldr	r5, [r4, #8]
 80180e4:	9300      	str	r3, [sp, #0]
 80180e6:	9b00      	ldr	r3, [sp, #0]
 80180e8:	3b01      	subs	r3, #1
 80180ea:	9300      	str	r3, [sp, #0]
 80180ec:	d504      	bpl.n	80180f8 <_fwalk_reent+0x24>
 80180ee:	6824      	ldr	r4, [r4, #0]
 80180f0:	2c00      	cmp	r4, #0
 80180f2:	d1f5      	bne.n	80180e0 <_fwalk_reent+0xc>
 80180f4:	0038      	movs	r0, r7
 80180f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80180f8:	89ab      	ldrh	r3, [r5, #12]
 80180fa:	2b01      	cmp	r3, #1
 80180fc:	d908      	bls.n	8018110 <_fwalk_reent+0x3c>
 80180fe:	220e      	movs	r2, #14
 8018100:	5eab      	ldrsh	r3, [r5, r2]
 8018102:	3301      	adds	r3, #1
 8018104:	d004      	beq.n	8018110 <_fwalk_reent+0x3c>
 8018106:	0029      	movs	r1, r5
 8018108:	0030      	movs	r0, r6
 801810a:	9b01      	ldr	r3, [sp, #4]
 801810c:	4798      	blx	r3
 801810e:	4307      	orrs	r7, r0
 8018110:	3568      	adds	r5, #104	; 0x68
 8018112:	e7e8      	b.n	80180e6 <_fwalk_reent+0x12>

08018114 <rshift>:
 8018114:	0002      	movs	r2, r0
 8018116:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018118:	6904      	ldr	r4, [r0, #16]
 801811a:	3214      	adds	r2, #20
 801811c:	0013      	movs	r3, r2
 801811e:	b085      	sub	sp, #20
 8018120:	114f      	asrs	r7, r1, #5
 8018122:	42bc      	cmp	r4, r7
 8018124:	dd31      	ble.n	801818a <rshift+0x76>
 8018126:	00bb      	lsls	r3, r7, #2
 8018128:	18d3      	adds	r3, r2, r3
 801812a:	261f      	movs	r6, #31
 801812c:	9301      	str	r3, [sp, #4]
 801812e:	000b      	movs	r3, r1
 8018130:	00a5      	lsls	r5, r4, #2
 8018132:	4033      	ands	r3, r6
 8018134:	1955      	adds	r5, r2, r5
 8018136:	9302      	str	r3, [sp, #8]
 8018138:	4231      	tst	r1, r6
 801813a:	d10c      	bne.n	8018156 <rshift+0x42>
 801813c:	0016      	movs	r6, r2
 801813e:	9901      	ldr	r1, [sp, #4]
 8018140:	428d      	cmp	r5, r1
 8018142:	d838      	bhi.n	80181b6 <rshift+0xa2>
 8018144:	9901      	ldr	r1, [sp, #4]
 8018146:	2300      	movs	r3, #0
 8018148:	3903      	subs	r1, #3
 801814a:	428d      	cmp	r5, r1
 801814c:	d301      	bcc.n	8018152 <rshift+0x3e>
 801814e:	1be3      	subs	r3, r4, r7
 8018150:	009b      	lsls	r3, r3, #2
 8018152:	18d3      	adds	r3, r2, r3
 8018154:	e019      	b.n	801818a <rshift+0x76>
 8018156:	2120      	movs	r1, #32
 8018158:	9b02      	ldr	r3, [sp, #8]
 801815a:	9e01      	ldr	r6, [sp, #4]
 801815c:	1acb      	subs	r3, r1, r3
 801815e:	9303      	str	r3, [sp, #12]
 8018160:	ce02      	ldmia	r6!, {r1}
 8018162:	9b02      	ldr	r3, [sp, #8]
 8018164:	4694      	mov	ip, r2
 8018166:	40d9      	lsrs	r1, r3
 8018168:	9100      	str	r1, [sp, #0]
 801816a:	42b5      	cmp	r5, r6
 801816c:	d816      	bhi.n	801819c <rshift+0x88>
 801816e:	9e01      	ldr	r6, [sp, #4]
 8018170:	2300      	movs	r3, #0
 8018172:	3601      	adds	r6, #1
 8018174:	42b5      	cmp	r5, r6
 8018176:	d302      	bcc.n	801817e <rshift+0x6a>
 8018178:	1be3      	subs	r3, r4, r7
 801817a:	009b      	lsls	r3, r3, #2
 801817c:	3b04      	subs	r3, #4
 801817e:	9900      	ldr	r1, [sp, #0]
 8018180:	18d3      	adds	r3, r2, r3
 8018182:	6019      	str	r1, [r3, #0]
 8018184:	2900      	cmp	r1, #0
 8018186:	d000      	beq.n	801818a <rshift+0x76>
 8018188:	3304      	adds	r3, #4
 801818a:	1a99      	subs	r1, r3, r2
 801818c:	1089      	asrs	r1, r1, #2
 801818e:	6101      	str	r1, [r0, #16]
 8018190:	4293      	cmp	r3, r2
 8018192:	d101      	bne.n	8018198 <rshift+0x84>
 8018194:	2300      	movs	r3, #0
 8018196:	6143      	str	r3, [r0, #20]
 8018198:	b005      	add	sp, #20
 801819a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801819c:	6833      	ldr	r3, [r6, #0]
 801819e:	9903      	ldr	r1, [sp, #12]
 80181a0:	408b      	lsls	r3, r1
 80181a2:	9900      	ldr	r1, [sp, #0]
 80181a4:	4319      	orrs	r1, r3
 80181a6:	4663      	mov	r3, ip
 80181a8:	c302      	stmia	r3!, {r1}
 80181aa:	469c      	mov	ip, r3
 80181ac:	ce02      	ldmia	r6!, {r1}
 80181ae:	9b02      	ldr	r3, [sp, #8]
 80181b0:	40d9      	lsrs	r1, r3
 80181b2:	9100      	str	r1, [sp, #0]
 80181b4:	e7d9      	b.n	801816a <rshift+0x56>
 80181b6:	c908      	ldmia	r1!, {r3}
 80181b8:	c608      	stmia	r6!, {r3}
 80181ba:	e7c1      	b.n	8018140 <rshift+0x2c>

080181bc <__hexdig_fun>:
 80181bc:	0002      	movs	r2, r0
 80181be:	3a30      	subs	r2, #48	; 0x30
 80181c0:	0003      	movs	r3, r0
 80181c2:	2a09      	cmp	r2, #9
 80181c4:	d802      	bhi.n	80181cc <__hexdig_fun+0x10>
 80181c6:	3b20      	subs	r3, #32
 80181c8:	b2d8      	uxtb	r0, r3
 80181ca:	4770      	bx	lr
 80181cc:	0002      	movs	r2, r0
 80181ce:	3a61      	subs	r2, #97	; 0x61
 80181d0:	2a05      	cmp	r2, #5
 80181d2:	d801      	bhi.n	80181d8 <__hexdig_fun+0x1c>
 80181d4:	3b47      	subs	r3, #71	; 0x47
 80181d6:	e7f7      	b.n	80181c8 <__hexdig_fun+0xc>
 80181d8:	001a      	movs	r2, r3
 80181da:	3a41      	subs	r2, #65	; 0x41
 80181dc:	2000      	movs	r0, #0
 80181de:	2a05      	cmp	r2, #5
 80181e0:	d8f3      	bhi.n	80181ca <__hexdig_fun+0xe>
 80181e2:	3b27      	subs	r3, #39	; 0x27
 80181e4:	e7f0      	b.n	80181c8 <__hexdig_fun+0xc>
	...

080181e8 <__gethex>:
 80181e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181ea:	b08d      	sub	sp, #52	; 0x34
 80181ec:	930a      	str	r3, [sp, #40]	; 0x28
 80181ee:	4bbf      	ldr	r3, [pc, #764]	; (80184ec <__gethex+0x304>)
 80181f0:	9005      	str	r0, [sp, #20]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	9109      	str	r1, [sp, #36]	; 0x24
 80181f6:	0018      	movs	r0, r3
 80181f8:	9202      	str	r2, [sp, #8]
 80181fa:	9307      	str	r3, [sp, #28]
 80181fc:	f7e7 ff8e 	bl	800011c <strlen>
 8018200:	2202      	movs	r2, #2
 8018202:	9b07      	ldr	r3, [sp, #28]
 8018204:	4252      	negs	r2, r2
 8018206:	181b      	adds	r3, r3, r0
 8018208:	3b01      	subs	r3, #1
 801820a:	781b      	ldrb	r3, [r3, #0]
 801820c:	9003      	str	r0, [sp, #12]
 801820e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018212:	6819      	ldr	r1, [r3, #0]
 8018214:	1c8b      	adds	r3, r1, #2
 8018216:	1a52      	subs	r2, r2, r1
 8018218:	18d1      	adds	r1, r2, r3
 801821a:	9301      	str	r3, [sp, #4]
 801821c:	9108      	str	r1, [sp, #32]
 801821e:	9901      	ldr	r1, [sp, #4]
 8018220:	3301      	adds	r3, #1
 8018222:	7808      	ldrb	r0, [r1, #0]
 8018224:	2830      	cmp	r0, #48	; 0x30
 8018226:	d0f7      	beq.n	8018218 <__gethex+0x30>
 8018228:	f7ff ffc8 	bl	80181bc <__hexdig_fun>
 801822c:	2300      	movs	r3, #0
 801822e:	001c      	movs	r4, r3
 8018230:	9304      	str	r3, [sp, #16]
 8018232:	4298      	cmp	r0, r3
 8018234:	d11f      	bne.n	8018276 <__gethex+0x8e>
 8018236:	9a03      	ldr	r2, [sp, #12]
 8018238:	9907      	ldr	r1, [sp, #28]
 801823a:	9801      	ldr	r0, [sp, #4]
 801823c:	f001 fb8c 	bl	8019958 <strncmp>
 8018240:	0007      	movs	r7, r0
 8018242:	42a0      	cmp	r0, r4
 8018244:	d000      	beq.n	8018248 <__gethex+0x60>
 8018246:	e06b      	b.n	8018320 <__gethex+0x138>
 8018248:	9b01      	ldr	r3, [sp, #4]
 801824a:	9a03      	ldr	r2, [sp, #12]
 801824c:	5c98      	ldrb	r0, [r3, r2]
 801824e:	189d      	adds	r5, r3, r2
 8018250:	f7ff ffb4 	bl	80181bc <__hexdig_fun>
 8018254:	2301      	movs	r3, #1
 8018256:	9304      	str	r3, [sp, #16]
 8018258:	42a0      	cmp	r0, r4
 801825a:	d030      	beq.n	80182be <__gethex+0xd6>
 801825c:	9501      	str	r5, [sp, #4]
 801825e:	9b01      	ldr	r3, [sp, #4]
 8018260:	7818      	ldrb	r0, [r3, #0]
 8018262:	2830      	cmp	r0, #48	; 0x30
 8018264:	d009      	beq.n	801827a <__gethex+0x92>
 8018266:	f7ff ffa9 	bl	80181bc <__hexdig_fun>
 801826a:	4242      	negs	r2, r0
 801826c:	4142      	adcs	r2, r0
 801826e:	2301      	movs	r3, #1
 8018270:	002c      	movs	r4, r5
 8018272:	9204      	str	r2, [sp, #16]
 8018274:	9308      	str	r3, [sp, #32]
 8018276:	9d01      	ldr	r5, [sp, #4]
 8018278:	e004      	b.n	8018284 <__gethex+0x9c>
 801827a:	9b01      	ldr	r3, [sp, #4]
 801827c:	3301      	adds	r3, #1
 801827e:	9301      	str	r3, [sp, #4]
 8018280:	e7ed      	b.n	801825e <__gethex+0x76>
 8018282:	3501      	adds	r5, #1
 8018284:	7828      	ldrb	r0, [r5, #0]
 8018286:	f7ff ff99 	bl	80181bc <__hexdig_fun>
 801828a:	1e07      	subs	r7, r0, #0
 801828c:	d1f9      	bne.n	8018282 <__gethex+0x9a>
 801828e:	0028      	movs	r0, r5
 8018290:	9a03      	ldr	r2, [sp, #12]
 8018292:	9907      	ldr	r1, [sp, #28]
 8018294:	f001 fb60 	bl	8019958 <strncmp>
 8018298:	2800      	cmp	r0, #0
 801829a:	d10e      	bne.n	80182ba <__gethex+0xd2>
 801829c:	2c00      	cmp	r4, #0
 801829e:	d107      	bne.n	80182b0 <__gethex+0xc8>
 80182a0:	9b03      	ldr	r3, [sp, #12]
 80182a2:	18ed      	adds	r5, r5, r3
 80182a4:	002c      	movs	r4, r5
 80182a6:	7828      	ldrb	r0, [r5, #0]
 80182a8:	f7ff ff88 	bl	80181bc <__hexdig_fun>
 80182ac:	2800      	cmp	r0, #0
 80182ae:	d102      	bne.n	80182b6 <__gethex+0xce>
 80182b0:	1b64      	subs	r4, r4, r5
 80182b2:	00a7      	lsls	r7, r4, #2
 80182b4:	e003      	b.n	80182be <__gethex+0xd6>
 80182b6:	3501      	adds	r5, #1
 80182b8:	e7f5      	b.n	80182a6 <__gethex+0xbe>
 80182ba:	2c00      	cmp	r4, #0
 80182bc:	d1f8      	bne.n	80182b0 <__gethex+0xc8>
 80182be:	2220      	movs	r2, #32
 80182c0:	782b      	ldrb	r3, [r5, #0]
 80182c2:	002e      	movs	r6, r5
 80182c4:	4393      	bics	r3, r2
 80182c6:	2b50      	cmp	r3, #80	; 0x50
 80182c8:	d11d      	bne.n	8018306 <__gethex+0x11e>
 80182ca:	786b      	ldrb	r3, [r5, #1]
 80182cc:	2b2b      	cmp	r3, #43	; 0x2b
 80182ce:	d02c      	beq.n	801832a <__gethex+0x142>
 80182d0:	2b2d      	cmp	r3, #45	; 0x2d
 80182d2:	d02e      	beq.n	8018332 <__gethex+0x14a>
 80182d4:	2300      	movs	r3, #0
 80182d6:	1c6e      	adds	r6, r5, #1
 80182d8:	9306      	str	r3, [sp, #24]
 80182da:	7830      	ldrb	r0, [r6, #0]
 80182dc:	f7ff ff6e 	bl	80181bc <__hexdig_fun>
 80182e0:	1e43      	subs	r3, r0, #1
 80182e2:	b2db      	uxtb	r3, r3
 80182e4:	2b18      	cmp	r3, #24
 80182e6:	d82b      	bhi.n	8018340 <__gethex+0x158>
 80182e8:	3810      	subs	r0, #16
 80182ea:	0004      	movs	r4, r0
 80182ec:	7870      	ldrb	r0, [r6, #1]
 80182ee:	f7ff ff65 	bl	80181bc <__hexdig_fun>
 80182f2:	1e43      	subs	r3, r0, #1
 80182f4:	b2db      	uxtb	r3, r3
 80182f6:	3601      	adds	r6, #1
 80182f8:	2b18      	cmp	r3, #24
 80182fa:	d91c      	bls.n	8018336 <__gethex+0x14e>
 80182fc:	9b06      	ldr	r3, [sp, #24]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d000      	beq.n	8018304 <__gethex+0x11c>
 8018302:	4264      	negs	r4, r4
 8018304:	193f      	adds	r7, r7, r4
 8018306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018308:	601e      	str	r6, [r3, #0]
 801830a:	9b04      	ldr	r3, [sp, #16]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d019      	beq.n	8018344 <__gethex+0x15c>
 8018310:	2600      	movs	r6, #0
 8018312:	9b08      	ldr	r3, [sp, #32]
 8018314:	42b3      	cmp	r3, r6
 8018316:	d100      	bne.n	801831a <__gethex+0x132>
 8018318:	3606      	adds	r6, #6
 801831a:	0030      	movs	r0, r6
 801831c:	b00d      	add	sp, #52	; 0x34
 801831e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018320:	2301      	movs	r3, #1
 8018322:	2700      	movs	r7, #0
 8018324:	9d01      	ldr	r5, [sp, #4]
 8018326:	9304      	str	r3, [sp, #16]
 8018328:	e7c9      	b.n	80182be <__gethex+0xd6>
 801832a:	2300      	movs	r3, #0
 801832c:	9306      	str	r3, [sp, #24]
 801832e:	1cae      	adds	r6, r5, #2
 8018330:	e7d3      	b.n	80182da <__gethex+0xf2>
 8018332:	2301      	movs	r3, #1
 8018334:	e7fa      	b.n	801832c <__gethex+0x144>
 8018336:	230a      	movs	r3, #10
 8018338:	435c      	muls	r4, r3
 801833a:	1824      	adds	r4, r4, r0
 801833c:	3c10      	subs	r4, #16
 801833e:	e7d5      	b.n	80182ec <__gethex+0x104>
 8018340:	002e      	movs	r6, r5
 8018342:	e7e0      	b.n	8018306 <__gethex+0x11e>
 8018344:	9b01      	ldr	r3, [sp, #4]
 8018346:	9904      	ldr	r1, [sp, #16]
 8018348:	1aeb      	subs	r3, r5, r3
 801834a:	3b01      	subs	r3, #1
 801834c:	2b07      	cmp	r3, #7
 801834e:	dc0a      	bgt.n	8018366 <__gethex+0x17e>
 8018350:	9805      	ldr	r0, [sp, #20]
 8018352:	f000 faf5 	bl	8018940 <_Balloc>
 8018356:	1e04      	subs	r4, r0, #0
 8018358:	d108      	bne.n	801836c <__gethex+0x184>
 801835a:	0002      	movs	r2, r0
 801835c:	21de      	movs	r1, #222	; 0xde
 801835e:	4b64      	ldr	r3, [pc, #400]	; (80184f0 <__gethex+0x308>)
 8018360:	4864      	ldr	r0, [pc, #400]	; (80184f4 <__gethex+0x30c>)
 8018362:	f001 fb2d 	bl	80199c0 <__assert_func>
 8018366:	3101      	adds	r1, #1
 8018368:	105b      	asrs	r3, r3, #1
 801836a:	e7ef      	b.n	801834c <__gethex+0x164>
 801836c:	0003      	movs	r3, r0
 801836e:	3314      	adds	r3, #20
 8018370:	9304      	str	r3, [sp, #16]
 8018372:	9309      	str	r3, [sp, #36]	; 0x24
 8018374:	2300      	movs	r3, #0
 8018376:	001e      	movs	r6, r3
 8018378:	9306      	str	r3, [sp, #24]
 801837a:	9b01      	ldr	r3, [sp, #4]
 801837c:	42ab      	cmp	r3, r5
 801837e:	d340      	bcc.n	8018402 <__gethex+0x21a>
 8018380:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8018382:	9b04      	ldr	r3, [sp, #16]
 8018384:	c540      	stmia	r5!, {r6}
 8018386:	1aed      	subs	r5, r5, r3
 8018388:	10ad      	asrs	r5, r5, #2
 801838a:	0030      	movs	r0, r6
 801838c:	6125      	str	r5, [r4, #16]
 801838e:	f000 fbcf 	bl	8018b30 <__hi0bits>
 8018392:	9b02      	ldr	r3, [sp, #8]
 8018394:	016d      	lsls	r5, r5, #5
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	1a2e      	subs	r6, r5, r0
 801839a:	9301      	str	r3, [sp, #4]
 801839c:	429e      	cmp	r6, r3
 801839e:	dd5a      	ble.n	8018456 <__gethex+0x26e>
 80183a0:	1af6      	subs	r6, r6, r3
 80183a2:	0031      	movs	r1, r6
 80183a4:	0020      	movs	r0, r4
 80183a6:	f000 ff71 	bl	801928c <__any_on>
 80183aa:	1e05      	subs	r5, r0, #0
 80183ac:	d016      	beq.n	80183dc <__gethex+0x1f4>
 80183ae:	2501      	movs	r5, #1
 80183b0:	211f      	movs	r1, #31
 80183b2:	0028      	movs	r0, r5
 80183b4:	1e73      	subs	r3, r6, #1
 80183b6:	4019      	ands	r1, r3
 80183b8:	4088      	lsls	r0, r1
 80183ba:	0001      	movs	r1, r0
 80183bc:	115a      	asrs	r2, r3, #5
 80183be:	9804      	ldr	r0, [sp, #16]
 80183c0:	0092      	lsls	r2, r2, #2
 80183c2:	5812      	ldr	r2, [r2, r0]
 80183c4:	420a      	tst	r2, r1
 80183c6:	d009      	beq.n	80183dc <__gethex+0x1f4>
 80183c8:	42ab      	cmp	r3, r5
 80183ca:	dd06      	ble.n	80183da <__gethex+0x1f2>
 80183cc:	0020      	movs	r0, r4
 80183ce:	1eb1      	subs	r1, r6, #2
 80183d0:	f000 ff5c 	bl	801928c <__any_on>
 80183d4:	3502      	adds	r5, #2
 80183d6:	2800      	cmp	r0, #0
 80183d8:	d100      	bne.n	80183dc <__gethex+0x1f4>
 80183da:	2502      	movs	r5, #2
 80183dc:	0031      	movs	r1, r6
 80183de:	0020      	movs	r0, r4
 80183e0:	f7ff fe98 	bl	8018114 <rshift>
 80183e4:	19bf      	adds	r7, r7, r6
 80183e6:	9b02      	ldr	r3, [sp, #8]
 80183e8:	689b      	ldr	r3, [r3, #8]
 80183ea:	9303      	str	r3, [sp, #12]
 80183ec:	42bb      	cmp	r3, r7
 80183ee:	da42      	bge.n	8018476 <__gethex+0x28e>
 80183f0:	0021      	movs	r1, r4
 80183f2:	9805      	ldr	r0, [sp, #20]
 80183f4:	f000 fae8 	bl	80189c8 <_Bfree>
 80183f8:	2300      	movs	r3, #0
 80183fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80183fc:	26a3      	movs	r6, #163	; 0xa3
 80183fe:	6013      	str	r3, [r2, #0]
 8018400:	e78b      	b.n	801831a <__gethex+0x132>
 8018402:	1e6b      	subs	r3, r5, #1
 8018404:	9308      	str	r3, [sp, #32]
 8018406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018408:	781b      	ldrb	r3, [r3, #0]
 801840a:	4293      	cmp	r3, r2
 801840c:	d014      	beq.n	8018438 <__gethex+0x250>
 801840e:	9b06      	ldr	r3, [sp, #24]
 8018410:	2b20      	cmp	r3, #32
 8018412:	d104      	bne.n	801841e <__gethex+0x236>
 8018414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018416:	c340      	stmia	r3!, {r6}
 8018418:	2600      	movs	r6, #0
 801841a:	9309      	str	r3, [sp, #36]	; 0x24
 801841c:	9606      	str	r6, [sp, #24]
 801841e:	9b08      	ldr	r3, [sp, #32]
 8018420:	7818      	ldrb	r0, [r3, #0]
 8018422:	f7ff fecb 	bl	80181bc <__hexdig_fun>
 8018426:	230f      	movs	r3, #15
 8018428:	4018      	ands	r0, r3
 801842a:	9b06      	ldr	r3, [sp, #24]
 801842c:	9d08      	ldr	r5, [sp, #32]
 801842e:	4098      	lsls	r0, r3
 8018430:	3304      	adds	r3, #4
 8018432:	4306      	orrs	r6, r0
 8018434:	9306      	str	r3, [sp, #24]
 8018436:	e7a0      	b.n	801837a <__gethex+0x192>
 8018438:	2301      	movs	r3, #1
 801843a:	9a03      	ldr	r2, [sp, #12]
 801843c:	1a9d      	subs	r5, r3, r2
 801843e:	9b08      	ldr	r3, [sp, #32]
 8018440:	195d      	adds	r5, r3, r5
 8018442:	9b01      	ldr	r3, [sp, #4]
 8018444:	429d      	cmp	r5, r3
 8018446:	d3e2      	bcc.n	801840e <__gethex+0x226>
 8018448:	0028      	movs	r0, r5
 801844a:	9907      	ldr	r1, [sp, #28]
 801844c:	f001 fa84 	bl	8019958 <strncmp>
 8018450:	2800      	cmp	r0, #0
 8018452:	d1dc      	bne.n	801840e <__gethex+0x226>
 8018454:	e791      	b.n	801837a <__gethex+0x192>
 8018456:	9b01      	ldr	r3, [sp, #4]
 8018458:	2500      	movs	r5, #0
 801845a:	429e      	cmp	r6, r3
 801845c:	dac3      	bge.n	80183e6 <__gethex+0x1fe>
 801845e:	1b9e      	subs	r6, r3, r6
 8018460:	0021      	movs	r1, r4
 8018462:	0032      	movs	r2, r6
 8018464:	9805      	ldr	r0, [sp, #20]
 8018466:	f000 fccd 	bl	8018e04 <__lshift>
 801846a:	0003      	movs	r3, r0
 801846c:	3314      	adds	r3, #20
 801846e:	0004      	movs	r4, r0
 8018470:	1bbf      	subs	r7, r7, r6
 8018472:	9304      	str	r3, [sp, #16]
 8018474:	e7b7      	b.n	80183e6 <__gethex+0x1fe>
 8018476:	9b02      	ldr	r3, [sp, #8]
 8018478:	685e      	ldr	r6, [r3, #4]
 801847a:	42be      	cmp	r6, r7
 801847c:	dd71      	ble.n	8018562 <__gethex+0x37a>
 801847e:	9b01      	ldr	r3, [sp, #4]
 8018480:	1bf6      	subs	r6, r6, r7
 8018482:	42b3      	cmp	r3, r6
 8018484:	dc38      	bgt.n	80184f8 <__gethex+0x310>
 8018486:	9b02      	ldr	r3, [sp, #8]
 8018488:	68db      	ldr	r3, [r3, #12]
 801848a:	2b02      	cmp	r3, #2
 801848c:	d026      	beq.n	80184dc <__gethex+0x2f4>
 801848e:	2b03      	cmp	r3, #3
 8018490:	d028      	beq.n	80184e4 <__gethex+0x2fc>
 8018492:	2b01      	cmp	r3, #1
 8018494:	d119      	bne.n	80184ca <__gethex+0x2e2>
 8018496:	9b01      	ldr	r3, [sp, #4]
 8018498:	42b3      	cmp	r3, r6
 801849a:	d116      	bne.n	80184ca <__gethex+0x2e2>
 801849c:	2b01      	cmp	r3, #1
 801849e:	d10d      	bne.n	80184bc <__gethex+0x2d4>
 80184a0:	9b02      	ldr	r3, [sp, #8]
 80184a2:	2662      	movs	r6, #98	; 0x62
 80184a4:	685b      	ldr	r3, [r3, #4]
 80184a6:	9301      	str	r3, [sp, #4]
 80184a8:	9a01      	ldr	r2, [sp, #4]
 80184aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184ac:	601a      	str	r2, [r3, #0]
 80184ae:	2301      	movs	r3, #1
 80184b0:	9a04      	ldr	r2, [sp, #16]
 80184b2:	6123      	str	r3, [r4, #16]
 80184b4:	6013      	str	r3, [r2, #0]
 80184b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80184b8:	601c      	str	r4, [r3, #0]
 80184ba:	e72e      	b.n	801831a <__gethex+0x132>
 80184bc:	9901      	ldr	r1, [sp, #4]
 80184be:	0020      	movs	r0, r4
 80184c0:	3901      	subs	r1, #1
 80184c2:	f000 fee3 	bl	801928c <__any_on>
 80184c6:	2800      	cmp	r0, #0
 80184c8:	d1ea      	bne.n	80184a0 <__gethex+0x2b8>
 80184ca:	0021      	movs	r1, r4
 80184cc:	9805      	ldr	r0, [sp, #20]
 80184ce:	f000 fa7b 	bl	80189c8 <_Bfree>
 80184d2:	2300      	movs	r3, #0
 80184d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80184d6:	2650      	movs	r6, #80	; 0x50
 80184d8:	6013      	str	r3, [r2, #0]
 80184da:	e71e      	b.n	801831a <__gethex+0x132>
 80184dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d1f3      	bne.n	80184ca <__gethex+0x2e2>
 80184e2:	e7dd      	b.n	80184a0 <__gethex+0x2b8>
 80184e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d1da      	bne.n	80184a0 <__gethex+0x2b8>
 80184ea:	e7ee      	b.n	80184ca <__gethex+0x2e2>
 80184ec:	0801bb14 	.word	0x0801bb14
 80184f0:	0801ba38 	.word	0x0801ba38
 80184f4:	0801baac 	.word	0x0801baac
 80184f8:	1e77      	subs	r7, r6, #1
 80184fa:	2d00      	cmp	r5, #0
 80184fc:	d12f      	bne.n	801855e <__gethex+0x376>
 80184fe:	2f00      	cmp	r7, #0
 8018500:	d004      	beq.n	801850c <__gethex+0x324>
 8018502:	0039      	movs	r1, r7
 8018504:	0020      	movs	r0, r4
 8018506:	f000 fec1 	bl	801928c <__any_on>
 801850a:	0005      	movs	r5, r0
 801850c:	231f      	movs	r3, #31
 801850e:	117a      	asrs	r2, r7, #5
 8018510:	401f      	ands	r7, r3
 8018512:	3b1e      	subs	r3, #30
 8018514:	40bb      	lsls	r3, r7
 8018516:	9904      	ldr	r1, [sp, #16]
 8018518:	0092      	lsls	r2, r2, #2
 801851a:	5852      	ldr	r2, [r2, r1]
 801851c:	421a      	tst	r2, r3
 801851e:	d001      	beq.n	8018524 <__gethex+0x33c>
 8018520:	2302      	movs	r3, #2
 8018522:	431d      	orrs	r5, r3
 8018524:	9b01      	ldr	r3, [sp, #4]
 8018526:	0031      	movs	r1, r6
 8018528:	1b9b      	subs	r3, r3, r6
 801852a:	2602      	movs	r6, #2
 801852c:	0020      	movs	r0, r4
 801852e:	9301      	str	r3, [sp, #4]
 8018530:	f7ff fdf0 	bl	8018114 <rshift>
 8018534:	9b02      	ldr	r3, [sp, #8]
 8018536:	685f      	ldr	r7, [r3, #4]
 8018538:	2d00      	cmp	r5, #0
 801853a:	d041      	beq.n	80185c0 <__gethex+0x3d8>
 801853c:	9b02      	ldr	r3, [sp, #8]
 801853e:	68db      	ldr	r3, [r3, #12]
 8018540:	2b02      	cmp	r3, #2
 8018542:	d010      	beq.n	8018566 <__gethex+0x37e>
 8018544:	2b03      	cmp	r3, #3
 8018546:	d012      	beq.n	801856e <__gethex+0x386>
 8018548:	2b01      	cmp	r3, #1
 801854a:	d106      	bne.n	801855a <__gethex+0x372>
 801854c:	07aa      	lsls	r2, r5, #30
 801854e:	d504      	bpl.n	801855a <__gethex+0x372>
 8018550:	9a04      	ldr	r2, [sp, #16]
 8018552:	6810      	ldr	r0, [r2, #0]
 8018554:	4305      	orrs	r5, r0
 8018556:	421d      	tst	r5, r3
 8018558:	d10c      	bne.n	8018574 <__gethex+0x38c>
 801855a:	2310      	movs	r3, #16
 801855c:	e02f      	b.n	80185be <__gethex+0x3d6>
 801855e:	2501      	movs	r5, #1
 8018560:	e7d4      	b.n	801850c <__gethex+0x324>
 8018562:	2601      	movs	r6, #1
 8018564:	e7e8      	b.n	8018538 <__gethex+0x350>
 8018566:	2301      	movs	r3, #1
 8018568:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801856a:	1a9b      	subs	r3, r3, r2
 801856c:	9313      	str	r3, [sp, #76]	; 0x4c
 801856e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018570:	2b00      	cmp	r3, #0
 8018572:	d0f2      	beq.n	801855a <__gethex+0x372>
 8018574:	6923      	ldr	r3, [r4, #16]
 8018576:	2000      	movs	r0, #0
 8018578:	9303      	str	r3, [sp, #12]
 801857a:	009b      	lsls	r3, r3, #2
 801857c:	9304      	str	r3, [sp, #16]
 801857e:	0023      	movs	r3, r4
 8018580:	9a04      	ldr	r2, [sp, #16]
 8018582:	3314      	adds	r3, #20
 8018584:	1899      	adds	r1, r3, r2
 8018586:	681a      	ldr	r2, [r3, #0]
 8018588:	1c55      	adds	r5, r2, #1
 801858a:	d01e      	beq.n	80185ca <__gethex+0x3e2>
 801858c:	3201      	adds	r2, #1
 801858e:	601a      	str	r2, [r3, #0]
 8018590:	0023      	movs	r3, r4
 8018592:	3314      	adds	r3, #20
 8018594:	2e02      	cmp	r6, #2
 8018596:	d140      	bne.n	801861a <__gethex+0x432>
 8018598:	9a02      	ldr	r2, [sp, #8]
 801859a:	9901      	ldr	r1, [sp, #4]
 801859c:	6812      	ldr	r2, [r2, #0]
 801859e:	3a01      	subs	r2, #1
 80185a0:	428a      	cmp	r2, r1
 80185a2:	d10b      	bne.n	80185bc <__gethex+0x3d4>
 80185a4:	114a      	asrs	r2, r1, #5
 80185a6:	211f      	movs	r1, #31
 80185a8:	9801      	ldr	r0, [sp, #4]
 80185aa:	0092      	lsls	r2, r2, #2
 80185ac:	4001      	ands	r1, r0
 80185ae:	2001      	movs	r0, #1
 80185b0:	0005      	movs	r5, r0
 80185b2:	408d      	lsls	r5, r1
 80185b4:	58d3      	ldr	r3, [r2, r3]
 80185b6:	422b      	tst	r3, r5
 80185b8:	d000      	beq.n	80185bc <__gethex+0x3d4>
 80185ba:	2601      	movs	r6, #1
 80185bc:	2320      	movs	r3, #32
 80185be:	431e      	orrs	r6, r3
 80185c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80185c2:	601c      	str	r4, [r3, #0]
 80185c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80185c6:	601f      	str	r7, [r3, #0]
 80185c8:	e6a7      	b.n	801831a <__gethex+0x132>
 80185ca:	c301      	stmia	r3!, {r0}
 80185cc:	4299      	cmp	r1, r3
 80185ce:	d8da      	bhi.n	8018586 <__gethex+0x39e>
 80185d0:	9b03      	ldr	r3, [sp, #12]
 80185d2:	68a2      	ldr	r2, [r4, #8]
 80185d4:	4293      	cmp	r3, r2
 80185d6:	db17      	blt.n	8018608 <__gethex+0x420>
 80185d8:	6863      	ldr	r3, [r4, #4]
 80185da:	9805      	ldr	r0, [sp, #20]
 80185dc:	1c59      	adds	r1, r3, #1
 80185de:	f000 f9af 	bl	8018940 <_Balloc>
 80185e2:	1e05      	subs	r5, r0, #0
 80185e4:	d103      	bne.n	80185ee <__gethex+0x406>
 80185e6:	0002      	movs	r2, r0
 80185e8:	2184      	movs	r1, #132	; 0x84
 80185ea:	4b1c      	ldr	r3, [pc, #112]	; (801865c <__gethex+0x474>)
 80185ec:	e6b8      	b.n	8018360 <__gethex+0x178>
 80185ee:	0021      	movs	r1, r4
 80185f0:	6923      	ldr	r3, [r4, #16]
 80185f2:	310c      	adds	r1, #12
 80185f4:	1c9a      	adds	r2, r3, #2
 80185f6:	0092      	lsls	r2, r2, #2
 80185f8:	300c      	adds	r0, #12
 80185fa:	f7fc fc49 	bl	8014e90 <memcpy>
 80185fe:	0021      	movs	r1, r4
 8018600:	9805      	ldr	r0, [sp, #20]
 8018602:	f000 f9e1 	bl	80189c8 <_Bfree>
 8018606:	002c      	movs	r4, r5
 8018608:	6923      	ldr	r3, [r4, #16]
 801860a:	1c5a      	adds	r2, r3, #1
 801860c:	6122      	str	r2, [r4, #16]
 801860e:	2201      	movs	r2, #1
 8018610:	3304      	adds	r3, #4
 8018612:	009b      	lsls	r3, r3, #2
 8018614:	18e3      	adds	r3, r4, r3
 8018616:	605a      	str	r2, [r3, #4]
 8018618:	e7ba      	b.n	8018590 <__gethex+0x3a8>
 801861a:	6922      	ldr	r2, [r4, #16]
 801861c:	9903      	ldr	r1, [sp, #12]
 801861e:	428a      	cmp	r2, r1
 8018620:	dd09      	ble.n	8018636 <__gethex+0x44e>
 8018622:	2101      	movs	r1, #1
 8018624:	0020      	movs	r0, r4
 8018626:	f7ff fd75 	bl	8018114 <rshift>
 801862a:	9b02      	ldr	r3, [sp, #8]
 801862c:	3701      	adds	r7, #1
 801862e:	689b      	ldr	r3, [r3, #8]
 8018630:	42bb      	cmp	r3, r7
 8018632:	dac2      	bge.n	80185ba <__gethex+0x3d2>
 8018634:	e6dc      	b.n	80183f0 <__gethex+0x208>
 8018636:	221f      	movs	r2, #31
 8018638:	9d01      	ldr	r5, [sp, #4]
 801863a:	9901      	ldr	r1, [sp, #4]
 801863c:	2601      	movs	r6, #1
 801863e:	4015      	ands	r5, r2
 8018640:	4211      	tst	r1, r2
 8018642:	d0bb      	beq.n	80185bc <__gethex+0x3d4>
 8018644:	9a04      	ldr	r2, [sp, #16]
 8018646:	189b      	adds	r3, r3, r2
 8018648:	3b04      	subs	r3, #4
 801864a:	6818      	ldr	r0, [r3, #0]
 801864c:	f000 fa70 	bl	8018b30 <__hi0bits>
 8018650:	2320      	movs	r3, #32
 8018652:	1b5d      	subs	r5, r3, r5
 8018654:	42a8      	cmp	r0, r5
 8018656:	dbe4      	blt.n	8018622 <__gethex+0x43a>
 8018658:	e7b0      	b.n	80185bc <__gethex+0x3d4>
 801865a:	46c0      	nop			; (mov r8, r8)
 801865c:	0801ba38 	.word	0x0801ba38

08018660 <L_shift>:
 8018660:	2308      	movs	r3, #8
 8018662:	b570      	push	{r4, r5, r6, lr}
 8018664:	2520      	movs	r5, #32
 8018666:	1a9a      	subs	r2, r3, r2
 8018668:	0092      	lsls	r2, r2, #2
 801866a:	1aad      	subs	r5, r5, r2
 801866c:	6843      	ldr	r3, [r0, #4]
 801866e:	6806      	ldr	r6, [r0, #0]
 8018670:	001c      	movs	r4, r3
 8018672:	40ac      	lsls	r4, r5
 8018674:	40d3      	lsrs	r3, r2
 8018676:	4334      	orrs	r4, r6
 8018678:	6004      	str	r4, [r0, #0]
 801867a:	6043      	str	r3, [r0, #4]
 801867c:	3004      	adds	r0, #4
 801867e:	4288      	cmp	r0, r1
 8018680:	d3f4      	bcc.n	801866c <L_shift+0xc>
 8018682:	bd70      	pop	{r4, r5, r6, pc}

08018684 <__match>:
 8018684:	b530      	push	{r4, r5, lr}
 8018686:	6803      	ldr	r3, [r0, #0]
 8018688:	780c      	ldrb	r4, [r1, #0]
 801868a:	3301      	adds	r3, #1
 801868c:	2c00      	cmp	r4, #0
 801868e:	d102      	bne.n	8018696 <__match+0x12>
 8018690:	6003      	str	r3, [r0, #0]
 8018692:	2001      	movs	r0, #1
 8018694:	bd30      	pop	{r4, r5, pc}
 8018696:	781a      	ldrb	r2, [r3, #0]
 8018698:	0015      	movs	r5, r2
 801869a:	3d41      	subs	r5, #65	; 0x41
 801869c:	2d19      	cmp	r5, #25
 801869e:	d800      	bhi.n	80186a2 <__match+0x1e>
 80186a0:	3220      	adds	r2, #32
 80186a2:	3101      	adds	r1, #1
 80186a4:	42a2      	cmp	r2, r4
 80186a6:	d0ef      	beq.n	8018688 <__match+0x4>
 80186a8:	2000      	movs	r0, #0
 80186aa:	e7f3      	b.n	8018694 <__match+0x10>

080186ac <__hexnan>:
 80186ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186ae:	680b      	ldr	r3, [r1, #0]
 80186b0:	b08b      	sub	sp, #44	; 0x2c
 80186b2:	9201      	str	r2, [sp, #4]
 80186b4:	9901      	ldr	r1, [sp, #4]
 80186b6:	115a      	asrs	r2, r3, #5
 80186b8:	0092      	lsls	r2, r2, #2
 80186ba:	188a      	adds	r2, r1, r2
 80186bc:	9202      	str	r2, [sp, #8]
 80186be:	0019      	movs	r1, r3
 80186c0:	221f      	movs	r2, #31
 80186c2:	4011      	ands	r1, r2
 80186c4:	9008      	str	r0, [sp, #32]
 80186c6:	9106      	str	r1, [sp, #24]
 80186c8:	4213      	tst	r3, r2
 80186ca:	d002      	beq.n	80186d2 <__hexnan+0x26>
 80186cc:	9b02      	ldr	r3, [sp, #8]
 80186ce:	3304      	adds	r3, #4
 80186d0:	9302      	str	r3, [sp, #8]
 80186d2:	9b02      	ldr	r3, [sp, #8]
 80186d4:	2500      	movs	r5, #0
 80186d6:	1f1e      	subs	r6, r3, #4
 80186d8:	0037      	movs	r7, r6
 80186da:	0034      	movs	r4, r6
 80186dc:	9b08      	ldr	r3, [sp, #32]
 80186de:	6035      	str	r5, [r6, #0]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	9507      	str	r5, [sp, #28]
 80186e4:	9305      	str	r3, [sp, #20]
 80186e6:	9503      	str	r5, [sp, #12]
 80186e8:	9b05      	ldr	r3, [sp, #20]
 80186ea:	3301      	adds	r3, #1
 80186ec:	9309      	str	r3, [sp, #36]	; 0x24
 80186ee:	9b05      	ldr	r3, [sp, #20]
 80186f0:	785b      	ldrb	r3, [r3, #1]
 80186f2:	9304      	str	r3, [sp, #16]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d028      	beq.n	801874a <__hexnan+0x9e>
 80186f8:	9804      	ldr	r0, [sp, #16]
 80186fa:	f7ff fd5f 	bl	80181bc <__hexdig_fun>
 80186fe:	2800      	cmp	r0, #0
 8018700:	d154      	bne.n	80187ac <__hexnan+0x100>
 8018702:	9b04      	ldr	r3, [sp, #16]
 8018704:	2b20      	cmp	r3, #32
 8018706:	d819      	bhi.n	801873c <__hexnan+0x90>
 8018708:	9b03      	ldr	r3, [sp, #12]
 801870a:	9a07      	ldr	r2, [sp, #28]
 801870c:	4293      	cmp	r3, r2
 801870e:	dd12      	ble.n	8018736 <__hexnan+0x8a>
 8018710:	42bc      	cmp	r4, r7
 8018712:	d206      	bcs.n	8018722 <__hexnan+0x76>
 8018714:	2d07      	cmp	r5, #7
 8018716:	dc04      	bgt.n	8018722 <__hexnan+0x76>
 8018718:	002a      	movs	r2, r5
 801871a:	0039      	movs	r1, r7
 801871c:	0020      	movs	r0, r4
 801871e:	f7ff ff9f 	bl	8018660 <L_shift>
 8018722:	9b01      	ldr	r3, [sp, #4]
 8018724:	2508      	movs	r5, #8
 8018726:	429c      	cmp	r4, r3
 8018728:	d905      	bls.n	8018736 <__hexnan+0x8a>
 801872a:	1f27      	subs	r7, r4, #4
 801872c:	2500      	movs	r5, #0
 801872e:	003c      	movs	r4, r7
 8018730:	9b03      	ldr	r3, [sp, #12]
 8018732:	603d      	str	r5, [r7, #0]
 8018734:	9307      	str	r3, [sp, #28]
 8018736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018738:	9305      	str	r3, [sp, #20]
 801873a:	e7d5      	b.n	80186e8 <__hexnan+0x3c>
 801873c:	9b04      	ldr	r3, [sp, #16]
 801873e:	2b29      	cmp	r3, #41	; 0x29
 8018740:	d159      	bne.n	80187f6 <__hexnan+0x14a>
 8018742:	9b05      	ldr	r3, [sp, #20]
 8018744:	9a08      	ldr	r2, [sp, #32]
 8018746:	3302      	adds	r3, #2
 8018748:	6013      	str	r3, [r2, #0]
 801874a:	9b03      	ldr	r3, [sp, #12]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d052      	beq.n	80187f6 <__hexnan+0x14a>
 8018750:	42bc      	cmp	r4, r7
 8018752:	d206      	bcs.n	8018762 <__hexnan+0xb6>
 8018754:	2d07      	cmp	r5, #7
 8018756:	dc04      	bgt.n	8018762 <__hexnan+0xb6>
 8018758:	002a      	movs	r2, r5
 801875a:	0039      	movs	r1, r7
 801875c:	0020      	movs	r0, r4
 801875e:	f7ff ff7f 	bl	8018660 <L_shift>
 8018762:	9b01      	ldr	r3, [sp, #4]
 8018764:	429c      	cmp	r4, r3
 8018766:	d935      	bls.n	80187d4 <__hexnan+0x128>
 8018768:	001a      	movs	r2, r3
 801876a:	0023      	movs	r3, r4
 801876c:	cb02      	ldmia	r3!, {r1}
 801876e:	c202      	stmia	r2!, {r1}
 8018770:	429e      	cmp	r6, r3
 8018772:	d2fb      	bcs.n	801876c <__hexnan+0xc0>
 8018774:	9b02      	ldr	r3, [sp, #8]
 8018776:	1c61      	adds	r1, r4, #1
 8018778:	1eda      	subs	r2, r3, #3
 801877a:	2304      	movs	r3, #4
 801877c:	4291      	cmp	r1, r2
 801877e:	d805      	bhi.n	801878c <__hexnan+0xe0>
 8018780:	9b02      	ldr	r3, [sp, #8]
 8018782:	3b04      	subs	r3, #4
 8018784:	1b1b      	subs	r3, r3, r4
 8018786:	089b      	lsrs	r3, r3, #2
 8018788:	3301      	adds	r3, #1
 801878a:	009b      	lsls	r3, r3, #2
 801878c:	9a01      	ldr	r2, [sp, #4]
 801878e:	18d3      	adds	r3, r2, r3
 8018790:	2200      	movs	r2, #0
 8018792:	c304      	stmia	r3!, {r2}
 8018794:	429e      	cmp	r6, r3
 8018796:	d2fc      	bcs.n	8018792 <__hexnan+0xe6>
 8018798:	6833      	ldr	r3, [r6, #0]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d104      	bne.n	80187a8 <__hexnan+0xfc>
 801879e:	9b01      	ldr	r3, [sp, #4]
 80187a0:	429e      	cmp	r6, r3
 80187a2:	d126      	bne.n	80187f2 <__hexnan+0x146>
 80187a4:	2301      	movs	r3, #1
 80187a6:	6033      	str	r3, [r6, #0]
 80187a8:	2005      	movs	r0, #5
 80187aa:	e025      	b.n	80187f8 <__hexnan+0x14c>
 80187ac:	9b03      	ldr	r3, [sp, #12]
 80187ae:	3501      	adds	r5, #1
 80187b0:	3301      	adds	r3, #1
 80187b2:	9303      	str	r3, [sp, #12]
 80187b4:	2d08      	cmp	r5, #8
 80187b6:	dd06      	ble.n	80187c6 <__hexnan+0x11a>
 80187b8:	9b01      	ldr	r3, [sp, #4]
 80187ba:	429c      	cmp	r4, r3
 80187bc:	d9bb      	bls.n	8018736 <__hexnan+0x8a>
 80187be:	2300      	movs	r3, #0
 80187c0:	2501      	movs	r5, #1
 80187c2:	3c04      	subs	r4, #4
 80187c4:	6023      	str	r3, [r4, #0]
 80187c6:	220f      	movs	r2, #15
 80187c8:	6823      	ldr	r3, [r4, #0]
 80187ca:	4010      	ands	r0, r2
 80187cc:	011b      	lsls	r3, r3, #4
 80187ce:	4318      	orrs	r0, r3
 80187d0:	6020      	str	r0, [r4, #0]
 80187d2:	e7b0      	b.n	8018736 <__hexnan+0x8a>
 80187d4:	9b06      	ldr	r3, [sp, #24]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d0de      	beq.n	8018798 <__hexnan+0xec>
 80187da:	2120      	movs	r1, #32
 80187dc:	9a06      	ldr	r2, [sp, #24]
 80187de:	9b02      	ldr	r3, [sp, #8]
 80187e0:	1a89      	subs	r1, r1, r2
 80187e2:	2201      	movs	r2, #1
 80187e4:	4252      	negs	r2, r2
 80187e6:	40ca      	lsrs	r2, r1
 80187e8:	3b04      	subs	r3, #4
 80187ea:	6819      	ldr	r1, [r3, #0]
 80187ec:	400a      	ands	r2, r1
 80187ee:	601a      	str	r2, [r3, #0]
 80187f0:	e7d2      	b.n	8018798 <__hexnan+0xec>
 80187f2:	3e04      	subs	r6, #4
 80187f4:	e7d0      	b.n	8018798 <__hexnan+0xec>
 80187f6:	2004      	movs	r0, #4
 80187f8:	b00b      	add	sp, #44	; 0x2c
 80187fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187fc <_localeconv_r>:
 80187fc:	4800      	ldr	r0, [pc, #0]	; (8018800 <_localeconv_r+0x4>)
 80187fe:	4770      	bx	lr
 8018800:	20000430 	.word	0x20000430

08018804 <__retarget_lock_init_recursive>:
 8018804:	4770      	bx	lr

08018806 <__retarget_lock_acquire_recursive>:
 8018806:	4770      	bx	lr

08018808 <__retarget_lock_release_recursive>:
 8018808:	4770      	bx	lr
	...

0801880c <__swhatbuf_r>:
 801880c:	b570      	push	{r4, r5, r6, lr}
 801880e:	000e      	movs	r6, r1
 8018810:	001d      	movs	r5, r3
 8018812:	230e      	movs	r3, #14
 8018814:	5ec9      	ldrsh	r1, [r1, r3]
 8018816:	0014      	movs	r4, r2
 8018818:	b096      	sub	sp, #88	; 0x58
 801881a:	2900      	cmp	r1, #0
 801881c:	da08      	bge.n	8018830 <__swhatbuf_r+0x24>
 801881e:	220c      	movs	r2, #12
 8018820:	5eb3      	ldrsh	r3, [r6, r2]
 8018822:	2200      	movs	r2, #0
 8018824:	602a      	str	r2, [r5, #0]
 8018826:	061b      	lsls	r3, r3, #24
 8018828:	d411      	bmi.n	801884e <__swhatbuf_r+0x42>
 801882a:	2380      	movs	r3, #128	; 0x80
 801882c:	00db      	lsls	r3, r3, #3
 801882e:	e00f      	b.n	8018850 <__swhatbuf_r+0x44>
 8018830:	466a      	mov	r2, sp
 8018832:	f001 f905 	bl	8019a40 <_fstat_r>
 8018836:	2800      	cmp	r0, #0
 8018838:	dbf1      	blt.n	801881e <__swhatbuf_r+0x12>
 801883a:	23f0      	movs	r3, #240	; 0xf0
 801883c:	9901      	ldr	r1, [sp, #4]
 801883e:	021b      	lsls	r3, r3, #8
 8018840:	4019      	ands	r1, r3
 8018842:	4b05      	ldr	r3, [pc, #20]	; (8018858 <__swhatbuf_r+0x4c>)
 8018844:	18c9      	adds	r1, r1, r3
 8018846:	424b      	negs	r3, r1
 8018848:	4159      	adcs	r1, r3
 801884a:	6029      	str	r1, [r5, #0]
 801884c:	e7ed      	b.n	801882a <__swhatbuf_r+0x1e>
 801884e:	2340      	movs	r3, #64	; 0x40
 8018850:	2000      	movs	r0, #0
 8018852:	6023      	str	r3, [r4, #0]
 8018854:	b016      	add	sp, #88	; 0x58
 8018856:	bd70      	pop	{r4, r5, r6, pc}
 8018858:	ffffe000 	.word	0xffffe000

0801885c <__smakebuf_r>:
 801885c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801885e:	2602      	movs	r6, #2
 8018860:	898b      	ldrh	r3, [r1, #12]
 8018862:	0005      	movs	r5, r0
 8018864:	000c      	movs	r4, r1
 8018866:	4233      	tst	r3, r6
 8018868:	d006      	beq.n	8018878 <__smakebuf_r+0x1c>
 801886a:	0023      	movs	r3, r4
 801886c:	3347      	adds	r3, #71	; 0x47
 801886e:	6023      	str	r3, [r4, #0]
 8018870:	6123      	str	r3, [r4, #16]
 8018872:	2301      	movs	r3, #1
 8018874:	6163      	str	r3, [r4, #20]
 8018876:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8018878:	466a      	mov	r2, sp
 801887a:	ab01      	add	r3, sp, #4
 801887c:	f7ff ffc6 	bl	801880c <__swhatbuf_r>
 8018880:	9900      	ldr	r1, [sp, #0]
 8018882:	0007      	movs	r7, r0
 8018884:	0028      	movs	r0, r5
 8018886:	f7fc fb81 	bl	8014f8c <_malloc_r>
 801888a:	2800      	cmp	r0, #0
 801888c:	d108      	bne.n	80188a0 <__smakebuf_r+0x44>
 801888e:	220c      	movs	r2, #12
 8018890:	5ea3      	ldrsh	r3, [r4, r2]
 8018892:	059a      	lsls	r2, r3, #22
 8018894:	d4ef      	bmi.n	8018876 <__smakebuf_r+0x1a>
 8018896:	2203      	movs	r2, #3
 8018898:	4393      	bics	r3, r2
 801889a:	431e      	orrs	r6, r3
 801889c:	81a6      	strh	r6, [r4, #12]
 801889e:	e7e4      	b.n	801886a <__smakebuf_r+0xe>
 80188a0:	4b0f      	ldr	r3, [pc, #60]	; (80188e0 <__smakebuf_r+0x84>)
 80188a2:	62ab      	str	r3, [r5, #40]	; 0x28
 80188a4:	2380      	movs	r3, #128	; 0x80
 80188a6:	89a2      	ldrh	r2, [r4, #12]
 80188a8:	6020      	str	r0, [r4, #0]
 80188aa:	4313      	orrs	r3, r2
 80188ac:	81a3      	strh	r3, [r4, #12]
 80188ae:	9b00      	ldr	r3, [sp, #0]
 80188b0:	6120      	str	r0, [r4, #16]
 80188b2:	6163      	str	r3, [r4, #20]
 80188b4:	9b01      	ldr	r3, [sp, #4]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d00d      	beq.n	80188d6 <__smakebuf_r+0x7a>
 80188ba:	0028      	movs	r0, r5
 80188bc:	230e      	movs	r3, #14
 80188be:	5ee1      	ldrsh	r1, [r4, r3]
 80188c0:	f001 f8d0 	bl	8019a64 <_isatty_r>
 80188c4:	2800      	cmp	r0, #0
 80188c6:	d006      	beq.n	80188d6 <__smakebuf_r+0x7a>
 80188c8:	2203      	movs	r2, #3
 80188ca:	89a3      	ldrh	r3, [r4, #12]
 80188cc:	4393      	bics	r3, r2
 80188ce:	001a      	movs	r2, r3
 80188d0:	2301      	movs	r3, #1
 80188d2:	4313      	orrs	r3, r2
 80188d4:	81a3      	strh	r3, [r4, #12]
 80188d6:	89a0      	ldrh	r0, [r4, #12]
 80188d8:	4307      	orrs	r7, r0
 80188da:	81a7      	strh	r7, [r4, #12]
 80188dc:	e7cb      	b.n	8018876 <__smakebuf_r+0x1a>
 80188de:	46c0      	nop			; (mov r8, r8)
 80188e0:	08017f59 	.word	0x08017f59

080188e4 <__ascii_mbtowc>:
 80188e4:	b082      	sub	sp, #8
 80188e6:	2900      	cmp	r1, #0
 80188e8:	d100      	bne.n	80188ec <__ascii_mbtowc+0x8>
 80188ea:	a901      	add	r1, sp, #4
 80188ec:	1e10      	subs	r0, r2, #0
 80188ee:	d006      	beq.n	80188fe <__ascii_mbtowc+0x1a>
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d006      	beq.n	8018902 <__ascii_mbtowc+0x1e>
 80188f4:	7813      	ldrb	r3, [r2, #0]
 80188f6:	600b      	str	r3, [r1, #0]
 80188f8:	7810      	ldrb	r0, [r2, #0]
 80188fa:	1e43      	subs	r3, r0, #1
 80188fc:	4198      	sbcs	r0, r3
 80188fe:	b002      	add	sp, #8
 8018900:	4770      	bx	lr
 8018902:	2002      	movs	r0, #2
 8018904:	4240      	negs	r0, r0
 8018906:	e7fa      	b.n	80188fe <__ascii_mbtowc+0x1a>

08018908 <memchr>:
 8018908:	b2c9      	uxtb	r1, r1
 801890a:	1882      	adds	r2, r0, r2
 801890c:	4290      	cmp	r0, r2
 801890e:	d101      	bne.n	8018914 <memchr+0xc>
 8018910:	2000      	movs	r0, #0
 8018912:	4770      	bx	lr
 8018914:	7803      	ldrb	r3, [r0, #0]
 8018916:	428b      	cmp	r3, r1
 8018918:	d0fb      	beq.n	8018912 <memchr+0xa>
 801891a:	3001      	adds	r0, #1
 801891c:	e7f6      	b.n	801890c <memchr+0x4>
	...

08018920 <__malloc_lock>:
 8018920:	b510      	push	{r4, lr}
 8018922:	4802      	ldr	r0, [pc, #8]	; (801892c <__malloc_lock+0xc>)
 8018924:	f7ff ff6f 	bl	8018806 <__retarget_lock_acquire_recursive>
 8018928:	bd10      	pop	{r4, pc}
 801892a:	46c0      	nop			; (mov r8, r8)
 801892c:	20005430 	.word	0x20005430

08018930 <__malloc_unlock>:
 8018930:	b510      	push	{r4, lr}
 8018932:	4802      	ldr	r0, [pc, #8]	; (801893c <__malloc_unlock+0xc>)
 8018934:	f7ff ff68 	bl	8018808 <__retarget_lock_release_recursive>
 8018938:	bd10      	pop	{r4, pc}
 801893a:	46c0      	nop			; (mov r8, r8)
 801893c:	20005430 	.word	0x20005430

08018940 <_Balloc>:
 8018940:	b570      	push	{r4, r5, r6, lr}
 8018942:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018944:	0006      	movs	r6, r0
 8018946:	000c      	movs	r4, r1
 8018948:	2d00      	cmp	r5, #0
 801894a:	d10e      	bne.n	801896a <_Balloc+0x2a>
 801894c:	2010      	movs	r0, #16
 801894e:	f7fc fa8b 	bl	8014e68 <malloc>
 8018952:	1e02      	subs	r2, r0, #0
 8018954:	6270      	str	r0, [r6, #36]	; 0x24
 8018956:	d104      	bne.n	8018962 <_Balloc+0x22>
 8018958:	2166      	movs	r1, #102	; 0x66
 801895a:	4b19      	ldr	r3, [pc, #100]	; (80189c0 <_Balloc+0x80>)
 801895c:	4819      	ldr	r0, [pc, #100]	; (80189c4 <_Balloc+0x84>)
 801895e:	f001 f82f 	bl	80199c0 <__assert_func>
 8018962:	6045      	str	r5, [r0, #4]
 8018964:	6085      	str	r5, [r0, #8]
 8018966:	6005      	str	r5, [r0, #0]
 8018968:	60c5      	str	r5, [r0, #12]
 801896a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 801896c:	68eb      	ldr	r3, [r5, #12]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d013      	beq.n	801899a <_Balloc+0x5a>
 8018972:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018974:	00a2      	lsls	r2, r4, #2
 8018976:	68db      	ldr	r3, [r3, #12]
 8018978:	189b      	adds	r3, r3, r2
 801897a:	6818      	ldr	r0, [r3, #0]
 801897c:	2800      	cmp	r0, #0
 801897e:	d118      	bne.n	80189b2 <_Balloc+0x72>
 8018980:	2101      	movs	r1, #1
 8018982:	000d      	movs	r5, r1
 8018984:	40a5      	lsls	r5, r4
 8018986:	1d6a      	adds	r2, r5, #5
 8018988:	0030      	movs	r0, r6
 801898a:	0092      	lsls	r2, r2, #2
 801898c:	f000 fca1 	bl	80192d2 <_calloc_r>
 8018990:	2800      	cmp	r0, #0
 8018992:	d00c      	beq.n	80189ae <_Balloc+0x6e>
 8018994:	6044      	str	r4, [r0, #4]
 8018996:	6085      	str	r5, [r0, #8]
 8018998:	e00d      	b.n	80189b6 <_Balloc+0x76>
 801899a:	2221      	movs	r2, #33	; 0x21
 801899c:	2104      	movs	r1, #4
 801899e:	0030      	movs	r0, r6
 80189a0:	f000 fc97 	bl	80192d2 <_calloc_r>
 80189a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80189a6:	60e8      	str	r0, [r5, #12]
 80189a8:	68db      	ldr	r3, [r3, #12]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d1e1      	bne.n	8018972 <_Balloc+0x32>
 80189ae:	2000      	movs	r0, #0
 80189b0:	bd70      	pop	{r4, r5, r6, pc}
 80189b2:	6802      	ldr	r2, [r0, #0]
 80189b4:	601a      	str	r2, [r3, #0]
 80189b6:	2300      	movs	r3, #0
 80189b8:	6103      	str	r3, [r0, #16]
 80189ba:	60c3      	str	r3, [r0, #12]
 80189bc:	e7f8      	b.n	80189b0 <_Balloc+0x70>
 80189be:	46c0      	nop			; (mov r8, r8)
 80189c0:	0801b9c6 	.word	0x0801b9c6
 80189c4:	0801bb28 	.word	0x0801bb28

080189c8 <_Bfree>:
 80189c8:	b570      	push	{r4, r5, r6, lr}
 80189ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80189cc:	0005      	movs	r5, r0
 80189ce:	000c      	movs	r4, r1
 80189d0:	2e00      	cmp	r6, #0
 80189d2:	d10e      	bne.n	80189f2 <_Bfree+0x2a>
 80189d4:	2010      	movs	r0, #16
 80189d6:	f7fc fa47 	bl	8014e68 <malloc>
 80189da:	1e02      	subs	r2, r0, #0
 80189dc:	6268      	str	r0, [r5, #36]	; 0x24
 80189de:	d104      	bne.n	80189ea <_Bfree+0x22>
 80189e0:	218a      	movs	r1, #138	; 0x8a
 80189e2:	4b09      	ldr	r3, [pc, #36]	; (8018a08 <_Bfree+0x40>)
 80189e4:	4809      	ldr	r0, [pc, #36]	; (8018a0c <_Bfree+0x44>)
 80189e6:	f000 ffeb 	bl	80199c0 <__assert_func>
 80189ea:	6046      	str	r6, [r0, #4]
 80189ec:	6086      	str	r6, [r0, #8]
 80189ee:	6006      	str	r6, [r0, #0]
 80189f0:	60c6      	str	r6, [r0, #12]
 80189f2:	2c00      	cmp	r4, #0
 80189f4:	d007      	beq.n	8018a06 <_Bfree+0x3e>
 80189f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80189f8:	6862      	ldr	r2, [r4, #4]
 80189fa:	68db      	ldr	r3, [r3, #12]
 80189fc:	0092      	lsls	r2, r2, #2
 80189fe:	189b      	adds	r3, r3, r2
 8018a00:	681a      	ldr	r2, [r3, #0]
 8018a02:	6022      	str	r2, [r4, #0]
 8018a04:	601c      	str	r4, [r3, #0]
 8018a06:	bd70      	pop	{r4, r5, r6, pc}
 8018a08:	0801b9c6 	.word	0x0801b9c6
 8018a0c:	0801bb28 	.word	0x0801bb28

08018a10 <__multadd>:
 8018a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a12:	000e      	movs	r6, r1
 8018a14:	9001      	str	r0, [sp, #4]
 8018a16:	000c      	movs	r4, r1
 8018a18:	001d      	movs	r5, r3
 8018a1a:	2000      	movs	r0, #0
 8018a1c:	690f      	ldr	r7, [r1, #16]
 8018a1e:	3614      	adds	r6, #20
 8018a20:	6833      	ldr	r3, [r6, #0]
 8018a22:	3001      	adds	r0, #1
 8018a24:	b299      	uxth	r1, r3
 8018a26:	4351      	muls	r1, r2
 8018a28:	0c1b      	lsrs	r3, r3, #16
 8018a2a:	4353      	muls	r3, r2
 8018a2c:	1949      	adds	r1, r1, r5
 8018a2e:	0c0d      	lsrs	r5, r1, #16
 8018a30:	195b      	adds	r3, r3, r5
 8018a32:	0c1d      	lsrs	r5, r3, #16
 8018a34:	b289      	uxth	r1, r1
 8018a36:	041b      	lsls	r3, r3, #16
 8018a38:	185b      	adds	r3, r3, r1
 8018a3a:	c608      	stmia	r6!, {r3}
 8018a3c:	4287      	cmp	r7, r0
 8018a3e:	dcef      	bgt.n	8018a20 <__multadd+0x10>
 8018a40:	2d00      	cmp	r5, #0
 8018a42:	d022      	beq.n	8018a8a <__multadd+0x7a>
 8018a44:	68a3      	ldr	r3, [r4, #8]
 8018a46:	42bb      	cmp	r3, r7
 8018a48:	dc19      	bgt.n	8018a7e <__multadd+0x6e>
 8018a4a:	6863      	ldr	r3, [r4, #4]
 8018a4c:	9801      	ldr	r0, [sp, #4]
 8018a4e:	1c59      	adds	r1, r3, #1
 8018a50:	f7ff ff76 	bl	8018940 <_Balloc>
 8018a54:	1e06      	subs	r6, r0, #0
 8018a56:	d105      	bne.n	8018a64 <__multadd+0x54>
 8018a58:	0002      	movs	r2, r0
 8018a5a:	21b5      	movs	r1, #181	; 0xb5
 8018a5c:	4b0c      	ldr	r3, [pc, #48]	; (8018a90 <__multadd+0x80>)
 8018a5e:	480d      	ldr	r0, [pc, #52]	; (8018a94 <__multadd+0x84>)
 8018a60:	f000 ffae 	bl	80199c0 <__assert_func>
 8018a64:	0021      	movs	r1, r4
 8018a66:	6923      	ldr	r3, [r4, #16]
 8018a68:	310c      	adds	r1, #12
 8018a6a:	1c9a      	adds	r2, r3, #2
 8018a6c:	0092      	lsls	r2, r2, #2
 8018a6e:	300c      	adds	r0, #12
 8018a70:	f7fc fa0e 	bl	8014e90 <memcpy>
 8018a74:	0021      	movs	r1, r4
 8018a76:	9801      	ldr	r0, [sp, #4]
 8018a78:	f7ff ffa6 	bl	80189c8 <_Bfree>
 8018a7c:	0034      	movs	r4, r6
 8018a7e:	1d3b      	adds	r3, r7, #4
 8018a80:	009b      	lsls	r3, r3, #2
 8018a82:	18e3      	adds	r3, r4, r3
 8018a84:	605d      	str	r5, [r3, #4]
 8018a86:	1c7b      	adds	r3, r7, #1
 8018a88:	6123      	str	r3, [r4, #16]
 8018a8a:	0020      	movs	r0, r4
 8018a8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018a8e:	46c0      	nop			; (mov r8, r8)
 8018a90:	0801ba38 	.word	0x0801ba38
 8018a94:	0801bb28 	.word	0x0801bb28

08018a98 <__s2b>:
 8018a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a9a:	0006      	movs	r6, r0
 8018a9c:	0018      	movs	r0, r3
 8018a9e:	000c      	movs	r4, r1
 8018aa0:	3008      	adds	r0, #8
 8018aa2:	2109      	movs	r1, #9
 8018aa4:	9301      	str	r3, [sp, #4]
 8018aa6:	0015      	movs	r5, r2
 8018aa8:	f7e7 fbde 	bl	8000268 <__divsi3>
 8018aac:	2301      	movs	r3, #1
 8018aae:	2100      	movs	r1, #0
 8018ab0:	4283      	cmp	r3, r0
 8018ab2:	db0a      	blt.n	8018aca <__s2b+0x32>
 8018ab4:	0030      	movs	r0, r6
 8018ab6:	f7ff ff43 	bl	8018940 <_Balloc>
 8018aba:	1e01      	subs	r1, r0, #0
 8018abc:	d108      	bne.n	8018ad0 <__s2b+0x38>
 8018abe:	0002      	movs	r2, r0
 8018ac0:	4b19      	ldr	r3, [pc, #100]	; (8018b28 <__s2b+0x90>)
 8018ac2:	481a      	ldr	r0, [pc, #104]	; (8018b2c <__s2b+0x94>)
 8018ac4:	31ce      	adds	r1, #206	; 0xce
 8018ac6:	f000 ff7b 	bl	80199c0 <__assert_func>
 8018aca:	005b      	lsls	r3, r3, #1
 8018acc:	3101      	adds	r1, #1
 8018ace:	e7ef      	b.n	8018ab0 <__s2b+0x18>
 8018ad0:	9b08      	ldr	r3, [sp, #32]
 8018ad2:	6143      	str	r3, [r0, #20]
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	6103      	str	r3, [r0, #16]
 8018ad8:	2d09      	cmp	r5, #9
 8018ada:	dd18      	ble.n	8018b0e <__s2b+0x76>
 8018adc:	0023      	movs	r3, r4
 8018ade:	3309      	adds	r3, #9
 8018ae0:	001f      	movs	r7, r3
 8018ae2:	9300      	str	r3, [sp, #0]
 8018ae4:	1964      	adds	r4, r4, r5
 8018ae6:	783b      	ldrb	r3, [r7, #0]
 8018ae8:	220a      	movs	r2, #10
 8018aea:	0030      	movs	r0, r6
 8018aec:	3b30      	subs	r3, #48	; 0x30
 8018aee:	f7ff ff8f 	bl	8018a10 <__multadd>
 8018af2:	3701      	adds	r7, #1
 8018af4:	0001      	movs	r1, r0
 8018af6:	42a7      	cmp	r7, r4
 8018af8:	d1f5      	bne.n	8018ae6 <__s2b+0x4e>
 8018afa:	002c      	movs	r4, r5
 8018afc:	9b00      	ldr	r3, [sp, #0]
 8018afe:	3c08      	subs	r4, #8
 8018b00:	191c      	adds	r4, r3, r4
 8018b02:	002f      	movs	r7, r5
 8018b04:	9b01      	ldr	r3, [sp, #4]
 8018b06:	429f      	cmp	r7, r3
 8018b08:	db04      	blt.n	8018b14 <__s2b+0x7c>
 8018b0a:	0008      	movs	r0, r1
 8018b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018b0e:	2509      	movs	r5, #9
 8018b10:	340a      	adds	r4, #10
 8018b12:	e7f6      	b.n	8018b02 <__s2b+0x6a>
 8018b14:	1b63      	subs	r3, r4, r5
 8018b16:	5ddb      	ldrb	r3, [r3, r7]
 8018b18:	220a      	movs	r2, #10
 8018b1a:	0030      	movs	r0, r6
 8018b1c:	3b30      	subs	r3, #48	; 0x30
 8018b1e:	f7ff ff77 	bl	8018a10 <__multadd>
 8018b22:	3701      	adds	r7, #1
 8018b24:	0001      	movs	r1, r0
 8018b26:	e7ed      	b.n	8018b04 <__s2b+0x6c>
 8018b28:	0801ba38 	.word	0x0801ba38
 8018b2c:	0801bb28 	.word	0x0801bb28

08018b30 <__hi0bits>:
 8018b30:	0003      	movs	r3, r0
 8018b32:	0c02      	lsrs	r2, r0, #16
 8018b34:	2000      	movs	r0, #0
 8018b36:	4282      	cmp	r2, r0
 8018b38:	d101      	bne.n	8018b3e <__hi0bits+0xe>
 8018b3a:	041b      	lsls	r3, r3, #16
 8018b3c:	3010      	adds	r0, #16
 8018b3e:	0e1a      	lsrs	r2, r3, #24
 8018b40:	d101      	bne.n	8018b46 <__hi0bits+0x16>
 8018b42:	3008      	adds	r0, #8
 8018b44:	021b      	lsls	r3, r3, #8
 8018b46:	0f1a      	lsrs	r2, r3, #28
 8018b48:	d101      	bne.n	8018b4e <__hi0bits+0x1e>
 8018b4a:	3004      	adds	r0, #4
 8018b4c:	011b      	lsls	r3, r3, #4
 8018b4e:	0f9a      	lsrs	r2, r3, #30
 8018b50:	d101      	bne.n	8018b56 <__hi0bits+0x26>
 8018b52:	3002      	adds	r0, #2
 8018b54:	009b      	lsls	r3, r3, #2
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	db03      	blt.n	8018b62 <__hi0bits+0x32>
 8018b5a:	3001      	adds	r0, #1
 8018b5c:	005b      	lsls	r3, r3, #1
 8018b5e:	d400      	bmi.n	8018b62 <__hi0bits+0x32>
 8018b60:	2020      	movs	r0, #32
 8018b62:	4770      	bx	lr

08018b64 <__lo0bits>:
 8018b64:	6803      	ldr	r3, [r0, #0]
 8018b66:	0002      	movs	r2, r0
 8018b68:	2107      	movs	r1, #7
 8018b6a:	0018      	movs	r0, r3
 8018b6c:	4008      	ands	r0, r1
 8018b6e:	420b      	tst	r3, r1
 8018b70:	d00d      	beq.n	8018b8e <__lo0bits+0x2a>
 8018b72:	3906      	subs	r1, #6
 8018b74:	2000      	movs	r0, #0
 8018b76:	420b      	tst	r3, r1
 8018b78:	d105      	bne.n	8018b86 <__lo0bits+0x22>
 8018b7a:	3002      	adds	r0, #2
 8018b7c:	4203      	tst	r3, r0
 8018b7e:	d003      	beq.n	8018b88 <__lo0bits+0x24>
 8018b80:	40cb      	lsrs	r3, r1
 8018b82:	0008      	movs	r0, r1
 8018b84:	6013      	str	r3, [r2, #0]
 8018b86:	4770      	bx	lr
 8018b88:	089b      	lsrs	r3, r3, #2
 8018b8a:	6013      	str	r3, [r2, #0]
 8018b8c:	e7fb      	b.n	8018b86 <__lo0bits+0x22>
 8018b8e:	b299      	uxth	r1, r3
 8018b90:	2900      	cmp	r1, #0
 8018b92:	d101      	bne.n	8018b98 <__lo0bits+0x34>
 8018b94:	2010      	movs	r0, #16
 8018b96:	0c1b      	lsrs	r3, r3, #16
 8018b98:	b2d9      	uxtb	r1, r3
 8018b9a:	2900      	cmp	r1, #0
 8018b9c:	d101      	bne.n	8018ba2 <__lo0bits+0x3e>
 8018b9e:	3008      	adds	r0, #8
 8018ba0:	0a1b      	lsrs	r3, r3, #8
 8018ba2:	0719      	lsls	r1, r3, #28
 8018ba4:	d101      	bne.n	8018baa <__lo0bits+0x46>
 8018ba6:	3004      	adds	r0, #4
 8018ba8:	091b      	lsrs	r3, r3, #4
 8018baa:	0799      	lsls	r1, r3, #30
 8018bac:	d101      	bne.n	8018bb2 <__lo0bits+0x4e>
 8018bae:	3002      	adds	r0, #2
 8018bb0:	089b      	lsrs	r3, r3, #2
 8018bb2:	07d9      	lsls	r1, r3, #31
 8018bb4:	d4e9      	bmi.n	8018b8a <__lo0bits+0x26>
 8018bb6:	3001      	adds	r0, #1
 8018bb8:	085b      	lsrs	r3, r3, #1
 8018bba:	d1e6      	bne.n	8018b8a <__lo0bits+0x26>
 8018bbc:	2020      	movs	r0, #32
 8018bbe:	e7e2      	b.n	8018b86 <__lo0bits+0x22>

08018bc0 <__i2b>:
 8018bc0:	b510      	push	{r4, lr}
 8018bc2:	000c      	movs	r4, r1
 8018bc4:	2101      	movs	r1, #1
 8018bc6:	f7ff febb 	bl	8018940 <_Balloc>
 8018bca:	2800      	cmp	r0, #0
 8018bcc:	d106      	bne.n	8018bdc <__i2b+0x1c>
 8018bce:	21a0      	movs	r1, #160	; 0xa0
 8018bd0:	0002      	movs	r2, r0
 8018bd2:	4b04      	ldr	r3, [pc, #16]	; (8018be4 <__i2b+0x24>)
 8018bd4:	4804      	ldr	r0, [pc, #16]	; (8018be8 <__i2b+0x28>)
 8018bd6:	0049      	lsls	r1, r1, #1
 8018bd8:	f000 fef2 	bl	80199c0 <__assert_func>
 8018bdc:	2301      	movs	r3, #1
 8018bde:	6144      	str	r4, [r0, #20]
 8018be0:	6103      	str	r3, [r0, #16]
 8018be2:	bd10      	pop	{r4, pc}
 8018be4:	0801ba38 	.word	0x0801ba38
 8018be8:	0801bb28 	.word	0x0801bb28

08018bec <__multiply>:
 8018bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bee:	690b      	ldr	r3, [r1, #16]
 8018bf0:	0014      	movs	r4, r2
 8018bf2:	6912      	ldr	r2, [r2, #16]
 8018bf4:	000d      	movs	r5, r1
 8018bf6:	b089      	sub	sp, #36	; 0x24
 8018bf8:	4293      	cmp	r3, r2
 8018bfa:	da01      	bge.n	8018c00 <__multiply+0x14>
 8018bfc:	0025      	movs	r5, r4
 8018bfe:	000c      	movs	r4, r1
 8018c00:	692f      	ldr	r7, [r5, #16]
 8018c02:	6926      	ldr	r6, [r4, #16]
 8018c04:	6869      	ldr	r1, [r5, #4]
 8018c06:	19bb      	adds	r3, r7, r6
 8018c08:	9302      	str	r3, [sp, #8]
 8018c0a:	68ab      	ldr	r3, [r5, #8]
 8018c0c:	19ba      	adds	r2, r7, r6
 8018c0e:	4293      	cmp	r3, r2
 8018c10:	da00      	bge.n	8018c14 <__multiply+0x28>
 8018c12:	3101      	adds	r1, #1
 8018c14:	f7ff fe94 	bl	8018940 <_Balloc>
 8018c18:	9001      	str	r0, [sp, #4]
 8018c1a:	2800      	cmp	r0, #0
 8018c1c:	d106      	bne.n	8018c2c <__multiply+0x40>
 8018c1e:	215e      	movs	r1, #94	; 0x5e
 8018c20:	0002      	movs	r2, r0
 8018c22:	4b48      	ldr	r3, [pc, #288]	; (8018d44 <__multiply+0x158>)
 8018c24:	4848      	ldr	r0, [pc, #288]	; (8018d48 <__multiply+0x15c>)
 8018c26:	31ff      	adds	r1, #255	; 0xff
 8018c28:	f000 feca 	bl	80199c0 <__assert_func>
 8018c2c:	9b01      	ldr	r3, [sp, #4]
 8018c2e:	2200      	movs	r2, #0
 8018c30:	3314      	adds	r3, #20
 8018c32:	469c      	mov	ip, r3
 8018c34:	19bb      	adds	r3, r7, r6
 8018c36:	009b      	lsls	r3, r3, #2
 8018c38:	4463      	add	r3, ip
 8018c3a:	9303      	str	r3, [sp, #12]
 8018c3c:	4663      	mov	r3, ip
 8018c3e:	9903      	ldr	r1, [sp, #12]
 8018c40:	428b      	cmp	r3, r1
 8018c42:	d32c      	bcc.n	8018c9e <__multiply+0xb2>
 8018c44:	002b      	movs	r3, r5
 8018c46:	0022      	movs	r2, r4
 8018c48:	3314      	adds	r3, #20
 8018c4a:	00bf      	lsls	r7, r7, #2
 8018c4c:	3214      	adds	r2, #20
 8018c4e:	9306      	str	r3, [sp, #24]
 8018c50:	00b6      	lsls	r6, r6, #2
 8018c52:	19db      	adds	r3, r3, r7
 8018c54:	9304      	str	r3, [sp, #16]
 8018c56:	1993      	adds	r3, r2, r6
 8018c58:	9307      	str	r3, [sp, #28]
 8018c5a:	2304      	movs	r3, #4
 8018c5c:	9305      	str	r3, [sp, #20]
 8018c5e:	002b      	movs	r3, r5
 8018c60:	9904      	ldr	r1, [sp, #16]
 8018c62:	3315      	adds	r3, #21
 8018c64:	9200      	str	r2, [sp, #0]
 8018c66:	4299      	cmp	r1, r3
 8018c68:	d305      	bcc.n	8018c76 <__multiply+0x8a>
 8018c6a:	1b4b      	subs	r3, r1, r5
 8018c6c:	3b15      	subs	r3, #21
 8018c6e:	089b      	lsrs	r3, r3, #2
 8018c70:	3301      	adds	r3, #1
 8018c72:	009b      	lsls	r3, r3, #2
 8018c74:	9305      	str	r3, [sp, #20]
 8018c76:	9b07      	ldr	r3, [sp, #28]
 8018c78:	9a00      	ldr	r2, [sp, #0]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d311      	bcc.n	8018ca2 <__multiply+0xb6>
 8018c7e:	9b02      	ldr	r3, [sp, #8]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	dd06      	ble.n	8018c92 <__multiply+0xa6>
 8018c84:	9b03      	ldr	r3, [sp, #12]
 8018c86:	3b04      	subs	r3, #4
 8018c88:	9303      	str	r3, [sp, #12]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	9300      	str	r3, [sp, #0]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d053      	beq.n	8018d3a <__multiply+0x14e>
 8018c92:	9b01      	ldr	r3, [sp, #4]
 8018c94:	9a02      	ldr	r2, [sp, #8]
 8018c96:	0018      	movs	r0, r3
 8018c98:	611a      	str	r2, [r3, #16]
 8018c9a:	b009      	add	sp, #36	; 0x24
 8018c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c9e:	c304      	stmia	r3!, {r2}
 8018ca0:	e7cd      	b.n	8018c3e <__multiply+0x52>
 8018ca2:	9b00      	ldr	r3, [sp, #0]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	b298      	uxth	r0, r3
 8018ca8:	2800      	cmp	r0, #0
 8018caa:	d01b      	beq.n	8018ce4 <__multiply+0xf8>
 8018cac:	4667      	mov	r7, ip
 8018cae:	2400      	movs	r4, #0
 8018cb0:	9e06      	ldr	r6, [sp, #24]
 8018cb2:	ce02      	ldmia	r6!, {r1}
 8018cb4:	683a      	ldr	r2, [r7, #0]
 8018cb6:	b28b      	uxth	r3, r1
 8018cb8:	4343      	muls	r3, r0
 8018cba:	b292      	uxth	r2, r2
 8018cbc:	189b      	adds	r3, r3, r2
 8018cbe:	191b      	adds	r3, r3, r4
 8018cc0:	0c0c      	lsrs	r4, r1, #16
 8018cc2:	4344      	muls	r4, r0
 8018cc4:	683a      	ldr	r2, [r7, #0]
 8018cc6:	0c11      	lsrs	r1, r2, #16
 8018cc8:	1861      	adds	r1, r4, r1
 8018cca:	0c1c      	lsrs	r4, r3, #16
 8018ccc:	1909      	adds	r1, r1, r4
 8018cce:	0c0c      	lsrs	r4, r1, #16
 8018cd0:	b29b      	uxth	r3, r3
 8018cd2:	0409      	lsls	r1, r1, #16
 8018cd4:	430b      	orrs	r3, r1
 8018cd6:	c708      	stmia	r7!, {r3}
 8018cd8:	9b04      	ldr	r3, [sp, #16]
 8018cda:	42b3      	cmp	r3, r6
 8018cdc:	d8e9      	bhi.n	8018cb2 <__multiply+0xc6>
 8018cde:	4663      	mov	r3, ip
 8018ce0:	9a05      	ldr	r2, [sp, #20]
 8018ce2:	509c      	str	r4, [r3, r2]
 8018ce4:	9b00      	ldr	r3, [sp, #0]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	0c1e      	lsrs	r6, r3, #16
 8018cea:	d020      	beq.n	8018d2e <__multiply+0x142>
 8018cec:	4663      	mov	r3, ip
 8018cee:	002c      	movs	r4, r5
 8018cf0:	4660      	mov	r0, ip
 8018cf2:	2700      	movs	r7, #0
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	3414      	adds	r4, #20
 8018cf8:	6822      	ldr	r2, [r4, #0]
 8018cfa:	b29b      	uxth	r3, r3
 8018cfc:	b291      	uxth	r1, r2
 8018cfe:	4371      	muls	r1, r6
 8018d00:	6802      	ldr	r2, [r0, #0]
 8018d02:	0c12      	lsrs	r2, r2, #16
 8018d04:	1889      	adds	r1, r1, r2
 8018d06:	19cf      	adds	r7, r1, r7
 8018d08:	0439      	lsls	r1, r7, #16
 8018d0a:	430b      	orrs	r3, r1
 8018d0c:	6003      	str	r3, [r0, #0]
 8018d0e:	cc02      	ldmia	r4!, {r1}
 8018d10:	6843      	ldr	r3, [r0, #4]
 8018d12:	0c09      	lsrs	r1, r1, #16
 8018d14:	4371      	muls	r1, r6
 8018d16:	b29b      	uxth	r3, r3
 8018d18:	0c3f      	lsrs	r7, r7, #16
 8018d1a:	18cb      	adds	r3, r1, r3
 8018d1c:	9a04      	ldr	r2, [sp, #16]
 8018d1e:	19db      	adds	r3, r3, r7
 8018d20:	0c1f      	lsrs	r7, r3, #16
 8018d22:	3004      	adds	r0, #4
 8018d24:	42a2      	cmp	r2, r4
 8018d26:	d8e7      	bhi.n	8018cf8 <__multiply+0x10c>
 8018d28:	4662      	mov	r2, ip
 8018d2a:	9905      	ldr	r1, [sp, #20]
 8018d2c:	5053      	str	r3, [r2, r1]
 8018d2e:	9b00      	ldr	r3, [sp, #0]
 8018d30:	3304      	adds	r3, #4
 8018d32:	9300      	str	r3, [sp, #0]
 8018d34:	2304      	movs	r3, #4
 8018d36:	449c      	add	ip, r3
 8018d38:	e79d      	b.n	8018c76 <__multiply+0x8a>
 8018d3a:	9b02      	ldr	r3, [sp, #8]
 8018d3c:	3b01      	subs	r3, #1
 8018d3e:	9302      	str	r3, [sp, #8]
 8018d40:	e79d      	b.n	8018c7e <__multiply+0x92>
 8018d42:	46c0      	nop			; (mov r8, r8)
 8018d44:	0801ba38 	.word	0x0801ba38
 8018d48:	0801bb28 	.word	0x0801bb28

08018d4c <__pow5mult>:
 8018d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d4e:	2303      	movs	r3, #3
 8018d50:	0015      	movs	r5, r2
 8018d52:	0007      	movs	r7, r0
 8018d54:	000e      	movs	r6, r1
 8018d56:	401a      	ands	r2, r3
 8018d58:	421d      	tst	r5, r3
 8018d5a:	d008      	beq.n	8018d6e <__pow5mult+0x22>
 8018d5c:	4925      	ldr	r1, [pc, #148]	; (8018df4 <__pow5mult+0xa8>)
 8018d5e:	3a01      	subs	r2, #1
 8018d60:	0092      	lsls	r2, r2, #2
 8018d62:	5852      	ldr	r2, [r2, r1]
 8018d64:	2300      	movs	r3, #0
 8018d66:	0031      	movs	r1, r6
 8018d68:	f7ff fe52 	bl	8018a10 <__multadd>
 8018d6c:	0006      	movs	r6, r0
 8018d6e:	10ad      	asrs	r5, r5, #2
 8018d70:	d03d      	beq.n	8018dee <__pow5mult+0xa2>
 8018d72:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8018d74:	2c00      	cmp	r4, #0
 8018d76:	d10f      	bne.n	8018d98 <__pow5mult+0x4c>
 8018d78:	2010      	movs	r0, #16
 8018d7a:	f7fc f875 	bl	8014e68 <malloc>
 8018d7e:	1e02      	subs	r2, r0, #0
 8018d80:	6278      	str	r0, [r7, #36]	; 0x24
 8018d82:	d105      	bne.n	8018d90 <__pow5mult+0x44>
 8018d84:	21d7      	movs	r1, #215	; 0xd7
 8018d86:	4b1c      	ldr	r3, [pc, #112]	; (8018df8 <__pow5mult+0xac>)
 8018d88:	481c      	ldr	r0, [pc, #112]	; (8018dfc <__pow5mult+0xb0>)
 8018d8a:	0049      	lsls	r1, r1, #1
 8018d8c:	f000 fe18 	bl	80199c0 <__assert_func>
 8018d90:	6044      	str	r4, [r0, #4]
 8018d92:	6084      	str	r4, [r0, #8]
 8018d94:	6004      	str	r4, [r0, #0]
 8018d96:	60c4      	str	r4, [r0, #12]
 8018d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d9a:	689c      	ldr	r4, [r3, #8]
 8018d9c:	9301      	str	r3, [sp, #4]
 8018d9e:	2c00      	cmp	r4, #0
 8018da0:	d108      	bne.n	8018db4 <__pow5mult+0x68>
 8018da2:	0038      	movs	r0, r7
 8018da4:	4916      	ldr	r1, [pc, #88]	; (8018e00 <__pow5mult+0xb4>)
 8018da6:	f7ff ff0b 	bl	8018bc0 <__i2b>
 8018daa:	9b01      	ldr	r3, [sp, #4]
 8018dac:	0004      	movs	r4, r0
 8018dae:	6098      	str	r0, [r3, #8]
 8018db0:	2300      	movs	r3, #0
 8018db2:	6003      	str	r3, [r0, #0]
 8018db4:	2301      	movs	r3, #1
 8018db6:	421d      	tst	r5, r3
 8018db8:	d00a      	beq.n	8018dd0 <__pow5mult+0x84>
 8018dba:	0031      	movs	r1, r6
 8018dbc:	0022      	movs	r2, r4
 8018dbe:	0038      	movs	r0, r7
 8018dc0:	f7ff ff14 	bl	8018bec <__multiply>
 8018dc4:	0031      	movs	r1, r6
 8018dc6:	9001      	str	r0, [sp, #4]
 8018dc8:	0038      	movs	r0, r7
 8018dca:	f7ff fdfd 	bl	80189c8 <_Bfree>
 8018dce:	9e01      	ldr	r6, [sp, #4]
 8018dd0:	106d      	asrs	r5, r5, #1
 8018dd2:	d00c      	beq.n	8018dee <__pow5mult+0xa2>
 8018dd4:	6820      	ldr	r0, [r4, #0]
 8018dd6:	2800      	cmp	r0, #0
 8018dd8:	d107      	bne.n	8018dea <__pow5mult+0x9e>
 8018dda:	0022      	movs	r2, r4
 8018ddc:	0021      	movs	r1, r4
 8018dde:	0038      	movs	r0, r7
 8018de0:	f7ff ff04 	bl	8018bec <__multiply>
 8018de4:	2300      	movs	r3, #0
 8018de6:	6020      	str	r0, [r4, #0]
 8018de8:	6003      	str	r3, [r0, #0]
 8018dea:	0004      	movs	r4, r0
 8018dec:	e7e2      	b.n	8018db4 <__pow5mult+0x68>
 8018dee:	0030      	movs	r0, r6
 8018df0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018df2:	46c0      	nop			; (mov r8, r8)
 8018df4:	0801bc78 	.word	0x0801bc78
 8018df8:	0801b9c6 	.word	0x0801b9c6
 8018dfc:	0801bb28 	.word	0x0801bb28
 8018e00:	00000271 	.word	0x00000271

08018e04 <__lshift>:
 8018e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e06:	000c      	movs	r4, r1
 8018e08:	0017      	movs	r7, r2
 8018e0a:	6923      	ldr	r3, [r4, #16]
 8018e0c:	1155      	asrs	r5, r2, #5
 8018e0e:	b087      	sub	sp, #28
 8018e10:	18eb      	adds	r3, r5, r3
 8018e12:	9302      	str	r3, [sp, #8]
 8018e14:	3301      	adds	r3, #1
 8018e16:	9301      	str	r3, [sp, #4]
 8018e18:	6849      	ldr	r1, [r1, #4]
 8018e1a:	68a3      	ldr	r3, [r4, #8]
 8018e1c:	9004      	str	r0, [sp, #16]
 8018e1e:	9a01      	ldr	r2, [sp, #4]
 8018e20:	4293      	cmp	r3, r2
 8018e22:	db10      	blt.n	8018e46 <__lshift+0x42>
 8018e24:	9804      	ldr	r0, [sp, #16]
 8018e26:	f7ff fd8b 	bl	8018940 <_Balloc>
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	0002      	movs	r2, r0
 8018e2e:	0006      	movs	r6, r0
 8018e30:	0019      	movs	r1, r3
 8018e32:	3214      	adds	r2, #20
 8018e34:	4298      	cmp	r0, r3
 8018e36:	d10c      	bne.n	8018e52 <__lshift+0x4e>
 8018e38:	21da      	movs	r1, #218	; 0xda
 8018e3a:	0002      	movs	r2, r0
 8018e3c:	4b26      	ldr	r3, [pc, #152]	; (8018ed8 <__lshift+0xd4>)
 8018e3e:	4827      	ldr	r0, [pc, #156]	; (8018edc <__lshift+0xd8>)
 8018e40:	31ff      	adds	r1, #255	; 0xff
 8018e42:	f000 fdbd 	bl	80199c0 <__assert_func>
 8018e46:	3101      	adds	r1, #1
 8018e48:	005b      	lsls	r3, r3, #1
 8018e4a:	e7e8      	b.n	8018e1e <__lshift+0x1a>
 8018e4c:	0098      	lsls	r0, r3, #2
 8018e4e:	5011      	str	r1, [r2, r0]
 8018e50:	3301      	adds	r3, #1
 8018e52:	42ab      	cmp	r3, r5
 8018e54:	dbfa      	blt.n	8018e4c <__lshift+0x48>
 8018e56:	43eb      	mvns	r3, r5
 8018e58:	17db      	asrs	r3, r3, #31
 8018e5a:	401d      	ands	r5, r3
 8018e5c:	211f      	movs	r1, #31
 8018e5e:	0023      	movs	r3, r4
 8018e60:	0038      	movs	r0, r7
 8018e62:	00ad      	lsls	r5, r5, #2
 8018e64:	1955      	adds	r5, r2, r5
 8018e66:	6922      	ldr	r2, [r4, #16]
 8018e68:	3314      	adds	r3, #20
 8018e6a:	0092      	lsls	r2, r2, #2
 8018e6c:	4008      	ands	r0, r1
 8018e6e:	4684      	mov	ip, r0
 8018e70:	189a      	adds	r2, r3, r2
 8018e72:	420f      	tst	r7, r1
 8018e74:	d02a      	beq.n	8018ecc <__lshift+0xc8>
 8018e76:	3101      	adds	r1, #1
 8018e78:	1a09      	subs	r1, r1, r0
 8018e7a:	9105      	str	r1, [sp, #20]
 8018e7c:	2100      	movs	r1, #0
 8018e7e:	9503      	str	r5, [sp, #12]
 8018e80:	4667      	mov	r7, ip
 8018e82:	6818      	ldr	r0, [r3, #0]
 8018e84:	40b8      	lsls	r0, r7
 8018e86:	4301      	orrs	r1, r0
 8018e88:	9803      	ldr	r0, [sp, #12]
 8018e8a:	c002      	stmia	r0!, {r1}
 8018e8c:	cb02      	ldmia	r3!, {r1}
 8018e8e:	9003      	str	r0, [sp, #12]
 8018e90:	9805      	ldr	r0, [sp, #20]
 8018e92:	40c1      	lsrs	r1, r0
 8018e94:	429a      	cmp	r2, r3
 8018e96:	d8f3      	bhi.n	8018e80 <__lshift+0x7c>
 8018e98:	0020      	movs	r0, r4
 8018e9a:	3015      	adds	r0, #21
 8018e9c:	2304      	movs	r3, #4
 8018e9e:	4282      	cmp	r2, r0
 8018ea0:	d304      	bcc.n	8018eac <__lshift+0xa8>
 8018ea2:	1b13      	subs	r3, r2, r4
 8018ea4:	3b15      	subs	r3, #21
 8018ea6:	089b      	lsrs	r3, r3, #2
 8018ea8:	3301      	adds	r3, #1
 8018eaa:	009b      	lsls	r3, r3, #2
 8018eac:	50e9      	str	r1, [r5, r3]
 8018eae:	2900      	cmp	r1, #0
 8018eb0:	d002      	beq.n	8018eb8 <__lshift+0xb4>
 8018eb2:	9b02      	ldr	r3, [sp, #8]
 8018eb4:	3302      	adds	r3, #2
 8018eb6:	9301      	str	r3, [sp, #4]
 8018eb8:	9b01      	ldr	r3, [sp, #4]
 8018eba:	9804      	ldr	r0, [sp, #16]
 8018ebc:	3b01      	subs	r3, #1
 8018ebe:	0021      	movs	r1, r4
 8018ec0:	6133      	str	r3, [r6, #16]
 8018ec2:	f7ff fd81 	bl	80189c8 <_Bfree>
 8018ec6:	0030      	movs	r0, r6
 8018ec8:	b007      	add	sp, #28
 8018eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ecc:	cb02      	ldmia	r3!, {r1}
 8018ece:	c502      	stmia	r5!, {r1}
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d8fb      	bhi.n	8018ecc <__lshift+0xc8>
 8018ed4:	e7f0      	b.n	8018eb8 <__lshift+0xb4>
 8018ed6:	46c0      	nop			; (mov r8, r8)
 8018ed8:	0801ba38 	.word	0x0801ba38
 8018edc:	0801bb28 	.word	0x0801bb28

08018ee0 <__mcmp>:
 8018ee0:	6902      	ldr	r2, [r0, #16]
 8018ee2:	690b      	ldr	r3, [r1, #16]
 8018ee4:	b530      	push	{r4, r5, lr}
 8018ee6:	0004      	movs	r4, r0
 8018ee8:	1ad0      	subs	r0, r2, r3
 8018eea:	429a      	cmp	r2, r3
 8018eec:	d10d      	bne.n	8018f0a <__mcmp+0x2a>
 8018eee:	009b      	lsls	r3, r3, #2
 8018ef0:	3414      	adds	r4, #20
 8018ef2:	3114      	adds	r1, #20
 8018ef4:	18e2      	adds	r2, r4, r3
 8018ef6:	18c9      	adds	r1, r1, r3
 8018ef8:	3a04      	subs	r2, #4
 8018efa:	3904      	subs	r1, #4
 8018efc:	6815      	ldr	r5, [r2, #0]
 8018efe:	680b      	ldr	r3, [r1, #0]
 8018f00:	429d      	cmp	r5, r3
 8018f02:	d003      	beq.n	8018f0c <__mcmp+0x2c>
 8018f04:	2001      	movs	r0, #1
 8018f06:	429d      	cmp	r5, r3
 8018f08:	d303      	bcc.n	8018f12 <__mcmp+0x32>
 8018f0a:	bd30      	pop	{r4, r5, pc}
 8018f0c:	4294      	cmp	r4, r2
 8018f0e:	d3f3      	bcc.n	8018ef8 <__mcmp+0x18>
 8018f10:	e7fb      	b.n	8018f0a <__mcmp+0x2a>
 8018f12:	4240      	negs	r0, r0
 8018f14:	e7f9      	b.n	8018f0a <__mcmp+0x2a>
	...

08018f18 <__mdiff>:
 8018f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f1a:	000e      	movs	r6, r1
 8018f1c:	0007      	movs	r7, r0
 8018f1e:	0011      	movs	r1, r2
 8018f20:	0030      	movs	r0, r6
 8018f22:	b087      	sub	sp, #28
 8018f24:	0014      	movs	r4, r2
 8018f26:	f7ff ffdb 	bl	8018ee0 <__mcmp>
 8018f2a:	1e05      	subs	r5, r0, #0
 8018f2c:	d110      	bne.n	8018f50 <__mdiff+0x38>
 8018f2e:	0001      	movs	r1, r0
 8018f30:	0038      	movs	r0, r7
 8018f32:	f7ff fd05 	bl	8018940 <_Balloc>
 8018f36:	1e02      	subs	r2, r0, #0
 8018f38:	d104      	bne.n	8018f44 <__mdiff+0x2c>
 8018f3a:	4b40      	ldr	r3, [pc, #256]	; (801903c <__mdiff+0x124>)
 8018f3c:	4940      	ldr	r1, [pc, #256]	; (8019040 <__mdiff+0x128>)
 8018f3e:	4841      	ldr	r0, [pc, #260]	; (8019044 <__mdiff+0x12c>)
 8018f40:	f000 fd3e 	bl	80199c0 <__assert_func>
 8018f44:	2301      	movs	r3, #1
 8018f46:	6145      	str	r5, [r0, #20]
 8018f48:	6103      	str	r3, [r0, #16]
 8018f4a:	0010      	movs	r0, r2
 8018f4c:	b007      	add	sp, #28
 8018f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f50:	2301      	movs	r3, #1
 8018f52:	9301      	str	r3, [sp, #4]
 8018f54:	2800      	cmp	r0, #0
 8018f56:	db04      	blt.n	8018f62 <__mdiff+0x4a>
 8018f58:	0023      	movs	r3, r4
 8018f5a:	0034      	movs	r4, r6
 8018f5c:	001e      	movs	r6, r3
 8018f5e:	2300      	movs	r3, #0
 8018f60:	9301      	str	r3, [sp, #4]
 8018f62:	0038      	movs	r0, r7
 8018f64:	6861      	ldr	r1, [r4, #4]
 8018f66:	f7ff fceb 	bl	8018940 <_Balloc>
 8018f6a:	1e02      	subs	r2, r0, #0
 8018f6c:	d103      	bne.n	8018f76 <__mdiff+0x5e>
 8018f6e:	2190      	movs	r1, #144	; 0x90
 8018f70:	4b32      	ldr	r3, [pc, #200]	; (801903c <__mdiff+0x124>)
 8018f72:	0089      	lsls	r1, r1, #2
 8018f74:	e7e3      	b.n	8018f3e <__mdiff+0x26>
 8018f76:	9b01      	ldr	r3, [sp, #4]
 8018f78:	2700      	movs	r7, #0
 8018f7a:	60c3      	str	r3, [r0, #12]
 8018f7c:	6920      	ldr	r0, [r4, #16]
 8018f7e:	3414      	adds	r4, #20
 8018f80:	9401      	str	r4, [sp, #4]
 8018f82:	9b01      	ldr	r3, [sp, #4]
 8018f84:	0084      	lsls	r4, r0, #2
 8018f86:	191b      	adds	r3, r3, r4
 8018f88:	0034      	movs	r4, r6
 8018f8a:	9302      	str	r3, [sp, #8]
 8018f8c:	6933      	ldr	r3, [r6, #16]
 8018f8e:	3414      	adds	r4, #20
 8018f90:	0099      	lsls	r1, r3, #2
 8018f92:	1863      	adds	r3, r4, r1
 8018f94:	9303      	str	r3, [sp, #12]
 8018f96:	0013      	movs	r3, r2
 8018f98:	3314      	adds	r3, #20
 8018f9a:	469c      	mov	ip, r3
 8018f9c:	9305      	str	r3, [sp, #20]
 8018f9e:	9b01      	ldr	r3, [sp, #4]
 8018fa0:	9304      	str	r3, [sp, #16]
 8018fa2:	9b04      	ldr	r3, [sp, #16]
 8018fa4:	cc02      	ldmia	r4!, {r1}
 8018fa6:	cb20      	ldmia	r3!, {r5}
 8018fa8:	9304      	str	r3, [sp, #16]
 8018faa:	b2ab      	uxth	r3, r5
 8018fac:	19df      	adds	r7, r3, r7
 8018fae:	b28b      	uxth	r3, r1
 8018fb0:	1afb      	subs	r3, r7, r3
 8018fb2:	0c09      	lsrs	r1, r1, #16
 8018fb4:	0c2d      	lsrs	r5, r5, #16
 8018fb6:	1a6d      	subs	r5, r5, r1
 8018fb8:	1419      	asrs	r1, r3, #16
 8018fba:	186d      	adds	r5, r5, r1
 8018fbc:	4661      	mov	r1, ip
 8018fbe:	142f      	asrs	r7, r5, #16
 8018fc0:	b29b      	uxth	r3, r3
 8018fc2:	042d      	lsls	r5, r5, #16
 8018fc4:	432b      	orrs	r3, r5
 8018fc6:	c108      	stmia	r1!, {r3}
 8018fc8:	9b03      	ldr	r3, [sp, #12]
 8018fca:	468c      	mov	ip, r1
 8018fcc:	42a3      	cmp	r3, r4
 8018fce:	d8e8      	bhi.n	8018fa2 <__mdiff+0x8a>
 8018fd0:	0031      	movs	r1, r6
 8018fd2:	9c03      	ldr	r4, [sp, #12]
 8018fd4:	3115      	adds	r1, #21
 8018fd6:	2304      	movs	r3, #4
 8018fd8:	428c      	cmp	r4, r1
 8018fda:	d304      	bcc.n	8018fe6 <__mdiff+0xce>
 8018fdc:	1ba3      	subs	r3, r4, r6
 8018fde:	3b15      	subs	r3, #21
 8018fe0:	089b      	lsrs	r3, r3, #2
 8018fe2:	3301      	adds	r3, #1
 8018fe4:	009b      	lsls	r3, r3, #2
 8018fe6:	9901      	ldr	r1, [sp, #4]
 8018fe8:	18cc      	adds	r4, r1, r3
 8018fea:	9905      	ldr	r1, [sp, #20]
 8018fec:	0026      	movs	r6, r4
 8018fee:	18cb      	adds	r3, r1, r3
 8018ff0:	469c      	mov	ip, r3
 8018ff2:	9902      	ldr	r1, [sp, #8]
 8018ff4:	428e      	cmp	r6, r1
 8018ff6:	d310      	bcc.n	801901a <__mdiff+0x102>
 8018ff8:	9e02      	ldr	r6, [sp, #8]
 8018ffa:	1ee1      	subs	r1, r4, #3
 8018ffc:	2500      	movs	r5, #0
 8018ffe:	428e      	cmp	r6, r1
 8019000:	d304      	bcc.n	801900c <__mdiff+0xf4>
 8019002:	0031      	movs	r1, r6
 8019004:	3103      	adds	r1, #3
 8019006:	1b0c      	subs	r4, r1, r4
 8019008:	08a4      	lsrs	r4, r4, #2
 801900a:	00a5      	lsls	r5, r4, #2
 801900c:	195b      	adds	r3, r3, r5
 801900e:	3b04      	subs	r3, #4
 8019010:	6819      	ldr	r1, [r3, #0]
 8019012:	2900      	cmp	r1, #0
 8019014:	d00f      	beq.n	8019036 <__mdiff+0x11e>
 8019016:	6110      	str	r0, [r2, #16]
 8019018:	e797      	b.n	8018f4a <__mdiff+0x32>
 801901a:	ce02      	ldmia	r6!, {r1}
 801901c:	b28d      	uxth	r5, r1
 801901e:	19ed      	adds	r5, r5, r7
 8019020:	0c0f      	lsrs	r7, r1, #16
 8019022:	1429      	asrs	r1, r5, #16
 8019024:	1879      	adds	r1, r7, r1
 8019026:	140f      	asrs	r7, r1, #16
 8019028:	b2ad      	uxth	r5, r5
 801902a:	0409      	lsls	r1, r1, #16
 801902c:	430d      	orrs	r5, r1
 801902e:	4661      	mov	r1, ip
 8019030:	c120      	stmia	r1!, {r5}
 8019032:	468c      	mov	ip, r1
 8019034:	e7dd      	b.n	8018ff2 <__mdiff+0xda>
 8019036:	3801      	subs	r0, #1
 8019038:	e7e9      	b.n	801900e <__mdiff+0xf6>
 801903a:	46c0      	nop			; (mov r8, r8)
 801903c:	0801ba38 	.word	0x0801ba38
 8019040:	00000232 	.word	0x00000232
 8019044:	0801bb28 	.word	0x0801bb28

08019048 <__ulp>:
 8019048:	4b0f      	ldr	r3, [pc, #60]	; (8019088 <__ulp+0x40>)
 801904a:	4019      	ands	r1, r3
 801904c:	4b0f      	ldr	r3, [pc, #60]	; (801908c <__ulp+0x44>)
 801904e:	18c9      	adds	r1, r1, r3
 8019050:	2900      	cmp	r1, #0
 8019052:	dd04      	ble.n	801905e <__ulp+0x16>
 8019054:	2200      	movs	r2, #0
 8019056:	000b      	movs	r3, r1
 8019058:	0010      	movs	r0, r2
 801905a:	0019      	movs	r1, r3
 801905c:	4770      	bx	lr
 801905e:	4249      	negs	r1, r1
 8019060:	2200      	movs	r2, #0
 8019062:	2300      	movs	r3, #0
 8019064:	1509      	asrs	r1, r1, #20
 8019066:	2913      	cmp	r1, #19
 8019068:	dc04      	bgt.n	8019074 <__ulp+0x2c>
 801906a:	2080      	movs	r0, #128	; 0x80
 801906c:	0300      	lsls	r0, r0, #12
 801906e:	4108      	asrs	r0, r1
 8019070:	0003      	movs	r3, r0
 8019072:	e7f1      	b.n	8019058 <__ulp+0x10>
 8019074:	3914      	subs	r1, #20
 8019076:	2001      	movs	r0, #1
 8019078:	291e      	cmp	r1, #30
 801907a:	dc02      	bgt.n	8019082 <__ulp+0x3a>
 801907c:	2080      	movs	r0, #128	; 0x80
 801907e:	0600      	lsls	r0, r0, #24
 8019080:	40c8      	lsrs	r0, r1
 8019082:	0002      	movs	r2, r0
 8019084:	e7e8      	b.n	8019058 <__ulp+0x10>
 8019086:	46c0      	nop			; (mov r8, r8)
 8019088:	7ff00000 	.word	0x7ff00000
 801908c:	fcc00000 	.word	0xfcc00000

08019090 <__b2d>:
 8019090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019092:	0006      	movs	r6, r0
 8019094:	6903      	ldr	r3, [r0, #16]
 8019096:	3614      	adds	r6, #20
 8019098:	009b      	lsls	r3, r3, #2
 801909a:	18f3      	adds	r3, r6, r3
 801909c:	1f1d      	subs	r5, r3, #4
 801909e:	682c      	ldr	r4, [r5, #0]
 80190a0:	000f      	movs	r7, r1
 80190a2:	0020      	movs	r0, r4
 80190a4:	9301      	str	r3, [sp, #4]
 80190a6:	f7ff fd43 	bl	8018b30 <__hi0bits>
 80190aa:	2320      	movs	r3, #32
 80190ac:	1a1b      	subs	r3, r3, r0
 80190ae:	491f      	ldr	r1, [pc, #124]	; (801912c <__b2d+0x9c>)
 80190b0:	603b      	str	r3, [r7, #0]
 80190b2:	280a      	cmp	r0, #10
 80190b4:	dc16      	bgt.n	80190e4 <__b2d+0x54>
 80190b6:	230b      	movs	r3, #11
 80190b8:	0027      	movs	r7, r4
 80190ba:	1a1b      	subs	r3, r3, r0
 80190bc:	40df      	lsrs	r7, r3
 80190be:	4339      	orrs	r1, r7
 80190c0:	469c      	mov	ip, r3
 80190c2:	000b      	movs	r3, r1
 80190c4:	2100      	movs	r1, #0
 80190c6:	42ae      	cmp	r6, r5
 80190c8:	d202      	bcs.n	80190d0 <__b2d+0x40>
 80190ca:	9901      	ldr	r1, [sp, #4]
 80190cc:	3908      	subs	r1, #8
 80190ce:	6809      	ldr	r1, [r1, #0]
 80190d0:	3015      	adds	r0, #21
 80190d2:	4084      	lsls	r4, r0
 80190d4:	4660      	mov	r0, ip
 80190d6:	40c1      	lsrs	r1, r0
 80190d8:	430c      	orrs	r4, r1
 80190da:	0022      	movs	r2, r4
 80190dc:	0010      	movs	r0, r2
 80190de:	0019      	movs	r1, r3
 80190e0:	b003      	add	sp, #12
 80190e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190e4:	2700      	movs	r7, #0
 80190e6:	42ae      	cmp	r6, r5
 80190e8:	d202      	bcs.n	80190f0 <__b2d+0x60>
 80190ea:	9d01      	ldr	r5, [sp, #4]
 80190ec:	3d08      	subs	r5, #8
 80190ee:	682f      	ldr	r7, [r5, #0]
 80190f0:	230b      	movs	r3, #11
 80190f2:	425b      	negs	r3, r3
 80190f4:	469c      	mov	ip, r3
 80190f6:	4484      	add	ip, r0
 80190f8:	280b      	cmp	r0, #11
 80190fa:	d013      	beq.n	8019124 <__b2d+0x94>
 80190fc:	4663      	mov	r3, ip
 80190fe:	2020      	movs	r0, #32
 8019100:	409c      	lsls	r4, r3
 8019102:	1ac0      	subs	r0, r0, r3
 8019104:	003b      	movs	r3, r7
 8019106:	40c3      	lsrs	r3, r0
 8019108:	431c      	orrs	r4, r3
 801910a:	4321      	orrs	r1, r4
 801910c:	000b      	movs	r3, r1
 801910e:	2100      	movs	r1, #0
 8019110:	42b5      	cmp	r5, r6
 8019112:	d901      	bls.n	8019118 <__b2d+0x88>
 8019114:	3d04      	subs	r5, #4
 8019116:	6829      	ldr	r1, [r5, #0]
 8019118:	4664      	mov	r4, ip
 801911a:	40c1      	lsrs	r1, r0
 801911c:	40a7      	lsls	r7, r4
 801911e:	430f      	orrs	r7, r1
 8019120:	003a      	movs	r2, r7
 8019122:	e7db      	b.n	80190dc <__b2d+0x4c>
 8019124:	4321      	orrs	r1, r4
 8019126:	000b      	movs	r3, r1
 8019128:	e7fa      	b.n	8019120 <__b2d+0x90>
 801912a:	46c0      	nop			; (mov r8, r8)
 801912c:	3ff00000 	.word	0x3ff00000

08019130 <__d2b>:
 8019130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019132:	2101      	movs	r1, #1
 8019134:	0014      	movs	r4, r2
 8019136:	001e      	movs	r6, r3
 8019138:	9f08      	ldr	r7, [sp, #32]
 801913a:	f7ff fc01 	bl	8018940 <_Balloc>
 801913e:	1e05      	subs	r5, r0, #0
 8019140:	d105      	bne.n	801914e <__d2b+0x1e>
 8019142:	0002      	movs	r2, r0
 8019144:	4b26      	ldr	r3, [pc, #152]	; (80191e0 <__d2b+0xb0>)
 8019146:	4927      	ldr	r1, [pc, #156]	; (80191e4 <__d2b+0xb4>)
 8019148:	4827      	ldr	r0, [pc, #156]	; (80191e8 <__d2b+0xb8>)
 801914a:	f000 fc39 	bl	80199c0 <__assert_func>
 801914e:	0333      	lsls	r3, r6, #12
 8019150:	0076      	lsls	r6, r6, #1
 8019152:	0b1b      	lsrs	r3, r3, #12
 8019154:	0d76      	lsrs	r6, r6, #21
 8019156:	d124      	bne.n	80191a2 <__d2b+0x72>
 8019158:	9301      	str	r3, [sp, #4]
 801915a:	2c00      	cmp	r4, #0
 801915c:	d027      	beq.n	80191ae <__d2b+0x7e>
 801915e:	4668      	mov	r0, sp
 8019160:	9400      	str	r4, [sp, #0]
 8019162:	f7ff fcff 	bl	8018b64 <__lo0bits>
 8019166:	9c00      	ldr	r4, [sp, #0]
 8019168:	2800      	cmp	r0, #0
 801916a:	d01e      	beq.n	80191aa <__d2b+0x7a>
 801916c:	9b01      	ldr	r3, [sp, #4]
 801916e:	2120      	movs	r1, #32
 8019170:	001a      	movs	r2, r3
 8019172:	1a09      	subs	r1, r1, r0
 8019174:	408a      	lsls	r2, r1
 8019176:	40c3      	lsrs	r3, r0
 8019178:	4322      	orrs	r2, r4
 801917a:	616a      	str	r2, [r5, #20]
 801917c:	9301      	str	r3, [sp, #4]
 801917e:	9c01      	ldr	r4, [sp, #4]
 8019180:	61ac      	str	r4, [r5, #24]
 8019182:	1e63      	subs	r3, r4, #1
 8019184:	419c      	sbcs	r4, r3
 8019186:	3401      	adds	r4, #1
 8019188:	612c      	str	r4, [r5, #16]
 801918a:	2e00      	cmp	r6, #0
 801918c:	d018      	beq.n	80191c0 <__d2b+0x90>
 801918e:	4b17      	ldr	r3, [pc, #92]	; (80191ec <__d2b+0xbc>)
 8019190:	18f6      	adds	r6, r6, r3
 8019192:	2335      	movs	r3, #53	; 0x35
 8019194:	1836      	adds	r6, r6, r0
 8019196:	1a18      	subs	r0, r3, r0
 8019198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801919a:	603e      	str	r6, [r7, #0]
 801919c:	6018      	str	r0, [r3, #0]
 801919e:	0028      	movs	r0, r5
 80191a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80191a2:	2280      	movs	r2, #128	; 0x80
 80191a4:	0352      	lsls	r2, r2, #13
 80191a6:	4313      	orrs	r3, r2
 80191a8:	e7d6      	b.n	8019158 <__d2b+0x28>
 80191aa:	616c      	str	r4, [r5, #20]
 80191ac:	e7e7      	b.n	801917e <__d2b+0x4e>
 80191ae:	a801      	add	r0, sp, #4
 80191b0:	f7ff fcd8 	bl	8018b64 <__lo0bits>
 80191b4:	2401      	movs	r4, #1
 80191b6:	9b01      	ldr	r3, [sp, #4]
 80191b8:	612c      	str	r4, [r5, #16]
 80191ba:	616b      	str	r3, [r5, #20]
 80191bc:	3020      	adds	r0, #32
 80191be:	e7e4      	b.n	801918a <__d2b+0x5a>
 80191c0:	4b0b      	ldr	r3, [pc, #44]	; (80191f0 <__d2b+0xc0>)
 80191c2:	18c0      	adds	r0, r0, r3
 80191c4:	4b0b      	ldr	r3, [pc, #44]	; (80191f4 <__d2b+0xc4>)
 80191c6:	6038      	str	r0, [r7, #0]
 80191c8:	18e3      	adds	r3, r4, r3
 80191ca:	009b      	lsls	r3, r3, #2
 80191cc:	18eb      	adds	r3, r5, r3
 80191ce:	6958      	ldr	r0, [r3, #20]
 80191d0:	f7ff fcae 	bl	8018b30 <__hi0bits>
 80191d4:	0164      	lsls	r4, r4, #5
 80191d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191d8:	1a24      	subs	r4, r4, r0
 80191da:	601c      	str	r4, [r3, #0]
 80191dc:	e7df      	b.n	801919e <__d2b+0x6e>
 80191de:	46c0      	nop			; (mov r8, r8)
 80191e0:	0801ba38 	.word	0x0801ba38
 80191e4:	0000030a 	.word	0x0000030a
 80191e8:	0801bb28 	.word	0x0801bb28
 80191ec:	fffffbcd 	.word	0xfffffbcd
 80191f0:	fffffbce 	.word	0xfffffbce
 80191f4:	3fffffff 	.word	0x3fffffff

080191f8 <__ratio>:
 80191f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191fa:	b087      	sub	sp, #28
 80191fc:	000f      	movs	r7, r1
 80191fe:	a904      	add	r1, sp, #16
 8019200:	0006      	movs	r6, r0
 8019202:	f7ff ff45 	bl	8019090 <__b2d>
 8019206:	9000      	str	r0, [sp, #0]
 8019208:	9101      	str	r1, [sp, #4]
 801920a:	9c00      	ldr	r4, [sp, #0]
 801920c:	9d01      	ldr	r5, [sp, #4]
 801920e:	0038      	movs	r0, r7
 8019210:	a905      	add	r1, sp, #20
 8019212:	f7ff ff3d 	bl	8019090 <__b2d>
 8019216:	9002      	str	r0, [sp, #8]
 8019218:	9103      	str	r1, [sp, #12]
 801921a:	9a02      	ldr	r2, [sp, #8]
 801921c:	9b03      	ldr	r3, [sp, #12]
 801921e:	6931      	ldr	r1, [r6, #16]
 8019220:	6938      	ldr	r0, [r7, #16]
 8019222:	9e05      	ldr	r6, [sp, #20]
 8019224:	1a08      	subs	r0, r1, r0
 8019226:	9904      	ldr	r1, [sp, #16]
 8019228:	0140      	lsls	r0, r0, #5
 801922a:	1b89      	subs	r1, r1, r6
 801922c:	1841      	adds	r1, r0, r1
 801922e:	0508      	lsls	r0, r1, #20
 8019230:	2900      	cmp	r1, #0
 8019232:	dd07      	ble.n	8019244 <__ratio+0x4c>
 8019234:	9901      	ldr	r1, [sp, #4]
 8019236:	1845      	adds	r5, r0, r1
 8019238:	0020      	movs	r0, r4
 801923a:	0029      	movs	r1, r5
 801923c:	f7e8 fab4 	bl	80017a8 <__aeabi_ddiv>
 8019240:	b007      	add	sp, #28
 8019242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019244:	9903      	ldr	r1, [sp, #12]
 8019246:	1a0b      	subs	r3, r1, r0
 8019248:	e7f6      	b.n	8019238 <__ratio+0x40>

0801924a <__copybits>:
 801924a:	b570      	push	{r4, r5, r6, lr}
 801924c:	0014      	movs	r4, r2
 801924e:	0005      	movs	r5, r0
 8019250:	3901      	subs	r1, #1
 8019252:	6913      	ldr	r3, [r2, #16]
 8019254:	1149      	asrs	r1, r1, #5
 8019256:	3101      	adds	r1, #1
 8019258:	0089      	lsls	r1, r1, #2
 801925a:	3414      	adds	r4, #20
 801925c:	009b      	lsls	r3, r3, #2
 801925e:	1841      	adds	r1, r0, r1
 8019260:	18e3      	adds	r3, r4, r3
 8019262:	42a3      	cmp	r3, r4
 8019264:	d80d      	bhi.n	8019282 <__copybits+0x38>
 8019266:	0014      	movs	r4, r2
 8019268:	3411      	adds	r4, #17
 801926a:	2500      	movs	r5, #0
 801926c:	429c      	cmp	r4, r3
 801926e:	d803      	bhi.n	8019278 <__copybits+0x2e>
 8019270:	1a9b      	subs	r3, r3, r2
 8019272:	3b11      	subs	r3, #17
 8019274:	089b      	lsrs	r3, r3, #2
 8019276:	009d      	lsls	r5, r3, #2
 8019278:	2300      	movs	r3, #0
 801927a:	1940      	adds	r0, r0, r5
 801927c:	4281      	cmp	r1, r0
 801927e:	d803      	bhi.n	8019288 <__copybits+0x3e>
 8019280:	bd70      	pop	{r4, r5, r6, pc}
 8019282:	cc40      	ldmia	r4!, {r6}
 8019284:	c540      	stmia	r5!, {r6}
 8019286:	e7ec      	b.n	8019262 <__copybits+0x18>
 8019288:	c008      	stmia	r0!, {r3}
 801928a:	e7f7      	b.n	801927c <__copybits+0x32>

0801928c <__any_on>:
 801928c:	0002      	movs	r2, r0
 801928e:	6900      	ldr	r0, [r0, #16]
 8019290:	b510      	push	{r4, lr}
 8019292:	3214      	adds	r2, #20
 8019294:	114b      	asrs	r3, r1, #5
 8019296:	4298      	cmp	r0, r3
 8019298:	db13      	blt.n	80192c2 <__any_on+0x36>
 801929a:	dd0c      	ble.n	80192b6 <__any_on+0x2a>
 801929c:	241f      	movs	r4, #31
 801929e:	0008      	movs	r0, r1
 80192a0:	4020      	ands	r0, r4
 80192a2:	4221      	tst	r1, r4
 80192a4:	d007      	beq.n	80192b6 <__any_on+0x2a>
 80192a6:	0099      	lsls	r1, r3, #2
 80192a8:	588c      	ldr	r4, [r1, r2]
 80192aa:	0021      	movs	r1, r4
 80192ac:	40c1      	lsrs	r1, r0
 80192ae:	4081      	lsls	r1, r0
 80192b0:	2001      	movs	r0, #1
 80192b2:	428c      	cmp	r4, r1
 80192b4:	d104      	bne.n	80192c0 <__any_on+0x34>
 80192b6:	009b      	lsls	r3, r3, #2
 80192b8:	18d3      	adds	r3, r2, r3
 80192ba:	4293      	cmp	r3, r2
 80192bc:	d803      	bhi.n	80192c6 <__any_on+0x3a>
 80192be:	2000      	movs	r0, #0
 80192c0:	bd10      	pop	{r4, pc}
 80192c2:	0003      	movs	r3, r0
 80192c4:	e7f7      	b.n	80192b6 <__any_on+0x2a>
 80192c6:	3b04      	subs	r3, #4
 80192c8:	6819      	ldr	r1, [r3, #0]
 80192ca:	2900      	cmp	r1, #0
 80192cc:	d0f5      	beq.n	80192ba <__any_on+0x2e>
 80192ce:	2001      	movs	r0, #1
 80192d0:	e7f6      	b.n	80192c0 <__any_on+0x34>

080192d2 <_calloc_r>:
 80192d2:	b570      	push	{r4, r5, r6, lr}
 80192d4:	0c13      	lsrs	r3, r2, #16
 80192d6:	0c0d      	lsrs	r5, r1, #16
 80192d8:	d11e      	bne.n	8019318 <_calloc_r+0x46>
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d10c      	bne.n	80192f8 <_calloc_r+0x26>
 80192de:	b289      	uxth	r1, r1
 80192e0:	b294      	uxth	r4, r2
 80192e2:	434c      	muls	r4, r1
 80192e4:	0021      	movs	r1, r4
 80192e6:	f7fb fe51 	bl	8014f8c <_malloc_r>
 80192ea:	1e05      	subs	r5, r0, #0
 80192ec:	d01b      	beq.n	8019326 <_calloc_r+0x54>
 80192ee:	0022      	movs	r2, r4
 80192f0:	2100      	movs	r1, #0
 80192f2:	f7fb fdd6 	bl	8014ea2 <memset>
 80192f6:	e016      	b.n	8019326 <_calloc_r+0x54>
 80192f8:	1c1d      	adds	r5, r3, #0
 80192fa:	1c0b      	adds	r3, r1, #0
 80192fc:	b292      	uxth	r2, r2
 80192fe:	b289      	uxth	r1, r1
 8019300:	b29c      	uxth	r4, r3
 8019302:	4351      	muls	r1, r2
 8019304:	b2ab      	uxth	r3, r5
 8019306:	4363      	muls	r3, r4
 8019308:	0c0c      	lsrs	r4, r1, #16
 801930a:	191c      	adds	r4, r3, r4
 801930c:	0c22      	lsrs	r2, r4, #16
 801930e:	d107      	bne.n	8019320 <_calloc_r+0x4e>
 8019310:	0424      	lsls	r4, r4, #16
 8019312:	b289      	uxth	r1, r1
 8019314:	430c      	orrs	r4, r1
 8019316:	e7e5      	b.n	80192e4 <_calloc_r+0x12>
 8019318:	2b00      	cmp	r3, #0
 801931a:	d101      	bne.n	8019320 <_calloc_r+0x4e>
 801931c:	1c13      	adds	r3, r2, #0
 801931e:	e7ed      	b.n	80192fc <_calloc_r+0x2a>
 8019320:	230c      	movs	r3, #12
 8019322:	2500      	movs	r5, #0
 8019324:	6003      	str	r3, [r0, #0]
 8019326:	0028      	movs	r0, r5
 8019328:	bd70      	pop	{r4, r5, r6, pc}
	...

0801932c <__ssputs_r>:
 801932c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801932e:	688e      	ldr	r6, [r1, #8]
 8019330:	b085      	sub	sp, #20
 8019332:	0007      	movs	r7, r0
 8019334:	000c      	movs	r4, r1
 8019336:	9203      	str	r2, [sp, #12]
 8019338:	9301      	str	r3, [sp, #4]
 801933a:	429e      	cmp	r6, r3
 801933c:	d83c      	bhi.n	80193b8 <__ssputs_r+0x8c>
 801933e:	2390      	movs	r3, #144	; 0x90
 8019340:	898a      	ldrh	r2, [r1, #12]
 8019342:	00db      	lsls	r3, r3, #3
 8019344:	421a      	tst	r2, r3
 8019346:	d034      	beq.n	80193b2 <__ssputs_r+0x86>
 8019348:	6909      	ldr	r1, [r1, #16]
 801934a:	6823      	ldr	r3, [r4, #0]
 801934c:	6960      	ldr	r0, [r4, #20]
 801934e:	1a5b      	subs	r3, r3, r1
 8019350:	9302      	str	r3, [sp, #8]
 8019352:	2303      	movs	r3, #3
 8019354:	4343      	muls	r3, r0
 8019356:	0fdd      	lsrs	r5, r3, #31
 8019358:	18ed      	adds	r5, r5, r3
 801935a:	9b01      	ldr	r3, [sp, #4]
 801935c:	9802      	ldr	r0, [sp, #8]
 801935e:	3301      	adds	r3, #1
 8019360:	181b      	adds	r3, r3, r0
 8019362:	106d      	asrs	r5, r5, #1
 8019364:	42ab      	cmp	r3, r5
 8019366:	d900      	bls.n	801936a <__ssputs_r+0x3e>
 8019368:	001d      	movs	r5, r3
 801936a:	0553      	lsls	r3, r2, #21
 801936c:	d532      	bpl.n	80193d4 <__ssputs_r+0xa8>
 801936e:	0029      	movs	r1, r5
 8019370:	0038      	movs	r0, r7
 8019372:	f7fb fe0b 	bl	8014f8c <_malloc_r>
 8019376:	1e06      	subs	r6, r0, #0
 8019378:	d109      	bne.n	801938e <__ssputs_r+0x62>
 801937a:	230c      	movs	r3, #12
 801937c:	603b      	str	r3, [r7, #0]
 801937e:	2340      	movs	r3, #64	; 0x40
 8019380:	2001      	movs	r0, #1
 8019382:	89a2      	ldrh	r2, [r4, #12]
 8019384:	4240      	negs	r0, r0
 8019386:	4313      	orrs	r3, r2
 8019388:	81a3      	strh	r3, [r4, #12]
 801938a:	b005      	add	sp, #20
 801938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801938e:	9a02      	ldr	r2, [sp, #8]
 8019390:	6921      	ldr	r1, [r4, #16]
 8019392:	f7fb fd7d 	bl	8014e90 <memcpy>
 8019396:	89a3      	ldrh	r3, [r4, #12]
 8019398:	4a14      	ldr	r2, [pc, #80]	; (80193ec <__ssputs_r+0xc0>)
 801939a:	401a      	ands	r2, r3
 801939c:	2380      	movs	r3, #128	; 0x80
 801939e:	4313      	orrs	r3, r2
 80193a0:	81a3      	strh	r3, [r4, #12]
 80193a2:	9b02      	ldr	r3, [sp, #8]
 80193a4:	6126      	str	r6, [r4, #16]
 80193a6:	18f6      	adds	r6, r6, r3
 80193a8:	6026      	str	r6, [r4, #0]
 80193aa:	6165      	str	r5, [r4, #20]
 80193ac:	9e01      	ldr	r6, [sp, #4]
 80193ae:	1aed      	subs	r5, r5, r3
 80193b0:	60a5      	str	r5, [r4, #8]
 80193b2:	9b01      	ldr	r3, [sp, #4]
 80193b4:	429e      	cmp	r6, r3
 80193b6:	d900      	bls.n	80193ba <__ssputs_r+0x8e>
 80193b8:	9e01      	ldr	r6, [sp, #4]
 80193ba:	0032      	movs	r2, r6
 80193bc:	9903      	ldr	r1, [sp, #12]
 80193be:	6820      	ldr	r0, [r4, #0]
 80193c0:	f000 fb76 	bl	8019ab0 <memmove>
 80193c4:	68a3      	ldr	r3, [r4, #8]
 80193c6:	2000      	movs	r0, #0
 80193c8:	1b9b      	subs	r3, r3, r6
 80193ca:	60a3      	str	r3, [r4, #8]
 80193cc:	6823      	ldr	r3, [r4, #0]
 80193ce:	199e      	adds	r6, r3, r6
 80193d0:	6026      	str	r6, [r4, #0]
 80193d2:	e7da      	b.n	801938a <__ssputs_r+0x5e>
 80193d4:	002a      	movs	r2, r5
 80193d6:	0038      	movs	r0, r7
 80193d8:	f000 fb7d 	bl	8019ad6 <_realloc_r>
 80193dc:	1e06      	subs	r6, r0, #0
 80193de:	d1e0      	bne.n	80193a2 <__ssputs_r+0x76>
 80193e0:	0038      	movs	r0, r7
 80193e2:	6921      	ldr	r1, [r4, #16]
 80193e4:	f7fb fd66 	bl	8014eb4 <_free_r>
 80193e8:	e7c7      	b.n	801937a <__ssputs_r+0x4e>
 80193ea:	46c0      	nop			; (mov r8, r8)
 80193ec:	fffffb7f 	.word	0xfffffb7f

080193f0 <_svfiprintf_r>:
 80193f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193f2:	b0a1      	sub	sp, #132	; 0x84
 80193f4:	9003      	str	r0, [sp, #12]
 80193f6:	001d      	movs	r5, r3
 80193f8:	898b      	ldrh	r3, [r1, #12]
 80193fa:	000f      	movs	r7, r1
 80193fc:	0016      	movs	r6, r2
 80193fe:	061b      	lsls	r3, r3, #24
 8019400:	d511      	bpl.n	8019426 <_svfiprintf_r+0x36>
 8019402:	690b      	ldr	r3, [r1, #16]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d10e      	bne.n	8019426 <_svfiprintf_r+0x36>
 8019408:	2140      	movs	r1, #64	; 0x40
 801940a:	f7fb fdbf 	bl	8014f8c <_malloc_r>
 801940e:	6038      	str	r0, [r7, #0]
 8019410:	6138      	str	r0, [r7, #16]
 8019412:	2800      	cmp	r0, #0
 8019414:	d105      	bne.n	8019422 <_svfiprintf_r+0x32>
 8019416:	230c      	movs	r3, #12
 8019418:	9a03      	ldr	r2, [sp, #12]
 801941a:	3801      	subs	r0, #1
 801941c:	6013      	str	r3, [r2, #0]
 801941e:	b021      	add	sp, #132	; 0x84
 8019420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019422:	2340      	movs	r3, #64	; 0x40
 8019424:	617b      	str	r3, [r7, #20]
 8019426:	2300      	movs	r3, #0
 8019428:	ac08      	add	r4, sp, #32
 801942a:	6163      	str	r3, [r4, #20]
 801942c:	3320      	adds	r3, #32
 801942e:	7663      	strb	r3, [r4, #25]
 8019430:	3310      	adds	r3, #16
 8019432:	76a3      	strb	r3, [r4, #26]
 8019434:	9507      	str	r5, [sp, #28]
 8019436:	0035      	movs	r5, r6
 8019438:	782b      	ldrb	r3, [r5, #0]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d001      	beq.n	8019442 <_svfiprintf_r+0x52>
 801943e:	2b25      	cmp	r3, #37	; 0x25
 8019440:	d147      	bne.n	80194d2 <_svfiprintf_r+0xe2>
 8019442:	1bab      	subs	r3, r5, r6
 8019444:	9305      	str	r3, [sp, #20]
 8019446:	42b5      	cmp	r5, r6
 8019448:	d00c      	beq.n	8019464 <_svfiprintf_r+0x74>
 801944a:	0032      	movs	r2, r6
 801944c:	0039      	movs	r1, r7
 801944e:	9803      	ldr	r0, [sp, #12]
 8019450:	f7ff ff6c 	bl	801932c <__ssputs_r>
 8019454:	1c43      	adds	r3, r0, #1
 8019456:	d100      	bne.n	801945a <_svfiprintf_r+0x6a>
 8019458:	e0ae      	b.n	80195b8 <_svfiprintf_r+0x1c8>
 801945a:	6962      	ldr	r2, [r4, #20]
 801945c:	9b05      	ldr	r3, [sp, #20]
 801945e:	4694      	mov	ip, r2
 8019460:	4463      	add	r3, ip
 8019462:	6163      	str	r3, [r4, #20]
 8019464:	782b      	ldrb	r3, [r5, #0]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d100      	bne.n	801946c <_svfiprintf_r+0x7c>
 801946a:	e0a5      	b.n	80195b8 <_svfiprintf_r+0x1c8>
 801946c:	2201      	movs	r2, #1
 801946e:	2300      	movs	r3, #0
 8019470:	4252      	negs	r2, r2
 8019472:	6062      	str	r2, [r4, #4]
 8019474:	a904      	add	r1, sp, #16
 8019476:	3254      	adds	r2, #84	; 0x54
 8019478:	1852      	adds	r2, r2, r1
 801947a:	1c6e      	adds	r6, r5, #1
 801947c:	6023      	str	r3, [r4, #0]
 801947e:	60e3      	str	r3, [r4, #12]
 8019480:	60a3      	str	r3, [r4, #8]
 8019482:	7013      	strb	r3, [r2, #0]
 8019484:	65a3      	str	r3, [r4, #88]	; 0x58
 8019486:	2205      	movs	r2, #5
 8019488:	7831      	ldrb	r1, [r6, #0]
 801948a:	4854      	ldr	r0, [pc, #336]	; (80195dc <_svfiprintf_r+0x1ec>)
 801948c:	f7ff fa3c 	bl	8018908 <memchr>
 8019490:	1c75      	adds	r5, r6, #1
 8019492:	2800      	cmp	r0, #0
 8019494:	d11f      	bne.n	80194d6 <_svfiprintf_r+0xe6>
 8019496:	6822      	ldr	r2, [r4, #0]
 8019498:	06d3      	lsls	r3, r2, #27
 801949a:	d504      	bpl.n	80194a6 <_svfiprintf_r+0xb6>
 801949c:	2353      	movs	r3, #83	; 0x53
 801949e:	a904      	add	r1, sp, #16
 80194a0:	185b      	adds	r3, r3, r1
 80194a2:	2120      	movs	r1, #32
 80194a4:	7019      	strb	r1, [r3, #0]
 80194a6:	0713      	lsls	r3, r2, #28
 80194a8:	d504      	bpl.n	80194b4 <_svfiprintf_r+0xc4>
 80194aa:	2353      	movs	r3, #83	; 0x53
 80194ac:	a904      	add	r1, sp, #16
 80194ae:	185b      	adds	r3, r3, r1
 80194b0:	212b      	movs	r1, #43	; 0x2b
 80194b2:	7019      	strb	r1, [r3, #0]
 80194b4:	7833      	ldrb	r3, [r6, #0]
 80194b6:	2b2a      	cmp	r3, #42	; 0x2a
 80194b8:	d016      	beq.n	80194e8 <_svfiprintf_r+0xf8>
 80194ba:	0035      	movs	r5, r6
 80194bc:	2100      	movs	r1, #0
 80194be:	200a      	movs	r0, #10
 80194c0:	68e3      	ldr	r3, [r4, #12]
 80194c2:	782a      	ldrb	r2, [r5, #0]
 80194c4:	1c6e      	adds	r6, r5, #1
 80194c6:	3a30      	subs	r2, #48	; 0x30
 80194c8:	2a09      	cmp	r2, #9
 80194ca:	d94e      	bls.n	801956a <_svfiprintf_r+0x17a>
 80194cc:	2900      	cmp	r1, #0
 80194ce:	d111      	bne.n	80194f4 <_svfiprintf_r+0x104>
 80194d0:	e017      	b.n	8019502 <_svfiprintf_r+0x112>
 80194d2:	3501      	adds	r5, #1
 80194d4:	e7b0      	b.n	8019438 <_svfiprintf_r+0x48>
 80194d6:	4b41      	ldr	r3, [pc, #260]	; (80195dc <_svfiprintf_r+0x1ec>)
 80194d8:	6822      	ldr	r2, [r4, #0]
 80194da:	1ac0      	subs	r0, r0, r3
 80194dc:	2301      	movs	r3, #1
 80194de:	4083      	lsls	r3, r0
 80194e0:	4313      	orrs	r3, r2
 80194e2:	002e      	movs	r6, r5
 80194e4:	6023      	str	r3, [r4, #0]
 80194e6:	e7ce      	b.n	8019486 <_svfiprintf_r+0x96>
 80194e8:	9b07      	ldr	r3, [sp, #28]
 80194ea:	1d19      	adds	r1, r3, #4
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	9107      	str	r1, [sp, #28]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	db01      	blt.n	80194f8 <_svfiprintf_r+0x108>
 80194f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80194f6:	e004      	b.n	8019502 <_svfiprintf_r+0x112>
 80194f8:	425b      	negs	r3, r3
 80194fa:	60e3      	str	r3, [r4, #12]
 80194fc:	2302      	movs	r3, #2
 80194fe:	4313      	orrs	r3, r2
 8019500:	6023      	str	r3, [r4, #0]
 8019502:	782b      	ldrb	r3, [r5, #0]
 8019504:	2b2e      	cmp	r3, #46	; 0x2e
 8019506:	d10a      	bne.n	801951e <_svfiprintf_r+0x12e>
 8019508:	786b      	ldrb	r3, [r5, #1]
 801950a:	2b2a      	cmp	r3, #42	; 0x2a
 801950c:	d135      	bne.n	801957a <_svfiprintf_r+0x18a>
 801950e:	9b07      	ldr	r3, [sp, #28]
 8019510:	3502      	adds	r5, #2
 8019512:	1d1a      	adds	r2, r3, #4
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	9207      	str	r2, [sp, #28]
 8019518:	2b00      	cmp	r3, #0
 801951a:	db2b      	blt.n	8019574 <_svfiprintf_r+0x184>
 801951c:	9309      	str	r3, [sp, #36]	; 0x24
 801951e:	4e30      	ldr	r6, [pc, #192]	; (80195e0 <_svfiprintf_r+0x1f0>)
 8019520:	2203      	movs	r2, #3
 8019522:	0030      	movs	r0, r6
 8019524:	7829      	ldrb	r1, [r5, #0]
 8019526:	f7ff f9ef 	bl	8018908 <memchr>
 801952a:	2800      	cmp	r0, #0
 801952c:	d006      	beq.n	801953c <_svfiprintf_r+0x14c>
 801952e:	2340      	movs	r3, #64	; 0x40
 8019530:	1b80      	subs	r0, r0, r6
 8019532:	4083      	lsls	r3, r0
 8019534:	6822      	ldr	r2, [r4, #0]
 8019536:	3501      	adds	r5, #1
 8019538:	4313      	orrs	r3, r2
 801953a:	6023      	str	r3, [r4, #0]
 801953c:	7829      	ldrb	r1, [r5, #0]
 801953e:	2206      	movs	r2, #6
 8019540:	4828      	ldr	r0, [pc, #160]	; (80195e4 <_svfiprintf_r+0x1f4>)
 8019542:	1c6e      	adds	r6, r5, #1
 8019544:	7621      	strb	r1, [r4, #24]
 8019546:	f7ff f9df 	bl	8018908 <memchr>
 801954a:	2800      	cmp	r0, #0
 801954c:	d03c      	beq.n	80195c8 <_svfiprintf_r+0x1d8>
 801954e:	4b26      	ldr	r3, [pc, #152]	; (80195e8 <_svfiprintf_r+0x1f8>)
 8019550:	2b00      	cmp	r3, #0
 8019552:	d125      	bne.n	80195a0 <_svfiprintf_r+0x1b0>
 8019554:	2207      	movs	r2, #7
 8019556:	9b07      	ldr	r3, [sp, #28]
 8019558:	3307      	adds	r3, #7
 801955a:	4393      	bics	r3, r2
 801955c:	3308      	adds	r3, #8
 801955e:	9307      	str	r3, [sp, #28]
 8019560:	6963      	ldr	r3, [r4, #20]
 8019562:	9a04      	ldr	r2, [sp, #16]
 8019564:	189b      	adds	r3, r3, r2
 8019566:	6163      	str	r3, [r4, #20]
 8019568:	e765      	b.n	8019436 <_svfiprintf_r+0x46>
 801956a:	4343      	muls	r3, r0
 801956c:	0035      	movs	r5, r6
 801956e:	2101      	movs	r1, #1
 8019570:	189b      	adds	r3, r3, r2
 8019572:	e7a6      	b.n	80194c2 <_svfiprintf_r+0xd2>
 8019574:	2301      	movs	r3, #1
 8019576:	425b      	negs	r3, r3
 8019578:	e7d0      	b.n	801951c <_svfiprintf_r+0x12c>
 801957a:	2300      	movs	r3, #0
 801957c:	200a      	movs	r0, #10
 801957e:	001a      	movs	r2, r3
 8019580:	3501      	adds	r5, #1
 8019582:	6063      	str	r3, [r4, #4]
 8019584:	7829      	ldrb	r1, [r5, #0]
 8019586:	1c6e      	adds	r6, r5, #1
 8019588:	3930      	subs	r1, #48	; 0x30
 801958a:	2909      	cmp	r1, #9
 801958c:	d903      	bls.n	8019596 <_svfiprintf_r+0x1a6>
 801958e:	2b00      	cmp	r3, #0
 8019590:	d0c5      	beq.n	801951e <_svfiprintf_r+0x12e>
 8019592:	9209      	str	r2, [sp, #36]	; 0x24
 8019594:	e7c3      	b.n	801951e <_svfiprintf_r+0x12e>
 8019596:	4342      	muls	r2, r0
 8019598:	0035      	movs	r5, r6
 801959a:	2301      	movs	r3, #1
 801959c:	1852      	adds	r2, r2, r1
 801959e:	e7f1      	b.n	8019584 <_svfiprintf_r+0x194>
 80195a0:	ab07      	add	r3, sp, #28
 80195a2:	9300      	str	r3, [sp, #0]
 80195a4:	003a      	movs	r2, r7
 80195a6:	0021      	movs	r1, r4
 80195a8:	4b10      	ldr	r3, [pc, #64]	; (80195ec <_svfiprintf_r+0x1fc>)
 80195aa:	9803      	ldr	r0, [sp, #12]
 80195ac:	f7fb fe0e 	bl	80151cc <_printf_float>
 80195b0:	9004      	str	r0, [sp, #16]
 80195b2:	9b04      	ldr	r3, [sp, #16]
 80195b4:	3301      	adds	r3, #1
 80195b6:	d1d3      	bne.n	8019560 <_svfiprintf_r+0x170>
 80195b8:	89bb      	ldrh	r3, [r7, #12]
 80195ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80195bc:	065b      	lsls	r3, r3, #25
 80195be:	d400      	bmi.n	80195c2 <_svfiprintf_r+0x1d2>
 80195c0:	e72d      	b.n	801941e <_svfiprintf_r+0x2e>
 80195c2:	2001      	movs	r0, #1
 80195c4:	4240      	negs	r0, r0
 80195c6:	e72a      	b.n	801941e <_svfiprintf_r+0x2e>
 80195c8:	ab07      	add	r3, sp, #28
 80195ca:	9300      	str	r3, [sp, #0]
 80195cc:	003a      	movs	r2, r7
 80195ce:	0021      	movs	r1, r4
 80195d0:	4b06      	ldr	r3, [pc, #24]	; (80195ec <_svfiprintf_r+0x1fc>)
 80195d2:	9803      	ldr	r0, [sp, #12]
 80195d4:	f7fc f8ac 	bl	8015730 <_printf_i>
 80195d8:	e7ea      	b.n	80195b0 <_svfiprintf_r+0x1c0>
 80195da:	46c0      	nop			; (mov r8, r8)
 80195dc:	0801bc84 	.word	0x0801bc84
 80195e0:	0801bc8a 	.word	0x0801bc8a
 80195e4:	0801bc8e 	.word	0x0801bc8e
 80195e8:	080151cd 	.word	0x080151cd
 80195ec:	0801932d 	.word	0x0801932d

080195f0 <__sfputc_r>:
 80195f0:	6893      	ldr	r3, [r2, #8]
 80195f2:	b510      	push	{r4, lr}
 80195f4:	3b01      	subs	r3, #1
 80195f6:	6093      	str	r3, [r2, #8]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	da04      	bge.n	8019606 <__sfputc_r+0x16>
 80195fc:	6994      	ldr	r4, [r2, #24]
 80195fe:	42a3      	cmp	r3, r4
 8019600:	db07      	blt.n	8019612 <__sfputc_r+0x22>
 8019602:	290a      	cmp	r1, #10
 8019604:	d005      	beq.n	8019612 <__sfputc_r+0x22>
 8019606:	6813      	ldr	r3, [r2, #0]
 8019608:	1c58      	adds	r0, r3, #1
 801960a:	6010      	str	r0, [r2, #0]
 801960c:	7019      	strb	r1, [r3, #0]
 801960e:	0008      	movs	r0, r1
 8019610:	bd10      	pop	{r4, pc}
 8019612:	f7fd fc3d 	bl	8016e90 <__swbuf_r>
 8019616:	0001      	movs	r1, r0
 8019618:	e7f9      	b.n	801960e <__sfputc_r+0x1e>

0801961a <__sfputs_r>:
 801961a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801961c:	0006      	movs	r6, r0
 801961e:	000f      	movs	r7, r1
 8019620:	0014      	movs	r4, r2
 8019622:	18d5      	adds	r5, r2, r3
 8019624:	42ac      	cmp	r4, r5
 8019626:	d101      	bne.n	801962c <__sfputs_r+0x12>
 8019628:	2000      	movs	r0, #0
 801962a:	e007      	b.n	801963c <__sfputs_r+0x22>
 801962c:	7821      	ldrb	r1, [r4, #0]
 801962e:	003a      	movs	r2, r7
 8019630:	0030      	movs	r0, r6
 8019632:	f7ff ffdd 	bl	80195f0 <__sfputc_r>
 8019636:	3401      	adds	r4, #1
 8019638:	1c43      	adds	r3, r0, #1
 801963a:	d1f3      	bne.n	8019624 <__sfputs_r+0xa>
 801963c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019640 <_vfiprintf_r>:
 8019640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019642:	b0a1      	sub	sp, #132	; 0x84
 8019644:	0006      	movs	r6, r0
 8019646:	000c      	movs	r4, r1
 8019648:	001f      	movs	r7, r3
 801964a:	9203      	str	r2, [sp, #12]
 801964c:	2800      	cmp	r0, #0
 801964e:	d004      	beq.n	801965a <_vfiprintf_r+0x1a>
 8019650:	6983      	ldr	r3, [r0, #24]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d101      	bne.n	801965a <_vfiprintf_r+0x1a>
 8019656:	f7fe fcbd 	bl	8017fd4 <__sinit>
 801965a:	4b8e      	ldr	r3, [pc, #568]	; (8019894 <_vfiprintf_r+0x254>)
 801965c:	429c      	cmp	r4, r3
 801965e:	d11c      	bne.n	801969a <_vfiprintf_r+0x5a>
 8019660:	6874      	ldr	r4, [r6, #4]
 8019662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019664:	07db      	lsls	r3, r3, #31
 8019666:	d405      	bmi.n	8019674 <_vfiprintf_r+0x34>
 8019668:	89a3      	ldrh	r3, [r4, #12]
 801966a:	059b      	lsls	r3, r3, #22
 801966c:	d402      	bmi.n	8019674 <_vfiprintf_r+0x34>
 801966e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019670:	f7ff f8c9 	bl	8018806 <__retarget_lock_acquire_recursive>
 8019674:	89a3      	ldrh	r3, [r4, #12]
 8019676:	071b      	lsls	r3, r3, #28
 8019678:	d502      	bpl.n	8019680 <_vfiprintf_r+0x40>
 801967a:	6923      	ldr	r3, [r4, #16]
 801967c:	2b00      	cmp	r3, #0
 801967e:	d11d      	bne.n	80196bc <_vfiprintf_r+0x7c>
 8019680:	0021      	movs	r1, r4
 8019682:	0030      	movs	r0, r6
 8019684:	f7fd fc5a 	bl	8016f3c <__swsetup_r>
 8019688:	2800      	cmp	r0, #0
 801968a:	d017      	beq.n	80196bc <_vfiprintf_r+0x7c>
 801968c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801968e:	07db      	lsls	r3, r3, #31
 8019690:	d50d      	bpl.n	80196ae <_vfiprintf_r+0x6e>
 8019692:	2001      	movs	r0, #1
 8019694:	4240      	negs	r0, r0
 8019696:	b021      	add	sp, #132	; 0x84
 8019698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801969a:	4b7f      	ldr	r3, [pc, #508]	; (8019898 <_vfiprintf_r+0x258>)
 801969c:	429c      	cmp	r4, r3
 801969e:	d101      	bne.n	80196a4 <_vfiprintf_r+0x64>
 80196a0:	68b4      	ldr	r4, [r6, #8]
 80196a2:	e7de      	b.n	8019662 <_vfiprintf_r+0x22>
 80196a4:	4b7d      	ldr	r3, [pc, #500]	; (801989c <_vfiprintf_r+0x25c>)
 80196a6:	429c      	cmp	r4, r3
 80196a8:	d1db      	bne.n	8019662 <_vfiprintf_r+0x22>
 80196aa:	68f4      	ldr	r4, [r6, #12]
 80196ac:	e7d9      	b.n	8019662 <_vfiprintf_r+0x22>
 80196ae:	89a3      	ldrh	r3, [r4, #12]
 80196b0:	059b      	lsls	r3, r3, #22
 80196b2:	d4ee      	bmi.n	8019692 <_vfiprintf_r+0x52>
 80196b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80196b6:	f7ff f8a7 	bl	8018808 <__retarget_lock_release_recursive>
 80196ba:	e7ea      	b.n	8019692 <_vfiprintf_r+0x52>
 80196bc:	2300      	movs	r3, #0
 80196be:	ad08      	add	r5, sp, #32
 80196c0:	616b      	str	r3, [r5, #20]
 80196c2:	3320      	adds	r3, #32
 80196c4:	766b      	strb	r3, [r5, #25]
 80196c6:	3310      	adds	r3, #16
 80196c8:	76ab      	strb	r3, [r5, #26]
 80196ca:	9707      	str	r7, [sp, #28]
 80196cc:	9f03      	ldr	r7, [sp, #12]
 80196ce:	783b      	ldrb	r3, [r7, #0]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d001      	beq.n	80196d8 <_vfiprintf_r+0x98>
 80196d4:	2b25      	cmp	r3, #37	; 0x25
 80196d6:	d14e      	bne.n	8019776 <_vfiprintf_r+0x136>
 80196d8:	9b03      	ldr	r3, [sp, #12]
 80196da:	1afb      	subs	r3, r7, r3
 80196dc:	9305      	str	r3, [sp, #20]
 80196de:	9b03      	ldr	r3, [sp, #12]
 80196e0:	429f      	cmp	r7, r3
 80196e2:	d00d      	beq.n	8019700 <_vfiprintf_r+0xc0>
 80196e4:	9b05      	ldr	r3, [sp, #20]
 80196e6:	0021      	movs	r1, r4
 80196e8:	0030      	movs	r0, r6
 80196ea:	9a03      	ldr	r2, [sp, #12]
 80196ec:	f7ff ff95 	bl	801961a <__sfputs_r>
 80196f0:	1c43      	adds	r3, r0, #1
 80196f2:	d100      	bne.n	80196f6 <_vfiprintf_r+0xb6>
 80196f4:	e0b5      	b.n	8019862 <_vfiprintf_r+0x222>
 80196f6:	696a      	ldr	r2, [r5, #20]
 80196f8:	9b05      	ldr	r3, [sp, #20]
 80196fa:	4694      	mov	ip, r2
 80196fc:	4463      	add	r3, ip
 80196fe:	616b      	str	r3, [r5, #20]
 8019700:	783b      	ldrb	r3, [r7, #0]
 8019702:	2b00      	cmp	r3, #0
 8019704:	d100      	bne.n	8019708 <_vfiprintf_r+0xc8>
 8019706:	e0ac      	b.n	8019862 <_vfiprintf_r+0x222>
 8019708:	2201      	movs	r2, #1
 801970a:	1c7b      	adds	r3, r7, #1
 801970c:	9303      	str	r3, [sp, #12]
 801970e:	2300      	movs	r3, #0
 8019710:	4252      	negs	r2, r2
 8019712:	606a      	str	r2, [r5, #4]
 8019714:	a904      	add	r1, sp, #16
 8019716:	3254      	adds	r2, #84	; 0x54
 8019718:	1852      	adds	r2, r2, r1
 801971a:	602b      	str	r3, [r5, #0]
 801971c:	60eb      	str	r3, [r5, #12]
 801971e:	60ab      	str	r3, [r5, #8]
 8019720:	7013      	strb	r3, [r2, #0]
 8019722:	65ab      	str	r3, [r5, #88]	; 0x58
 8019724:	9b03      	ldr	r3, [sp, #12]
 8019726:	2205      	movs	r2, #5
 8019728:	7819      	ldrb	r1, [r3, #0]
 801972a:	485d      	ldr	r0, [pc, #372]	; (80198a0 <_vfiprintf_r+0x260>)
 801972c:	f7ff f8ec 	bl	8018908 <memchr>
 8019730:	9b03      	ldr	r3, [sp, #12]
 8019732:	1c5f      	adds	r7, r3, #1
 8019734:	2800      	cmp	r0, #0
 8019736:	d120      	bne.n	801977a <_vfiprintf_r+0x13a>
 8019738:	682a      	ldr	r2, [r5, #0]
 801973a:	06d3      	lsls	r3, r2, #27
 801973c:	d504      	bpl.n	8019748 <_vfiprintf_r+0x108>
 801973e:	2353      	movs	r3, #83	; 0x53
 8019740:	a904      	add	r1, sp, #16
 8019742:	185b      	adds	r3, r3, r1
 8019744:	2120      	movs	r1, #32
 8019746:	7019      	strb	r1, [r3, #0]
 8019748:	0713      	lsls	r3, r2, #28
 801974a:	d504      	bpl.n	8019756 <_vfiprintf_r+0x116>
 801974c:	2353      	movs	r3, #83	; 0x53
 801974e:	a904      	add	r1, sp, #16
 8019750:	185b      	adds	r3, r3, r1
 8019752:	212b      	movs	r1, #43	; 0x2b
 8019754:	7019      	strb	r1, [r3, #0]
 8019756:	9b03      	ldr	r3, [sp, #12]
 8019758:	781b      	ldrb	r3, [r3, #0]
 801975a:	2b2a      	cmp	r3, #42	; 0x2a
 801975c:	d016      	beq.n	801978c <_vfiprintf_r+0x14c>
 801975e:	2100      	movs	r1, #0
 8019760:	68eb      	ldr	r3, [r5, #12]
 8019762:	9f03      	ldr	r7, [sp, #12]
 8019764:	783a      	ldrb	r2, [r7, #0]
 8019766:	1c78      	adds	r0, r7, #1
 8019768:	3a30      	subs	r2, #48	; 0x30
 801976a:	4684      	mov	ip, r0
 801976c:	2a09      	cmp	r2, #9
 801976e:	d94f      	bls.n	8019810 <_vfiprintf_r+0x1d0>
 8019770:	2900      	cmp	r1, #0
 8019772:	d111      	bne.n	8019798 <_vfiprintf_r+0x158>
 8019774:	e017      	b.n	80197a6 <_vfiprintf_r+0x166>
 8019776:	3701      	adds	r7, #1
 8019778:	e7a9      	b.n	80196ce <_vfiprintf_r+0x8e>
 801977a:	4b49      	ldr	r3, [pc, #292]	; (80198a0 <_vfiprintf_r+0x260>)
 801977c:	682a      	ldr	r2, [r5, #0]
 801977e:	1ac0      	subs	r0, r0, r3
 8019780:	2301      	movs	r3, #1
 8019782:	4083      	lsls	r3, r0
 8019784:	4313      	orrs	r3, r2
 8019786:	602b      	str	r3, [r5, #0]
 8019788:	9703      	str	r7, [sp, #12]
 801978a:	e7cb      	b.n	8019724 <_vfiprintf_r+0xe4>
 801978c:	9b07      	ldr	r3, [sp, #28]
 801978e:	1d19      	adds	r1, r3, #4
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	9107      	str	r1, [sp, #28]
 8019794:	2b00      	cmp	r3, #0
 8019796:	db01      	blt.n	801979c <_vfiprintf_r+0x15c>
 8019798:	930b      	str	r3, [sp, #44]	; 0x2c
 801979a:	e004      	b.n	80197a6 <_vfiprintf_r+0x166>
 801979c:	425b      	negs	r3, r3
 801979e:	60eb      	str	r3, [r5, #12]
 80197a0:	2302      	movs	r3, #2
 80197a2:	4313      	orrs	r3, r2
 80197a4:	602b      	str	r3, [r5, #0]
 80197a6:	783b      	ldrb	r3, [r7, #0]
 80197a8:	2b2e      	cmp	r3, #46	; 0x2e
 80197aa:	d10a      	bne.n	80197c2 <_vfiprintf_r+0x182>
 80197ac:	787b      	ldrb	r3, [r7, #1]
 80197ae:	2b2a      	cmp	r3, #42	; 0x2a
 80197b0:	d137      	bne.n	8019822 <_vfiprintf_r+0x1e2>
 80197b2:	9b07      	ldr	r3, [sp, #28]
 80197b4:	3702      	adds	r7, #2
 80197b6:	1d1a      	adds	r2, r3, #4
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	9207      	str	r2, [sp, #28]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	db2d      	blt.n	801981c <_vfiprintf_r+0x1dc>
 80197c0:	9309      	str	r3, [sp, #36]	; 0x24
 80197c2:	2203      	movs	r2, #3
 80197c4:	7839      	ldrb	r1, [r7, #0]
 80197c6:	4837      	ldr	r0, [pc, #220]	; (80198a4 <_vfiprintf_r+0x264>)
 80197c8:	f7ff f89e 	bl	8018908 <memchr>
 80197cc:	2800      	cmp	r0, #0
 80197ce:	d007      	beq.n	80197e0 <_vfiprintf_r+0x1a0>
 80197d0:	4b34      	ldr	r3, [pc, #208]	; (80198a4 <_vfiprintf_r+0x264>)
 80197d2:	682a      	ldr	r2, [r5, #0]
 80197d4:	1ac0      	subs	r0, r0, r3
 80197d6:	2340      	movs	r3, #64	; 0x40
 80197d8:	4083      	lsls	r3, r0
 80197da:	4313      	orrs	r3, r2
 80197dc:	3701      	adds	r7, #1
 80197de:	602b      	str	r3, [r5, #0]
 80197e0:	7839      	ldrb	r1, [r7, #0]
 80197e2:	1c7b      	adds	r3, r7, #1
 80197e4:	2206      	movs	r2, #6
 80197e6:	4830      	ldr	r0, [pc, #192]	; (80198a8 <_vfiprintf_r+0x268>)
 80197e8:	9303      	str	r3, [sp, #12]
 80197ea:	7629      	strb	r1, [r5, #24]
 80197ec:	f7ff f88c 	bl	8018908 <memchr>
 80197f0:	2800      	cmp	r0, #0
 80197f2:	d045      	beq.n	8019880 <_vfiprintf_r+0x240>
 80197f4:	4b2d      	ldr	r3, [pc, #180]	; (80198ac <_vfiprintf_r+0x26c>)
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d127      	bne.n	801984a <_vfiprintf_r+0x20a>
 80197fa:	2207      	movs	r2, #7
 80197fc:	9b07      	ldr	r3, [sp, #28]
 80197fe:	3307      	adds	r3, #7
 8019800:	4393      	bics	r3, r2
 8019802:	3308      	adds	r3, #8
 8019804:	9307      	str	r3, [sp, #28]
 8019806:	696b      	ldr	r3, [r5, #20]
 8019808:	9a04      	ldr	r2, [sp, #16]
 801980a:	189b      	adds	r3, r3, r2
 801980c:	616b      	str	r3, [r5, #20]
 801980e:	e75d      	b.n	80196cc <_vfiprintf_r+0x8c>
 8019810:	210a      	movs	r1, #10
 8019812:	434b      	muls	r3, r1
 8019814:	4667      	mov	r7, ip
 8019816:	189b      	adds	r3, r3, r2
 8019818:	3909      	subs	r1, #9
 801981a:	e7a3      	b.n	8019764 <_vfiprintf_r+0x124>
 801981c:	2301      	movs	r3, #1
 801981e:	425b      	negs	r3, r3
 8019820:	e7ce      	b.n	80197c0 <_vfiprintf_r+0x180>
 8019822:	2300      	movs	r3, #0
 8019824:	001a      	movs	r2, r3
 8019826:	3701      	adds	r7, #1
 8019828:	606b      	str	r3, [r5, #4]
 801982a:	7839      	ldrb	r1, [r7, #0]
 801982c:	1c78      	adds	r0, r7, #1
 801982e:	3930      	subs	r1, #48	; 0x30
 8019830:	4684      	mov	ip, r0
 8019832:	2909      	cmp	r1, #9
 8019834:	d903      	bls.n	801983e <_vfiprintf_r+0x1fe>
 8019836:	2b00      	cmp	r3, #0
 8019838:	d0c3      	beq.n	80197c2 <_vfiprintf_r+0x182>
 801983a:	9209      	str	r2, [sp, #36]	; 0x24
 801983c:	e7c1      	b.n	80197c2 <_vfiprintf_r+0x182>
 801983e:	230a      	movs	r3, #10
 8019840:	435a      	muls	r2, r3
 8019842:	4667      	mov	r7, ip
 8019844:	1852      	adds	r2, r2, r1
 8019846:	3b09      	subs	r3, #9
 8019848:	e7ef      	b.n	801982a <_vfiprintf_r+0x1ea>
 801984a:	ab07      	add	r3, sp, #28
 801984c:	9300      	str	r3, [sp, #0]
 801984e:	0022      	movs	r2, r4
 8019850:	0029      	movs	r1, r5
 8019852:	0030      	movs	r0, r6
 8019854:	4b16      	ldr	r3, [pc, #88]	; (80198b0 <_vfiprintf_r+0x270>)
 8019856:	f7fb fcb9 	bl	80151cc <_printf_float>
 801985a:	9004      	str	r0, [sp, #16]
 801985c:	9b04      	ldr	r3, [sp, #16]
 801985e:	3301      	adds	r3, #1
 8019860:	d1d1      	bne.n	8019806 <_vfiprintf_r+0x1c6>
 8019862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019864:	07db      	lsls	r3, r3, #31
 8019866:	d405      	bmi.n	8019874 <_vfiprintf_r+0x234>
 8019868:	89a3      	ldrh	r3, [r4, #12]
 801986a:	059b      	lsls	r3, r3, #22
 801986c:	d402      	bmi.n	8019874 <_vfiprintf_r+0x234>
 801986e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019870:	f7fe ffca 	bl	8018808 <__retarget_lock_release_recursive>
 8019874:	89a3      	ldrh	r3, [r4, #12]
 8019876:	065b      	lsls	r3, r3, #25
 8019878:	d500      	bpl.n	801987c <_vfiprintf_r+0x23c>
 801987a:	e70a      	b.n	8019692 <_vfiprintf_r+0x52>
 801987c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801987e:	e70a      	b.n	8019696 <_vfiprintf_r+0x56>
 8019880:	ab07      	add	r3, sp, #28
 8019882:	9300      	str	r3, [sp, #0]
 8019884:	0022      	movs	r2, r4
 8019886:	0029      	movs	r1, r5
 8019888:	0030      	movs	r0, r6
 801988a:	4b09      	ldr	r3, [pc, #36]	; (80198b0 <_vfiprintf_r+0x270>)
 801988c:	f7fb ff50 	bl	8015730 <_printf_i>
 8019890:	e7e3      	b.n	801985a <_vfiprintf_r+0x21a>
 8019892:	46c0      	nop			; (mov r8, r8)
 8019894:	0801ba6c 	.word	0x0801ba6c
 8019898:	0801ba8c 	.word	0x0801ba8c
 801989c:	0801ba4c 	.word	0x0801ba4c
 80198a0:	0801bc84 	.word	0x0801bc84
 80198a4:	0801bc8a 	.word	0x0801bc8a
 80198a8:	0801bc8e 	.word	0x0801bc8e
 80198ac:	080151cd 	.word	0x080151cd
 80198b0:	0801961b 	.word	0x0801961b

080198b4 <nan>:
 80198b4:	2000      	movs	r0, #0
 80198b6:	4901      	ldr	r1, [pc, #4]	; (80198bc <nan+0x8>)
 80198b8:	4770      	bx	lr
 80198ba:	46c0      	nop			; (mov r8, r8)
 80198bc:	7ff80000 	.word	0x7ff80000

080198c0 <__sread>:
 80198c0:	b570      	push	{r4, r5, r6, lr}
 80198c2:	000c      	movs	r4, r1
 80198c4:	250e      	movs	r5, #14
 80198c6:	5f49      	ldrsh	r1, [r1, r5]
 80198c8:	f000 f934 	bl	8019b34 <_read_r>
 80198cc:	2800      	cmp	r0, #0
 80198ce:	db03      	blt.n	80198d8 <__sread+0x18>
 80198d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80198d2:	181b      	adds	r3, r3, r0
 80198d4:	6563      	str	r3, [r4, #84]	; 0x54
 80198d6:	bd70      	pop	{r4, r5, r6, pc}
 80198d8:	89a3      	ldrh	r3, [r4, #12]
 80198da:	4a02      	ldr	r2, [pc, #8]	; (80198e4 <__sread+0x24>)
 80198dc:	4013      	ands	r3, r2
 80198de:	81a3      	strh	r3, [r4, #12]
 80198e0:	e7f9      	b.n	80198d6 <__sread+0x16>
 80198e2:	46c0      	nop			; (mov r8, r8)
 80198e4:	ffffefff 	.word	0xffffefff

080198e8 <__swrite>:
 80198e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ea:	001f      	movs	r7, r3
 80198ec:	898b      	ldrh	r3, [r1, #12]
 80198ee:	0005      	movs	r5, r0
 80198f0:	000c      	movs	r4, r1
 80198f2:	0016      	movs	r6, r2
 80198f4:	05db      	lsls	r3, r3, #23
 80198f6:	d505      	bpl.n	8019904 <__swrite+0x1c>
 80198f8:	230e      	movs	r3, #14
 80198fa:	5ec9      	ldrsh	r1, [r1, r3]
 80198fc:	2200      	movs	r2, #0
 80198fe:	2302      	movs	r3, #2
 8019900:	f000 f8c2 	bl	8019a88 <_lseek_r>
 8019904:	89a3      	ldrh	r3, [r4, #12]
 8019906:	4a05      	ldr	r2, [pc, #20]	; (801991c <__swrite+0x34>)
 8019908:	0028      	movs	r0, r5
 801990a:	4013      	ands	r3, r2
 801990c:	81a3      	strh	r3, [r4, #12]
 801990e:	0032      	movs	r2, r6
 8019910:	230e      	movs	r3, #14
 8019912:	5ee1      	ldrsh	r1, [r4, r3]
 8019914:	003b      	movs	r3, r7
 8019916:	f000 f83f 	bl	8019998 <_write_r>
 801991a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801991c:	ffffefff 	.word	0xffffefff

08019920 <__sseek>:
 8019920:	b570      	push	{r4, r5, r6, lr}
 8019922:	000c      	movs	r4, r1
 8019924:	250e      	movs	r5, #14
 8019926:	5f49      	ldrsh	r1, [r1, r5]
 8019928:	f000 f8ae 	bl	8019a88 <_lseek_r>
 801992c:	89a3      	ldrh	r3, [r4, #12]
 801992e:	1c42      	adds	r2, r0, #1
 8019930:	d103      	bne.n	801993a <__sseek+0x1a>
 8019932:	4a05      	ldr	r2, [pc, #20]	; (8019948 <__sseek+0x28>)
 8019934:	4013      	ands	r3, r2
 8019936:	81a3      	strh	r3, [r4, #12]
 8019938:	bd70      	pop	{r4, r5, r6, pc}
 801993a:	2280      	movs	r2, #128	; 0x80
 801993c:	0152      	lsls	r2, r2, #5
 801993e:	4313      	orrs	r3, r2
 8019940:	81a3      	strh	r3, [r4, #12]
 8019942:	6560      	str	r0, [r4, #84]	; 0x54
 8019944:	e7f8      	b.n	8019938 <__sseek+0x18>
 8019946:	46c0      	nop			; (mov r8, r8)
 8019948:	ffffefff 	.word	0xffffefff

0801994c <__sclose>:
 801994c:	b510      	push	{r4, lr}
 801994e:	230e      	movs	r3, #14
 8019950:	5ec9      	ldrsh	r1, [r1, r3]
 8019952:	f000 f853 	bl	80199fc <_close_r>
 8019956:	bd10      	pop	{r4, pc}

08019958 <strncmp>:
 8019958:	b530      	push	{r4, r5, lr}
 801995a:	0005      	movs	r5, r0
 801995c:	1e10      	subs	r0, r2, #0
 801995e:	d008      	beq.n	8019972 <strncmp+0x1a>
 8019960:	2400      	movs	r4, #0
 8019962:	3a01      	subs	r2, #1
 8019964:	5d2b      	ldrb	r3, [r5, r4]
 8019966:	5d08      	ldrb	r0, [r1, r4]
 8019968:	4283      	cmp	r3, r0
 801996a:	d101      	bne.n	8019970 <strncmp+0x18>
 801996c:	4294      	cmp	r4, r2
 801996e:	d101      	bne.n	8019974 <strncmp+0x1c>
 8019970:	1a18      	subs	r0, r3, r0
 8019972:	bd30      	pop	{r4, r5, pc}
 8019974:	3401      	adds	r4, #1
 8019976:	2b00      	cmp	r3, #0
 8019978:	d1f4      	bne.n	8019964 <strncmp+0xc>
 801997a:	e7f9      	b.n	8019970 <strncmp+0x18>

0801997c <__ascii_wctomb>:
 801997c:	0003      	movs	r3, r0
 801997e:	1e08      	subs	r0, r1, #0
 8019980:	d005      	beq.n	801998e <__ascii_wctomb+0x12>
 8019982:	2aff      	cmp	r2, #255	; 0xff
 8019984:	d904      	bls.n	8019990 <__ascii_wctomb+0x14>
 8019986:	228a      	movs	r2, #138	; 0x8a
 8019988:	2001      	movs	r0, #1
 801998a:	601a      	str	r2, [r3, #0]
 801998c:	4240      	negs	r0, r0
 801998e:	4770      	bx	lr
 8019990:	2001      	movs	r0, #1
 8019992:	700a      	strb	r2, [r1, #0]
 8019994:	e7fb      	b.n	801998e <__ascii_wctomb+0x12>
	...

08019998 <_write_r>:
 8019998:	b570      	push	{r4, r5, r6, lr}
 801999a:	0004      	movs	r4, r0
 801999c:	0008      	movs	r0, r1
 801999e:	0011      	movs	r1, r2
 80199a0:	001a      	movs	r2, r3
 80199a2:	2300      	movs	r3, #0
 80199a4:	4d05      	ldr	r5, [pc, #20]	; (80199bc <_write_r+0x24>)
 80199a6:	602b      	str	r3, [r5, #0]
 80199a8:	f7eb fe81 	bl	80056ae <_write>
 80199ac:	1c43      	adds	r3, r0, #1
 80199ae:	d103      	bne.n	80199b8 <_write_r+0x20>
 80199b0:	682b      	ldr	r3, [r5, #0]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d000      	beq.n	80199b8 <_write_r+0x20>
 80199b6:	6023      	str	r3, [r4, #0]
 80199b8:	bd70      	pop	{r4, r5, r6, pc}
 80199ba:	46c0      	nop			; (mov r8, r8)
 80199bc:	20005434 	.word	0x20005434

080199c0 <__assert_func>:
 80199c0:	b530      	push	{r4, r5, lr}
 80199c2:	0014      	movs	r4, r2
 80199c4:	001a      	movs	r2, r3
 80199c6:	4b09      	ldr	r3, [pc, #36]	; (80199ec <__assert_func+0x2c>)
 80199c8:	0005      	movs	r5, r0
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	b085      	sub	sp, #20
 80199ce:	68d8      	ldr	r0, [r3, #12]
 80199d0:	4b07      	ldr	r3, [pc, #28]	; (80199f0 <__assert_func+0x30>)
 80199d2:	2c00      	cmp	r4, #0
 80199d4:	d101      	bne.n	80199da <__assert_func+0x1a>
 80199d6:	4b07      	ldr	r3, [pc, #28]	; (80199f4 <__assert_func+0x34>)
 80199d8:	001c      	movs	r4, r3
 80199da:	9301      	str	r3, [sp, #4]
 80199dc:	9100      	str	r1, [sp, #0]
 80199de:	002b      	movs	r3, r5
 80199e0:	4905      	ldr	r1, [pc, #20]	; (80199f8 <__assert_func+0x38>)
 80199e2:	9402      	str	r4, [sp, #8]
 80199e4:	f000 f81c 	bl	8019a20 <fiprintf>
 80199e8:	f000 f8b8 	bl	8019b5c <abort>
 80199ec:	200002d8 	.word	0x200002d8
 80199f0:	0801bc95 	.word	0x0801bc95
 80199f4:	0801bcd0 	.word	0x0801bcd0
 80199f8:	0801bca2 	.word	0x0801bca2

080199fc <_close_r>:
 80199fc:	2300      	movs	r3, #0
 80199fe:	b570      	push	{r4, r5, r6, lr}
 8019a00:	4d06      	ldr	r5, [pc, #24]	; (8019a1c <_close_r+0x20>)
 8019a02:	0004      	movs	r4, r0
 8019a04:	0008      	movs	r0, r1
 8019a06:	602b      	str	r3, [r5, #0]
 8019a08:	f7eb fe6d 	bl	80056e6 <_close>
 8019a0c:	1c43      	adds	r3, r0, #1
 8019a0e:	d103      	bne.n	8019a18 <_close_r+0x1c>
 8019a10:	682b      	ldr	r3, [r5, #0]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d000      	beq.n	8019a18 <_close_r+0x1c>
 8019a16:	6023      	str	r3, [r4, #0]
 8019a18:	bd70      	pop	{r4, r5, r6, pc}
 8019a1a:	46c0      	nop			; (mov r8, r8)
 8019a1c:	20005434 	.word	0x20005434

08019a20 <fiprintf>:
 8019a20:	b40e      	push	{r1, r2, r3}
 8019a22:	b503      	push	{r0, r1, lr}
 8019a24:	0001      	movs	r1, r0
 8019a26:	ab03      	add	r3, sp, #12
 8019a28:	4804      	ldr	r0, [pc, #16]	; (8019a3c <fiprintf+0x1c>)
 8019a2a:	cb04      	ldmia	r3!, {r2}
 8019a2c:	6800      	ldr	r0, [r0, #0]
 8019a2e:	9301      	str	r3, [sp, #4]
 8019a30:	f7ff fe06 	bl	8019640 <_vfiprintf_r>
 8019a34:	b002      	add	sp, #8
 8019a36:	bc08      	pop	{r3}
 8019a38:	b003      	add	sp, #12
 8019a3a:	4718      	bx	r3
 8019a3c:	200002d8 	.word	0x200002d8

08019a40 <_fstat_r>:
 8019a40:	2300      	movs	r3, #0
 8019a42:	b570      	push	{r4, r5, r6, lr}
 8019a44:	4d06      	ldr	r5, [pc, #24]	; (8019a60 <_fstat_r+0x20>)
 8019a46:	0004      	movs	r4, r0
 8019a48:	0008      	movs	r0, r1
 8019a4a:	0011      	movs	r1, r2
 8019a4c:	602b      	str	r3, [r5, #0]
 8019a4e:	f7eb fe54 	bl	80056fa <_fstat>
 8019a52:	1c43      	adds	r3, r0, #1
 8019a54:	d103      	bne.n	8019a5e <_fstat_r+0x1e>
 8019a56:	682b      	ldr	r3, [r5, #0]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d000      	beq.n	8019a5e <_fstat_r+0x1e>
 8019a5c:	6023      	str	r3, [r4, #0]
 8019a5e:	bd70      	pop	{r4, r5, r6, pc}
 8019a60:	20005434 	.word	0x20005434

08019a64 <_isatty_r>:
 8019a64:	2300      	movs	r3, #0
 8019a66:	b570      	push	{r4, r5, r6, lr}
 8019a68:	4d06      	ldr	r5, [pc, #24]	; (8019a84 <_isatty_r+0x20>)
 8019a6a:	0004      	movs	r4, r0
 8019a6c:	0008      	movs	r0, r1
 8019a6e:	602b      	str	r3, [r5, #0]
 8019a70:	f7eb fe51 	bl	8005716 <_isatty>
 8019a74:	1c43      	adds	r3, r0, #1
 8019a76:	d103      	bne.n	8019a80 <_isatty_r+0x1c>
 8019a78:	682b      	ldr	r3, [r5, #0]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d000      	beq.n	8019a80 <_isatty_r+0x1c>
 8019a7e:	6023      	str	r3, [r4, #0]
 8019a80:	bd70      	pop	{r4, r5, r6, pc}
 8019a82:	46c0      	nop			; (mov r8, r8)
 8019a84:	20005434 	.word	0x20005434

08019a88 <_lseek_r>:
 8019a88:	b570      	push	{r4, r5, r6, lr}
 8019a8a:	0004      	movs	r4, r0
 8019a8c:	0008      	movs	r0, r1
 8019a8e:	0011      	movs	r1, r2
 8019a90:	001a      	movs	r2, r3
 8019a92:	2300      	movs	r3, #0
 8019a94:	4d05      	ldr	r5, [pc, #20]	; (8019aac <_lseek_r+0x24>)
 8019a96:	602b      	str	r3, [r5, #0]
 8019a98:	f7eb fe46 	bl	8005728 <_lseek>
 8019a9c:	1c43      	adds	r3, r0, #1
 8019a9e:	d103      	bne.n	8019aa8 <_lseek_r+0x20>
 8019aa0:	682b      	ldr	r3, [r5, #0]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d000      	beq.n	8019aa8 <_lseek_r+0x20>
 8019aa6:	6023      	str	r3, [r4, #0]
 8019aa8:	bd70      	pop	{r4, r5, r6, pc}
 8019aaa:	46c0      	nop			; (mov r8, r8)
 8019aac:	20005434 	.word	0x20005434

08019ab0 <memmove>:
 8019ab0:	b510      	push	{r4, lr}
 8019ab2:	4288      	cmp	r0, r1
 8019ab4:	d902      	bls.n	8019abc <memmove+0xc>
 8019ab6:	188b      	adds	r3, r1, r2
 8019ab8:	4298      	cmp	r0, r3
 8019aba:	d303      	bcc.n	8019ac4 <memmove+0x14>
 8019abc:	2300      	movs	r3, #0
 8019abe:	e007      	b.n	8019ad0 <memmove+0x20>
 8019ac0:	5c8b      	ldrb	r3, [r1, r2]
 8019ac2:	5483      	strb	r3, [r0, r2]
 8019ac4:	3a01      	subs	r2, #1
 8019ac6:	d2fb      	bcs.n	8019ac0 <memmove+0x10>
 8019ac8:	bd10      	pop	{r4, pc}
 8019aca:	5ccc      	ldrb	r4, [r1, r3]
 8019acc:	54c4      	strb	r4, [r0, r3]
 8019ace:	3301      	adds	r3, #1
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	d1fa      	bne.n	8019aca <memmove+0x1a>
 8019ad4:	e7f8      	b.n	8019ac8 <memmove+0x18>

08019ad6 <_realloc_r>:
 8019ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019ad8:	0007      	movs	r7, r0
 8019ada:	000e      	movs	r6, r1
 8019adc:	0014      	movs	r4, r2
 8019ade:	2900      	cmp	r1, #0
 8019ae0:	d105      	bne.n	8019aee <_realloc_r+0x18>
 8019ae2:	0011      	movs	r1, r2
 8019ae4:	f7fb fa52 	bl	8014f8c <_malloc_r>
 8019ae8:	0005      	movs	r5, r0
 8019aea:	0028      	movs	r0, r5
 8019aec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019aee:	2a00      	cmp	r2, #0
 8019af0:	d103      	bne.n	8019afa <_realloc_r+0x24>
 8019af2:	f7fb f9df 	bl	8014eb4 <_free_r>
 8019af6:	0025      	movs	r5, r4
 8019af8:	e7f7      	b.n	8019aea <_realloc_r+0x14>
 8019afa:	f000 f836 	bl	8019b6a <_malloc_usable_size_r>
 8019afe:	9001      	str	r0, [sp, #4]
 8019b00:	4284      	cmp	r4, r0
 8019b02:	d803      	bhi.n	8019b0c <_realloc_r+0x36>
 8019b04:	0035      	movs	r5, r6
 8019b06:	0843      	lsrs	r3, r0, #1
 8019b08:	42a3      	cmp	r3, r4
 8019b0a:	d3ee      	bcc.n	8019aea <_realloc_r+0x14>
 8019b0c:	0021      	movs	r1, r4
 8019b0e:	0038      	movs	r0, r7
 8019b10:	f7fb fa3c 	bl	8014f8c <_malloc_r>
 8019b14:	1e05      	subs	r5, r0, #0
 8019b16:	d0e8      	beq.n	8019aea <_realloc_r+0x14>
 8019b18:	9b01      	ldr	r3, [sp, #4]
 8019b1a:	0022      	movs	r2, r4
 8019b1c:	429c      	cmp	r4, r3
 8019b1e:	d900      	bls.n	8019b22 <_realloc_r+0x4c>
 8019b20:	001a      	movs	r2, r3
 8019b22:	0031      	movs	r1, r6
 8019b24:	0028      	movs	r0, r5
 8019b26:	f7fb f9b3 	bl	8014e90 <memcpy>
 8019b2a:	0031      	movs	r1, r6
 8019b2c:	0038      	movs	r0, r7
 8019b2e:	f7fb f9c1 	bl	8014eb4 <_free_r>
 8019b32:	e7da      	b.n	8019aea <_realloc_r+0x14>

08019b34 <_read_r>:
 8019b34:	b570      	push	{r4, r5, r6, lr}
 8019b36:	0004      	movs	r4, r0
 8019b38:	0008      	movs	r0, r1
 8019b3a:	0011      	movs	r1, r2
 8019b3c:	001a      	movs	r2, r3
 8019b3e:	2300      	movs	r3, #0
 8019b40:	4d05      	ldr	r5, [pc, #20]	; (8019b58 <_read_r+0x24>)
 8019b42:	602b      	str	r3, [r5, #0]
 8019b44:	f7eb fd96 	bl	8005674 <_read>
 8019b48:	1c43      	adds	r3, r0, #1
 8019b4a:	d103      	bne.n	8019b54 <_read_r+0x20>
 8019b4c:	682b      	ldr	r3, [r5, #0]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d000      	beq.n	8019b54 <_read_r+0x20>
 8019b52:	6023      	str	r3, [r4, #0]
 8019b54:	bd70      	pop	{r4, r5, r6, pc}
 8019b56:	46c0      	nop			; (mov r8, r8)
 8019b58:	20005434 	.word	0x20005434

08019b5c <abort>:
 8019b5c:	2006      	movs	r0, #6
 8019b5e:	b510      	push	{r4, lr}
 8019b60:	f000 f836 	bl	8019bd0 <raise>
 8019b64:	2001      	movs	r0, #1
 8019b66:	f7eb fd79 	bl	800565c <_exit>

08019b6a <_malloc_usable_size_r>:
 8019b6a:	1f0b      	subs	r3, r1, #4
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	1f18      	subs	r0, r3, #4
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	da01      	bge.n	8019b78 <_malloc_usable_size_r+0xe>
 8019b74:	580b      	ldr	r3, [r1, r0]
 8019b76:	18c0      	adds	r0, r0, r3
 8019b78:	4770      	bx	lr

08019b7a <_raise_r>:
 8019b7a:	b570      	push	{r4, r5, r6, lr}
 8019b7c:	0004      	movs	r4, r0
 8019b7e:	000d      	movs	r5, r1
 8019b80:	291f      	cmp	r1, #31
 8019b82:	d904      	bls.n	8019b8e <_raise_r+0x14>
 8019b84:	2316      	movs	r3, #22
 8019b86:	6003      	str	r3, [r0, #0]
 8019b88:	2001      	movs	r0, #1
 8019b8a:	4240      	negs	r0, r0
 8019b8c:	bd70      	pop	{r4, r5, r6, pc}
 8019b8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d004      	beq.n	8019b9e <_raise_r+0x24>
 8019b94:	008a      	lsls	r2, r1, #2
 8019b96:	189b      	adds	r3, r3, r2
 8019b98:	681a      	ldr	r2, [r3, #0]
 8019b9a:	2a00      	cmp	r2, #0
 8019b9c:	d108      	bne.n	8019bb0 <_raise_r+0x36>
 8019b9e:	0020      	movs	r0, r4
 8019ba0:	f000 f832 	bl	8019c08 <_getpid_r>
 8019ba4:	002a      	movs	r2, r5
 8019ba6:	0001      	movs	r1, r0
 8019ba8:	0020      	movs	r0, r4
 8019baa:	f000 f81b 	bl	8019be4 <_kill_r>
 8019bae:	e7ed      	b.n	8019b8c <_raise_r+0x12>
 8019bb0:	2000      	movs	r0, #0
 8019bb2:	2a01      	cmp	r2, #1
 8019bb4:	d0ea      	beq.n	8019b8c <_raise_r+0x12>
 8019bb6:	1c51      	adds	r1, r2, #1
 8019bb8:	d103      	bne.n	8019bc2 <_raise_r+0x48>
 8019bba:	2316      	movs	r3, #22
 8019bbc:	3001      	adds	r0, #1
 8019bbe:	6023      	str	r3, [r4, #0]
 8019bc0:	e7e4      	b.n	8019b8c <_raise_r+0x12>
 8019bc2:	2400      	movs	r4, #0
 8019bc4:	0028      	movs	r0, r5
 8019bc6:	601c      	str	r4, [r3, #0]
 8019bc8:	4790      	blx	r2
 8019bca:	0020      	movs	r0, r4
 8019bcc:	e7de      	b.n	8019b8c <_raise_r+0x12>
	...

08019bd0 <raise>:
 8019bd0:	b510      	push	{r4, lr}
 8019bd2:	4b03      	ldr	r3, [pc, #12]	; (8019be0 <raise+0x10>)
 8019bd4:	0001      	movs	r1, r0
 8019bd6:	6818      	ldr	r0, [r3, #0]
 8019bd8:	f7ff ffcf 	bl	8019b7a <_raise_r>
 8019bdc:	bd10      	pop	{r4, pc}
 8019bde:	46c0      	nop			; (mov r8, r8)
 8019be0:	200002d8 	.word	0x200002d8

08019be4 <_kill_r>:
 8019be4:	2300      	movs	r3, #0
 8019be6:	b570      	push	{r4, r5, r6, lr}
 8019be8:	4d06      	ldr	r5, [pc, #24]	; (8019c04 <_kill_r+0x20>)
 8019bea:	0004      	movs	r4, r0
 8019bec:	0008      	movs	r0, r1
 8019bee:	0011      	movs	r1, r2
 8019bf0:	602b      	str	r3, [r5, #0]
 8019bf2:	f7eb fd23 	bl	800563c <_kill>
 8019bf6:	1c43      	adds	r3, r0, #1
 8019bf8:	d103      	bne.n	8019c02 <_kill_r+0x1e>
 8019bfa:	682b      	ldr	r3, [r5, #0]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d000      	beq.n	8019c02 <_kill_r+0x1e>
 8019c00:	6023      	str	r3, [r4, #0]
 8019c02:	bd70      	pop	{r4, r5, r6, pc}
 8019c04:	20005434 	.word	0x20005434

08019c08 <_getpid_r>:
 8019c08:	b510      	push	{r4, lr}
 8019c0a:	f7eb fd11 	bl	8005630 <_getpid>
 8019c0e:	bd10      	pop	{r4, pc}

08019c10 <ceilf>:
 8019c10:	b570      	push	{r4, r5, r6, lr}
 8019c12:	0045      	lsls	r5, r0, #1
 8019c14:	086e      	lsrs	r6, r5, #1
 8019c16:	0e2d      	lsrs	r5, r5, #24
 8019c18:	3d7f      	subs	r5, #127	; 0x7f
 8019c1a:	0004      	movs	r4, r0
 8019c1c:	2d16      	cmp	r5, #22
 8019c1e:	dc25      	bgt.n	8019c6c <ceilf+0x5c>
 8019c20:	2d00      	cmp	r5, #0
 8019c22:	da0f      	bge.n	8019c44 <ceilf+0x34>
 8019c24:	4917      	ldr	r1, [pc, #92]	; (8019c84 <ceilf+0x74>)
 8019c26:	f7e6 fcf3 	bl	8000610 <__aeabi_fadd>
 8019c2a:	2100      	movs	r1, #0
 8019c2c:	f7e6 fc6c 	bl	8000508 <__aeabi_fcmpgt>
 8019c30:	2800      	cmp	r0, #0
 8019c32:	d005      	beq.n	8019c40 <ceilf+0x30>
 8019c34:	2c00      	cmp	r4, #0
 8019c36:	db21      	blt.n	8019c7c <ceilf+0x6c>
 8019c38:	2e00      	cmp	r6, #0
 8019c3a:	d001      	beq.n	8019c40 <ceilf+0x30>
 8019c3c:	24fe      	movs	r4, #254	; 0xfe
 8019c3e:	05a4      	lsls	r4, r4, #22
 8019c40:	1c20      	adds	r0, r4, #0
 8019c42:	e01a      	b.n	8019c7a <ceilf+0x6a>
 8019c44:	4e10      	ldr	r6, [pc, #64]	; (8019c88 <ceilf+0x78>)
 8019c46:	412e      	asrs	r6, r5
 8019c48:	4206      	tst	r6, r0
 8019c4a:	d016      	beq.n	8019c7a <ceilf+0x6a>
 8019c4c:	490d      	ldr	r1, [pc, #52]	; (8019c84 <ceilf+0x74>)
 8019c4e:	f7e6 fcdf 	bl	8000610 <__aeabi_fadd>
 8019c52:	2100      	movs	r1, #0
 8019c54:	f7e6 fc58 	bl	8000508 <__aeabi_fcmpgt>
 8019c58:	2800      	cmp	r0, #0
 8019c5a:	d0f1      	beq.n	8019c40 <ceilf+0x30>
 8019c5c:	2c00      	cmp	r4, #0
 8019c5e:	dd03      	ble.n	8019c68 <ceilf+0x58>
 8019c60:	2380      	movs	r3, #128	; 0x80
 8019c62:	041b      	lsls	r3, r3, #16
 8019c64:	412b      	asrs	r3, r5
 8019c66:	18e4      	adds	r4, r4, r3
 8019c68:	43b4      	bics	r4, r6
 8019c6a:	e7e9      	b.n	8019c40 <ceilf+0x30>
 8019c6c:	23ff      	movs	r3, #255	; 0xff
 8019c6e:	05db      	lsls	r3, r3, #23
 8019c70:	429e      	cmp	r6, r3
 8019c72:	d302      	bcc.n	8019c7a <ceilf+0x6a>
 8019c74:	1c01      	adds	r1, r0, #0
 8019c76:	f7e6 fccb 	bl	8000610 <__aeabi_fadd>
 8019c7a:	bd70      	pop	{r4, r5, r6, pc}
 8019c7c:	2480      	movs	r4, #128	; 0x80
 8019c7e:	0624      	lsls	r4, r4, #24
 8019c80:	e7de      	b.n	8019c40 <ceilf+0x30>
 8019c82:	46c0      	nop			; (mov r8, r8)
 8019c84:	7149f2ca 	.word	0x7149f2ca
 8019c88:	007fffff 	.word	0x007fffff

08019c8c <cosf>:
 8019c8c:	b507      	push	{r0, r1, r2, lr}
 8019c8e:	4a18      	ldr	r2, [pc, #96]	; (8019cf0 <cosf+0x64>)
 8019c90:	0043      	lsls	r3, r0, #1
 8019c92:	2100      	movs	r1, #0
 8019c94:	085b      	lsrs	r3, r3, #1
 8019c96:	4293      	cmp	r3, r2
 8019c98:	dd14      	ble.n	8019cc4 <cosf+0x38>
 8019c9a:	22ff      	movs	r2, #255	; 0xff
 8019c9c:	05d2      	lsls	r2, r2, #23
 8019c9e:	4293      	cmp	r3, r2
 8019ca0:	db03      	blt.n	8019caa <cosf+0x1e>
 8019ca2:	1c01      	adds	r1, r0, #0
 8019ca4:	f7e7 f828 	bl	8000cf8 <__aeabi_fsub>
 8019ca8:	bd0e      	pop	{r1, r2, r3, pc}
 8019caa:	4669      	mov	r1, sp
 8019cac:	f000 f85e 	bl	8019d6c <__ieee754_rem_pio2f>
 8019cb0:	2203      	movs	r2, #3
 8019cb2:	4002      	ands	r2, r0
 8019cb4:	2a01      	cmp	r2, #1
 8019cb6:	d008      	beq.n	8019cca <cosf+0x3e>
 8019cb8:	2a02      	cmp	r2, #2
 8019cba:	d00e      	beq.n	8019cda <cosf+0x4e>
 8019cbc:	2a00      	cmp	r2, #0
 8019cbe:	d111      	bne.n	8019ce4 <cosf+0x58>
 8019cc0:	9901      	ldr	r1, [sp, #4]
 8019cc2:	9800      	ldr	r0, [sp, #0]
 8019cc4:	f000 f9ae 	bl	801a024 <__kernel_cosf>
 8019cc8:	e7ee      	b.n	8019ca8 <cosf+0x1c>
 8019cca:	9901      	ldr	r1, [sp, #4]
 8019ccc:	9800      	ldr	r0, [sp, #0]
 8019cce:	f000 fcd1 	bl	801a674 <__kernel_sinf>
 8019cd2:	2380      	movs	r3, #128	; 0x80
 8019cd4:	061b      	lsls	r3, r3, #24
 8019cd6:	18c0      	adds	r0, r0, r3
 8019cd8:	e7e6      	b.n	8019ca8 <cosf+0x1c>
 8019cda:	9901      	ldr	r1, [sp, #4]
 8019cdc:	9800      	ldr	r0, [sp, #0]
 8019cde:	f000 f9a1 	bl	801a024 <__kernel_cosf>
 8019ce2:	e7f6      	b.n	8019cd2 <cosf+0x46>
 8019ce4:	2201      	movs	r2, #1
 8019ce6:	9901      	ldr	r1, [sp, #4]
 8019ce8:	9800      	ldr	r0, [sp, #0]
 8019cea:	f000 fcc3 	bl	801a674 <__kernel_sinf>
 8019cee:	e7db      	b.n	8019ca8 <cosf+0x1c>
 8019cf0:	3f490fd8 	.word	0x3f490fd8

08019cf4 <fabsf>:
 8019cf4:	0040      	lsls	r0, r0, #1
 8019cf6:	0840      	lsrs	r0, r0, #1
 8019cf8:	4770      	bx	lr
	...

08019cfc <sinf>:
 8019cfc:	b507      	push	{r0, r1, r2, lr}
 8019cfe:	4a1a      	ldr	r2, [pc, #104]	; (8019d68 <sinf+0x6c>)
 8019d00:	0043      	lsls	r3, r0, #1
 8019d02:	085b      	lsrs	r3, r3, #1
 8019d04:	4293      	cmp	r3, r2
 8019d06:	dc04      	bgt.n	8019d12 <sinf+0x16>
 8019d08:	2200      	movs	r2, #0
 8019d0a:	2100      	movs	r1, #0
 8019d0c:	f000 fcb2 	bl	801a674 <__kernel_sinf>
 8019d10:	e006      	b.n	8019d20 <sinf+0x24>
 8019d12:	22ff      	movs	r2, #255	; 0xff
 8019d14:	05d2      	lsls	r2, r2, #23
 8019d16:	4293      	cmp	r3, r2
 8019d18:	db03      	blt.n	8019d22 <sinf+0x26>
 8019d1a:	1c01      	adds	r1, r0, #0
 8019d1c:	f7e6 ffec 	bl	8000cf8 <__aeabi_fsub>
 8019d20:	bd0e      	pop	{r1, r2, r3, pc}
 8019d22:	4669      	mov	r1, sp
 8019d24:	f000 f822 	bl	8019d6c <__ieee754_rem_pio2f>
 8019d28:	2303      	movs	r3, #3
 8019d2a:	4018      	ands	r0, r3
 8019d2c:	2801      	cmp	r0, #1
 8019d2e:	d007      	beq.n	8019d40 <sinf+0x44>
 8019d30:	2802      	cmp	r0, #2
 8019d32:	d00a      	beq.n	8019d4a <sinf+0x4e>
 8019d34:	2800      	cmp	r0, #0
 8019d36:	d111      	bne.n	8019d5c <sinf+0x60>
 8019d38:	2201      	movs	r2, #1
 8019d3a:	9901      	ldr	r1, [sp, #4]
 8019d3c:	9800      	ldr	r0, [sp, #0]
 8019d3e:	e7e5      	b.n	8019d0c <sinf+0x10>
 8019d40:	9901      	ldr	r1, [sp, #4]
 8019d42:	9800      	ldr	r0, [sp, #0]
 8019d44:	f000 f96e 	bl	801a024 <__kernel_cosf>
 8019d48:	e7ea      	b.n	8019d20 <sinf+0x24>
 8019d4a:	2201      	movs	r2, #1
 8019d4c:	9901      	ldr	r1, [sp, #4]
 8019d4e:	9800      	ldr	r0, [sp, #0]
 8019d50:	f000 fc90 	bl	801a674 <__kernel_sinf>
 8019d54:	2380      	movs	r3, #128	; 0x80
 8019d56:	061b      	lsls	r3, r3, #24
 8019d58:	18c0      	adds	r0, r0, r3
 8019d5a:	e7e1      	b.n	8019d20 <sinf+0x24>
 8019d5c:	9901      	ldr	r1, [sp, #4]
 8019d5e:	9800      	ldr	r0, [sp, #0]
 8019d60:	f000 f960 	bl	801a024 <__kernel_cosf>
 8019d64:	e7f6      	b.n	8019d54 <sinf+0x58>
 8019d66:	46c0      	nop			; (mov r8, r8)
 8019d68:	3f490fd8 	.word	0x3f490fd8

08019d6c <__ieee754_rem_pio2f>:
 8019d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d6e:	4ba0      	ldr	r3, [pc, #640]	; (8019ff0 <__ieee754_rem_pio2f+0x284>)
 8019d70:	b08b      	sub	sp, #44	; 0x2c
 8019d72:	0045      	lsls	r5, r0, #1
 8019d74:	000c      	movs	r4, r1
 8019d76:	9005      	str	r0, [sp, #20]
 8019d78:	086d      	lsrs	r5, r5, #1
 8019d7a:	429d      	cmp	r5, r3
 8019d7c:	dc04      	bgt.n	8019d88 <__ieee754_rem_pio2f+0x1c>
 8019d7e:	2300      	movs	r3, #0
 8019d80:	6008      	str	r0, [r1, #0]
 8019d82:	604b      	str	r3, [r1, #4]
 8019d84:	2700      	movs	r7, #0
 8019d86:	e01a      	b.n	8019dbe <__ieee754_rem_pio2f+0x52>
 8019d88:	4b9a      	ldr	r3, [pc, #616]	; (8019ff4 <__ieee754_rem_pio2f+0x288>)
 8019d8a:	429d      	cmp	r5, r3
 8019d8c:	dc4a      	bgt.n	8019e24 <__ieee754_rem_pio2f+0xb8>
 8019d8e:	230f      	movs	r3, #15
 8019d90:	4e99      	ldr	r6, [pc, #612]	; (8019ff8 <__ieee754_rem_pio2f+0x28c>)
 8019d92:	499a      	ldr	r1, [pc, #616]	; (8019ffc <__ieee754_rem_pio2f+0x290>)
 8019d94:	439d      	bics	r5, r3
 8019d96:	2800      	cmp	r0, #0
 8019d98:	dd22      	ble.n	8019de0 <__ieee754_rem_pio2f+0x74>
 8019d9a:	f7e6 ffad 	bl	8000cf8 <__aeabi_fsub>
 8019d9e:	1c07      	adds	r7, r0, #0
 8019da0:	42b5      	cmp	r5, r6
 8019da2:	d00f      	beq.n	8019dc4 <__ieee754_rem_pio2f+0x58>
 8019da4:	4996      	ldr	r1, [pc, #600]	; (801a000 <__ieee754_rem_pio2f+0x294>)
 8019da6:	f7e6 ffa7 	bl	8000cf8 <__aeabi_fsub>
 8019daa:	1c01      	adds	r1, r0, #0
 8019dac:	6020      	str	r0, [r4, #0]
 8019dae:	1c38      	adds	r0, r7, #0
 8019db0:	f7e6 ffa2 	bl	8000cf8 <__aeabi_fsub>
 8019db4:	4992      	ldr	r1, [pc, #584]	; (801a000 <__ieee754_rem_pio2f+0x294>)
 8019db6:	f7e6 ff9f 	bl	8000cf8 <__aeabi_fsub>
 8019dba:	2701      	movs	r7, #1
 8019dbc:	6060      	str	r0, [r4, #4]
 8019dbe:	0038      	movs	r0, r7
 8019dc0:	b00b      	add	sp, #44	; 0x2c
 8019dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019dc4:	498f      	ldr	r1, [pc, #572]	; (801a004 <__ieee754_rem_pio2f+0x298>)
 8019dc6:	f7e6 ff97 	bl	8000cf8 <__aeabi_fsub>
 8019dca:	498f      	ldr	r1, [pc, #572]	; (801a008 <__ieee754_rem_pio2f+0x29c>)
 8019dcc:	1c05      	adds	r5, r0, #0
 8019dce:	f7e6 ff93 	bl	8000cf8 <__aeabi_fsub>
 8019dd2:	1c01      	adds	r1, r0, #0
 8019dd4:	6020      	str	r0, [r4, #0]
 8019dd6:	1c28      	adds	r0, r5, #0
 8019dd8:	f7e6 ff8e 	bl	8000cf8 <__aeabi_fsub>
 8019ddc:	498a      	ldr	r1, [pc, #552]	; (801a008 <__ieee754_rem_pio2f+0x29c>)
 8019dde:	e7ea      	b.n	8019db6 <__ieee754_rem_pio2f+0x4a>
 8019de0:	f7e6 fc16 	bl	8000610 <__aeabi_fadd>
 8019de4:	1c07      	adds	r7, r0, #0
 8019de6:	42b5      	cmp	r5, r6
 8019de8:	d00e      	beq.n	8019e08 <__ieee754_rem_pio2f+0x9c>
 8019dea:	4985      	ldr	r1, [pc, #532]	; (801a000 <__ieee754_rem_pio2f+0x294>)
 8019dec:	f7e6 fc10 	bl	8000610 <__aeabi_fadd>
 8019df0:	1c01      	adds	r1, r0, #0
 8019df2:	6020      	str	r0, [r4, #0]
 8019df4:	1c38      	adds	r0, r7, #0
 8019df6:	f7e6 ff7f 	bl	8000cf8 <__aeabi_fsub>
 8019dfa:	4981      	ldr	r1, [pc, #516]	; (801a000 <__ieee754_rem_pio2f+0x294>)
 8019dfc:	f7e6 fc08 	bl	8000610 <__aeabi_fadd>
 8019e00:	2701      	movs	r7, #1
 8019e02:	6060      	str	r0, [r4, #4]
 8019e04:	427f      	negs	r7, r7
 8019e06:	e7da      	b.n	8019dbe <__ieee754_rem_pio2f+0x52>
 8019e08:	497e      	ldr	r1, [pc, #504]	; (801a004 <__ieee754_rem_pio2f+0x298>)
 8019e0a:	f7e6 fc01 	bl	8000610 <__aeabi_fadd>
 8019e0e:	497e      	ldr	r1, [pc, #504]	; (801a008 <__ieee754_rem_pio2f+0x29c>)
 8019e10:	1c05      	adds	r5, r0, #0
 8019e12:	f7e6 fbfd 	bl	8000610 <__aeabi_fadd>
 8019e16:	1c01      	adds	r1, r0, #0
 8019e18:	6020      	str	r0, [r4, #0]
 8019e1a:	1c28      	adds	r0, r5, #0
 8019e1c:	f7e6 ff6c 	bl	8000cf8 <__aeabi_fsub>
 8019e20:	4979      	ldr	r1, [pc, #484]	; (801a008 <__ieee754_rem_pio2f+0x29c>)
 8019e22:	e7eb      	b.n	8019dfc <__ieee754_rem_pio2f+0x90>
 8019e24:	4b79      	ldr	r3, [pc, #484]	; (801a00c <__ieee754_rem_pio2f+0x2a0>)
 8019e26:	429d      	cmp	r5, r3
 8019e28:	dd00      	ble.n	8019e2c <__ieee754_rem_pio2f+0xc0>
 8019e2a:	e091      	b.n	8019f50 <__ieee754_rem_pio2f+0x1e4>
 8019e2c:	f7ff ff62 	bl	8019cf4 <fabsf>
 8019e30:	4977      	ldr	r1, [pc, #476]	; (801a010 <__ieee754_rem_pio2f+0x2a4>)
 8019e32:	1c06      	adds	r6, r0, #0
 8019e34:	f7e6 fe3a 	bl	8000aac <__aeabi_fmul>
 8019e38:	21fc      	movs	r1, #252	; 0xfc
 8019e3a:	0589      	lsls	r1, r1, #22
 8019e3c:	f7e6 fbe8 	bl	8000610 <__aeabi_fadd>
 8019e40:	f7e7 f908 	bl	8001054 <__aeabi_f2iz>
 8019e44:	0007      	movs	r7, r0
 8019e46:	f7e7 f925 	bl	8001094 <__aeabi_i2f>
 8019e4a:	496c      	ldr	r1, [pc, #432]	; (8019ffc <__ieee754_rem_pio2f+0x290>)
 8019e4c:	9003      	str	r0, [sp, #12]
 8019e4e:	f7e6 fe2d 	bl	8000aac <__aeabi_fmul>
 8019e52:	1c01      	adds	r1, r0, #0
 8019e54:	1c30      	adds	r0, r6, #0
 8019e56:	f7e6 ff4f 	bl	8000cf8 <__aeabi_fsub>
 8019e5a:	4969      	ldr	r1, [pc, #420]	; (801a000 <__ieee754_rem_pio2f+0x294>)
 8019e5c:	9002      	str	r0, [sp, #8]
 8019e5e:	9803      	ldr	r0, [sp, #12]
 8019e60:	f7e6 fe24 	bl	8000aac <__aeabi_fmul>
 8019e64:	1c06      	adds	r6, r0, #0
 8019e66:	2f1f      	cmp	r7, #31
 8019e68:	dc0d      	bgt.n	8019e86 <__ieee754_rem_pio2f+0x11a>
 8019e6a:	23ff      	movs	r3, #255	; 0xff
 8019e6c:	002a      	movs	r2, r5
 8019e6e:	4969      	ldr	r1, [pc, #420]	; (801a014 <__ieee754_rem_pio2f+0x2a8>)
 8019e70:	439a      	bics	r2, r3
 8019e72:	1e7b      	subs	r3, r7, #1
 8019e74:	009b      	lsls	r3, r3, #2
 8019e76:	585b      	ldr	r3, [r3, r1]
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	d004      	beq.n	8019e86 <__ieee754_rem_pio2f+0x11a>
 8019e7c:	9802      	ldr	r0, [sp, #8]
 8019e7e:	1c31      	adds	r1, r6, #0
 8019e80:	f7e6 ff3a 	bl	8000cf8 <__aeabi_fsub>
 8019e84:	e00c      	b.n	8019ea0 <__ieee754_rem_pio2f+0x134>
 8019e86:	9802      	ldr	r0, [sp, #8]
 8019e88:	1c31      	adds	r1, r6, #0
 8019e8a:	f7e6 ff35 	bl	8000cf8 <__aeabi_fsub>
 8019e8e:	22ff      	movs	r2, #255	; 0xff
 8019e90:	15eb      	asrs	r3, r5, #23
 8019e92:	9304      	str	r3, [sp, #16]
 8019e94:	0dc3      	lsrs	r3, r0, #23
 8019e96:	4013      	ands	r3, r2
 8019e98:	9a04      	ldr	r2, [sp, #16]
 8019e9a:	1ad3      	subs	r3, r2, r3
 8019e9c:	2b08      	cmp	r3, #8
 8019e9e:	dc01      	bgt.n	8019ea4 <__ieee754_rem_pio2f+0x138>
 8019ea0:	6020      	str	r0, [r4, #0]
 8019ea2:	e026      	b.n	8019ef2 <__ieee754_rem_pio2f+0x186>
 8019ea4:	4957      	ldr	r1, [pc, #348]	; (801a004 <__ieee754_rem_pio2f+0x298>)
 8019ea6:	9803      	ldr	r0, [sp, #12]
 8019ea8:	f7e6 fe00 	bl	8000aac <__aeabi_fmul>
 8019eac:	1c06      	adds	r6, r0, #0
 8019eae:	1c01      	adds	r1, r0, #0
 8019eb0:	9802      	ldr	r0, [sp, #8]
 8019eb2:	f7e6 ff21 	bl	8000cf8 <__aeabi_fsub>
 8019eb6:	1c01      	adds	r1, r0, #0
 8019eb8:	1c05      	adds	r5, r0, #0
 8019eba:	9802      	ldr	r0, [sp, #8]
 8019ebc:	f7e6 ff1c 	bl	8000cf8 <__aeabi_fsub>
 8019ec0:	1c31      	adds	r1, r6, #0
 8019ec2:	f7e6 ff19 	bl	8000cf8 <__aeabi_fsub>
 8019ec6:	4950      	ldr	r1, [pc, #320]	; (801a008 <__ieee754_rem_pio2f+0x29c>)
 8019ec8:	1c06      	adds	r6, r0, #0
 8019eca:	9803      	ldr	r0, [sp, #12]
 8019ecc:	f7e6 fdee 	bl	8000aac <__aeabi_fmul>
 8019ed0:	1c31      	adds	r1, r6, #0
 8019ed2:	f7e6 ff11 	bl	8000cf8 <__aeabi_fsub>
 8019ed6:	1c01      	adds	r1, r0, #0
 8019ed8:	1c06      	adds	r6, r0, #0
 8019eda:	1c28      	adds	r0, r5, #0
 8019edc:	f7e6 ff0c 	bl	8000cf8 <__aeabi_fsub>
 8019ee0:	22ff      	movs	r2, #255	; 0xff
 8019ee2:	0dc3      	lsrs	r3, r0, #23
 8019ee4:	4013      	ands	r3, r2
 8019ee6:	9a04      	ldr	r2, [sp, #16]
 8019ee8:	1ad3      	subs	r3, r2, r3
 8019eea:	2b19      	cmp	r3, #25
 8019eec:	dc15      	bgt.n	8019f1a <__ieee754_rem_pio2f+0x1ae>
 8019eee:	6020      	str	r0, [r4, #0]
 8019ef0:	9502      	str	r5, [sp, #8]
 8019ef2:	6825      	ldr	r5, [r4, #0]
 8019ef4:	9802      	ldr	r0, [sp, #8]
 8019ef6:	1c29      	adds	r1, r5, #0
 8019ef8:	f7e6 fefe 	bl	8000cf8 <__aeabi_fsub>
 8019efc:	1c31      	adds	r1, r6, #0
 8019efe:	f7e6 fefb 	bl	8000cf8 <__aeabi_fsub>
 8019f02:	9b05      	ldr	r3, [sp, #20]
 8019f04:	6060      	str	r0, [r4, #4]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	db00      	blt.n	8019f0c <__ieee754_rem_pio2f+0x1a0>
 8019f0a:	e758      	b.n	8019dbe <__ieee754_rem_pio2f+0x52>
 8019f0c:	2380      	movs	r3, #128	; 0x80
 8019f0e:	061b      	lsls	r3, r3, #24
 8019f10:	18ed      	adds	r5, r5, r3
 8019f12:	18c0      	adds	r0, r0, r3
 8019f14:	6025      	str	r5, [r4, #0]
 8019f16:	6060      	str	r0, [r4, #4]
 8019f18:	e774      	b.n	8019e04 <__ieee754_rem_pio2f+0x98>
 8019f1a:	493f      	ldr	r1, [pc, #252]	; (801a018 <__ieee754_rem_pio2f+0x2ac>)
 8019f1c:	9803      	ldr	r0, [sp, #12]
 8019f1e:	f7e6 fdc5 	bl	8000aac <__aeabi_fmul>
 8019f22:	1c06      	adds	r6, r0, #0
 8019f24:	1c01      	adds	r1, r0, #0
 8019f26:	1c28      	adds	r0, r5, #0
 8019f28:	f7e6 fee6 	bl	8000cf8 <__aeabi_fsub>
 8019f2c:	1c01      	adds	r1, r0, #0
 8019f2e:	9002      	str	r0, [sp, #8]
 8019f30:	1c28      	adds	r0, r5, #0
 8019f32:	f7e6 fee1 	bl	8000cf8 <__aeabi_fsub>
 8019f36:	1c31      	adds	r1, r6, #0
 8019f38:	f7e6 fede 	bl	8000cf8 <__aeabi_fsub>
 8019f3c:	4937      	ldr	r1, [pc, #220]	; (801a01c <__ieee754_rem_pio2f+0x2b0>)
 8019f3e:	1c05      	adds	r5, r0, #0
 8019f40:	9803      	ldr	r0, [sp, #12]
 8019f42:	f7e6 fdb3 	bl	8000aac <__aeabi_fmul>
 8019f46:	1c29      	adds	r1, r5, #0
 8019f48:	f7e6 fed6 	bl	8000cf8 <__aeabi_fsub>
 8019f4c:	1c06      	adds	r6, r0, #0
 8019f4e:	e795      	b.n	8019e7c <__ieee754_rem_pio2f+0x110>
 8019f50:	23ff      	movs	r3, #255	; 0xff
 8019f52:	05db      	lsls	r3, r3, #23
 8019f54:	429d      	cmp	r5, r3
 8019f56:	db05      	blt.n	8019f64 <__ieee754_rem_pio2f+0x1f8>
 8019f58:	1c01      	adds	r1, r0, #0
 8019f5a:	f7e6 fecd 	bl	8000cf8 <__aeabi_fsub>
 8019f5e:	6060      	str	r0, [r4, #4]
 8019f60:	6020      	str	r0, [r4, #0]
 8019f62:	e70f      	b.n	8019d84 <__ieee754_rem_pio2f+0x18>
 8019f64:	15ee      	asrs	r6, r5, #23
 8019f66:	3e86      	subs	r6, #134	; 0x86
 8019f68:	05f3      	lsls	r3, r6, #23
 8019f6a:	1aed      	subs	r5, r5, r3
 8019f6c:	1c28      	adds	r0, r5, #0
 8019f6e:	f7e7 f871 	bl	8001054 <__aeabi_f2iz>
 8019f72:	f7e7 f88f 	bl	8001094 <__aeabi_i2f>
 8019f76:	1c01      	adds	r1, r0, #0
 8019f78:	9007      	str	r0, [sp, #28]
 8019f7a:	1c28      	adds	r0, r5, #0
 8019f7c:	f7e6 febc 	bl	8000cf8 <__aeabi_fsub>
 8019f80:	2187      	movs	r1, #135	; 0x87
 8019f82:	05c9      	lsls	r1, r1, #23
 8019f84:	f7e6 fd92 	bl	8000aac <__aeabi_fmul>
 8019f88:	1c07      	adds	r7, r0, #0
 8019f8a:	f7e7 f863 	bl	8001054 <__aeabi_f2iz>
 8019f8e:	f7e7 f881 	bl	8001094 <__aeabi_i2f>
 8019f92:	1c01      	adds	r1, r0, #0
 8019f94:	9008      	str	r0, [sp, #32]
 8019f96:	1c05      	adds	r5, r0, #0
 8019f98:	1c38      	adds	r0, r7, #0
 8019f9a:	f7e6 fead 	bl	8000cf8 <__aeabi_fsub>
 8019f9e:	2187      	movs	r1, #135	; 0x87
 8019fa0:	05c9      	lsls	r1, r1, #23
 8019fa2:	f7e6 fd83 	bl	8000aac <__aeabi_fmul>
 8019fa6:	2100      	movs	r1, #0
 8019fa8:	9009      	str	r0, [sp, #36]	; 0x24
 8019faa:	f7e6 fa93 	bl	80004d4 <__aeabi_fcmpeq>
 8019fae:	2303      	movs	r3, #3
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	d006      	beq.n	8019fc2 <__ieee754_rem_pio2f+0x256>
 8019fb4:	2100      	movs	r1, #0
 8019fb6:	1c28      	adds	r0, r5, #0
 8019fb8:	f7e6 fa8c 	bl	80004d4 <__aeabi_fcmpeq>
 8019fbc:	4243      	negs	r3, r0
 8019fbe:	4143      	adcs	r3, r0
 8019fc0:	3301      	adds	r3, #1
 8019fc2:	4a17      	ldr	r2, [pc, #92]	; (801a020 <__ieee754_rem_pio2f+0x2b4>)
 8019fc4:	0021      	movs	r1, r4
 8019fc6:	9201      	str	r2, [sp, #4]
 8019fc8:	2202      	movs	r2, #2
 8019fca:	a807      	add	r0, sp, #28
 8019fcc:	9200      	str	r2, [sp, #0]
 8019fce:	0032      	movs	r2, r6
 8019fd0:	f000 f8a8 	bl	801a124 <__kernel_rem_pio2f>
 8019fd4:	9b05      	ldr	r3, [sp, #20]
 8019fd6:	0007      	movs	r7, r0
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	db00      	blt.n	8019fde <__ieee754_rem_pio2f+0x272>
 8019fdc:	e6ef      	b.n	8019dbe <__ieee754_rem_pio2f+0x52>
 8019fde:	2280      	movs	r2, #128	; 0x80
 8019fe0:	6823      	ldr	r3, [r4, #0]
 8019fe2:	0612      	lsls	r2, r2, #24
 8019fe4:	189b      	adds	r3, r3, r2
 8019fe6:	6023      	str	r3, [r4, #0]
 8019fe8:	6863      	ldr	r3, [r4, #4]
 8019fea:	189b      	adds	r3, r3, r2
 8019fec:	6063      	str	r3, [r4, #4]
 8019fee:	e709      	b.n	8019e04 <__ieee754_rem_pio2f+0x98>
 8019ff0:	3f490fd8 	.word	0x3f490fd8
 8019ff4:	4016cbe3 	.word	0x4016cbe3
 8019ff8:	3fc90fd0 	.word	0x3fc90fd0
 8019ffc:	3fc90f80 	.word	0x3fc90f80
 801a000:	37354443 	.word	0x37354443
 801a004:	37354400 	.word	0x37354400
 801a008:	2e85a308 	.word	0x2e85a308
 801a00c:	43490f80 	.word	0x43490f80
 801a010:	3f22f984 	.word	0x3f22f984
 801a014:	0801bcd4 	.word	0x0801bcd4
 801a018:	2e85a300 	.word	0x2e85a300
 801a01c:	248d3132 	.word	0x248d3132
 801a020:	0801bd54 	.word	0x0801bd54

0801a024 <__kernel_cosf>:
 801a024:	23c8      	movs	r3, #200	; 0xc8
 801a026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a028:	0044      	lsls	r4, r0, #1
 801a02a:	1c06      	adds	r6, r0, #0
 801a02c:	9101      	str	r1, [sp, #4]
 801a02e:	0864      	lsrs	r4, r4, #1
 801a030:	059b      	lsls	r3, r3, #22
 801a032:	429c      	cmp	r4, r3
 801a034:	da03      	bge.n	801a03e <__kernel_cosf+0x1a>
 801a036:	f7e7 f80d 	bl	8001054 <__aeabi_f2iz>
 801a03a:	2800      	cmp	r0, #0
 801a03c:	d05d      	beq.n	801a0fa <__kernel_cosf+0xd6>
 801a03e:	1c31      	adds	r1, r6, #0
 801a040:	1c30      	adds	r0, r6, #0
 801a042:	f7e6 fd33 	bl	8000aac <__aeabi_fmul>
 801a046:	21fc      	movs	r1, #252	; 0xfc
 801a048:	0589      	lsls	r1, r1, #22
 801a04a:	1c05      	adds	r5, r0, #0
 801a04c:	f7e6 fd2e 	bl	8000aac <__aeabi_fmul>
 801a050:	492b      	ldr	r1, [pc, #172]	; (801a100 <__kernel_cosf+0xdc>)
 801a052:	1c07      	adds	r7, r0, #0
 801a054:	1c28      	adds	r0, r5, #0
 801a056:	f7e6 fd29 	bl	8000aac <__aeabi_fmul>
 801a05a:	492a      	ldr	r1, [pc, #168]	; (801a104 <__kernel_cosf+0xe0>)
 801a05c:	f7e6 fad8 	bl	8000610 <__aeabi_fadd>
 801a060:	1c29      	adds	r1, r5, #0
 801a062:	f7e6 fd23 	bl	8000aac <__aeabi_fmul>
 801a066:	4928      	ldr	r1, [pc, #160]	; (801a108 <__kernel_cosf+0xe4>)
 801a068:	f7e6 fe46 	bl	8000cf8 <__aeabi_fsub>
 801a06c:	1c29      	adds	r1, r5, #0
 801a06e:	f7e6 fd1d 	bl	8000aac <__aeabi_fmul>
 801a072:	4926      	ldr	r1, [pc, #152]	; (801a10c <__kernel_cosf+0xe8>)
 801a074:	f7e6 facc 	bl	8000610 <__aeabi_fadd>
 801a078:	1c29      	adds	r1, r5, #0
 801a07a:	f7e6 fd17 	bl	8000aac <__aeabi_fmul>
 801a07e:	4924      	ldr	r1, [pc, #144]	; (801a110 <__kernel_cosf+0xec>)
 801a080:	f7e6 fe3a 	bl	8000cf8 <__aeabi_fsub>
 801a084:	1c29      	adds	r1, r5, #0
 801a086:	f7e6 fd11 	bl	8000aac <__aeabi_fmul>
 801a08a:	4922      	ldr	r1, [pc, #136]	; (801a114 <__kernel_cosf+0xf0>)
 801a08c:	f7e6 fac0 	bl	8000610 <__aeabi_fadd>
 801a090:	1c29      	adds	r1, r5, #0
 801a092:	f7e6 fd0b 	bl	8000aac <__aeabi_fmul>
 801a096:	1c29      	adds	r1, r5, #0
 801a098:	f7e6 fd08 	bl	8000aac <__aeabi_fmul>
 801a09c:	9901      	ldr	r1, [sp, #4]
 801a09e:	1c05      	adds	r5, r0, #0
 801a0a0:	1c30      	adds	r0, r6, #0
 801a0a2:	f7e6 fd03 	bl	8000aac <__aeabi_fmul>
 801a0a6:	1c01      	adds	r1, r0, #0
 801a0a8:	1c28      	adds	r0, r5, #0
 801a0aa:	f7e6 fe25 	bl	8000cf8 <__aeabi_fsub>
 801a0ae:	4b1a      	ldr	r3, [pc, #104]	; (801a118 <__kernel_cosf+0xf4>)
 801a0b0:	1c05      	adds	r5, r0, #0
 801a0b2:	429c      	cmp	r4, r3
 801a0b4:	dc09      	bgt.n	801a0ca <__kernel_cosf+0xa6>
 801a0b6:	1c01      	adds	r1, r0, #0
 801a0b8:	1c38      	adds	r0, r7, #0
 801a0ba:	f7e6 fe1d 	bl	8000cf8 <__aeabi_fsub>
 801a0be:	1c01      	adds	r1, r0, #0
 801a0c0:	20fe      	movs	r0, #254	; 0xfe
 801a0c2:	0580      	lsls	r0, r0, #22
 801a0c4:	f7e6 fe18 	bl	8000cf8 <__aeabi_fsub>
 801a0c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a0ca:	4b14      	ldr	r3, [pc, #80]	; (801a11c <__kernel_cosf+0xf8>)
 801a0cc:	429c      	cmp	r4, r3
 801a0ce:	dc12      	bgt.n	801a0f6 <__kernel_cosf+0xd2>
 801a0d0:	23ff      	movs	r3, #255	; 0xff
 801a0d2:	061b      	lsls	r3, r3, #24
 801a0d4:	18e4      	adds	r4, r4, r3
 801a0d6:	20fe      	movs	r0, #254	; 0xfe
 801a0d8:	1c21      	adds	r1, r4, #0
 801a0da:	0580      	lsls	r0, r0, #22
 801a0dc:	f7e6 fe0c 	bl	8000cf8 <__aeabi_fsub>
 801a0e0:	1c21      	adds	r1, r4, #0
 801a0e2:	1c06      	adds	r6, r0, #0
 801a0e4:	1c38      	adds	r0, r7, #0
 801a0e6:	f7e6 fe07 	bl	8000cf8 <__aeabi_fsub>
 801a0ea:	1c29      	adds	r1, r5, #0
 801a0ec:	f7e6 fe04 	bl	8000cf8 <__aeabi_fsub>
 801a0f0:	1c01      	adds	r1, r0, #0
 801a0f2:	1c30      	adds	r0, r6, #0
 801a0f4:	e7e6      	b.n	801a0c4 <__kernel_cosf+0xa0>
 801a0f6:	4c0a      	ldr	r4, [pc, #40]	; (801a120 <__kernel_cosf+0xfc>)
 801a0f8:	e7ed      	b.n	801a0d6 <__kernel_cosf+0xb2>
 801a0fa:	20fe      	movs	r0, #254	; 0xfe
 801a0fc:	0580      	lsls	r0, r0, #22
 801a0fe:	e7e3      	b.n	801a0c8 <__kernel_cosf+0xa4>
 801a100:	ad47d74e 	.word	0xad47d74e
 801a104:	310f74f6 	.word	0x310f74f6
 801a108:	3493f27c 	.word	0x3493f27c
 801a10c:	37d00d01 	.word	0x37d00d01
 801a110:	3ab60b61 	.word	0x3ab60b61
 801a114:	3d2aaaab 	.word	0x3d2aaaab
 801a118:	3e999999 	.word	0x3e999999
 801a11c:	3f480000 	.word	0x3f480000
 801a120:	3e900000 	.word	0x3e900000

0801a124 <__kernel_rem_pio2f>:
 801a124:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a126:	b0df      	sub	sp, #380	; 0x17c
 801a128:	9308      	str	r3, [sp, #32]
 801a12a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a12c:	9207      	str	r2, [sp, #28]
 801a12e:	009a      	lsls	r2, r3, #2
 801a130:	4bc8      	ldr	r3, [pc, #800]	; (801a454 <__kernel_rem_pio2f+0x330>)
 801a132:	900a      	str	r0, [sp, #40]	; 0x28
 801a134:	58d3      	ldr	r3, [r2, r3]
 801a136:	9103      	str	r1, [sp, #12]
 801a138:	9305      	str	r3, [sp, #20]
 801a13a:	9b08      	ldr	r3, [sp, #32]
 801a13c:	3b01      	subs	r3, #1
 801a13e:	9306      	str	r3, [sp, #24]
 801a140:	2300      	movs	r3, #0
 801a142:	9302      	str	r3, [sp, #8]
 801a144:	9b07      	ldr	r3, [sp, #28]
 801a146:	3304      	adds	r3, #4
 801a148:	db07      	blt.n	801a15a <__kernel_rem_pio2f+0x36>
 801a14a:	2107      	movs	r1, #7
 801a14c:	9b07      	ldr	r3, [sp, #28]
 801a14e:	1eda      	subs	r2, r3, #3
 801a150:	17d3      	asrs	r3, r2, #31
 801a152:	400b      	ands	r3, r1
 801a154:	189b      	adds	r3, r3, r2
 801a156:	10db      	asrs	r3, r3, #3
 801a158:	9302      	str	r3, [sp, #8]
 801a15a:	9b02      	ldr	r3, [sp, #8]
 801a15c:	ae22      	add	r6, sp, #136	; 0x88
 801a15e:	1c59      	adds	r1, r3, #1
 801a160:	00cb      	lsls	r3, r1, #3
 801a162:	9309      	str	r3, [sp, #36]	; 0x24
 801a164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a166:	9b07      	ldr	r3, [sp, #28]
 801a168:	1a9b      	subs	r3, r3, r2
 801a16a:	9301      	str	r3, [sp, #4]
 801a16c:	9a06      	ldr	r2, [sp, #24]
 801a16e:	9b02      	ldr	r3, [sp, #8]
 801a170:	1a9d      	subs	r5, r3, r2
 801a172:	002c      	movs	r4, r5
 801a174:	9b05      	ldr	r3, [sp, #20]
 801a176:	189f      	adds	r7, r3, r2
 801a178:	1b63      	subs	r3, r4, r5
 801a17a:	429f      	cmp	r7, r3
 801a17c:	da0d      	bge.n	801a19a <__kernel_rem_pio2f+0x76>
 801a17e:	9c08      	ldr	r4, [sp, #32]
 801a180:	af4a      	add	r7, sp, #296	; 0x128
 801a182:	9b08      	ldr	r3, [sp, #32]
 801a184:	9a05      	ldr	r2, [sp, #20]
 801a186:	1ae3      	subs	r3, r4, r3
 801a188:	429a      	cmp	r2, r3
 801a18a:	db25      	blt.n	801a1d8 <__kernel_rem_pio2f+0xb4>
 801a18c:	ab22      	add	r3, sp, #136	; 0x88
 801a18e:	00a5      	lsls	r5, r4, #2
 801a190:	18ed      	adds	r5, r5, r3
 801a192:	2300      	movs	r3, #0
 801a194:	2600      	movs	r6, #0
 801a196:	9304      	str	r3, [sp, #16]
 801a198:	e016      	b.n	801a1c8 <__kernel_rem_pio2f+0xa4>
 801a19a:	2000      	movs	r0, #0
 801a19c:	2c00      	cmp	r4, #0
 801a19e:	db04      	blt.n	801a1aa <__kernel_rem_pio2f+0x86>
 801a1a0:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801a1a2:	00a3      	lsls	r3, r4, #2
 801a1a4:	58d0      	ldr	r0, [r2, r3]
 801a1a6:	f7e6 ff75 	bl	8001094 <__aeabi_i2f>
 801a1aa:	c601      	stmia	r6!, {r0}
 801a1ac:	3401      	adds	r4, #1
 801a1ae:	e7e3      	b.n	801a178 <__kernel_rem_pio2f+0x54>
 801a1b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a1b2:	00b3      	lsls	r3, r6, #2
 801a1b4:	6829      	ldr	r1, [r5, #0]
 801a1b6:	58d0      	ldr	r0, [r2, r3]
 801a1b8:	f7e6 fc78 	bl	8000aac <__aeabi_fmul>
 801a1bc:	1c01      	adds	r1, r0, #0
 801a1be:	9804      	ldr	r0, [sp, #16]
 801a1c0:	f7e6 fa26 	bl	8000610 <__aeabi_fadd>
 801a1c4:	3601      	adds	r6, #1
 801a1c6:	9004      	str	r0, [sp, #16]
 801a1c8:	9b06      	ldr	r3, [sp, #24]
 801a1ca:	3d04      	subs	r5, #4
 801a1cc:	429e      	cmp	r6, r3
 801a1ce:	ddef      	ble.n	801a1b0 <__kernel_rem_pio2f+0x8c>
 801a1d0:	9b04      	ldr	r3, [sp, #16]
 801a1d2:	3401      	adds	r4, #1
 801a1d4:	c708      	stmia	r7!, {r3}
 801a1d6:	e7d4      	b.n	801a182 <__kernel_rem_pio2f+0x5e>
 801a1d8:	9b05      	ldr	r3, [sp, #20]
 801a1da:	aa0e      	add	r2, sp, #56	; 0x38
 801a1dc:	009b      	lsls	r3, r3, #2
 801a1de:	189b      	adds	r3, r3, r2
 801a1e0:	930c      	str	r3, [sp, #48]	; 0x30
 801a1e2:	9b02      	ldr	r3, [sp, #8]
 801a1e4:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801a1e6:	009b      	lsls	r3, r3, #2
 801a1e8:	18d3      	adds	r3, r2, r3
 801a1ea:	9e05      	ldr	r6, [sp, #20]
 801a1ec:	930b      	str	r3, [sp, #44]	; 0x2c
 801a1ee:	0035      	movs	r5, r6
 801a1f0:	aa4a      	add	r2, sp, #296	; 0x128
 801a1f2:	00b3      	lsls	r3, r6, #2
 801a1f4:	af0e      	add	r7, sp, #56	; 0x38
 801a1f6:	589c      	ldr	r4, [r3, r2]
 801a1f8:	9702      	str	r7, [sp, #8]
 801a1fa:	920d      	str	r2, [sp, #52]	; 0x34
 801a1fc:	2d00      	cmp	r5, #0
 801a1fe:	dc64      	bgt.n	801a2ca <__kernel_rem_pio2f+0x1a6>
 801a200:	9901      	ldr	r1, [sp, #4]
 801a202:	1c20      	adds	r0, r4, #0
 801a204:	f000 fae8 	bl	801a7d8 <scalbnf>
 801a208:	21f8      	movs	r1, #248	; 0xf8
 801a20a:	0589      	lsls	r1, r1, #22
 801a20c:	1c04      	adds	r4, r0, #0
 801a20e:	f7e6 fc4d 	bl	8000aac <__aeabi_fmul>
 801a212:	f000 faa3 	bl	801a75c <floorf>
 801a216:	2182      	movs	r1, #130	; 0x82
 801a218:	05c9      	lsls	r1, r1, #23
 801a21a:	f7e6 fc47 	bl	8000aac <__aeabi_fmul>
 801a21e:	1c01      	adds	r1, r0, #0
 801a220:	1c20      	adds	r0, r4, #0
 801a222:	f7e6 fd69 	bl	8000cf8 <__aeabi_fsub>
 801a226:	1c04      	adds	r4, r0, #0
 801a228:	f7e6 ff14 	bl	8001054 <__aeabi_f2iz>
 801a22c:	9004      	str	r0, [sp, #16]
 801a22e:	f7e6 ff31 	bl	8001094 <__aeabi_i2f>
 801a232:	1c01      	adds	r1, r0, #0
 801a234:	1c20      	adds	r0, r4, #0
 801a236:	f7e6 fd5f 	bl	8000cf8 <__aeabi_fsub>
 801a23a:	9b01      	ldr	r3, [sp, #4]
 801a23c:	1c04      	adds	r4, r0, #0
 801a23e:	2b00      	cmp	r3, #0
 801a240:	dd63      	ble.n	801a30a <__kernel_rem_pio2f+0x1e6>
 801a242:	2108      	movs	r1, #8
 801a244:	1e73      	subs	r3, r6, #1
 801a246:	009b      	lsls	r3, r3, #2
 801a248:	aa0e      	add	r2, sp, #56	; 0x38
 801a24a:	589a      	ldr	r2, [r3, r2]
 801a24c:	9801      	ldr	r0, [sp, #4]
 801a24e:	9d04      	ldr	r5, [sp, #16]
 801a250:	1a09      	subs	r1, r1, r0
 801a252:	0010      	movs	r0, r2
 801a254:	4108      	asrs	r0, r1
 801a256:	182d      	adds	r5, r5, r0
 801a258:	4088      	lsls	r0, r1
 801a25a:	a90e      	add	r1, sp, #56	; 0x38
 801a25c:	1a12      	subs	r2, r2, r0
 801a25e:	505a      	str	r2, [r3, r1]
 801a260:	2307      	movs	r3, #7
 801a262:	9901      	ldr	r1, [sp, #4]
 801a264:	9504      	str	r5, [sp, #16]
 801a266:	1a5b      	subs	r3, r3, r1
 801a268:	411a      	asrs	r2, r3
 801a26a:	9202      	str	r2, [sp, #8]
 801a26c:	9b02      	ldr	r3, [sp, #8]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	dd5c      	ble.n	801a32c <__kernel_rem_pio2f+0x208>
 801a272:	9b04      	ldr	r3, [sp, #16]
 801a274:	2200      	movs	r2, #0
 801a276:	3301      	adds	r3, #1
 801a278:	9304      	str	r3, [sp, #16]
 801a27a:	2301      	movs	r3, #1
 801a27c:	2080      	movs	r0, #128	; 0x80
 801a27e:	0015      	movs	r5, r2
 801a280:	21ff      	movs	r1, #255	; 0xff
 801a282:	469c      	mov	ip, r3
 801a284:	0040      	lsls	r0, r0, #1
 801a286:	4296      	cmp	r6, r2
 801a288:	dd00      	ble.n	801a28c <__kernel_rem_pio2f+0x168>
 801a28a:	e080      	b.n	801a38e <__kernel_rem_pio2f+0x26a>
 801a28c:	9b01      	ldr	r3, [sp, #4]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	dd05      	ble.n	801a29e <__kernel_rem_pio2f+0x17a>
 801a292:	2b01      	cmp	r3, #1
 801a294:	d100      	bne.n	801a298 <__kernel_rem_pio2f+0x174>
 801a296:	e08a      	b.n	801a3ae <__kernel_rem_pio2f+0x28a>
 801a298:	2b02      	cmp	r3, #2
 801a29a:	d100      	bne.n	801a29e <__kernel_rem_pio2f+0x17a>
 801a29c:	e092      	b.n	801a3c4 <__kernel_rem_pio2f+0x2a0>
 801a29e:	9b02      	ldr	r3, [sp, #8]
 801a2a0:	2b02      	cmp	r3, #2
 801a2a2:	d143      	bne.n	801a32c <__kernel_rem_pio2f+0x208>
 801a2a4:	20fe      	movs	r0, #254	; 0xfe
 801a2a6:	1c21      	adds	r1, r4, #0
 801a2a8:	0580      	lsls	r0, r0, #22
 801a2aa:	f7e6 fd25 	bl	8000cf8 <__aeabi_fsub>
 801a2ae:	1c04      	adds	r4, r0, #0
 801a2b0:	2d00      	cmp	r5, #0
 801a2b2:	d03b      	beq.n	801a32c <__kernel_rem_pio2f+0x208>
 801a2b4:	20fe      	movs	r0, #254	; 0xfe
 801a2b6:	9901      	ldr	r1, [sp, #4]
 801a2b8:	0580      	lsls	r0, r0, #22
 801a2ba:	f000 fa8d 	bl	801a7d8 <scalbnf>
 801a2be:	1c01      	adds	r1, r0, #0
 801a2c0:	1c20      	adds	r0, r4, #0
 801a2c2:	f7e6 fd19 	bl	8000cf8 <__aeabi_fsub>
 801a2c6:	1c04      	adds	r4, r0, #0
 801a2c8:	e030      	b.n	801a32c <__kernel_rem_pio2f+0x208>
 801a2ca:	21ee      	movs	r1, #238	; 0xee
 801a2cc:	1c20      	adds	r0, r4, #0
 801a2ce:	0589      	lsls	r1, r1, #22
 801a2d0:	f7e6 fbec 	bl	8000aac <__aeabi_fmul>
 801a2d4:	f7e6 febe 	bl	8001054 <__aeabi_f2iz>
 801a2d8:	f7e6 fedc 	bl	8001094 <__aeabi_i2f>
 801a2dc:	2187      	movs	r1, #135	; 0x87
 801a2de:	05c9      	lsls	r1, r1, #23
 801a2e0:	9004      	str	r0, [sp, #16]
 801a2e2:	f7e6 fbe3 	bl	8000aac <__aeabi_fmul>
 801a2e6:	1c01      	adds	r1, r0, #0
 801a2e8:	1c20      	adds	r0, r4, #0
 801a2ea:	f7e6 fd05 	bl	8000cf8 <__aeabi_fsub>
 801a2ee:	f7e6 feb1 	bl	8001054 <__aeabi_f2iz>
 801a2f2:	9b02      	ldr	r3, [sp, #8]
 801a2f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a2f6:	c301      	stmia	r3!, {r0}
 801a2f8:	3d01      	subs	r5, #1
 801a2fa:	9302      	str	r3, [sp, #8]
 801a2fc:	00ab      	lsls	r3, r5, #2
 801a2fe:	5899      	ldr	r1, [r3, r2]
 801a300:	9804      	ldr	r0, [sp, #16]
 801a302:	f7e6 f985 	bl	8000610 <__aeabi_fadd>
 801a306:	1c04      	adds	r4, r0, #0
 801a308:	e778      	b.n	801a1fc <__kernel_rem_pio2f+0xd8>
 801a30a:	9b01      	ldr	r3, [sp, #4]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d106      	bne.n	801a31e <__kernel_rem_pio2f+0x1fa>
 801a310:	1e73      	subs	r3, r6, #1
 801a312:	009b      	lsls	r3, r3, #2
 801a314:	aa0e      	add	r2, sp, #56	; 0x38
 801a316:	5898      	ldr	r0, [r3, r2]
 801a318:	11c3      	asrs	r3, r0, #7
 801a31a:	9302      	str	r3, [sp, #8]
 801a31c:	e7a6      	b.n	801a26c <__kernel_rem_pio2f+0x148>
 801a31e:	21fc      	movs	r1, #252	; 0xfc
 801a320:	0589      	lsls	r1, r1, #22
 801a322:	f7e6 f8fb 	bl	800051c <__aeabi_fcmpge>
 801a326:	2800      	cmp	r0, #0
 801a328:	d12e      	bne.n	801a388 <__kernel_rem_pio2f+0x264>
 801a32a:	9002      	str	r0, [sp, #8]
 801a32c:	2100      	movs	r1, #0
 801a32e:	1c20      	adds	r0, r4, #0
 801a330:	f7e6 f8d0 	bl	80004d4 <__aeabi_fcmpeq>
 801a334:	2800      	cmp	r0, #0
 801a336:	d100      	bne.n	801a33a <__kernel_rem_pio2f+0x216>
 801a338:	e08e      	b.n	801a458 <__kernel_rem_pio2f+0x334>
 801a33a:	1e77      	subs	r7, r6, #1
 801a33c:	003b      	movs	r3, r7
 801a33e:	2200      	movs	r2, #0
 801a340:	9905      	ldr	r1, [sp, #20]
 801a342:	428b      	cmp	r3, r1
 801a344:	da45      	bge.n	801a3d2 <__kernel_rem_pio2f+0x2ae>
 801a346:	2a00      	cmp	r2, #0
 801a348:	d05d      	beq.n	801a406 <__kernel_rem_pio2f+0x2e2>
 801a34a:	9b01      	ldr	r3, [sp, #4]
 801a34c:	aa0e      	add	r2, sp, #56	; 0x38
 801a34e:	3b08      	subs	r3, #8
 801a350:	9301      	str	r3, [sp, #4]
 801a352:	00bb      	lsls	r3, r7, #2
 801a354:	589b      	ldr	r3, [r3, r2]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d07a      	beq.n	801a450 <__kernel_rem_pio2f+0x32c>
 801a35a:	20fe      	movs	r0, #254	; 0xfe
 801a35c:	9901      	ldr	r1, [sp, #4]
 801a35e:	0580      	lsls	r0, r0, #22
 801a360:	f000 fa3a 	bl	801a7d8 <scalbnf>
 801a364:	003d      	movs	r5, r7
 801a366:	1c04      	adds	r4, r0, #0
 801a368:	2d00      	cmp	r5, #0
 801a36a:	db00      	blt.n	801a36e <__kernel_rem_pio2f+0x24a>
 801a36c:	e0ab      	b.n	801a4c6 <__kernel_rem_pio2f+0x3a2>
 801a36e:	003c      	movs	r4, r7
 801a370:	2c00      	cmp	r4, #0
 801a372:	da00      	bge.n	801a376 <__kernel_rem_pio2f+0x252>
 801a374:	e0d6      	b.n	801a524 <__kernel_rem_pio2f+0x400>
 801a376:	00a3      	lsls	r3, r4, #2
 801a378:	aa4a      	add	r2, sp, #296	; 0x128
 801a37a:	189b      	adds	r3, r3, r2
 801a37c:	9306      	str	r3, [sp, #24]
 801a37e:	1b3b      	subs	r3, r7, r4
 801a380:	2600      	movs	r6, #0
 801a382:	2500      	movs	r5, #0
 801a384:	9301      	str	r3, [sp, #4]
 801a386:	e0bf      	b.n	801a508 <__kernel_rem_pio2f+0x3e4>
 801a388:	2302      	movs	r3, #2
 801a38a:	9302      	str	r3, [sp, #8]
 801a38c:	e771      	b.n	801a272 <__kernel_rem_pio2f+0x14e>
 801a38e:	683b      	ldr	r3, [r7, #0]
 801a390:	2d00      	cmp	r5, #0
 801a392:	d108      	bne.n	801a3a6 <__kernel_rem_pio2f+0x282>
 801a394:	2b00      	cmp	r3, #0
 801a396:	d002      	beq.n	801a39e <__kernel_rem_pio2f+0x27a>
 801a398:	1ac3      	subs	r3, r0, r3
 801a39a:	603b      	str	r3, [r7, #0]
 801a39c:	4663      	mov	r3, ip
 801a39e:	001d      	movs	r5, r3
 801a3a0:	3201      	adds	r2, #1
 801a3a2:	3704      	adds	r7, #4
 801a3a4:	e76f      	b.n	801a286 <__kernel_rem_pio2f+0x162>
 801a3a6:	1acb      	subs	r3, r1, r3
 801a3a8:	603b      	str	r3, [r7, #0]
 801a3aa:	002b      	movs	r3, r5
 801a3ac:	e7f7      	b.n	801a39e <__kernel_rem_pio2f+0x27a>
 801a3ae:	1e73      	subs	r3, r6, #1
 801a3b0:	009b      	lsls	r3, r3, #2
 801a3b2:	aa0e      	add	r2, sp, #56	; 0x38
 801a3b4:	589a      	ldr	r2, [r3, r2]
 801a3b6:	920d      	str	r2, [sp, #52]	; 0x34
 801a3b8:	227f      	movs	r2, #127	; 0x7f
 801a3ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a3bc:	400a      	ands	r2, r1
 801a3be:	a90e      	add	r1, sp, #56	; 0x38
 801a3c0:	505a      	str	r2, [r3, r1]
 801a3c2:	e76c      	b.n	801a29e <__kernel_rem_pio2f+0x17a>
 801a3c4:	1e73      	subs	r3, r6, #1
 801a3c6:	009b      	lsls	r3, r3, #2
 801a3c8:	aa0e      	add	r2, sp, #56	; 0x38
 801a3ca:	589a      	ldr	r2, [r3, r2]
 801a3cc:	920d      	str	r2, [sp, #52]	; 0x34
 801a3ce:	223f      	movs	r2, #63	; 0x3f
 801a3d0:	e7f3      	b.n	801a3ba <__kernel_rem_pio2f+0x296>
 801a3d2:	0099      	lsls	r1, r3, #2
 801a3d4:	a80e      	add	r0, sp, #56	; 0x38
 801a3d6:	5809      	ldr	r1, [r1, r0]
 801a3d8:	3b01      	subs	r3, #1
 801a3da:	430a      	orrs	r2, r1
 801a3dc:	e7b0      	b.n	801a340 <__kernel_rem_pio2f+0x21c>
 801a3de:	3301      	adds	r3, #1
 801a3e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a3e2:	009a      	lsls	r2, r3, #2
 801a3e4:	4252      	negs	r2, r2
 801a3e6:	588a      	ldr	r2, [r1, r2]
 801a3e8:	2a00      	cmp	r2, #0
 801a3ea:	d0f8      	beq.n	801a3de <__kernel_rem_pio2f+0x2ba>
 801a3ec:	9a08      	ldr	r2, [sp, #32]
 801a3ee:	18f3      	adds	r3, r6, r3
 801a3f0:	18b4      	adds	r4, r6, r2
 801a3f2:	00a4      	lsls	r4, r4, #2
 801a3f4:	aa22      	add	r2, sp, #136	; 0x88
 801a3f6:	1c75      	adds	r5, r6, #1
 801a3f8:	1914      	adds	r4, r2, r4
 801a3fa:	9302      	str	r3, [sp, #8]
 801a3fc:	9b02      	ldr	r3, [sp, #8]
 801a3fe:	42ab      	cmp	r3, r5
 801a400:	da03      	bge.n	801a40a <__kernel_rem_pio2f+0x2e6>
 801a402:	001e      	movs	r6, r3
 801a404:	e6f3      	b.n	801a1ee <__kernel_rem_pio2f+0xca>
 801a406:	2301      	movs	r3, #1
 801a408:	e7ea      	b.n	801a3e0 <__kernel_rem_pio2f+0x2bc>
 801a40a:	00ab      	lsls	r3, r5, #2
 801a40c:	9304      	str	r3, [sp, #16]
 801a40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a410:	00aa      	lsls	r2, r5, #2
 801a412:	5898      	ldr	r0, [r3, r2]
 801a414:	f7e6 fe3e 	bl	8001094 <__aeabi_i2f>
 801a418:	2700      	movs	r7, #0
 801a41a:	2600      	movs	r6, #0
 801a41c:	6020      	str	r0, [r4, #0]
 801a41e:	9b06      	ldr	r3, [sp, #24]
 801a420:	429f      	cmp	r7, r3
 801a422:	dd07      	ble.n	801a434 <__kernel_rem_pio2f+0x310>
 801a424:	21f0      	movs	r1, #240	; 0xf0
 801a426:	9a04      	ldr	r2, [sp, #16]
 801a428:	ab0e      	add	r3, sp, #56	; 0x38
 801a42a:	185b      	adds	r3, r3, r1
 801a42c:	509e      	str	r6, [r3, r2]
 801a42e:	3501      	adds	r5, #1
 801a430:	3404      	adds	r4, #4
 801a432:	e7e3      	b.n	801a3fc <__kernel_rem_pio2f+0x2d8>
 801a434:	00bb      	lsls	r3, r7, #2
 801a436:	425a      	negs	r2, r3
 801a438:	58a1      	ldr	r1, [r4, r2]
 801a43a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a43c:	3701      	adds	r7, #1
 801a43e:	58d0      	ldr	r0, [r2, r3]
 801a440:	f7e6 fb34 	bl	8000aac <__aeabi_fmul>
 801a444:	1c01      	adds	r1, r0, #0
 801a446:	1c30      	adds	r0, r6, #0
 801a448:	f7e6 f8e2 	bl	8000610 <__aeabi_fadd>
 801a44c:	1c06      	adds	r6, r0, #0
 801a44e:	e7e6      	b.n	801a41e <__kernel_rem_pio2f+0x2fa>
 801a450:	3f01      	subs	r7, #1
 801a452:	e77a      	b.n	801a34a <__kernel_rem_pio2f+0x226>
 801a454:	0801c098 	.word	0x0801c098
 801a458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a45a:	9a07      	ldr	r2, [sp, #28]
 801a45c:	1c20      	adds	r0, r4, #0
 801a45e:	1a99      	subs	r1, r3, r2
 801a460:	f000 f9ba 	bl	801a7d8 <scalbnf>
 801a464:	2187      	movs	r1, #135	; 0x87
 801a466:	05c9      	lsls	r1, r1, #23
 801a468:	1c04      	adds	r4, r0, #0
 801a46a:	f7e6 f857 	bl	800051c <__aeabi_fcmpge>
 801a46e:	2800      	cmp	r0, #0
 801a470:	d021      	beq.n	801a4b6 <__kernel_rem_pio2f+0x392>
 801a472:	21ee      	movs	r1, #238	; 0xee
 801a474:	1c20      	adds	r0, r4, #0
 801a476:	0589      	lsls	r1, r1, #22
 801a478:	f7e6 fb18 	bl	8000aac <__aeabi_fmul>
 801a47c:	f7e6 fdea 	bl	8001054 <__aeabi_f2iz>
 801a480:	f7e6 fe08 	bl	8001094 <__aeabi_i2f>
 801a484:	2187      	movs	r1, #135	; 0x87
 801a486:	05c9      	lsls	r1, r1, #23
 801a488:	1c05      	adds	r5, r0, #0
 801a48a:	f7e6 fb0f 	bl	8000aac <__aeabi_fmul>
 801a48e:	1c01      	adds	r1, r0, #0
 801a490:	1c20      	adds	r0, r4, #0
 801a492:	f7e6 fc31 	bl	8000cf8 <__aeabi_fsub>
 801a496:	f7e6 fddd 	bl	8001054 <__aeabi_f2iz>
 801a49a:	00b7      	lsls	r7, r6, #2
 801a49c:	ab0e      	add	r3, sp, #56	; 0x38
 801a49e:	51d8      	str	r0, [r3, r7]
 801a4a0:	9b01      	ldr	r3, [sp, #4]
 801a4a2:	1c28      	adds	r0, r5, #0
 801a4a4:	3308      	adds	r3, #8
 801a4a6:	9301      	str	r3, [sp, #4]
 801a4a8:	f7e6 fdd4 	bl	8001054 <__aeabi_f2iz>
 801a4ac:	1c77      	adds	r7, r6, #1
 801a4ae:	00bc      	lsls	r4, r7, #2
 801a4b0:	ab0e      	add	r3, sp, #56	; 0x38
 801a4b2:	5118      	str	r0, [r3, r4]
 801a4b4:	e751      	b.n	801a35a <__kernel_rem_pio2f+0x236>
 801a4b6:	1c20      	adds	r0, r4, #0
 801a4b8:	f7e6 fdcc 	bl	8001054 <__aeabi_f2iz>
 801a4bc:	00b5      	lsls	r5, r6, #2
 801a4be:	ab0e      	add	r3, sp, #56	; 0x38
 801a4c0:	0037      	movs	r7, r6
 801a4c2:	5158      	str	r0, [r3, r5]
 801a4c4:	e749      	b.n	801a35a <__kernel_rem_pio2f+0x236>
 801a4c6:	ab0e      	add	r3, sp, #56	; 0x38
 801a4c8:	00ae      	lsls	r6, r5, #2
 801a4ca:	58f0      	ldr	r0, [r6, r3]
 801a4cc:	f7e6 fde2 	bl	8001094 <__aeabi_i2f>
 801a4d0:	1c21      	adds	r1, r4, #0
 801a4d2:	f7e6 faeb 	bl	8000aac <__aeabi_fmul>
 801a4d6:	22f0      	movs	r2, #240	; 0xf0
 801a4d8:	21ee      	movs	r1, #238	; 0xee
 801a4da:	ab0e      	add	r3, sp, #56	; 0x38
 801a4dc:	189b      	adds	r3, r3, r2
 801a4de:	5198      	str	r0, [r3, r6]
 801a4e0:	0589      	lsls	r1, r1, #22
 801a4e2:	1c20      	adds	r0, r4, #0
 801a4e4:	f7e6 fae2 	bl	8000aac <__aeabi_fmul>
 801a4e8:	3d01      	subs	r5, #1
 801a4ea:	1c04      	adds	r4, r0, #0
 801a4ec:	e73c      	b.n	801a368 <__kernel_rem_pio2f+0x244>
 801a4ee:	9a06      	ldr	r2, [sp, #24]
 801a4f0:	00ab      	lsls	r3, r5, #2
 801a4f2:	58d1      	ldr	r1, [r2, r3]
 801a4f4:	4a5e      	ldr	r2, [pc, #376]	; (801a670 <__kernel_rem_pio2f+0x54c>)
 801a4f6:	3501      	adds	r5, #1
 801a4f8:	5898      	ldr	r0, [r3, r2]
 801a4fa:	f7e6 fad7 	bl	8000aac <__aeabi_fmul>
 801a4fe:	1c01      	adds	r1, r0, #0
 801a500:	1c30      	adds	r0, r6, #0
 801a502:	f7e6 f885 	bl	8000610 <__aeabi_fadd>
 801a506:	1c06      	adds	r6, r0, #0
 801a508:	9b05      	ldr	r3, [sp, #20]
 801a50a:	429d      	cmp	r5, r3
 801a50c:	dc02      	bgt.n	801a514 <__kernel_rem_pio2f+0x3f0>
 801a50e:	9b01      	ldr	r3, [sp, #4]
 801a510:	429d      	cmp	r5, r3
 801a512:	ddec      	ble.n	801a4ee <__kernel_rem_pio2f+0x3ca>
 801a514:	21a0      	movs	r1, #160	; 0xa0
 801a516:	9b01      	ldr	r3, [sp, #4]
 801a518:	aa0e      	add	r2, sp, #56	; 0x38
 801a51a:	009b      	lsls	r3, r3, #2
 801a51c:	1852      	adds	r2, r2, r1
 801a51e:	50d6      	str	r6, [r2, r3]
 801a520:	3c01      	subs	r4, #1
 801a522:	e725      	b.n	801a370 <__kernel_rem_pio2f+0x24c>
 801a524:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a526:	2b02      	cmp	r3, #2
 801a528:	dc08      	bgt.n	801a53c <__kernel_rem_pio2f+0x418>
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	dc5a      	bgt.n	801a5e4 <__kernel_rem_pio2f+0x4c0>
 801a52e:	d035      	beq.n	801a59c <__kernel_rem_pio2f+0x478>
 801a530:	2007      	movs	r0, #7
 801a532:	9b04      	ldr	r3, [sp, #16]
 801a534:	4003      	ands	r3, r0
 801a536:	0018      	movs	r0, r3
 801a538:	b05f      	add	sp, #380	; 0x17c
 801a53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a53c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a53e:	2b03      	cmp	r3, #3
 801a540:	d1f6      	bne.n	801a530 <__kernel_rem_pio2f+0x40c>
 801a542:	00bb      	lsls	r3, r7, #2
 801a544:	aa36      	add	r2, sp, #216	; 0xd8
 801a546:	18d5      	adds	r5, r2, r3
 801a548:	002c      	movs	r4, r5
 801a54a:	9701      	str	r7, [sp, #4]
 801a54c:	9b01      	ldr	r3, [sp, #4]
 801a54e:	3c04      	subs	r4, #4
 801a550:	2b00      	cmp	r3, #0
 801a552:	dc51      	bgt.n	801a5f8 <__kernel_rem_pio2f+0x4d4>
 801a554:	9701      	str	r7, [sp, #4]
 801a556:	9b01      	ldr	r3, [sp, #4]
 801a558:	3d04      	subs	r5, #4
 801a55a:	2b01      	cmp	r3, #1
 801a55c:	dc62      	bgt.n	801a624 <__kernel_rem_pio2f+0x500>
 801a55e:	2000      	movs	r0, #0
 801a560:	ac36      	add	r4, sp, #216	; 0xd8
 801a562:	2f01      	cmp	r7, #1
 801a564:	dc73      	bgt.n	801a64e <__kernel_rem_pio2f+0x52a>
 801a566:	9902      	ldr	r1, [sp, #8]
 801a568:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801a56a:	6863      	ldr	r3, [r4, #4]
 801a56c:	2900      	cmp	r1, #0
 801a56e:	d174      	bne.n	801a65a <__kernel_rem_pio2f+0x536>
 801a570:	9903      	ldr	r1, [sp, #12]
 801a572:	604b      	str	r3, [r1, #4]
 801a574:	000b      	movs	r3, r1
 801a576:	600a      	str	r2, [r1, #0]
 801a578:	6098      	str	r0, [r3, #8]
 801a57a:	e7d9      	b.n	801a530 <__kernel_rem_pio2f+0x40c>
 801a57c:	00bb      	lsls	r3, r7, #2
 801a57e:	5919      	ldr	r1, [r3, r4]
 801a580:	f7e6 f846 	bl	8000610 <__aeabi_fadd>
 801a584:	3f01      	subs	r7, #1
 801a586:	2f00      	cmp	r7, #0
 801a588:	daf8      	bge.n	801a57c <__kernel_rem_pio2f+0x458>
 801a58a:	9b02      	ldr	r3, [sp, #8]
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d002      	beq.n	801a596 <__kernel_rem_pio2f+0x472>
 801a590:	2380      	movs	r3, #128	; 0x80
 801a592:	061b      	lsls	r3, r3, #24
 801a594:	18c0      	adds	r0, r0, r3
 801a596:	9b03      	ldr	r3, [sp, #12]
 801a598:	6018      	str	r0, [r3, #0]
 801a59a:	e7c9      	b.n	801a530 <__kernel_rem_pio2f+0x40c>
 801a59c:	2000      	movs	r0, #0
 801a59e:	ac36      	add	r4, sp, #216	; 0xd8
 801a5a0:	e7f1      	b.n	801a586 <__kernel_rem_pio2f+0x462>
 801a5a2:	00a3      	lsls	r3, r4, #2
 801a5a4:	5959      	ldr	r1, [r3, r5]
 801a5a6:	f7e6 f833 	bl	8000610 <__aeabi_fadd>
 801a5aa:	3c01      	subs	r4, #1
 801a5ac:	2c00      	cmp	r4, #0
 801a5ae:	daf8      	bge.n	801a5a2 <__kernel_rem_pio2f+0x47e>
 801a5b0:	9a02      	ldr	r2, [sp, #8]
 801a5b2:	1c03      	adds	r3, r0, #0
 801a5b4:	2a00      	cmp	r2, #0
 801a5b6:	d002      	beq.n	801a5be <__kernel_rem_pio2f+0x49a>
 801a5b8:	2380      	movs	r3, #128	; 0x80
 801a5ba:	061b      	lsls	r3, r3, #24
 801a5bc:	18c3      	adds	r3, r0, r3
 801a5be:	9a03      	ldr	r2, [sp, #12]
 801a5c0:	1c01      	adds	r1, r0, #0
 801a5c2:	6013      	str	r3, [r2, #0]
 801a5c4:	9836      	ldr	r0, [sp, #216]	; 0xd8
 801a5c6:	f7e6 fb97 	bl	8000cf8 <__aeabi_fsub>
 801a5ca:	2401      	movs	r4, #1
 801a5cc:	ad36      	add	r5, sp, #216	; 0xd8
 801a5ce:	42a7      	cmp	r7, r4
 801a5d0:	da0c      	bge.n	801a5ec <__kernel_rem_pio2f+0x4c8>
 801a5d2:	9b02      	ldr	r3, [sp, #8]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d002      	beq.n	801a5de <__kernel_rem_pio2f+0x4ba>
 801a5d8:	2380      	movs	r3, #128	; 0x80
 801a5da:	061b      	lsls	r3, r3, #24
 801a5dc:	18c0      	adds	r0, r0, r3
 801a5de:	9b03      	ldr	r3, [sp, #12]
 801a5e0:	6058      	str	r0, [r3, #4]
 801a5e2:	e7a5      	b.n	801a530 <__kernel_rem_pio2f+0x40c>
 801a5e4:	003c      	movs	r4, r7
 801a5e6:	2000      	movs	r0, #0
 801a5e8:	ad36      	add	r5, sp, #216	; 0xd8
 801a5ea:	e7df      	b.n	801a5ac <__kernel_rem_pio2f+0x488>
 801a5ec:	00a3      	lsls	r3, r4, #2
 801a5ee:	5959      	ldr	r1, [r3, r5]
 801a5f0:	f7e6 f80e 	bl	8000610 <__aeabi_fadd>
 801a5f4:	3401      	adds	r4, #1
 801a5f6:	e7ea      	b.n	801a5ce <__kernel_rem_pio2f+0x4aa>
 801a5f8:	9b01      	ldr	r3, [sp, #4]
 801a5fa:	6826      	ldr	r6, [r4, #0]
 801a5fc:	3b01      	subs	r3, #1
 801a5fe:	9301      	str	r3, [sp, #4]
 801a600:	6863      	ldr	r3, [r4, #4]
 801a602:	1c30      	adds	r0, r6, #0
 801a604:	1c19      	adds	r1, r3, #0
 801a606:	9305      	str	r3, [sp, #20]
 801a608:	f7e6 f802 	bl	8000610 <__aeabi_fadd>
 801a60c:	1c01      	adds	r1, r0, #0
 801a60e:	9006      	str	r0, [sp, #24]
 801a610:	1c30      	adds	r0, r6, #0
 801a612:	f7e6 fb71 	bl	8000cf8 <__aeabi_fsub>
 801a616:	9905      	ldr	r1, [sp, #20]
 801a618:	f7e5 fffa 	bl	8000610 <__aeabi_fadd>
 801a61c:	9b06      	ldr	r3, [sp, #24]
 801a61e:	6060      	str	r0, [r4, #4]
 801a620:	6023      	str	r3, [r4, #0]
 801a622:	e793      	b.n	801a54c <__kernel_rem_pio2f+0x428>
 801a624:	682c      	ldr	r4, [r5, #0]
 801a626:	686e      	ldr	r6, [r5, #4]
 801a628:	9b01      	ldr	r3, [sp, #4]
 801a62a:	1c31      	adds	r1, r6, #0
 801a62c:	3b01      	subs	r3, #1
 801a62e:	1c20      	adds	r0, r4, #0
 801a630:	9301      	str	r3, [sp, #4]
 801a632:	f7e5 ffed 	bl	8000610 <__aeabi_fadd>
 801a636:	1c01      	adds	r1, r0, #0
 801a638:	9005      	str	r0, [sp, #20]
 801a63a:	1c20      	adds	r0, r4, #0
 801a63c:	f7e6 fb5c 	bl	8000cf8 <__aeabi_fsub>
 801a640:	1c31      	adds	r1, r6, #0
 801a642:	f7e5 ffe5 	bl	8000610 <__aeabi_fadd>
 801a646:	9b05      	ldr	r3, [sp, #20]
 801a648:	6068      	str	r0, [r5, #4]
 801a64a:	602b      	str	r3, [r5, #0]
 801a64c:	e783      	b.n	801a556 <__kernel_rem_pio2f+0x432>
 801a64e:	00bb      	lsls	r3, r7, #2
 801a650:	58e1      	ldr	r1, [r4, r3]
 801a652:	f7e5 ffdd 	bl	8000610 <__aeabi_fadd>
 801a656:	3f01      	subs	r7, #1
 801a658:	e783      	b.n	801a562 <__kernel_rem_pio2f+0x43e>
 801a65a:	2180      	movs	r1, #128	; 0x80
 801a65c:	9c03      	ldr	r4, [sp, #12]
 801a65e:	0609      	lsls	r1, r1, #24
 801a660:	185b      	adds	r3, r3, r1
 801a662:	1852      	adds	r2, r2, r1
 801a664:	6063      	str	r3, [r4, #4]
 801a666:	6022      	str	r2, [r4, #0]
 801a668:	0023      	movs	r3, r4
 801a66a:	1840      	adds	r0, r0, r1
 801a66c:	e784      	b.n	801a578 <__kernel_rem_pio2f+0x454>
 801a66e:	46c0      	nop			; (mov r8, r8)
 801a670:	0801c06c 	.word	0x0801c06c

0801a674 <__kernel_sinf>:
 801a674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a676:	9201      	str	r2, [sp, #4]
 801a678:	22c8      	movs	r2, #200	; 0xc8
 801a67a:	0043      	lsls	r3, r0, #1
 801a67c:	1c04      	adds	r4, r0, #0
 801a67e:	9100      	str	r1, [sp, #0]
 801a680:	085b      	lsrs	r3, r3, #1
 801a682:	0592      	lsls	r2, r2, #22
 801a684:	4293      	cmp	r3, r2
 801a686:	da03      	bge.n	801a690 <__kernel_sinf+0x1c>
 801a688:	f7e6 fce4 	bl	8001054 <__aeabi_f2iz>
 801a68c:	2800      	cmp	r0, #0
 801a68e:	d035      	beq.n	801a6fc <__kernel_sinf+0x88>
 801a690:	1c21      	adds	r1, r4, #0
 801a692:	1c20      	adds	r0, r4, #0
 801a694:	f7e6 fa0a 	bl	8000aac <__aeabi_fmul>
 801a698:	1c05      	adds	r5, r0, #0
 801a69a:	1c01      	adds	r1, r0, #0
 801a69c:	1c20      	adds	r0, r4, #0
 801a69e:	f7e6 fa05 	bl	8000aac <__aeabi_fmul>
 801a6a2:	4928      	ldr	r1, [pc, #160]	; (801a744 <__kernel_sinf+0xd0>)
 801a6a4:	1c06      	adds	r6, r0, #0
 801a6a6:	1c28      	adds	r0, r5, #0
 801a6a8:	f7e6 fa00 	bl	8000aac <__aeabi_fmul>
 801a6ac:	4926      	ldr	r1, [pc, #152]	; (801a748 <__kernel_sinf+0xd4>)
 801a6ae:	f7e6 fb23 	bl	8000cf8 <__aeabi_fsub>
 801a6b2:	1c29      	adds	r1, r5, #0
 801a6b4:	f7e6 f9fa 	bl	8000aac <__aeabi_fmul>
 801a6b8:	4924      	ldr	r1, [pc, #144]	; (801a74c <__kernel_sinf+0xd8>)
 801a6ba:	f7e5 ffa9 	bl	8000610 <__aeabi_fadd>
 801a6be:	1c29      	adds	r1, r5, #0
 801a6c0:	f7e6 f9f4 	bl	8000aac <__aeabi_fmul>
 801a6c4:	4922      	ldr	r1, [pc, #136]	; (801a750 <__kernel_sinf+0xdc>)
 801a6c6:	f7e6 fb17 	bl	8000cf8 <__aeabi_fsub>
 801a6ca:	1c29      	adds	r1, r5, #0
 801a6cc:	f7e6 f9ee 	bl	8000aac <__aeabi_fmul>
 801a6d0:	4920      	ldr	r1, [pc, #128]	; (801a754 <__kernel_sinf+0xe0>)
 801a6d2:	f7e5 ff9d 	bl	8000610 <__aeabi_fadd>
 801a6d6:	9b01      	ldr	r3, [sp, #4]
 801a6d8:	1c07      	adds	r7, r0, #0
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d110      	bne.n	801a700 <__kernel_sinf+0x8c>
 801a6de:	1c01      	adds	r1, r0, #0
 801a6e0:	1c28      	adds	r0, r5, #0
 801a6e2:	f7e6 f9e3 	bl	8000aac <__aeabi_fmul>
 801a6e6:	491c      	ldr	r1, [pc, #112]	; (801a758 <__kernel_sinf+0xe4>)
 801a6e8:	f7e6 fb06 	bl	8000cf8 <__aeabi_fsub>
 801a6ec:	1c31      	adds	r1, r6, #0
 801a6ee:	f7e6 f9dd 	bl	8000aac <__aeabi_fmul>
 801a6f2:	1c01      	adds	r1, r0, #0
 801a6f4:	1c20      	adds	r0, r4, #0
 801a6f6:	f7e5 ff8b 	bl	8000610 <__aeabi_fadd>
 801a6fa:	1c04      	adds	r4, r0, #0
 801a6fc:	1c20      	adds	r0, r4, #0
 801a6fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a700:	21fc      	movs	r1, #252	; 0xfc
 801a702:	9800      	ldr	r0, [sp, #0]
 801a704:	0589      	lsls	r1, r1, #22
 801a706:	f7e6 f9d1 	bl	8000aac <__aeabi_fmul>
 801a70a:	1c39      	adds	r1, r7, #0
 801a70c:	9001      	str	r0, [sp, #4]
 801a70e:	1c30      	adds	r0, r6, #0
 801a710:	f7e6 f9cc 	bl	8000aac <__aeabi_fmul>
 801a714:	1c01      	adds	r1, r0, #0
 801a716:	9801      	ldr	r0, [sp, #4]
 801a718:	f7e6 faee 	bl	8000cf8 <__aeabi_fsub>
 801a71c:	1c29      	adds	r1, r5, #0
 801a71e:	f7e6 f9c5 	bl	8000aac <__aeabi_fmul>
 801a722:	9900      	ldr	r1, [sp, #0]
 801a724:	f7e6 fae8 	bl	8000cf8 <__aeabi_fsub>
 801a728:	490b      	ldr	r1, [pc, #44]	; (801a758 <__kernel_sinf+0xe4>)
 801a72a:	1c05      	adds	r5, r0, #0
 801a72c:	1c30      	adds	r0, r6, #0
 801a72e:	f7e6 f9bd 	bl	8000aac <__aeabi_fmul>
 801a732:	1c01      	adds	r1, r0, #0
 801a734:	1c28      	adds	r0, r5, #0
 801a736:	f7e5 ff6b 	bl	8000610 <__aeabi_fadd>
 801a73a:	1c01      	adds	r1, r0, #0
 801a73c:	1c20      	adds	r0, r4, #0
 801a73e:	f7e6 fadb 	bl	8000cf8 <__aeabi_fsub>
 801a742:	e7da      	b.n	801a6fa <__kernel_sinf+0x86>
 801a744:	2f2ec9d3 	.word	0x2f2ec9d3
 801a748:	32d72f34 	.word	0x32d72f34
 801a74c:	3638ef1b 	.word	0x3638ef1b
 801a750:	39500d01 	.word	0x39500d01
 801a754:	3c088889 	.word	0x3c088889
 801a758:	3e2aaaab 	.word	0x3e2aaaab

0801a75c <floorf>:
 801a75c:	b570      	push	{r4, r5, r6, lr}
 801a75e:	0045      	lsls	r5, r0, #1
 801a760:	086e      	lsrs	r6, r5, #1
 801a762:	0e2d      	lsrs	r5, r5, #24
 801a764:	3d7f      	subs	r5, #127	; 0x7f
 801a766:	0004      	movs	r4, r0
 801a768:	2d16      	cmp	r5, #22
 801a76a:	dc24      	bgt.n	801a7b6 <floorf+0x5a>
 801a76c:	2d00      	cmp	r5, #0
 801a76e:	da0e      	bge.n	801a78e <floorf+0x32>
 801a770:	4916      	ldr	r1, [pc, #88]	; (801a7cc <floorf+0x70>)
 801a772:	f7e5 ff4d 	bl	8000610 <__aeabi_fadd>
 801a776:	2100      	movs	r1, #0
 801a778:	f7e5 fec6 	bl	8000508 <__aeabi_fcmpgt>
 801a77c:	2800      	cmp	r0, #0
 801a77e:	d004      	beq.n	801a78a <floorf+0x2e>
 801a780:	2c00      	cmp	r4, #0
 801a782:	da20      	bge.n	801a7c6 <floorf+0x6a>
 801a784:	2e00      	cmp	r6, #0
 801a786:	d000      	beq.n	801a78a <floorf+0x2e>
 801a788:	4c11      	ldr	r4, [pc, #68]	; (801a7d0 <floorf+0x74>)
 801a78a:	1c20      	adds	r0, r4, #0
 801a78c:	e01a      	b.n	801a7c4 <floorf+0x68>
 801a78e:	4e11      	ldr	r6, [pc, #68]	; (801a7d4 <floorf+0x78>)
 801a790:	412e      	asrs	r6, r5
 801a792:	4206      	tst	r6, r0
 801a794:	d016      	beq.n	801a7c4 <floorf+0x68>
 801a796:	490d      	ldr	r1, [pc, #52]	; (801a7cc <floorf+0x70>)
 801a798:	f7e5 ff3a 	bl	8000610 <__aeabi_fadd>
 801a79c:	2100      	movs	r1, #0
 801a79e:	f7e5 feb3 	bl	8000508 <__aeabi_fcmpgt>
 801a7a2:	2800      	cmp	r0, #0
 801a7a4:	d0f1      	beq.n	801a78a <floorf+0x2e>
 801a7a6:	2c00      	cmp	r4, #0
 801a7a8:	da03      	bge.n	801a7b2 <floorf+0x56>
 801a7aa:	2380      	movs	r3, #128	; 0x80
 801a7ac:	041b      	lsls	r3, r3, #16
 801a7ae:	412b      	asrs	r3, r5
 801a7b0:	18e4      	adds	r4, r4, r3
 801a7b2:	43b4      	bics	r4, r6
 801a7b4:	e7e9      	b.n	801a78a <floorf+0x2e>
 801a7b6:	23ff      	movs	r3, #255	; 0xff
 801a7b8:	05db      	lsls	r3, r3, #23
 801a7ba:	429e      	cmp	r6, r3
 801a7bc:	d302      	bcc.n	801a7c4 <floorf+0x68>
 801a7be:	1c01      	adds	r1, r0, #0
 801a7c0:	f7e5 ff26 	bl	8000610 <__aeabi_fadd>
 801a7c4:	bd70      	pop	{r4, r5, r6, pc}
 801a7c6:	2400      	movs	r4, #0
 801a7c8:	e7df      	b.n	801a78a <floorf+0x2e>
 801a7ca:	46c0      	nop			; (mov r8, r8)
 801a7cc:	7149f2ca 	.word	0x7149f2ca
 801a7d0:	bf800000 	.word	0xbf800000
 801a7d4:	007fffff 	.word	0x007fffff

0801a7d8 <scalbnf>:
 801a7d8:	0043      	lsls	r3, r0, #1
 801a7da:	b570      	push	{r4, r5, r6, lr}
 801a7dc:	0002      	movs	r2, r0
 801a7de:	000c      	movs	r4, r1
 801a7e0:	085d      	lsrs	r5, r3, #1
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d006      	beq.n	801a7f4 <scalbnf+0x1c>
 801a7e6:	21ff      	movs	r1, #255	; 0xff
 801a7e8:	05c9      	lsls	r1, r1, #23
 801a7ea:	428d      	cmp	r5, r1
 801a7ec:	d303      	bcc.n	801a7f6 <scalbnf+0x1e>
 801a7ee:	1c01      	adds	r1, r0, #0
 801a7f0:	f7e5 ff0e 	bl	8000610 <__aeabi_fadd>
 801a7f4:	bd70      	pop	{r4, r5, r6, pc}
 801a7f6:	4208      	tst	r0, r1
 801a7f8:	d116      	bne.n	801a828 <scalbnf+0x50>
 801a7fa:	2198      	movs	r1, #152	; 0x98
 801a7fc:	05c9      	lsls	r1, r1, #23
 801a7fe:	f7e6 f955 	bl	8000aac <__aeabi_fmul>
 801a802:	4b1b      	ldr	r3, [pc, #108]	; (801a870 <scalbnf+0x98>)
 801a804:	429c      	cmp	r4, r3
 801a806:	db29      	blt.n	801a85c <scalbnf+0x84>
 801a808:	0002      	movs	r2, r0
 801a80a:	15c3      	asrs	r3, r0, #23
 801a80c:	b2db      	uxtb	r3, r3
 801a80e:	3b19      	subs	r3, #25
 801a810:	191b      	adds	r3, r3, r4
 801a812:	2bfe      	cmp	r3, #254	; 0xfe
 801a814:	dd0a      	ble.n	801a82c <scalbnf+0x54>
 801a816:	4b17      	ldr	r3, [pc, #92]	; (801a874 <scalbnf+0x9c>)
 801a818:	2800      	cmp	r0, #0
 801a81a:	da00      	bge.n	801a81e <scalbnf+0x46>
 801a81c:	4b16      	ldr	r3, [pc, #88]	; (801a878 <scalbnf+0xa0>)
 801a81e:	4915      	ldr	r1, [pc, #84]	; (801a874 <scalbnf+0x9c>)
 801a820:	1c18      	adds	r0, r3, #0
 801a822:	f7e6 f943 	bl	8000aac <__aeabi_fmul>
 801a826:	e7e5      	b.n	801a7f4 <scalbnf+0x1c>
 801a828:	0e1b      	lsrs	r3, r3, #24
 801a82a:	e7f1      	b.n	801a810 <scalbnf+0x38>
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	dd04      	ble.n	801a83a <scalbnf+0x62>
 801a830:	4812      	ldr	r0, [pc, #72]	; (801a87c <scalbnf+0xa4>)
 801a832:	4002      	ands	r2, r0
 801a834:	05d8      	lsls	r0, r3, #23
 801a836:	4310      	orrs	r0, r2
 801a838:	e7dc      	b.n	801a7f4 <scalbnf+0x1c>
 801a83a:	0019      	movs	r1, r3
 801a83c:	3116      	adds	r1, #22
 801a83e:	da0f      	bge.n	801a860 <scalbnf+0x88>
 801a840:	4a0f      	ldr	r2, [pc, #60]	; (801a880 <scalbnf+0xa8>)
 801a842:	0fc3      	lsrs	r3, r0, #31
 801a844:	4294      	cmp	r4, r2
 801a846:	dd05      	ble.n	801a854 <scalbnf+0x7c>
 801a848:	480a      	ldr	r0, [pc, #40]	; (801a874 <scalbnf+0x9c>)
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d000      	beq.n	801a850 <scalbnf+0x78>
 801a84e:	480a      	ldr	r0, [pc, #40]	; (801a878 <scalbnf+0xa0>)
 801a850:	4908      	ldr	r1, [pc, #32]	; (801a874 <scalbnf+0x9c>)
 801a852:	e7e6      	b.n	801a822 <scalbnf+0x4a>
 801a854:	480b      	ldr	r0, [pc, #44]	; (801a884 <scalbnf+0xac>)
 801a856:	2b00      	cmp	r3, #0
 801a858:	d000      	beq.n	801a85c <scalbnf+0x84>
 801a85a:	480b      	ldr	r0, [pc, #44]	; (801a888 <scalbnf+0xb0>)
 801a85c:	4909      	ldr	r1, [pc, #36]	; (801a884 <scalbnf+0xac>)
 801a85e:	e7e0      	b.n	801a822 <scalbnf+0x4a>
 801a860:	21cc      	movs	r1, #204	; 0xcc
 801a862:	3319      	adds	r3, #25
 801a864:	05d8      	lsls	r0, r3, #23
 801a866:	4b05      	ldr	r3, [pc, #20]	; (801a87c <scalbnf+0xa4>)
 801a868:	0589      	lsls	r1, r1, #22
 801a86a:	401a      	ands	r2, r3
 801a86c:	4310      	orrs	r0, r2
 801a86e:	e7d8      	b.n	801a822 <scalbnf+0x4a>
 801a870:	ffff3cb0 	.word	0xffff3cb0
 801a874:	7149f2ca 	.word	0x7149f2ca
 801a878:	f149f2ca 	.word	0xf149f2ca
 801a87c:	807fffff 	.word	0x807fffff
 801a880:	0000c350 	.word	0x0000c350
 801a884:	0da24260 	.word	0x0da24260
 801a888:	8da24260 	.word	0x8da24260

0801a88c <_init>:
 801a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a88e:	46c0      	nop			; (mov r8, r8)
 801a890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a892:	bc08      	pop	{r3}
 801a894:	469e      	mov	lr, r3
 801a896:	4770      	bx	lr

0801a898 <_fini>:
 801a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a89a:	46c0      	nop			; (mov r8, r8)
 801a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a89e:	bc08      	pop	{r3}
 801a8a0:	469e      	mov	lr, r3
 801a8a2:	4770      	bx	lr
